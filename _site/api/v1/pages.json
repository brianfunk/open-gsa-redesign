{"entries":[{"title":"About","url":"/open-gsa-redesign/about/","tags":[],"body":"About GSA GSA provides workplaces by constructing, managing, and preserving government buildings and by leasing and managing commercial real estate. GSA’s acquisition solutions offer private sector professional services, equipment, supplies, telecommunications, and information technology to government organizations and the military. GSA policies promote management best practices and efficient government operations. Mission The mission of GSA is to deliver the best value in real estate, acquisition, and technology services to government and the American people. History GSA was established by President Harry Truman on July 1, 1949, to streamline the administrative work of the federal government. GSA consolidated the National Archives Establishment, the Federal Works Agency and its Public Buildings Administration, the Bureau of Federal Supply and the Office of Contract Settlement, and the War Assets Administration into one federal agency tasked with administering supplies and providing workplaces for federal employees HI, this my change."},{"title":"APIs","url":"/open-gsa-redesign/api/","tags":[],"body":"APIs and Developer Tools GSA’s web services cover a range of important data and functionality. Software developers and researchers can use these resources to help people find useful government information. Many of our APIs are themselves open sourced and we always welcome feedback. If you have any questions or ideas for how we can improve our APIs, don’t hesitate to let us know. Feedback View our developer terms of service APIs Citizen Topics API This API lists the topics that we use to organize content on USA.gov. Corporate Consumer Contact Information Based on the information collected for the Consumer Action Handbook. Data Center Consolidation API Inventories and tracks the progress of efforts to consolidate US government data centers. Data.gov CKAN API The government-wide data catalog available at Data.gov. DigitalGov Search API Provides DigitalGov Search customers their search results in JSON. Sign in with a .gov or .mil email is required. FBOpen The FBOpen API provides an interface to allow easier access to a range of business opportunities with the federal government. FedBizOpps Documentation This system supports Web Services for Federal buyers to post information to the database using their agency’s electronic procurement system. Federal Procurement Data System - FPDS API SOAP and XML web services are used in FPDS-NG to provide interoperability with various federal procurement systems. Federal Procurement Data System - FAADS API SOAP and XML web services are used in the Federal Assistance module to provide interoperability with various federal assistance systems. Federal Agency Directory API Documentation This API contains directory information about federal agencies, such as contact methods, in English and Spanish. Government Jobs API This API returns job openings on USAJobs.gov that are open to the public and located in the United States. .Gov Domains API This dataset offers the list of Federal Executive Agency internet domains. Go.USA.gov API Go.USA.gov is a URL shortener for government employees. The API can shorten, preview, and show clicks on short URLs. Mobile App Gallery API Documentation The App Gallery features mobile apps and websites from government agencies on a variety of platforms in English and Spanish. MyUSA Citizen API The MyUSA Citizen API is how My.USA.gov Apps interact with My.USA.gov Accounts. MyGov Discovery API The MyGov Discovery API provides a services to discover related government content. Per Diem API This API contains maximum lodging reimbursement per diem rates and the meals and incidental (M&IE) rates for 392 locations across the continental United States for Fiscal Year 2013. eMuseum API This API delivers search information and images from The Museum System (TMS) & eMuseum to GSA.gov. Social Media Registry API The Social Media Registry is an official source of information about federal government social media accounts. Sustainable Facilities Tool API The Sustainable Facilities Tool offers useful sustainable guidance and tools for a variety of roles. System for Award Management API A RESTful method of retrieving public information about the businesses or individuals within the System for Award Management data set. Hightlighted Repositories data.gov The CKAN-based data catalog for the federal government. sam_api API access to the System for Award Management unclaimed_money US Government unclaimed money metasearch tool. openIAE IAE Transparency Space Documentation. asis ASIS (Advanced Social Image Search) indexes Flickr and Instagram images and provides a search API across both indexes. govt-urls The code that runs the DigitalGov Search Non-.gov URLs API--a list of government URLs that don't end in .gov or .mil. View all GSA repositories"},{"title":"Code","url":"/open-gsa-redesign/code/","tags":[],"body":"Open Data GSA provides workplaces by constructing, managing, and preserving government buildings and by leasing and managing commercial real estate. GSA’s acquisition solutions offer private sector professional services, equipment, supplies, telecommunications, and information technology to government organizations and the military. GSA policies promote management best practices and efficient government operations. Datasets The mission of GSA is to deliver the best value in real estate, acquisition, and technology services to government and the American people. History GSA was established by President Harry Truman on July 1, 1949, to streamline the administrative work of the federal government. GSA consolidated the National Archives Establishment, the Federal Works Agency and its Public Buildings Administration, the Bureau of Federal Supply and the Office of Contract Settlement, and the War Assets Administration into one federal agency tasked with administering supplies and providing workplaces for federal employees"},{"title":"Data","url":"/open-gsa-redesign/data/","tags":[],"body":"Open Data GSA provides workplaces by constructing, managing, and preserving government buildings and by leasing and managing commercial real estate. GSA’s acquisition solutions offer private sector professional services, equipment, supplies, telecommunications, and information technology to government organizations and the military. GSA policies promote management best practices and efficient government operations. Datasets The mission of GSA is to deliver the best value in real estate, acquisition, and technology services to government and the American people. History GSA was established by President Harry Truman on July 1, 1949, to streamline the administrative work of the federal government. GSA consolidated the National Archives Establishment, the Federal Works Agency and its Public Buildings Administration, the Bureau of Federal Supply and the Office of Contract Settlement, and the War Assets Administration into one federal agency tasked with administering supplies and providing workplaces for federal employees"},{"title":"Events","url":"/open-gsa-redesign/events/","tags":[],"body":"Open Data GSA provides workplaces by constructing, managing, and preserving government buildings and by leasing and managing commercial real estate. GSA’s acquisition solutions offer private sector professional services, equipment, supplies, telecommunications, and information technology to government organizations and the military. GSA policies promote management best practices and efficient government operations. Datasets The mission of GSA is to deliver the best value in real estate, acquisition, and technology services to government and the American people. History GSA was established by President Harry Truman on July 1, 1949, to streamline the administrative work of the federal government. GSA consolidated the National Archives Establishment, the Federal Works Agency and its Public Buildings Administration, the Bureau of Federal Supply and the Office of Contract Settlement, and the War Assets Administration into one federal agency tasked with administering supplies and providing workplaces for federal employees"},{"title":"","url":"/open-gsa-redesign/","tags":[],"body":"Whether you are here for a specific purpose or just want to explore, choose to do so by clicking on a persona or topic that best describes what you want to do. Also know that we are standing by to work with you on our open efforts, contact us with thoughts, questions, and comments."},{"title":"Microloans for Farmers","url":"/open-gsa-redesign/projects/microloans-for-farmers/","tags":"project","body":"What is the issue? Many farms in the United States, including smaller and newer enterprises, do not have access to the credit they need to build and sustain their operations. To fulfill this need, the Farm Service Agency (FSA) at the United States Department of Agriculture (USDA) provides small amounts of credit to qualified borrowers who have been unable to obtain farm credit from commercial lenders. This extension of credit might be especially helpful for new farmers, or farmers who are establishing operations such as urban farms that are not served by the commercial lending industry. Farms like these often lack the type of business records necessary to qualify for commercial loans, creating a catch-22 situation that makes it difficult to build new businesses. Microloans are a particular type of loan offered by FSA that helps to fulfill the needs of businesses like these. What is the insight? In order to provide credit to a broad array of agricultural entrepreneurs, especially those who might be new to farming and who might not participate in other USDA programs, it is critical to widely share information about the availability of microloans. This information must be concise and targeted, providing individuals with clear action steps that they can take to learn more about, and potentially apply for, loans from FSA. What was the intervention? A new outreach letter was mailed to randomly selected zip codes. It provided information on the benefits of the microloan program, a shortened URL for accessing more information online, and customized contact information directing each farmer to the loan officer in his or her home county. A broad sampling of farmers received the letter, including individuals who had not previously participated in USDA programs or been a customer of FSA. What was the impact? The letters more than doubled the amount of microloan-related activity in FSA county offices, introducing the microloan program widely to farmers who might benefit. The letter also influenced the number of successful applicants, increasing the percentage from approximately 0.09 percent to 0.11 percent."},{"title":"Projects","url":"/open-gsa-redesign/projects/","tags":[],"body":"As a result of our programs, more people are saving for retirement, more students are going to college and better managing their student loans, more Veterans are taking advantage of education and career counseling benefits, more small farms are gaining access to credit, and more families are securing health insurance coverage. Featured projects"},{"title":"Reducing Summer Melt","url":"/open-gsa-redesign/projects/reducing-summer-melt/","tags":"project","body":"What is the issue? Every year 20 to 30 percent of college-accepted high school graduates in urban districts fail to matriculate in college in the fall—a phenomenon known as “summer melt.” What is the insight? Sending students text message reminders about key tasks related to college matriculation, such as completing financial aid paperwork, have been found to increase first-year enrollment. By delivering these messages at times when students can take action, each reminder prompts direct action that supports college enrollment. What was the intervention? Personalized text messages were designed for students and parents, reminding them of critical tasks. The text messages also provided recipients with a connection to individualized college and financial aid advising. What was the impact? Among all students sent text messages, 68.0 percent enrolled in college in the fall compared with 64.9 percent of those not sent messages. Enrollment effects were larger for the lowest-income students and for first-generation students. Among low-income students, the text messages increased enrollment from 66.4 percent to 72.1 percent."},{"title":"Servicemember TSP Enrollment","url":"/open-gsa-redesign/projects/tsp-enrollment/","tags":"project","body":"What is the issue? The financial readiness of our military Servicemembers and their families is a priority of the Department of Defense (DOD). The military, like the civilian Federal government, offers a workplace savings plan called the Thrift Savings Plan (TSP) to help Servicemembers save and invest for their futures. However, just 42 percent of active duty Servicemembers are enrolled in TSP, compared to 87 percent of civilian Federal employees. What is the insight? In order to enroll in TSP, Servicemembers need to know about TSP, login to the Department of Defense’s Defense Finance and Accounting Service (DFAS) MyPay website, and select a contribution percentage. Research from behavioral science finds that clarifying and streamlining enrollment processes such as this can promote participation in programs. As TSP savings through traditional (pre-tax) or Roth (after-tax) contributions can confer both short- and long-term benefits, many of the over 800,000 non-enrolled Servicemembers might choose to enroll in TSP if actively presented with a chance to do so. What was the intervention? Servicemembers who were not enrolled in TSP were sent emails that highlighted the opportunity and potential benefits of enrolling and saving in TSP. Eight different messages employed different combinations of behavioral insights: describing clear action steps to enroll, presenting enrollment as a chance to make a fresh-start with saving, describing the decision to enroll in TSP as a choice between two options, and emphasizing the short- and long-term benefits of saving. A ninth email was designed using language drawn from the TSP website. Most of the over 800,000 Servicemembers who were not enrolled in TSP as of April 27, 2015 received one of the nine emails. What was the impact? The most effective email clarified the action steps needed to enroll and emphasized the potential long-term benefits of saving even a little each month. Sixty-seven percent more Servicemembers—4,930—enrolled in TSP in May 2015 as a result of being sent one of the messages designed using behavioral insights, compared to receiving no message at all."},{"title":"Search","url":"/open-gsa-redesign/search/","tags":[],"body":"Search Search"},{"title":"","url":"/open-gsa-redesign/CONTRIBUTING.md","tags":[],"body":"## Welcome! We're so glad you're thinking about contributing to this open source project! If you're unsure about anything, just ask -- or submit the issue or pull request anyway. The worst that can happen is you'll be politely asked to change something. We love all friendly contributions. We encourage you to read this project's CONTRIBUTING policy (you are here), its [LICENSE](LICENSE.md), and its [README](README.md). If you have any questions just [shoot us an email](mailto:sara.cope@gsa.gov). ## Front end architecture ### CSS - Styling will be built from the US Web Design Standards. - CSS methodology will be inherited from the WDS, which inherits mostly from the [18f front end guide](https://pages.18f.gov/frontend/css-coding-styleguide/architecture/). - Use [18F modifed BEM naming convention](https://pages.18f.gov/frontend/css-coding-styleguide/naming/) - Componentized CSS: start with tag rules and only becomes more specific as necessary, using component classes. - Will update the WDS library when it publishes a change required by the guide. Otherwise will update bi-monthly. - The codebase will be visual regression tested when a suitable tool is found for 18F. - The Sass code will be linted with `scss-lint` - The [18F CSS linting configuration](https://raw.githubusercontent.com/18F/frontend/18f-pages-staging/.scss-lint.yml) will be used. - If linting fails, it will also fail the tests, but not the build. - Will default to [semantic HTML5](http://www.w3schools.com/html/html5_semantic_elements.asp). ### Images - Will use `` and `xlink` (looking for link) for icons. - All images should be under 800kb in total, un-minified size. - Images should be under 600Kb after being minified - All raster images should be minified with a tool such as [grunt-imagemin](https://github.com/gruntjs/grunt-contrib-imagemin). ### JavaScript - The site will be developed with Jekyll so will have a ruby-based build. - Is required to work without JavaScript. - jQuery will be required for the WDS. - No heavy JS framework is required. - Should use the AirBnB linter configuration for JavaScript, if linting fails, it will also fail the tests, but not the build. - Ruby gems will be used for front end dependency management. - JavaScript will not be bundled. - There will be a manual testing script that will be required to walk through for each PR. ### Devices - All versions of IE that Microsoft supports (IE9 and up); newest Chrome/FF. - Mobile first will be employed. - Every applicable change should be run through HTML code sniffer. ### Performance - Will measure against the following custom events: - Time to main image and callout text. - Each of these should load in under a second ## Where Contributions Go Submit contributions to https://github.com/GSA/open-gsa-redesign as pull requests to the `dev` branch. ## Public domain This project is in the public domain within the United States, and copyright and related rights in the work worldwide are waived through the [CC0 1.0 Universal public domain dedication](https://creativecommons.org/publicdomain/zero/1.0/). All contributions to this project will be released under the CC0 dedication. By submitting a pull request, you are agreeing to comply with this waiver of copyright interest."},{"title":"","url":"/open-gsa-redesign/LICENSE.md","tags":[],"body":"As a work of the United States Government, this project is in the public domain within the United States. Additionally, we waive copyright and related rights in the work worldwide through the CC0 1.0 Universal public domain dedication. ## CC0 1.0 Universal Summary This is a human-readable summary of the [Legal Code (read the full text)](https://creativecommons.org/publicdomain/zero/1.0/legalcode). ### No Copyright The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by law. You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permission. ### Other Information In no way are the patent or trademark rights of any person affected by CC0, nor are the rights that other persons may have in the work or in how the work is used, such as publicity or privacy rights. Unless expressly stated otherwise, the person who associated a work with this deed makes no warranties about the work, and disclaims liability for all uses of the work, to the fullest extent permitted by applicable law. When using or citing the work, you should not imply endorsement by the author or the affirmer."},{"title":"","url":"/open-gsa-redesign/README.md","tags":[],"body":"# Open GSA Redesign Open.gsa.gov is the current developer portal for all GSA data, APIs, and code open to the public. This repo is where we will be managing development of the redesign of this portal. This particular site is made for use with the [Federalist](https://github.com/18f/federalist) in mind. See the [wiki](https://github.com/GSA/open-gsa-redesign/wiki) for more info related to this site including a product roadmap, personas, and guides. ## Running locally This site is built using Jekyll for the file framework. ### Before you start You will need to have the following installed on your machine before following the commands below: * Ruby v2.2.2+, [Installation guides](https://www.ruby-lang.org/en/documentation/installation/) * Bundler v1.12.3+, [Installation guides](http://bundler.io/v1.13/guides/using_bundler_in_application.html#getting-started---installing-bundler-and-bundle-init) ### Basic setup 1. Install Bundler `gem install bundler` and then install Jekyll and all dependencies `bundle install`. 2. Fork this repo. 2. Clone the repo you just forked. ### Running Jekyll The preferred method for running Jekyll is with `bundle exec`. ### Public domain This project is in the worldwide [public domain](LICENSE.md). As stated in [CONTRIBUTING](CONTRIBUTING.md): > This project is in the public domain within the United States, and copyright and related rights in the work worldwide are waived through the [CC0 1.0 Universal public domain dedication](https://creativecommons.org/publicdomain/zero/1.0/). > > All contributions to this project will be released under the CC0 dedication. By submitting a pull request, you are agreeing to comply with this waiver of copyright interest."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/CHANGELOG.md","tags":[],"body":"## 2.8.2 (2015-07-31) ### Bug Fixes * **https:** add newly generated ssl self-signed certs that will expire for 10 years - fixes ([45104a7](https://github.com/browsersync/browser-sync/commit/45104a7)), closes [#750](https://github.com/browsersync/browser-sync/issues/750) ## 2.8.1 (2015-07-28) ### Bug Fixes * **web-sockets:** Use separate server for web sockets in proxy mode - fixes #625 ([40017b4](https://github.com/browsersync/browser-sync/commit/40017b4)), closes [#625](https://github.com/browsersync/browser-sync/issues/625) ### Features * **serve-static:** Added option `serveStatic` to allow proxy/snippet mode to easily serve local fil ([384ef67](https://github.com/browsersync/browser-sync/commit/384ef67)) ## 2.7.13 (2015-06-28) ### Bug Fixes * **snippet:** Allow async attribute to be removed from snippet with snippetOptions.async = fal ([c32bec6](https://github.com/browsersync/browser-sync/commit/c32bec6)), closes [#670](https://github.com/browsersync/browser-sync/issues/670) * **socket-options:** allow socket.domain string|fn for setting domain only on socket path - fixes #69 ([5157432](https://github.com/browsersync/browser-sync/commit/5157432)), closes [#690](https://github.com/browsersync/browser-sync/issues/690) ### Features * **api:** expose sockets to public api ([985682c](https://github.com/browsersync/browser-sync/commit/985682c)) ## 2.7.12 (2015-06-17) ### Bug Fixes * **client-script:** allow proxy to also use client script middleware ([c5fdbbf](https://github.com/browsersync/browser-sync/commit/c5fdbbf)) * **client-script:** serve cached/gzipped client JS file - fixes #657 ([dbe9ffe](https://github.com/browsersync/browser-sync/commit/dbe9ffe)), closes [#657](https://github.com/browsersync/browser-sync/issues/657) ### 2.7.11 (2015-06-16) #### Bug Fixes * **client-scroll:** add scrollRestoreTechnique option as alternative to cookie for restoring scroll ([7897ea6a](https://github.com/Browsersync/browser-sync/commit/7897ea6a), closes [#630](https://github.com/Browsersync/browser-sync/issues/630)) ### 2.7.9 (2015-06-11) #### Bug Fixes * **cli:** Remove --exclude flag - ([133aa1a6](https://github.com/Browsersync/browser-sync/commit/133aa1a6), closes [#667](https://github.com/Browsersync/browser-sync/issues/667)) * **proxy:** only rewrite domains within attributes (via foxy bump to 11.0.2) - ([d80d9481](https://github.com/Browsersync/browser-sync/commit/d80d9481), closes [#647](https://github.com/Browsersync/browser-sync/issues/647)) ### 2.7.7 (2015-06-09) #### Bug Fixes * **plugins:** Allow plugins to register middleware via server:middleware hook when in proxy mo ([104dbb4a](https://github.com/Browsersync/browser-sync/commit/104dbb4a), closes [#663](https://github.com/Browsersync/browser-sync/issues/663)) ### 2.7.6 (2015-05-28) #### Bug Fixes * **plugins:** allow module references in options.plugins array - ([aabc03c8](https://github.com/Browsersync/browser-sync/commit/aabc03c8), closes [#648](https://github.com/Browsersync/browser-sync/issues/648)) ### 2.7.5 (2015-05-26) #### Bug Fixes * **file-watcher:** defer to default callback should `fn` property be absent from file watching obje ([9f826cbe](https://github.com/Browsersync/browser-sync/commit/9f826cbe), closes [#643](https://github.com/Browsersync/browser-sync/issues/643)) ### 2.7.3 (2015-05-24) #### Bug Fixes * **file-watching:** bind public running instance to watch callbacks given in options - ([d7c96e4f](https://github.com/Browsersync/browser-sync/commit/d7c96e4f), closes [#631](https://github.com/Browsersync/browser-sync/issues/631)) * **snippet:** Bump resp-modifier to allow more flexible whitelist/blacklist paths for snippet ([f09c2797](https://github.com/Browsersync/browser-sync/commit/f09c2797), closes [#553](https://github.com/Browsersync/browser-sync/issues/553)) #### Features * **rewrite-rules:** enable live updating of rewrite rules for both static server & proxy ([a4e2bf6f](https://github.com/Browsersync/browser-sync/commit/a4e2bf6f)) ### 2.7.1 (2015-05-06) #### Bug Fixes * **web-sockets:** revert handling upgrade event on proxy as it causes regression fix #606 ([1c6b1c03](https://github.com/Browsersync/browser-sync/commit/1c6b1c03)) ### 2.6.8 (2015-04-29) #### Bug Fixes * **cli:** Allow absolute paths for config file - ([8fcd9048](https://github.com/Browsersync/browser-sync/commit/8fcd9048), closes [#583](https://github.com/Browsersync/browser-sync/issues/583)) ### 2.6.5 (2015-04-25) #### Bug Fixes * **file-watching:** use canLogFileChange() to determine whether file:reload, stream:changed & browse ([164154ea](https://github.com/Browsersync/browser-sync/commit/164154ea), closes [#479](https://github.com/Browsersync/browser-sync/issues/479)) ### 2.6.1 (2015-04-13) #### Bug Fixes * **stream:** Allow deprecated .reload({stream: true}) when no instance running, closes [#573](https://github.com/Browsersync/browser-sync/issues/573) ## 2.6.0 (2015-04-12) #### Bug Fixes * **open:** Allow open: 'ui' and open: 'ui-external' when in snippet mode - ([d0333582](https://github.com/Browsersync/browser-sync/commit/d0333582), closes [#571](https://github.com/Browsersync/browser-sync/issues/571)) * **server:** set index correctly if serveStaticOptions: {index: } given ([34816a76](https://github.com/Browsersync/browser-sync/commit/34816a76)) #### Features * **cli:** allow 'browser' option from cli - ([ca517d03](https://github.com/Browsersync/browser-sync/commit/ca517d03), closes [#552](https://github.com/Browsersync/browser-sync/issues/552)) * **client:** Bump client to allow wildcards in reload method - ([1e4de8f7](https://github.com/Browsersync/browser-sync/commit/1e4de8f7), closes [#572](https://github.com/Browsersync/browser-sync/issues/572)) * **commands:** Add reload command for http-protocol comms ([c0fe70dc](https://github.com/Browsersync/browser-sync/commit/c0fe70dc)) * **file-watcher:** Add `.watch()` to public api ([6a2609f0](https://github.com/Browsersync/browser-sync/commit/6a2609f0)) * **http-protocol:** * Add support for https comms ([efd4f39c](https://github.com/Browsersync/browser-sync/commit/efd4f39c)) * Add reload method to http protocol ([f6a3601f](https://github.com/Browsersync/browser-sync/commit/f6a3601f)) * **plugins:** Accept object literal as plugin + options ([757f492e](https://github.com/Browsersync/browser-sync/commit/757f492e)) * **reload:** Add reload-delay and reload-debounce to cli -, ([38d62c96](https://github.com/Browsersync/browser-sync/commit/38d62c96), closes [#329](https://github.com/Browsersync/browser-sync/issues/329), [#562](https://github.com/Browsersync/browser-sync/issues/562)) * **stream:** Implement dedicated `.stream()` method for better handling streams & to pave the ([2581e7a1](https://github.com/Browsersync/browser-sync/commit/2581e7a1)) * **watchers:** * Allow per-watcher options hash. ([3c069fba](https://github.com/Browsersync/browser-sync/commit/3c069fba)) * switch to chokidar for file-watching, implement callback interface on per-patter ([14afddfc](https://github.com/Browsersync/browser-sync/commit/14afddfc)) ### 2.5.1 (2015-03-31) #### Bug Fixes * **proxy:** Bump foxy dep to ensure middlewares work correctly for old IEs ([104e9dd1](https://github.com/Browsersync/browser-sync/commit/104e9dd1)) * **snippet:** Log UI access urls when in snippet mode ([c448fa0b](https://github.com/Browsersync/browser-sync/commit/c448fa0b)) ## 2.5.0 (2015-03-29) #### Bug Fixes * **proxy:** Bump Foxy to stop cookies being altered when parsed ([ff3c46bd](https://github.com/Browsersync/browser-sync/commit/ff3c46bd)) #### Features * **options:** Allow any serve-static specific configuration under new property - ([4c58541f](https://github.com/Browsersync/browser-sync/commit/4c58541f), closes [#539](https://github.com/Browsersync/browser-sync/issues/539)) * **throttle:** Bump UI for network throttle ([7e2f588e](https://github.com/Browsersync/browser-sync/commit/7e2f588e)) ## 2.4.0 (2015-03-21) #### Features * **rewrite:** Allow addtional HTML rewrite rules through server + proxy modes to help with #51 ([76ae686d](https://github.com/Browsersync/browser-sync/commit/76ae686d)) ### 2.3.2 (2015-03-21) #### Bug Fixes * **client:** Bump UI to fix safari deprecated error messages - fix #445 ([6bb7513c](https://github.com/Browsersync/browser-sync/commit/6bb7513c)) ### 2.2.5 (2015-03-17) #### Features * **plugins:** Allow plugins to be given inline within options hash ([fd4ccd9e](https://github.com/Browsersync/browser-sync/commit/fd4ccd9e)) ### 2.2.4 (2015-03-13) #### Bug Fixes * **reload:** Allow multiple instances to call their own `.reload()` method - ([da53dc21](https://github.com/Browsersync/browser-sync/commit/da53dc21c6f7afd801a9f00489a6df2ab46156bb), closes [#511](https://github.com/Browsersync/browser-sync/issues/511)) ### 2.2.3 (2015-03-08) #### Bug Fixes * **socket:** Set heartbeat interval correctly - ([7621c0de](https://github.com/Browsersync/browser-sync/commit/7621c0dece1fea6c170ffdc117bd7c67be2138ed), closes [#499](https://github.com/Browsersync/browser-sync/issues/499)) ### 2.2.2 (2015-03-04) #### Bug Fixes * **paths:** Fix regression with absolute/relative paths to scripts/sockets/https etc - ([2386fe1b](https://github.com/Browsersync/browser-sync/commit/2386fe1bbde175b18211ef9b242b6af0bf11128c), closes [#463](https://github.com/Browsersync/browser-sync/issues/463)) * **snippet:** Allow serving the client js over https when in snippet mode - ([196bafbe](https://github.com/Browsersync/browser-sync/commit/196bafbee2b09c2a1e8b09a988a2c8aa43bac2b9), closes [#459](https://github.com/Browsersync/browser-sync/issues/459)) * **socket:** Bump socket io + client to fix #477 & https://github.com/Browsersync/browser-syn ([659c281e](https://github.com/Browsersync/browser-sync/commit/659c281eac8ab8343a7ba7b13fa532560dc1bd9c)) ### 2.1.4 (2015-02-18) #### Bug Fixes * **cli:** allow disable injection via cli - ([12ffbd79](https://github.com/Browsersync/browser-sync/commit/12ffbd793443c7ede191aad55bcd530e566f0947), closes [#444](https://github.com/Browsersync/browser-sync/issues/444)) * **snippet:** * Allow serving the client js over https when in snippet mode - ([196bafbe](https://github.com/Browsersync/browser-sync/commit/196bafbee2b09c2a1e8b09a988a2c8aa43bac2b9), closes [#459](https://github.com/Browsersync/browser-sync/issues/459)) * Allow serving the snippet on secure server + base url - re: #437 ([96d689c0](https://github.com/Browsersync/browser-sync/commit/96d689c0830975dbf2baee5aaaaa396415052512)) * Always use full url path for scripts - ([14bd6f51](https://github.com/Browsersync/browser-sync/commit/14bd6f5126c52228a0ed306a118feac0e65c50db), closes [#437](https://github.com/Browsersync/browser-sync/issues/437)) ## 2.1.0 (2015-02-16) #### Features * **https:** Add HTTPS proxying - re: #399 ([09dbca6e](https://github.com/Browsersync/browser-sync/commit/09dbca6e3e60fa699ca2519d56ada3cbd5a2237b)) * **proxy:** Allow user-specified proxy request headers ([0c303a7e](https://github.com/Browsersync/browser-sync/commit/0c303a7e4a8bafa554d42c6895698b7338d036f4), closes [#430](https://github.com/Browsersync/browser-sync/issues/430)) ### 2.0.1 (2015-02-10) #### Bug Fixes * **cli:** * Ensure server options are merged from command line ([8d677328](https://github.com/Browsersync/browser-sync/commit/8d677328a779502ba6f6e16b74f125dc2caeaf92)) * explode files args when given on command line., ([18324f0a](https://github.com/Browsersync/browser-sync/commit/18324f0a7b4d3c49bd16800a7ba77cf13ea2449a), closes [#425](https://github.com/Browsersync/browser-sync/issues/425), [#426](https://github.com/Browsersync/browser-sync/issues/426)) * Don't double-merge cli options, re: #417 ([057d97f3](https://github.com/Browsersync/browser-sync/commit/057d97f35786f120bc2057c884c80c5ce95aaf79)) * **https:** Ensure HTTPS option is used in legacy mode + top level, re: #427 ([799c0a59](https://github.com/Browsersync/browser-sync/commit/799c0a59cd152eb11e6f8e66a1d3adcf082624f7)) * **proxy:** * use path as startPath if given as proxy option ([f4ac4c59](https://github.com/Browsersync/browser-sync/commit/f4ac4c595a479b44676824cdbdaa34cc1dc9d966)) * Bump Foxy module to fix issues with redirects, ([e5d8fe18](https://github.com/Browsersync/browser-sync/commit/e5d8fe180bfd46f1380ec1f532d81f62f2f6ab11), closes [#381](https://github.com/Browsersync/browser-sync/issues/381)) * **reload:** Bump browser-sync-client fix ##369 ([9bcf1086](https://github.com/Browsersync/browser-sync/commit/9bcf108694f0e51bafc3bd6d0a584781e2950f68)) * **stream:** Don't log file info when once: true - fixes https://github.com/google/web-starter-kit/issues/593 ([8f4d7275](https://github.com/Browsersync/browser-sync/commit/8f4d7275d4dfa6e22dec4b87d19b3be51bab8af3)) #### Features * **core:** Use immutable data internally to enable advanced features needed in upcoming UI ([b5d6d9c1](https://github.com/Browsersync/browser-sync/commit/b5d6d9c1866cf8451cf235dc3bca674af9e6d767)) * **options:** * Allow silent setting of options ([31e196a0](https://github.com/Browsersync/browser-sync/commit/31e196a0e900356cf5cbb9b1e8a4c3202011d01e)) * added reloadOnRestart option - https://github.com/shakyShane/browser-sync/issues ([b1bcfa81](https://github.com/Browsersync/browser-sync/commit/b1bcfa81638b1f99fed7d71ee051c00ceebaf8f9)) * **server:** add serveFile method for plugin use ([c5007871](https://github.com/Browsersync/browser-sync/commit/c50078717f291f3cb301b0bc315eac1b42f6d7b6)) * **snippet:** Add black/white lists - ([6a2a296e](https://github.com/Browsersync/browser-sync/commit/6a2a296ee05312d56de3ae47f5dfb6e04f877692), closes [#373](https://github.com/Browsersync/browser-sync/issues/373)) * **tunnel:** Switch to ngrok - re: #192 ([7359435c](https://github.com/Browsersync/browser-sync/commit/7359435ca4efd429c9421aa912a036f82d022d82)) ### 1.8.2 (2014-12-22) #### Bug Fixes * **proxy:** Bump foxy to fix #376 ([fe6c73db](https://github.com/shakyShane/browser-sync/commit/fe6c73db47f82d10ea25b0b8c58b032e972a4663)) #### Features * **server:** allow to inject browser-sync client.js in custom middlewares ([841c6c31](https://github.com/shakyShane/browser-sync/commit/841c6c31015955ff92cffd937f19f2c78ce27e8d)) ### 1.8.1 (2014-12-19) #### Bug Fixes * **proxy:** Bump foxy to fix #376 ([284cf84a](https://github.com/shakyShane/browser-sync/commit/284cf84a0390a07d9824972c8ab67ec95cf8109f)) ### 1.7.3 (2014-12-16) #### Features * **files:** pause/resume ([a3c697f6](https://github.com/shakyShane/browser-sync/commit/a3c697f66b4fcec3966ed77a841e55aafb70f69a)) ### 1.6.5 (2014-11-16) #### Bug Fixes * **snippet:** Add snippet.ignorePaths option - ([dd9b284b](https://github.com/shakyShane/browser-sync/commit/dd9b284b47f01884996619c012f134c982639b8c), closes [#330](https://github.com/shakyShane/browser-sync/issues/330)) #### Features * **snippet:** Allow user-provided rule for writing the snippet ([33c4586d](https://github.com/shakyShane/browser-sync/commit/33c4586dce26a4c9672b99d14d29adb064dac6ec)) ### 1.6.4 (2014-11-08) #### Bug Fixes * **proxy:** Bump Foxy to fix issues with redirects ([e2f30be2](https://github.com/shakyShane/browser-sync/commit/e2f30be2269629a96503ea487b5248ab3b6918ab)) ### 1.6.2 (2014-11-02) #### Bug Fixes * **options:** Ignore cli options from public api usage fix #314 ([1de4a3b0](https://github.com/shakyShane/browser-sync/commit/1de4a3b06cd888345aa5130a03cad070b1f5b466))"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/README.md","tags":[],"body":"Keep multiple browsers & devices in sync when building websites. Browsersync is developed and maintained internally at JH Follow @Browsersync on twitter for news & updates. Community ## Features Please visit [browsersync.io](http://browsersync.io) for a full run-down of features ## Requirements Browsersync works by injecting an asynchronous script tag (``) right after the `` tag during initial request. In order for this to work properly the `` tag must be present. Alternatively you can provide a custom rule for the snippet using [snippetOptions](http://www.browsersync.io/docs/options/#option-snippetOptions) ## Upgrading from 1.x to 2.x ? Providing you haven't accessed any internal properties, everything will just work as there are no breaking changes to the public API. Internally however, we now use an immutable data structure for storing/retrieving options. So whereas before you could access urls like this... ```js browserSync({server: true}, function(err, bs) { console.log(bs.options.urls.local); }); ``` ... you now access them in the following way: ```js browserSync({server: true}, function(err, bs) { console.log(bs.options.getIn([\"urls\", \"local\"])); }); ``` ## Install and trouble shooting [browsersync.io docs](http://browsersync.io) ## Integrations / recipes [Browsersync recipes](https://github.com/Browsersync/recipes) ## Support If you've found Browser-sync useful and would like to contribute to its continued development & support, please feel free to send a donation of any size - it would be greatly appreciated! [![Support via Gittip](https://rawgithub.com/chris---/Donation-Badges/master/gittip.jpeg)](https://www.gittip.com/shakyshane) [![Support via PayPal](https://rawgithub.com/chris---/Donation-Badges/master/paypal.jpeg)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=shakyshane%40gmail%2ecom&lc=US&item_name=browser%2dsync) Apache 2 Copyright (c) 2016 Shane Osbourne"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-client/README.md","tags":[],"body":"# browser-sync-client [![Build Status](https://travis-ci.org/BrowserSync/browser-sync-client.svg)](https://travis-ci.org/BrowserSync/browser-sync-client) Client-side script for BrowserSync ## Contributors ``` 177 Shane Osbourne 2 Sergey Slipchenko 1 Hugo Dias 1 Shinnosuke Watanabe 1 Tim Schaub 1 Shane Daniel 1 Matthieu Vachon ``` ## License Copyright (c) 2014 Shane Osbourne Licensed under the MIT license."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-client/node_modules/etag/HISTORY.md","tags":[],"body":"1.7.0 / 2015-06-08 ================== * Always include entity length in ETags for hash length extensions * Generate non-Stats ETags using MD5 only (no longer CRC32) * Improve stat performance by removing hashing * Remove base64 padding in ETags to shorten * Use MD5 instead of MD4 in weak ETags over 1KB 1.6.0 / 2015-05-10 ================== * Improve support for JXcore * Remove requirement of `atime` in the stats object * Support \"fake\" stats objects in environments without `fs` 1.5.1 / 2014-11-19 ================== * deps: crc@3.2.1 - Minor fixes 1.5.0 / 2014-10-14 ================== * Improve string performance * Slightly improve speed for weak ETags over 1KB 1.4.0 / 2014-09-21 ================== * Support \"fake\" stats objects * Support Node.js 0.6 1.3.1 / 2014-09-14 ================== * Use the (new and improved) `crc` for crc32 1.3.0 / 2014-08-29 ================== * Default strings to strong ETags * Improve speed for weak ETags over 1KB 1.2.1 / 2014-08-29 ================== * Use the (much faster) `buffer-crc32` for crc32 1.2.0 / 2014-08-24 ================== * Add support for file stat objects 1.1.0 / 2014-08-24 ================== * Add fast-path for empty entity * Add weak ETag generation * Shrink size of generated ETags 1.0.1 / 2014-08-24 ================== * Fix behavior of string containing Unicode 1.0.0 / 2014-05-18 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-client/node_modules/etag/README.md","tags":[],"body":"# etag [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Create simple ETags ## Installation ```sh $ npm install etag ``` ## API ```js var etag = require('etag') ``` ### etag(entity, [options]) Generate a strong ETag for the given entity. This should be the complete body of the entity. Strings, `Buffer`s, and `fs.Stats` are accepted. By default, a strong ETag is generated except for `fs.Stats`, which will generate a weak ETag (this can be overwritten by `options.weak`). ```js res.setHeader('ETag', etag(body)) ``` #### Options `etag` accepts these properties in the options object. ##### weak Specifies if the generated ETag will include the weak validator mark (that is, the leading `W/`). The actual entity tag is the same. The default value is `false`, unless the `entity` is `fs.Stats`, in which case it is `true`. ## Testing ```sh $ npm test ``` ## Benchmark ```bash $ npm run-script bench > etag@1.6.0 bench nodejs-etag > node benchmark/index.js http_parser@1.0 node@0.10.33 v8@3.14.5.9 ares@1.9.0-DEV uv@0.10.29 zlib@1.2.3 modules@11 openssl@1.0.1j > node benchmark/body0-100b.js 100B body 1 test completed. 2 tests completed. 3 tests completed. 4 tests completed. * buffer - strong x 289,198 ops/sec ±1.09% (190 runs sampled) * buffer - weak x 287,838 ops/sec ±0.91% (189 runs sampled) * string - strong x 284,586 ops/sec ±1.05% (192 runs sampled) * string - weak x 287,439 ops/sec ±0.82% (192 runs sampled) > node benchmark/body1-1kb.js 1KB body 1 test completed. 2 tests completed. 3 tests completed. 4 tests completed. * buffer - strong x 212,423 ops/sec ±0.75% (193 runs sampled) * buffer - weak x 211,871 ops/sec ±0.74% (194 runs sampled) string - strong x 205,291 ops/sec ±0.86% (194 runs sampled) string - weak x 208,463 ops/sec ±0.79% (192 runs sampled) > node benchmark/body2-5kb.js 5KB body 1 test completed. 2 tests completed. 3 tests completed. 4 tests completed. * buffer - strong x 92,901 ops/sec ±0.58% (195 runs sampled) * buffer - weak x 93,045 ops/sec ±0.65% (192 runs sampled) string - strong x 89,621 ops/sec ±0.68% (194 runs sampled) string - weak x 90,070 ops/sec ±0.70% (196 runs sampled) > node benchmark/body3-10kb.js 10KB body 1 test completed. 2 tests completed. 3 tests completed. 4 tests completed. * buffer - strong x 54,220 ops/sec ±0.85% (192 runs sampled) * buffer - weak x 54,069 ops/sec ±0.83% (191 runs sampled) string - strong x 53,078 ops/sec ±0.53% (194 runs sampled) string - weak x 53,849 ops/sec ±0.47% (197 runs sampled) > node benchmark/body4-100kb.js 100KB body 1 test completed. 2 tests completed. 3 tests completed. 4 tests completed. * buffer - strong x 6,673 ops/sec ±0.15% (197 runs sampled) * buffer - weak x 6,716 ops/sec ±0.12% (198 runs sampled) string - strong x 6,357 ops/sec ±0.14% (197 runs sampled) string - weak x 6,344 ops/sec ±0.21% (197 runs sampled) > node benchmark/stats.js stats 1 test completed. 2 tests completed. 3 tests completed. 4 tests completed. * real - strong x 1,671,989 ops/sec ±0.13% (197 runs sampled) * real - weak x 1,681,297 ops/sec ±0.12% (198 runs sampled) fake - strong x 927,063 ops/sec ±0.14% (198 runs sampled) fake - weak x 914,461 ops/sec ±0.41% (191 runs sampled) ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/etag.svg [npm-url]: https://npmjs.org/package/etag [node-version-image]: https://img.shields.io/node/v/etag.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/etag/master.svg [travis-url]: https://travis-ci.org/jshttp/etag [coveralls-image]: https://img.shields.io/coveralls/jshttp/etag/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/etag?branch=master [downloads-image]: https://img.shields.io/npm/dm/etag.svg [downloads-url]: https://npmjs.org/package/etag"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-client/node_modules/fresh/HISTORY.md","tags":[],"body":"0.3.0 / 2015-05-12 ================== * Add weak `ETag` matching support 0.2.4 / 2014-09-07 ================== * Support Node.js 0.6 0.2.3 / 2014-09-07 ================== * Move repository to jshttp 0.2.2 / 2014-02-19 ================== * Revert \"Fix for blank page on Safari reload\" 0.2.1 / 2014-01-29 ================== * Fix for blank page on Safari reload 0.2.0 / 2013-08-11 ================== * Return stale for `Cache-Control: no-cache` 0.1.0 / 2012-06-15 ================== * Add `If-None-Match: *` support 0.0.1 / 2012-06-10 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-client/node_modules/fresh/README.md","tags":[],"body":"# fresh [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] HTTP response freshness testing ## Installation ``` $ npm install fresh ``` ## API ```js var fresh = require('fresh') ``` ### fresh(req, res) Check freshness of `req` and `res` headers. When the cache is \"fresh\" __true__ is returned, otherwise __false__ is returned to indicate that the cache is now stale. ## Example ```js var req = { 'if-none-match': 'tobi' }; var res = { 'etag': 'luna' }; fresh(req, res); // => false var req = { 'if-none-match': 'tobi' }; var res = { 'etag': 'tobi' }; fresh(req, res); // => true ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/fresh.svg [npm-url]: https://npmjs.org/package/fresh [node-version-image]: https://img.shields.io/node/v/fresh.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/fresh/master.svg [travis-url]: https://travis-ci.org/jshttp/fresh [coveralls-image]: https://img.shields.io/coveralls/jshttp/fresh/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/fresh?branch=master [downloads-image]: https://img.shields.io/npm/dm/fresh.svg [downloads-url]: https://npmjs.org/package/fresh"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/README.md","tags":[],"body":"# Browsersync UI [![Build Status](https://travis-ci.org/BrowserSync/UI.svg?branch=master)](https://travis-ci.org/BrowserSync/UI) Comes bundled with the Browsersync module (version `2.0.0` onwards). ## License Copyright (c) 2016 Shane Osbourne Licensed under the Apache 2.0 license."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/connections/connections.directive.html","tags":[],"body":"{{connection.browser.name}} - ({{connection.browser.version}})"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/connections/connections.html","tags":[],"body":"{{section.title}} Connected devices/browsers will be listed here. If you are not seeing your device in the list, it's probably because the Browsersync script tag is not being loaded on your page. Browsersync works by injecting an asynchronous script tag () right after the tag during initial request. In order for this to work properly the tag must be present. Alternatively you can provide a custom rule for the snippet using snippetOptions"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/help/help.directive.html","tags":[],"body":""},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/help/help.html","tags":[],"body":"{{ctrl.section.title}} Help page"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/history/history.directive.html","tags":[],"body":"{{url.path}} Sync all"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/history/history.html","tags":[],"body":"{{ctrl.section.title}} Clear all Pages you navigate to will appear here - making it easy to sync all devices to a specific page"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/network-throttle/network-throttle.directive.html","tags":[],"body":"Creating a throttled server, please wait... {{url}}"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/network-throttle/network-throttle.html","tags":[],"body":"{{ctrl.section.title}} Sorry, Network Throttling is only available in Server or Proxy mode. Speed {{item.title}} Port Auto Detection User specified (between 1024 & 65535) Create Server Your Servers: Your Servers will appear here... {{$index + 1}}. {{item.speed.id | uppercase}} {{item.urls[0]}} {{item.urls[1]}}"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/overview/overview.html","tags":[],"body":"{{ctrl.section.title}} Current Connections Connected browsers will be listed here."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/overview/snippet-info.html","tags":[],"body":"Place this snippet somewhere before the closing tag in your website {{options.snippet}}"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/overview/url-info.html","tags":[],"body":"{{url.title}} {{url.url}} new tab sync all Serving files from {{url}} Proxying: {{options.proxy.target}}"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/plugins/plugins.html","tags":[],"body":"{{ctrl.section.title}} Enable All Disable all %pluginlist% Sorry, no plugins were loaded You can either write your own plugin (guide coming soon!) or Search NPM for packages that contain the keywords browser sync plugin"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/remote-debug/compression.html","tags":[],"body":"{{ctrl.compression.title}}"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/remote-debug/latency/latency.html","tags":[],"body":"{{ctrl.latency.rate | number:1}}s"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/remote-debug/no-cache.html","tags":[],"body":"{{ctrl.noCache.title}}"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/remote-debug/overlay-grid/overlay-grid.html","tags":[],"body":"Grid Size Grid Colour CSS Selector Offset Top Offset Left Vertical Axis Horizontal Axis"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/remote-debug/remote-debug.html","tags":[],"body":"{{ctrl.section.title}}"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/sync-options/sync-options.html","tags":[],"body":"{{ctrl.section.title}} Enable All Disable all"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/async-each-series/Readme.md","tags":[],"body":"# async-each-series Apply an async function to each Array element in series [![Build Status](https://travis-ci.org/jb55/async-each-series.svg)](https://travis-ci.org/jb55/async-each-series) [![browser support](https://ci.testling.com/jb55/async-each-series.png)](https://ci.testling.com/jb55/async-each-series) ## Installation Install with [npm](https://www.npmjs.org): $ npm install async-each-series Install with [component(1)](http://component.io): $ component install jb55/async-each-series ## Examples ### Node.js ```javascript var each = require('async-each-series'); each(['foo','bar','baz'], function(el, next) { setTimeout(function () { console.log(el); next(); }, Math.random() * 5000); }, function (err) { console.log('finished'); }); //=> foo //=> bar //=> baz //=> finished ``` ## API ### eachSeries(array, iterator(elem, cb(err, elem)), finishedCb(err)) ## License The MIT License (MIT) Copyright (c) 2014 William Casarin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/connect-history-api-fallback/CHANGELOG.md","tags":[],"body":"# Changelog ## v1.2.0 - Support definition of custom HTML `Accept` header values. Contributed by @cgmartin. ## v1.1.0 - Rewrite rules are now applied before the request URL is checked for dots. - Rewrite rules can be defined as functions to have greater control over the `dot rule`. ## v1.0.0 This version introduces a fair amount of breaking changes. Specifically, instances of the historyApiFallback need to be created via the exported function. Previously, this was not necessary. - **Breaking:** Support multiple instances of the historyApiFallback middleware with different configurations. - **Breaking:** Loggers are configured per historyApiFallback middleware instance (see `README.md`). - The fallback index HTML file can be configured. Default is `/index.html`. - Additional rewrite rules can be defined via regular expressions."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/connect-history-api-fallback/README.md","tags":[],"body":"connect-history-api-fallback Middleware to proxy requests through a specified index page, useful for Single Page Applications that utilise the HTML5 History API. [![Build Status](https://travis-ci.org/bripkens/connect-history-api-fallback.svg?branch=master)](https://travis-ci.org/bripkens/connect-history-api-fallback) [![Dependency Status](https://david-dm.org/bripkens/connect-history-api-fallback/master.svg)](https://david-dm.org/bripkens/connect-history-api-fallback/master) [![NPM](https://nodei.co/npm/connect-history-api-fallback.png?downloads=true&downloadRank=true)](https://nodei.co/npm/connect-history-api-fallback/) ## Introduction Single Page Applications (SPA) typically only utilise one index file that is accessible by web browsers: usually `index.html`. Navigation in the application is then commonly handled using JavaScript with the help of the [HTML5 History API](http://www.w3.org/html/wg/drafts/html/master/single-page.html#the-history-interface). This results in issues when the user hits the refresh button or is directly accessing a page other than the landing page, e.g. `/help` or `/help/online` as the web server bypasses the index file to locate the file at this location. As your application is a SPA, the web server will fail trying to retrieve the file and return a *404 - Not Found* message to the user. This tiny middleware addresses some of the issues. Specifically, it will change the requested location to the index you specify (default being `/index.html`) whenever there is a request which fulfils the following criteria: 1. The request is a GET request 2. which accepts `text/html`, 3. is not a direct file request, i.e. the requested path does not contain a `.` (DOT) character and 4. does not match a pattern provided in options.rewrites (see options below) ## Usage The middleware is available through NPM and can easily be added. ``` npm install --save connect-history-api-fallback ``` Import the library ```javascript var history = require('connect-history-api-fallback'); ``` Now you only need to add the middleware to your application like so ```javascript var connect = require('connect'); var app = connect() .use(history()) .listen(3000); ``` Of course you can also use this piece of middleware with express: ```javascript var express = require('express'); var app = express(); app.use(history()); ``` ## Options You can optionally pass options to the library when obtaining the middleware ```javascript var middleware = history({}); ``` ### index Override the index (default `/index.html`) ```javascript history({ index: '/default.html' }); ``` ### rewrites Override the index when the request url matches a regex pattern. You can either rewrite to a static string or use a function to transform the incoming request. The following will rewrite a request that matches the `/\\/soccer/` pattern to `/soccer.html`. ```javascript history({ rewrites: [ { from: /\\/soccer/, to: '/soccer.html'} ] }); ``` Alternatively functions can be used to have more control over the rewrite process. For instance, the following listing shows how requests to `/libs/jquery/jquery.1.12.0.min.js` and the like can be routed to `./bower_components/libs/jquery/jquery.1.12.0.min.js`. You can also make use of this if you have an API version in the URL path. ```javascript history({ rewrites: [ { from: /^\\/libs\\/.*$/, to: function(context) { return '/bower_components' + context.parsedUrl.pathname; } } ] }); ``` The function will always be called with a context object that has the following properties: - **parsedUrl**: Information about the URL as provided by the [URL module's](https://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost) `url.parse`. - **match**: An Array of matched results as provided by `String.match(...)`. ### verbose This middleware does not log any information by default. If you wish to activate logging, then you can do so via the `verbose` option or by specifying a logger function. ```javascript history({ verbose: true }); ``` Alternatively use your own logger ```javascript history({ logger: console.log.bind(console) }); ``` ### htmlAcceptHeaders Override the default `Accepts:` headers that are queried when matching HTML content requests (Default: `['text/html', '*/*']`). ```javascript history({ htmlAcceptHeaders: ['text/html', 'application/xhtml+xml'] }) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/stream-throttle/README.md","tags":[],"body":"# stream-throttle # A rate limiter for Node.js streams. ## API usage This module exports two classes, `Throttle` and `ThrottleGroup`. `Throttle` creates a single throttled stream, based on `stream.Transform`. It accepts an `opts` parameter with the following keys: * `opts.rate` is the throttling rate, in bytes per second. * `opts.chunksize` (optional) is the maximum chunk size into which larger writes are decomposed; the default is `opts.rate`/10. The `opts` object may also contain options to be passed to the `stream.Transform` constructor. For example, the following code throttles stdin to stdout at 10 bytes per second: process.stdin.pipe(new Throttle({rate: 10})).pipe(process.stdout) `ThrottleGroup` allows the creation of a group of streams whose aggregate bandwidth is throttled. The constructor accepts the same `opts` argument as for `Throttle`. Call `throttle` on a `ThrottleGroup` object to create a new throttled stream belonging to the group. For example, the following code creates two HTTP connections to `www.google.com:80`, and throttles their aggregate (downstream) bandwidth to 10 KB/s: var addr = { host: 'www.google.com', port: 80 }; var tg = new ThrottleGroup({rate: 10240}); var conn1 = net.createConnection(addr), conn2 = net.createConnection(addr); var thr1 = conn1.pipe(tg.throttle()), thr2 = conn2.pipe(tg.throttle()); // Reads from thr1 and thr2 are throttled to 10 KB/s in aggregate ## Command line usage This package installs a `throttleproxy` binary which implements a command-line utility for throttling connections. Run `throttleproxy -h` for instructions. ## Contributing Feel free to open an issue or send a pull request. ## License BSD-style. See the LICENSE file. ## Author Copyright © 2013 Tiago Quelhas. Contact me at ``."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/stream-throttle/node_modules/commander/History.md","tags":[],"body":"2.9.0 / 2015-10-13 ================== * Add option `isDefault` to set default subcommand #415 @Qix- * Add callback to allow filtering or post-processing of help text #434 @djulien * Fix `undefined` text in help information close #414 #416 @zhiyelee 2.8.1 / 2015-04-22 ================== * Back out `support multiline description` Close #396 #397 2.8.0 / 2015-04-07 ================== * Add `process.execArg` support, execution args like `--harmony` will be passed to sub-commands #387 @DigitalIO @zhiyelee * Fix bug in Git-style sub-commands #372 @zhiyelee * Allow commands to be hidden from help #383 @tonylukasavage * When git-style sub-commands are in use, yet none are called, display help #382 @claylo * Add ability to specify arguments syntax for top-level command #258 @rrthomas * Support multiline descriptions #208 @zxqfox 2.7.1 / 2015-03-11 ================== * Revert #347 (fix collisions when option and first arg have same name) which causes a bug in #367. 2.7.0 / 2015-03-09 ================== * Fix git-style bug when installed globally. Close #335 #349 @zhiyelee * Fix collisions when option and first arg have same name. Close #346 #347 @tonylukasavage * Add support for camelCase on `opts()`. Close #353 @nkzawa * Add node.js 0.12 and io.js to travis.yml * Allow RegEx options. #337 @palanik * Fixes exit code when sub-command failing. Close #260 #332 @pirelenito * git-style `bin` files in $PATH make sense. Close #196 #327 @zhiyelee 2.6.0 / 2014-12-30 ================== * added `Command#allowUnknownOption` method. Close #138 #318 @doozr @zhiyelee * Add application description to the help msg. Close #112 @dalssoft 2.5.1 / 2014-12-15 ================== * fixed two bugs incurred by variadic arguments. Close #291 @Quentin01 #302 @zhiyelee 2.5.0 / 2014-10-24 ================== * add support for variadic arguments. Closes #277 @whitlockjc 2.4.0 / 2014-10-17 ================== * fixed a bug on executing the coercion function of subcommands option. Closes #270 * added `Command.prototype.name` to retrieve command name. Closes #264 #266 @tonylukasavage * added `Command.prototype.opts` to retrieve all the options as a simple object of key-value pairs. Closes #262 @tonylukasavage * fixed a bug on subcommand name. Closes #248 @jonathandelgado * fixed function normalize doesn’t honor option terminator. Closes #216 @abbr 2.3.0 / 2014-07-16 ================== * add command alias'. Closes PR #210 * fix: Typos. Closes #99 * fix: Unused fs module. Closes #217 2.2.0 / 2014-03-29 ================== * add passing of previous option value * fix: support subcommands on windows. Closes #142 * Now the defaultValue passed as the second argument of the coercion function. 2.1.0 / 2013-11-21 ================== * add: allow cflag style option params, unit test, fixes #174 2.0.0 / 2013-07-18 ================== * remove input methods (.prompt, .confirm, etc) 1.3.2 / 2013-07-18 ================== * add support for sub-commands to co-exist with the original command 1.3.1 / 2013-07-18 ================== * add quick .runningCommand hack so you can opt-out of other logic when running a sub command 1.3.0 / 2013-07-09 ================== * add EACCES error handling * fix sub-command --help 1.2.0 / 2013-06-13 ================== * allow \"-\" hyphen as an option argument * support for RegExp coercion 1.1.1 / 2012-11-20 ================== * add more sub-command padding * fix .usage() when args are present. Closes #106 1.1.0 / 2012-11-16 ================== * add git-style executable subcommand support. Closes #94 1.0.5 / 2012-10-09 ================== * fix `--name` clobbering. Closes #92 * fix examples/help. Closes #89 1.0.4 / 2012-09-03 ================== * add `outputHelp()` method. 1.0.3 / 2012-08-30 ================== * remove invalid .version() defaulting 1.0.2 / 2012-08-24 ================== * add `--foo=bar` support [arv] * fix password on node 0.8.8. Make backward compatible with 0.6 [focusaurus] 1.0.1 / 2012-08-03 ================== * fix issue #56 * fix tty.setRawMode(mode) was moved to tty.ReadStream#setRawMode() (i.e. process.stdin.setRawMode()) 1.0.0 / 2012-07-05 ================== * add support for optional option descriptions * add defaulting of `.version()` to package.json's version 0.6.1 / 2012-06-01 ================== * Added: append (yes or no) on confirmation * Added: allow node.js v0.7.x 0.6.0 / 2012-04-10 ================== * Added `.prompt(obj, callback)` support. Closes #49 * Added default support to .choose(). Closes #41 * Fixed the choice example 0.5.1 / 2011-12-20 ================== * Fixed `password()` for recent nodes. Closes #36 0.5.0 / 2011-12-04 ================== * Added sub-command option support [itay] 0.4.3 / 2011-12-04 ================== * Fixed custom help ordering. Closes #32 0.4.2 / 2011-11-24 ================== * Added travis support * Fixed: line-buffered input automatically trimmed. Closes #31 0.4.1 / 2011-11-18 ================== * Removed listening for \"close\" on --help 0.4.0 / 2011-11-15 ================== * Added support for `--`. Closes #24 0.3.3 / 2011-11-14 ================== * Fixed: wait for close event when writing help info [Jerry Hamlet] 0.3.2 / 2011-11-01 ================== * Fixed long flag definitions with values [felixge] 0.3.1 / 2011-10-31 ================== * Changed `--version` short flag to `-V` from `-v` * Changed `.version()` so it's configurable [felixge] 0.3.0 / 2011-10-31 ================== * Added support for long flags only. Closes #18 0.2.1 / 2011-10-24 ================== * \"node\": \">= 0.4.x < 0.7.0\". Closes #20 0.2.0 / 2011-09-26 ================== * Allow for defaults that are not just boolean. Default peassignment only occurs for --no-*, optional, and required arguments. [Jim Isaacs] 0.1.0 / 2011-08-24 ================== * Added support for custom `--help` output 0.0.5 / 2011-08-18 ================== * Changed: when the user enters nothing prompt for password again * Fixed issue with passwords beginning with numbers [NuckChorris] 0.0.4 / 2011-08-15 ================== * Fixed `Commander#args` 0.0.3 / 2011-08-15 ================== * Added default option value support 0.0.2 / 2011-08-15 ================== * Added mask support to `Command#password(str[, mask], fn)` * Added `Command#password(str, fn)` 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/stream-throttle/node_modules/commander/Readme.md","tags":[],"body":"# Commander.js [![Build Status](https://api.travis-ci.org/tj/commander.js.svg)](http://travis-ci.org/tj/commander.js) [![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander) [![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://www.npmjs.org/package/commander) [![Join the chat at https://gitter.im/tj/commander.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/tj/commander.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/tj/commander). [API documentation](http://tj.github.com/commander.js/) ## Installation $ npm install commander ## Option parsing Options with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options. ```js #!/usr/bin/env node /** * Module dependencies. */ var program = require('commander'); program .version('0.0.1') .option('-p, --peppers', 'Add peppers') .option('-P, --pineapple', 'Add pineapple') .option('-b, --bbq-sauce', 'Add bbq sauce') .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble') .parse(process.argv); console.log('you ordered a pizza with:'); if (program.peppers) console.log(' - peppers'); if (program.pineapple) console.log(' - pineapple'); if (program.bbqSauce) console.log(' - bbq'); console.log(' - %s cheese', program.cheese); ``` Short flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. ## Coercion ```js function range(val) { return val.split('..').map(Number); } function list(val) { return val.split(','); } function collect(val, memo) { memo.push(val); return memo; } function increaseVerbosity(v, total) { return total + 1; } program .version('0.0.1') .usage('[options] ') .option('-i, --integer ', 'An integer argument', parseInt) .option('-f, --float ', 'A float argument', parseFloat) .option('-r, --range ..', 'A range', range) .option('-l, --list ', 'A list', list) .option('-o, --optional [value]', 'An optional value') .option('-c, --collect [value]', 'A repeatable value', collect, []) .option('-v, --verbose', 'A value that can be increased', increaseVerbosity, 0) .parse(process.argv); console.log(' int: %j', program.integer); console.log(' float: %j', program.float); console.log(' optional: %j', program.optional); program.range = program.range || []; console.log(' range: %j..%j', program.range[0], program.range[1]); console.log(' list: %j', program.list); console.log(' collect: %j', program.collect); console.log(' verbosity: %j', program.verbose); console.log(' args: %j', program.args); ``` ## Regular Expression ```js program .version('0.0.1') .option('-s --size ', 'Pizza size', /^(large|medium|small)$/i, 'medium') .option('-d --drink [drink]', 'Drink', /^(coke|pepsi|izze)$/i) .parse(process.argv); console.log(' size: %j', program.size); console.log(' drink: %j', program.drink); ``` ## Variadic arguments The last argument of a command can be variadic, and only the last argument. To make an argument variadic you have to append `...` to the argument name. Here is an example: ```js #!/usr/bin/env node /** * Module dependencies. */ var program = require('commander'); program .version('0.0.1') .command('rmdir [otherDirs...]') .action(function (dir, otherDirs) { console.log('rmdir %s', dir); if (otherDirs) { otherDirs.forEach(function (oDir) { console.log('rmdir %s', oDir); }); } }); program.parse(process.argv); ``` An `Array` is used for the value of a variadic argument. This applies to `program.args` as well as the argument passed to your action as demonstrated above. ## Specify the argument syntax ```js #!/usr/bin/env node var program = require('../'); program .version('0.0.1') .arguments(' [env]') .action(function (cmd, env) { cmdValue = cmd; envValue = env; }); program.parse(process.argv); if (typeof cmdValue === 'undefined') { console.error('no command given!'); process.exit(1); } console.log('command:', cmdValue); console.log('environment:', envValue || \"no environment given\"); ``` ## Git-style sub-commands ```js // file: ./examples/pm var program = require('..'); program .version('0.0.1') .command('install [name]', 'install one or more packages') .command('search [query]', 'search with optional query') .command('list', 'list packages installed', {isDefault: true}) .parse(process.argv); ``` When `.command()` is invoked with a description argument, no `.action(callback)` should be called to handle sub-commands, otherwise there will be an error. This tells commander that you're going to use separate executables for sub-commands, much like `git(1)` and other popular tools. The commander will try to search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-command`, like `pm-install`, `pm-search`. Options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the option from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified. If the program is designed to be installed globally, make sure the executables have proper modes, like `755`. ### `--harmony` You can enable `--harmony` option in two ways: * Use `#! /usr/bin/env node --harmony` in the sub-commands scripts. Note some os version don’t support this pattern. * Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning sub-command process. ## Automated --help The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free: ``` $ ./examples/pizza --help Usage: pizza [options] An application for pizzas ordering Options: -h, --help output usage information -V, --version output the version number -p, --peppers Add peppers -P, --pineapple Add pineapple -b, --bbq Add bbq sauce -c, --cheese Add the specified type of cheese [marble] -C, --no-cheese You do not want any cheese ``` ## Custom help You can display arbitrary `-h, --help` information by listening for \"--help\". Commander will automatically exit once you are done so that the remainder of your program does not execute causing undesired behaviours, for example in the following executable \"stuff\" will not output when `--help` is used. ```js #!/usr/bin/env node /** * Module dependencies. */ var program = require('commander'); program .version('0.0.1') .option('-f, --foo', 'enable some foo') .option('-b, --bar', 'enable some bar') .option('-B, --baz', 'enable some baz'); // must be before .parse() since // node's emit() is immediate program.on('--help', function(){ console.log(' Examples:'); console.log(''); console.log(' $ custom-help --help'); console.log(' $ custom-help -h'); console.log(''); }); program.parse(process.argv); console.log('stuff'); ``` Yields the following help output when `node script-name.js -h` or `node script-name.js --help` are run: ``` Usage: custom-help [options] Options: -h, --help output usage information -V, --version output the version number -f, --foo enable some foo -b, --bar enable some bar -B, --baz enable some baz Examples: $ custom-help --help $ custom-help -h ``` ## .outputHelp(cb) Output help information without exiting. Optional callback cb allows post-processing of help text before it is displayed. If you want to display help by default (e.g. if no command was provided), you can use something like: ```js var program = require('commander'); var colors = require('colors'); program .version('0.0.1') .command('getstream [url]', 'get stream URL') .parse(process.argv); if (!process.argv.slice(2).length) { program.outputHelp(make_red); } function make_red(txt) { return colors.red(txt); //display the help text in red on the console } ``` ## .help(cb) Output help information and exit immediately. Optional callback cb allows post-processing of help text before it is displayed. ## Examples ```js var program = require('commander'); program .version('0.0.1') .option('-C, --chdir ', 'change the working directory') .option('-c, --config ', 'set config path. defaults to ./deploy.conf') .option('-T, --no-tests', 'ignore test hook') program .command('setup [env]') .description('run setup commands for all envs') .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\") .action(function(env, options){ var mode = options.setup_mode || \"normal\"; env = env || 'all'; console.log('setup for %s env(s) with %s mode', env, mode); }); program .command('exec ') .alias('ex') .description('execute the given remote cmd') .option(\"-e, --exec_mode \", \"Which exec mode to use\") .action(function(cmd, options){ console.log('exec \"%s\" using %s mode', cmd, options.exec_mode); }).on('--help', function() { console.log(' Examples:'); console.log(); console.log(' $ deploy exec sequential'); console.log(' $ deploy exec async'); console.log(); }); program .command('*') .action(function(env){ console.log('deploying \"%s\"', env); }); program.parse(process.argv); ``` More Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/stream-throttle/node_modules/commander/node_modules/graceful-readlink/README.md","tags":[],"body":"# graceful-readlink [![NPM Version](http://img.shields.io/npm/v/graceful-readlink.svg?style=flat)](https://www.npmjs.org/package/graceful-readlink) [![NPM Downloads](https://img.shields.io/npm/dm/graceful-readlink.svg?style=flat)](https://www.npmjs.org/package/graceful-readlink) ## Usage ```js var readlinkSync = require('graceful-readlink').readlinkSync; console.log(readlinkSync(f)); // output // the file pointed to when `f` is a symbolic link // the `f` itself when `f` is not a symbolic link ``` ## Licence MIT License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/stream-throttle/node_modules/limiter/README.md","tags":[],"body":"# limiter # [![Build Status](https://travis-ci.org/jhurliman/node-rate-limiter.png)](https://travis-ci.org/jhurliman/node-rate-limiter) [![NPM Downloads](https://img.shields.io/npm/dm/rate-limiter.svg?style=flat)](https://www.npmjs.com/package/limiter) Provides a generic rate limiter for node.js. Useful for API clients, web crawling, or other tasks that need to be throttled. Two classes are exposed, RateLimiter and TokenBucket. TokenBucket provides a lower level interface to rate limiting with a configurable burst rate and drip rate. RateLimiter sits on top of the token bucket and adds a restriction on the maximum number of tokens that can be removed each interval to comply with common API restrictions like \"150 requests per hour maximum\". ## Installation ## Use NPM to install: npm install limiter ## Usage ## A simple example allowing 150 requests per hour: ```javascript var RateLimiter = require('limiter').RateLimiter; // Allow 150 requests per hour (the Twitter search limit). Also understands // 'second', 'minute', 'day', or a number of milliseconds var limiter = new RateLimiter(150, 'hour'); // Throttle requests limiter.removeTokens(1, function(err, remainingRequests) { // err will only be set if we request more than the maximum number of // requests we set in the constructor // remainingRequests tells us how many additional requests could be sent // right this moment callMyRequestSendingFunction(...); }); ``` Another example allowing one message to be sent every 250ms: ```javascript var RateLimiter = require('limiter').RateLimiter; var limiter = new RateLimiter(1, 250); limiter.removeTokens(1, function() { callMyMessageSendingFunction(...); }); ``` The default behaviour is to wait for the duration of the rate limiting that’s currently in effect before the callback is fired, but if you pass in ```true``` as the third parameter, the callback will be fired immediately with remainingRequests set to -1: ```javascript var RateLimiter = require('limiter').RateLimiter; var limiter = new RateLimiter(150, 'hour', true); // fire CB immediately // Immediately send 429 header to client when rate limiting is in effect limiter.removeTokens(1, function(err, remainingRequests) { if (remainingRequests Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/README.md","tags":[],"body":"weinre is WEb INspector REmote. Pronounced like the word \"winery\". Or maybe like the word \"weiner\". Who knows, really. weinre is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it's designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone. For more information on weinre: [http://people.apache.org/~pmuellr/weinre/](http://people.apache.org/~pmuellr/weinre/) running ------- For more information about running weinre, you can start the server and browse the documentation online. Start the server with the following command node weinre This will start the server, and display a message with the URL to the server. Browse to that URL in your web browser, and then click on 'documentation' link, which will display weinre's online documentation. From there click on the 'Running' page to get more information about running weinre. source ------ Follow the link for more information at the top of this file for instructions on obtaining source. If you're reading this file as part of the source distribution of weinre, you will need to run a 'build' before being able to run weinre. See the `README.md` file in the root directory of the weinre source distribution for more information."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/express/History.md","tags":[],"body":"2.5.11 / 2012-06-29 ================== * Fixed backport of req.protocol 2.5.10 / 2012-06-15 ================== * Remove annoying engines field from package.json * Backport support for trusting X-Forwarded-Proto * use version of `package.json` for `express` command 2.5.9/ 2012-04-02 ================== * Added support for PURGE request method [pbuyle] * Fixed `express(1)` generated app `app.address()` before `listening` [mmalecki] 2.5.8 / 2012-02-08 ================== * Update mkdirp dep. Closes #991 2.5.7 / 2012-02-06 ================== * Fixed `app.all` duplicate DELETE requests [mscdex] 2.5.6 / 2012-01-13 ================== * Updated hamljs dev dep. Closes #953 2.5.5 / 2012-01-08 ================== * Fixed: set `filename` on cached templates [matthewleon] 2.5.4 / 2012-01-02 ================== * Fixed `express(1)` eol on 0.4.x. Closes #947 2.5.3 / 2011-12-30 ================== * Fixed `req.is()` when a charset is present 2.5.2 / 2011-12-10 ================== * Fixed: express(1) LF -> CRLF for windows 2.5.1 / 2011-11-17 ================== * Changed: updated connect to 1.8.x * Removed sass.js support from express(1) 2.5.0 / 2011-10-24 ================== * Added ./routes dir for generated app by default * Added npm install reminder to express(1) app gen * Added 0.5.x support * Removed `make test-cov` since it wont work with node 0.5.x * Fixed express(1) public dir for windows. Closes #866 2.4.7 / 2011-10-05 ================== * Added mkdirp to express(1). Closes #795 * Added simple _json-config_ example * Added shorthand for the parsed request's pathname via `req.path` * Changed connect dep to 1.7.x to fix npm issue... * Fixed `res.redirect()` __HEAD__ support. [reported by xerox] * Fixed `req.flash()`, only escape args * Fixed absolute path checking on windows. Closes #829 [reported by andrewpmckenzie] 2.4.6 / 2011-08-22 ================== * Fixed multiple param callback regression. Closes #824 [reported by TroyGoode] 2.4.5 / 2011-08-19 ================== * Added support for routes to handle errors. Closes #809 * Added `app.routes.all()`. Closes #803 * Added \"basepath\" setting to work in conjunction with reverse proxies etc. * Refactored `Route` to use a single array of callbacks * Added support for multiple callbacks for `app.param()`. Closes #801 Closes #805 * Changed: removed .call(self) for route callbacks * Dependency: `qs >= 0.3.1` * Fixed `res.redirect()` on windows due to `join()` usage. Closes #808 2.4.4 / 2011-08-05 ================== * Fixed `res.header()` intention of a set, even when `undefined` * Fixed `*`, value no longer required * Fixed `res.send(204)` support. Closes #771 2.4.3 / 2011-07-14 ================== * Added docs for `status` option special-case. Closes #739 * Fixed `options.filename`, exposing the view path to template engines 2.4.2. / 2011-07-06 ================== * Revert \"removed jsonp stripping\" for XSS 2.4.1 / 2011-07-06 ================== * Added `res.json()` JSONP support. Closes #737 * Added _extending-templates_ example. Closes #730 * Added \"strict routing\" setting for trailing slashes * Added support for multiple envs in `app.configure()` calls. Closes #735 * Changed: `res.send()` using `res.json()` * Changed: when cookie `path === null` don't default it * Changed; default cookie path to \"home\" setting. Closes #731 * Removed _pids/logs_ creation from express(1) 2.4.0 / 2011-06-28 ================== * Added chainable `res.status(code)` * Added `res.json()`, an explicit version of `res.send(obj)` * Added simple web-service example 2.3.12 / 2011-06-22 ================== * \\#express is now on freenode! come join! * Added `req.get(field, param)` * Added links to Japanese documentation, thanks @hideyukisaito! * Added; the `express(1)` generated app outputs the env * Added `content-negotiation` example * Dependency: connect >= 1.5.1 = 1.4.0` * Changed; auto set Content-Type in res.attachement [Aaron Heckmann] * Renamed \"cache views\" to \"view cache\". Closes #628 * Fixed caching of views when using several apps. Closes #637 * Fixed gotcha invoking `app.param()` callbacks once per route middleware. Closes #638 * Fixed partial lookup precedence. Closes #631 Shaw] 2.2.2 / 2011-04-12 ================== * Added second callback support for `res.download()` connection errors * Fixed `filename` option passing to template engine 2.2.1 / 2011-04-04 ================== * Added `layout(path)` helper to change the layout within a view. Closes #610 * Fixed `partial()` collection object support. Previously only anything with `.length` would work. When `.length` is present one must still be aware of holes, however now `{ collection: {foo: 'bar'}}` is valid, exposes `keyInCollection` and `keysInCollection`. * Performance improved with better view caching * Removed `request` and `response` locals * Changed; errorHandler page title is now `Express` instead of `Connect` 2.2.0 / 2011-03-30 ================== * Added `app.lookup.VERB()`, ex `app.lookup.put('/user/:id')`. Closes #606 * Added `app.match.VERB()`, ex `app.match.put('/user/12')`. Closes #606 * Added `app.VERB(path)` as alias of `app.lookup.VERB()`. * Dependency `connect >= 1.2.0` 2.1.1 / 2011-03-29 ================== * Added; expose `err.view` object when failing to locate a view * Fixed `res.partial()` call `next(err)` when no callback is given [reported by aheckmann] * Fixed; `res.send(undefined)` responds with 204 [aheckmann] 2.1.0 / 2011-03-24 ================== * Added `/_?` partial lookup support. Closes #447 * Added `request`, `response`, and `app` local variables * Added `settings` local variable, containing the app's settings * Added `req.flash()` exception if `req.session` is not available * Added `res.send(bool)` support (json response) * Fixed stylus example for latest version * Fixed; wrap try/catch around `res.render()` 2.0.0 / 2011-03-17 ================== * Fixed up index view path alternative. * Changed; `res.locals()` without object returns the locals 2.0.0rc3 / 2011-03-17 ================== * Added `res.locals(obj)` to compliment `res.local(key, val)` * Added `res.partial()` callback support * Fixed recursive error reporting issue in `res.render()` 2.0.0rc2 / 2011-03-17 ================== * Changed; `partial()` \"locals\" are now optional * Fixed `SlowBuffer` support. Closes #584 [reported by tyrda01] * Fixed .filename view engine option [reported by drudge] * Fixed blog example * Fixed `{req,res}.app` reference when mounting [Ben Weaver] 2.0.0rc / 2011-03-14 ================== * Fixed; expose `HTTPSServer` constructor * Fixed express(1) default test charset. Closes #579 [reported by secoif] * Fixed; default charset to utf-8 instead of utf8 for lame IE [reported by NickP] 2.0.0beta3 / 2011-03-09 ================== * Added support for `res.contentType()` literal The original `res.contentType('.json')`, `res.contentType('application/json')`, and `res.contentType('json')` will work now. * Added `res.render()` status option support back * Added charset option for `res.render()` * Added `.charset` support (via connect 1.0.4) * Added view resolution hints when in development and a lookup fails * Added layout lookup support relative to the page view. For example while rendering `./views/user/index.jade` if you create `./views/user/layout.jade` it will be used in favour of the root layout. * Fixed `res.redirect()`. RFC states absolute url [reported by unlink] * Fixed; default `res.send()` string charset to utf8 * Removed `Partial` constructor (not currently used) 2.0.0beta2 / 2011-03-07 ================== * Added res.render() `.locals` support back to aid in migration process * Fixed flash example 2.0.0beta / 2011-03-03 ================== * Added HTTPS support * Added `res.cookie()` maxAge support * Added `req.header()` _Referrer_ / _Referer_ special-case, either works * Added mount support for `res.redirect()`, now respects the mount-point * Added `union()` util, taking place of `merge(clone())` combo * Added stylus support to express(1) generated app * Added secret to session middleware used in examples and generated app * Added `res.local(name, val)` for progressive view locals * Added default param support to `req.param(name, default)` * Added `app.disabled()` and `app.enabled()` * Added `app.register()` support for omitting leading \".\", either works * Added `res.partial()`, using the same interface as `partial()` within a view. Closes #539 * Added `app.param()` to map route params to async/sync logic * Added; aliased `app.helpers()` as `app.locals()`. Closes #481 * Added extname with no leading \".\" support to `res.contentType()` * Added `cache views` setting, defaulting to enabled in \"production\" env * Added index file partial resolution, eg: partial('user') may try _views/user/index.jade_. * Added `req.accepts()` support for extensions * Changed; `res.download()` and `res.sendfile()` now utilize Connect's static file server `connect.static.send()`. * Changed; replaced `connect.utils.mime()` with npm _mime_ module * Changed; allow `req.query` to be pre-defined (via middleware or other parent * Changed view partial resolution, now relative to parent view * Changed view engine signature. no longer `engine.render(str, options, callback)`, now `engine.compile(str, options) -> Function`, the returned function accepts `fn(locals)`. * Fixed `req.param()` bug returning Array.prototype methods. Closes #552 * Fixed; using `Stream#pipe()` instead of `sys.pump()` in `res.sendfile()` * Fixed; using _qs_ module instead of _querystring_ * Fixed; strip unsafe chars from jsonp callbacks * Removed \"stream threshold\" setting 1.0.8 / 2011-03-01 ================== * Allow `req.query` to be pre-defined (via middleware or other parent app) * \"connect\": \">= 0.5.0 = \"stream threshold\" * Added _stream threshold_ setting for `res.sendfile()` * Added `res.send()` __HEAD__ support * Added `res.clearCookie()` * Added `res.cookie()` * Added `res.render()` headers option * Added `res.redirect()` response bodies * Added `res.render()` status option support. Closes #425 [thanks aheckmann] * Fixed `res.sendfile()` responding with 403 on malicious path * Fixed `res.download()` bug; when an error occurs remove _Content-Disposition_ * Fixed; mounted apps settings now inherit from parent app [aheckmann] * Fixed; stripping Content-Length / Content-Type when 204 * Fixed `res.send()` 204. Closes #419 * Fixed multiple _Set-Cookie_ headers via `res.header()`. Closes #402 * Fixed bug messing with error handlers when `listenFD()` is called instead of `listen()`. [thanks guillermo] 1.0.0rc2 / 2010-08-17 ================== * Added `app.register()` for template engine mapping. Closes #390 * Added `res.render()` callback support as second argument (no options) * Added callback support to `res.download()` * Added callback support for `res.sendfile()` * Added support for middleware access via `express.middlewareName()` vs `connect.middlewareName()` * Added \"partials\" setting to docs * Added default expresso tests to `express(1)` generated app. Closes #384 * Fixed `res.sendfile()` error handling, defer via `next()` * Fixed `res.render()` callback when a layout is used [thanks guillermo] * Fixed; `make install` creating ~/.node_libraries when not present * Fixed issue preventing error handlers from being defined anywhere. Closes #387 1.0.0rc / 2010-07-28 ================== * Added mounted hook. Closes #369 * Added connect dependency to _package.json_ * Removed \"reload views\" setting and support code development env never caches, production always caches. * Removed _param_ in route callbacks, signature is now simply (req, res, next), previously (req, res, params, next). Use _req.params_ for path captures, _req.query_ for GET params. * Fixed \"home\" setting * Fixed middleware/router precedence issue. Closes #366 * Fixed; _configure()_ callbacks called immediately. Closes #368 1.0.0beta2 / 2010-07-23 ================== * Added more examples * Added; exporting `Server` constructor * Added `Server#helpers()` for view locals * Added `Server#dynamicHelpers()` for dynamic view locals. Closes #349 * Added support for absolute view paths * Added; _home_ setting defaults to `Server#route` for mounted apps. Closes #363 * Added Guillermo Rauch to the contributor list * Added support for \"as\" for non-collection partials. Closes #341 * Fixed _install.sh_, ensuring _~/.node_libraries_ exists. Closes #362 [thanks jf] * Fixed `res.render()` exceptions, now passed to `next()` when no callback is given [thanks guillermo] * Fixed instanceof `Array` checks, now `Array.isArray()` * Fixed express(1) expansion of public dirs. Closes #348 * Fixed middleware precedence. Closes #345 * Fixed view watcher, now async [thanks aheckmann] 1.0.0beta / 2010-07-15 ================== * Re-write - much faster - much lighter - Check [ExpressJS.com](http://expressjs.com) for migration guide and updated docs 0.14.0 / 2010-06-15 ================== * Utilize relative requires * Added Static bufferSize option [aheckmann] * Fixed caching of view and partial subdirectories [aheckmann] * Fixed mime.type() comments now that \".ext\" is not supported * Updated haml submodule * Updated class submodule * Removed bin/express 0.13.0 / 2010-06-01 ================== * Added node v0.1.97 compatibility * Added support for deleting cookies via Request#cookie('key', null) * Updated haml submodule * Fixed not-found page, now using using charset utf-8 * Fixed show-exceptions page, now using using charset utf-8 * Fixed view support due to fs.readFile Buffers * Changed; mime.type() no longer accepts \".type\" due to node extname() changes 0.12.0 / 2010-05-22 ================== * Added node v0.1.96 compatibility * Added view `helpers` export which act as additional local variables * Updated haml submodule * Changed ETag; removed inode, modified time only * Fixed LF to CRLF for setting multiple cookies * Fixed cookie complation; values are now urlencoded * Fixed cookies parsing; accepts quoted values and url escaped cookies 0.11.0 / 2010-05-06 ================== * Added support for layouts using different engines - this.render('page.html.haml', { layout: 'super-cool-layout.html.ejs' }) - this.render('page.html.haml', { layout: 'foo' }) // assumes 'foo.html.haml' - this.render('page.html.haml', { layout: false }) // no layout * Updated ext submodule * Updated haml submodule * Fixed EJS partial support by passing along the context. Issue #307 0.10.1 / 2010-05-03 ================== * Fixed binary uploads. 0.10.0 / 2010-04-30 ================== * Added charset support via Request#charset (automatically assigned to 'UTF-8' when respond()'s encoding is set to 'utf8' or 'utf-8'. * Added \"encoding\" option to Request#render(). Closes #299 * Added \"dump exceptions\" setting, which is enabled by default. * Added simple ejs template engine support * Added error reponse support for text/plain, application/json. Closes #297 * Added callback function param to Request#error() * Added Request#sendHead() * Added Request#stream() * Added support for Request#respond(304, null) for empty response bodies * Added ETag support to Request#sendfile() * Added options to Request#sendfile(), passed to fs.createReadStream() * Added filename arg to Request#download() * Performance enhanced due to pre-reversing plugins so that plugins.reverse() is not called on each request * Performance enhanced by preventing several calls to toLowerCase() in Router#match() * Changed; Request#sendfile() now streams * Changed; Renamed Request#halt() to Request#respond(). Closes #289 * Changed; Using sys.inspect() instead of JSON.encode() for error output * Changed; run() returns the http.Server instance. Closes #298 * Changed; Defaulting Server#host to null (INADDR_ANY) * Changed; Logger \"common\" format scale of 0.4f * Removed Logger \"request\" format * Fixed; Catching ENOENT in view caching, preventing error when \"views/partials\" is not found * Fixed several issues with http client * Fixed Logger Content-Length output * Fixed bug preventing Opera from retaining the generated session id. Closes #292 0.9.0 / 2010-04-14 ================== * Added DSL level error() route support * Added DSL level notFound() route support * Added Request#error() * Added Request#notFound() * Added Request#render() callback function. Closes #258 * Added \"max upload size\" setting * Added \"magic\" variables to collection partials (\\_\\_index\\_\\_, \\_\\_length\\_\\_, \\_\\_isFirst\\_\\_, \\_\\_isLast\\_\\_). Closes #254 * Added [haml.js](http://github.com/visionmedia/haml.js) submodule; removed haml-js * Added callback function support to Request#halt() as 3rd/4th arg * Added preprocessing of route param wildcards using param(). Closes #251 * Added view partial support (with collections etc) * Fixed bug preventing falsey params (such as ?page=0). Closes #286 * Fixed setting of multiple cookies. Closes #199 * Changed; view naming convention is now NAME.TYPE.ENGINE (for example page.html.haml) * Changed; session cookie is now httpOnly * Changed; Request is no longer global * Changed; Event is no longer global * Changed; \"sys\" module is no longer global * Changed; moved Request#download to Static plugin where it belongs * Changed; Request instance created before body parsing. Closes #262 * Changed; Pre-caching views in memory when \"cache view contents\" is enabled. Closes #253 * Changed; Pre-caching view partials in memory when \"cache view partials\" is enabled * Updated support to node --version 0.1.90 * Updated dependencies * Removed set(\"session cookie\") in favour of use(Session, { cookie: { ... }}) * Removed utils.mixin(); use Object#mergeDeep() 0.8.0 / 2010-03-19 ================== * Added coffeescript example app. Closes #242 * Changed; cache api now async friendly. Closes #240 * Removed deprecated 'express/static' support. Use 'express/plugins/static' 0.7.6 / 2010-03-19 ================== * Added Request#isXHR. Closes #229 * Added `make install` (for the executable) * Added `express` executable for setting up simple app templates * Added \"GET /public/*\" to Static plugin, defaulting to /public * Added Static plugin * Fixed; Request#render() only calls cache.get() once * Fixed; Namespacing View caches with \"view:\" * Fixed; Namespacing Static caches with \"static:\" * Fixed; Both example apps now use the Static plugin * Fixed set(\"views\"). Closes #239 * Fixed missing space for combined log format * Deprecated Request#sendfile() and 'express/static' * Removed Server#running 0.7.5 / 2010-03-16 ================== * Added Request#flash() support without args, now returns all flashes * Updated ext submodule 0.7.4 / 2010-03-16 ================== * Fixed session reaper * Changed; class.js replacing js-oo Class implementation (quite a bit faster, no browser cruft) 0.7.3 / 2010-03-16 ================== * Added package.json * Fixed requiring of haml / sass due to kiwi removal 0.7.2 / 2010-03-16 ================== * Fixed GIT submodules (HAH!) 0.7.1 / 2010-03-16 ================== * Changed; Express now using submodules again until a PM is adopted * Changed; chat example using millisecond conversions from ext 0.7.0 / 2010-03-15 ================== * Added Request#pass() support (finds the next matching route, or the given path) * Added Logger plugin (default \"common\" format replaces CommonLogger) * Removed Profiler plugin * Removed CommonLogger plugin 0.6.0 / 2010-03-11 ================== * Added seed.yml for kiwi package management support * Added HTTP client query string support when method is GET. Closes #205 * Added support for arbitrary view engines. For example \"foo.engine.html\" will now require('engine'), the exports from this module are cached after the first require(). * Added async plugin support * Removed usage of RESTful route funcs as http client get() etc, use http.get() and friends * Removed custom exceptions 0.5.0 / 2010-03-10 ================== * Added ext dependency (library of js extensions) * Removed extname() / basename() utils. Use path module * Removed toArray() util. Use arguments.values * Removed escapeRegexp() util. Use RegExp.escape() * Removed process.mixin() dependency. Use utils.mixin() * Removed Collection * Removed ElementCollection * Shameless self promotion of ebook \"Advanced JavaScript\" (http://dev-mag.com) ;) 0.4.0 / 2010-02-11 ================== * Added flash() example to sample upload app * Added high level restful http client module (express/http) * Changed; RESTful route functions double as HTTP clients. Closes #69 * Changed; throwing error when routes are added at runtime * Changed; defaulting render() context to the current Request. Closes #197 * Updated haml submodule 0.3.0 / 2010-02-11 ================== * Updated haml / sass submodules. Closes #200 * Added flash message support. Closes #64 * Added accepts() now allows multiple args. fixes #117 * Added support for plugins to halt. Closes #189 * Added alternate layout support. Closes #119 * Removed Route#run(). Closes #188 * Fixed broken specs due to use(Cookie) missing 0.2.1 / 2010-02-05 ================== * Added \"plot\" format option for Profiler (for gnuplot processing) * Added request number to Profiler plugin * Fixed binary encoding for multi-part file uploads, was previously defaulting to UTF8 * Fixed issue with routes not firing when not files are present. Closes #184 * Fixed process.Promise -> events.Promise 0.2.0 / 2010-02-03 ================== * Added parseParam() support for name[] etc. (allows for file inputs with \"multiple\" attr) Closes #180 * Added Both Cache and Session option \"reapInterval\" may be \"reapEvery\". Closes #174 * Added expiration support to cache api with reaper. Closes #133 * Added cache Store.Memory#reap() * Added Cache; cache api now uses first class Cache instances * Added abstract session Store. Closes #172 * Changed; cache Memory.Store#get() utilizing Collection * Renamed MemoryStore -> Store.Memory * Fixed use() of the same plugin several time will always use latest options. Closes #176 0.1.0 / 2010-02-03 ================== * Changed; Hooks (before / after) pass request as arg as well as evaluated in their context * Updated node support to 0.1.27 Closes #169 * Updated dirname(__filename) -> __dirname * Updated libxmljs support to v0.2.0 * Added session support with memory store / reaping * Added quick uid() helper * Added multi-part upload support * Added Sass.js support / submodule * Added production env caching view contents and static files * Added static file caching. Closes #136 * Added cache plugin with memory stores * Added support to StaticFile so that it works with non-textual files. * Removed dirname() helper * Removed several globals (now their modules must be required) 0.0.2 / 2010-01-10 ================== * Added view benchmarks; currently haml vs ejs * Added Request#attachment() specs. Closes #116 * Added use of node's parseQuery() util. Closes #123 * Added `make init` for submodules * Updated Haml * Updated sample chat app to show messages on load * Updated libxmljs parseString -> parseHtmlString * Fixed `make init` to work with older versions of git * Fixed specs can now run independant specs for those who cant build deps. Closes #127 * Fixed issues introduced by the node url module changes. Closes 126. * Fixed two assertions failing due to Collection#keys() returning strings * Fixed faulty Collection#toArray() spec due to keys() returning strings * Fixed `make test` now builds libxmljs.node before testing 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/express/Readme.md","tags":[],"body":"# Express Insanely fast (and small) server-side JavaScript web development framework built on [node](http://nodejs.org) and [Connect](http://github.com/senchalabs/connect). var app = express.createServer(); app.get('/', function(req, res){ res.send('Hello World'); }); app.listen(3000); ## Installation $ npm install express or to access the `express(1)` executable install globally: $ npm install -g express ## Quick Start The quickest way to get started with express is to utilize the executable `express(1)` to generate an application as shown below: Create the app: $ npm install -g express $ express /tmp/foo && cd /tmp/foo Install dependencies: $ npm install -d Start the server: $ node app.js ## Features * Robust routing * Redirection helpers * Dynamic view helpers * Content negotiation * Focus on high performance * View rendering and partials support * Environment based configuration * Session based flash notifications * Built on [Connect](http://github.com/senchalabs/connect) * High test coverage * Executable for generating applications quickly * Application level view options Via Connect: * Session support * Cache API * Mime helpers * ETag support * Persistent flash notifications * Cookie support * JSON-RPC * Logging * and _much_ more! ## Contributors The following are the major contributors of Express (in no specific order). * TJ Holowaychuk ([visionmedia](http://github.com/visionmedia)) * Ciaran Jessup ([ciaranj](http://github.com/ciaranj)) * Aaron Heckmann ([aheckmann](http://github.com/aheckmann)) * Guillermo Rauch ([guille](http://github.com/guille)) ## More Information * #express on freenode * [express-expose](http://github.com/visionmedia/express-expose) expose objects, functions, modules and more to client-side js with ease * [express-configure](http://github.com/visionmedia/express-configuration) async configuration support * [express-messages](http://github.com/visionmedia/express-messages) flash notification rendering helper * [express-namespace](http://github.com/visionmedia/express-namespace) namespaced route support * [express-params](https://github.com/visionmedia/express-params) param pre-condition functions * [express-mongoose](https://github.com/LearnBoost/express-mongoose) plugin for easy rendering of Mongoose async Query results * Follow [tjholowaychuk](http://twitter.com/tjholowaychuk) on twitter for updates * [Google Group](http://groups.google.com/group/express-js) for discussion * Visit the [Wiki](http://github.com/visionmedia/express/wiki) * [日本語ドキュメンテーション](http://hideyukisaito.com/doc/expressjs/) by [hideyukisaito](https://github.com/hideyukisaito) * Screencast - [Introduction](http://bit.ly/eRYu0O) * Screencast - [View Partials](http://bit.ly/dU13Fx) * Screencast - [Route Specific Middleware](http://bit.ly/hX4IaH) * Screencast - [Route Path Placeholder Preconditions](http://bit.ly/eNqmVs) ## Node Compatibility Express 1.x is compatible with node 0.2.x and connect Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/express/node_modules/connect/lib/public/directory.html","tags":[],"body":"listing directory {directory} {linked-path} {files}"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/express/node_modules/connect/lib/public/error.html","tags":[],"body":"{error} {title} 500 {error} {stack}"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/express/node_modules/connect/node_modules/formidable/Readme.md","tags":[],"body":"# Formidable [![Build Status](https://secure.travis-ci.org/felixge/node-formidable.png?branch=master)](http://travis-ci.org/felixge/node-formidable) ## Purpose A node.js module for parsing form data, especially file uploads. ## Current status This module was developed for [Transloadit](http://transloadit.com/), a service focused on uploading and encoding images and videos. It has been battle-tested against hundreds of GB of file uploads from a large variety of clients and is considered production-ready. ## Features * Fast (~500mb/sec), non-buffering multipart parser * Automatically writing file uploads to disk * Low memory footprint * Graceful error handling * Very high test coverage ## Installation This is a low level package, and if you're using a high level framework such as Express, chances are it's already included in it. You can [read this discussion](http://stackoverflow.com/questions/11295554/how-to-disable-express-bodyparser-for-file-uploads-node-js) about how Formidable is integrated with Express. Via [npm](http://github.com/isaacs/npm): ``` npm install formidable@latest ``` Manually: ``` git clone git://github.com/felixge/node-formidable.git formidable vim my.js # var formidable = require('./formidable'); ``` Note: Formidable requires [gently](http://github.com/felixge/node-gently) to run the unit tests, but you won't need it for just using the library. ## Example Parse an incoming file upload. ```javascript var formidable = require('formidable'), http = require('http'), util = require('util'); http.createServer(function(req, res) { if (req.url == '/upload' && req.method.toLowerCase() == 'post') { // parse a file upload var form = new formidable.IncomingForm(); form.parse(req, function(err, fields, files) { res.writeHead(200, {'content-type': 'text/plain'}); res.write('received upload:\\n\\n'); res.end(util.inspect({fields: fields, files: files})); }); return; } // show a file upload form res.writeHead(200, {'content-type': 'text/html'}); res.end( ''+ ''+ ''+ ''+ '' ); }).listen(8080); ``` ## API ### Formidable.IncomingForm ```javascript var form = new formidable.IncomingForm() ``` Creates a new incoming form. ```javascript form.encoding = 'utf-8'; ``` Sets encoding for incoming form fields. ```javascript form.uploadDir = \"/my/dir\"; ``` Sets the directory for placing file uploads in. You can move them later on using `fs.rename()`. The default is `os.tmpDir()`. ```javascript form.keepExtensions = false; ``` If you want the files written to `form.uploadDir` to include the extensions of the original files, set this property to `true`. ```javascript form.type ``` Either 'multipart' or 'urlencoded' depending on the incoming request. ```javascript form.maxFieldsSize = 2 * 1024 * 1024; ``` Limits the amount of memory all fields together (except files) can allocate in bytes. If this value is exceeded, an `'error'` event is emitted. The default size is 2MB. ```javascript form.maxFields = 1000; ``` Limits the number of fields that the querystring parser will decode. Defaults to 1000 (0 for unlimited). ```javascript form.hash = false; ``` If you want checksums calculated for incoming files, set this to either `'sha1'` or `'md5'`. ```javascript form.multiples = false; ``` If this option is enabled, when you call `form.parse`, the `files` argument will contain arrays of files for inputs which submit multiple files using the HTML5 `multiple` attribute. ```javascript form.bytesReceived ``` The amount of bytes received for this form so far. ```javascript form.bytesExpected ``` The expected number of bytes in this form. ```javascript form.parse(request, [cb]); ``` Parses an incoming node.js `request` containing form data. If `cb` is provided, all fields and files are collected and passed to the callback: ```javascript form.parse(req, function(err, fields, files) { // ... }); form.onPart(part); ``` You may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events processing which would occur otherwise, making you fully responsible for handling the processing. ```javascript form.onPart = function(part) { part.addListener('data', function() { // ... }); } ``` If you want to use formidable to only handle certain parts for you, you can do so: ```javascript form.onPart = function(part) { if (!part.filename) { // let formidable handle all non-file parts form.handlePart(part); } } ``` Check the code in this method for further inspiration. ### Formidable.File ```javascript file.size = 0 ``` The size of the uploaded file in bytes. If the file is still being uploaded (see `'fileBegin'` event), this property says how many bytes of the file have been written to disk yet. ```javascript file.path = null ``` The path this file is being written to. You can modify this in the `'fileBegin'` event in case you are unhappy with the way formidable generates a temporary path for your files. ```javascript file.name = null ``` The name this file had according to the uploading client. ```javascript file.type = null ``` The mime type of this file, according to the uploading client. ```javascript file.lastModifiedDate = null ``` A date object (or `null`) containing the time this file was last written to. Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/). ```javascript file.hash = null ``` If hash calculation was set, you can read the hex digest out of this var. #### Formidable.File#toJSON() This method returns a JSON-representation of the file, allowing you to `JSON.stringify()` the file which is useful for logging and responding to requests. ### Events #### 'progress' ```javascript form.on('progress', function(bytesReceived, bytesExpected) { }); ``` Emitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar. #### 'field' ```javascript form.on('field', function(name, value) { }); ``` #### 'fileBegin' Emitted whenever a field / value pair has been received. ```javascript form.on('fileBegin', function(name, file) { }); ``` #### 'file' Emitted whenever a new file is detected in the upload stream. Use this even if you want to stream the file to somewhere else while buffering the upload on the file system. Emitted whenever a field / file pair has been received. `file` is an instance of `File`. ```javascript form.on('file', function(name, file) { }); ``` #### 'error' Emitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events. ```javascript form.on('error', function(err) { }); ``` #### 'aborted' Emitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. After this event is emitted, an `error` event will follow. In the future there will be a separate 'timeout' event (needs a change in the node core). ```javascript form.on('aborted', function() { }); ``` ##### 'end' ```javascript form.on('end', function() { }); ``` Emitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response. ## Changelog ### v1.0.14 * Add failing hash tests. (Ben Trask) * Enable hash calculation again (Eugene Girshov) * Test for immediate data events (Tim Smart) * Re-arrange IncomingForm#parse (Tim Smart) ### v1.0.13 * Only update hash if update method exists (Sven Lito) * According to travis v0.10 needs to go quoted (Sven Lito) * Bumping build node versions (Sven Lito) * Additional fix for empty requests (Eugene Girshov) * Change the default to 1000, to match the new Node behaviour. (OrangeDog) * Add ability to control maxKeys in the querystring parser. (OrangeDog) * Adjust test case to work with node 0.9.x (Eugene Girshov) * Update package.json (Sven Lito) * Path adjustment according to eb4468b (Markus Ast) ### v1.0.12 * Emit error on aborted connections (Eugene Girshov) * Add support for empty requests (Eugene Girshov) * Fix name/filename handling in Content-Disposition (jesperp) * Tolerate malformed closing boundary in multipart (Eugene Girshov) * Ignore preamble in multipart messages (Eugene Girshov) * Add support for application/json (Mike Frey, Carlos Rodriguez) * Add support for Base64 encoding (Elmer Bulthuis) * Add File#toJSON (TJ Holowaychuk) * Remove support for Node.js 0.4 & 0.6 (Andrew Kelley) * Documentation improvements (Sven Lito, Andre Azevedo) * Add support for application/octet-stream (Ion Lupascu, Chris Scribner) * Use os.tmpDir() to get tmp directory (Andrew Kelley) * Improve package.json (Andrew Kelley, Sven Lito) * Fix benchmark script (Andrew Kelley) * Fix scope issue in incoming_forms (Sven Lito) * Fix file handle leak on error (OrangeDog) ### v1.0.11 * Calculate checksums for incoming files (sreuter) * Add definition parameters to \"IncomingForm\" as an argument (Math-) ### v1.0.10 * Make parts to be proper Streams (Matt Robenolt) ### v1.0.9 * Emit progress when content length header parsed (Tim Koschützki) * Fix Readme syntax due to GitHub changes (goob) * Replace references to old 'sys' module in Readme with 'util' (Peter Sugihara) ### v1.0.8 * Strip potentially unsafe characters when using `keepExtensions: true`. * Switch to utest / urun for testing * Add travis build ### v1.0.7 * Remove file from package that was causing problems when installing on windows. (#102) * Fix typos in Readme (Jason Davies). ### v1.0.6 * Do not default to the default to the field name for file uploads where filename=\"\". ### v1.0.5 * Support filename=\"\" in multipart parts * Explain unexpected end() errors in parser better **Note:** Starting with this version, formidable emits 'file' events for empty file input fields. Previously those were incorrectly emitted as regular file input fields with value = \"\". ### v1.0.4 * Detect a good default tmp directory regardless of platform. (#88) ### v1.0.3 * Fix problems with utf8 characters (#84) / semicolons in filenames (#58) * Small performance improvements * New test suite and fixture system ### v1.0.2 * Exclude node\\_modules folder from git * Implement new `'aborted'` event * Fix files in example folder to work with recent node versions * Make gently a devDependency [See Commits](https://github.com/felixge/node-formidable/compare/v1.0.1...v1.0.2) ### v1.0.1 * Fix package.json to refer to proper main directory. (#68, Dean Landolt) [See Commits](https://github.com/felixge/node-formidable/compare/v1.0.0...v1.0.1) ### v1.0.0 * Add support for multipart boundaries that are quoted strings. (Jeff Craig) This marks the beginning of development on version 2.0 which will include several architectural improvements. [See Commits](https://github.com/felixge/node-formidable/compare/v0.9.11...v1.0.0) ### v0.9.11 * Emit `'progress'` event when receiving data, regardless of parsing it. (Tim Koschützki) * Use [W3C FileAPI Draft](http://dev.w3.org/2006/webapi/FileAPI/) properties for File class **Important:** The old property names of the File class will be removed in a future release. [See Commits](https://github.com/felixge/node-formidable/compare/v0.9.10...v0.9.11) ### Older releases These releases were done before starting to maintain the above Changelog: * [v0.9.10](https://github.com/felixge/node-formidable/compare/v0.9.9...v0.9.10) * [v0.9.9](https://github.com/felixge/node-formidable/compare/v0.9.8...v0.9.9) * [v0.9.8](https://github.com/felixge/node-formidable/compare/v0.9.7...v0.9.8) * [v0.9.7](https://github.com/felixge/node-formidable/compare/v0.9.6...v0.9.7) * [v0.9.6](https://github.com/felixge/node-formidable/compare/v0.9.5...v0.9.6) * [v0.9.5](https://github.com/felixge/node-formidable/compare/v0.9.4...v0.9.5) * [v0.9.4](https://github.com/felixge/node-formidable/compare/v0.9.3...v0.9.4) * [v0.9.3](https://github.com/felixge/node-formidable/compare/v0.9.2...v0.9.3) * [v0.9.2](https://github.com/felixge/node-formidable/compare/v0.9.1...v0.9.2) * [v0.9.1](https://github.com/felixge/node-formidable/compare/v0.9.0...v0.9.1) * [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0) * [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0) * [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0) * [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0) * [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0) * [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0) * [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0) * [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0) * [v0.1.0](https://github.com/felixge/node-formidable/commits/v0.1.0) ## License Formidable is licensed under the MIT license. ## Ports * [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable ## Credits * [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired multipart_parser.js"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/express/node_modules/mime/README.md","tags":[],"body":"# mime Support for mapping between file extensions and MIME types. This module uses the latest version of the Apache \"mime.types\" file (maps over 620 types to 800+ extensions). It is also trivially easy to add your own types and extensions, should you need to do that. ## Install Install with [npm](http://github.com/isaacs/npm): npm install mime ## API - Queries ### mime.lookup(path) Get the mime type associated with a file. This is method is case-insensitive. Everything in path up to and including the last '/' or '.' is ignored, so you can pass it paths, filenames, or extensions, like so: var mime = require('mime'); mime.lookup('/path/to/file.txt'); // => 'text/plain' mime.lookup('file.txt'); // => 'text/plain' mime.lookup('.txt'); // => 'text/plain' mime.lookup('htm'); // => 'text/html' ### mime.extension(type) - lookup the default extension for type mime.extension('text/html'); // => 'html' mime.extension('application/octet-stream'); // => 'bin' ### mime.charsets.lookup() - map mime-type to charset mime.charsets.lookup('text/plain'); // => 'UTF-8' (The logic for charset lookups is pretty rudimentary. Feel free to suggest improvements.) ## API - Customizing The following APIs allow you to add your own type mappings within your project. If you feel a type should be included as part of node-mime, see [requesting new types](https://github.com/bentomas/node-mime/wiki/Requesting-New-Types). ### mime.define() - Add custom mime/extension mappings mime.define({ 'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'], 'application/x-my-type': ['x-mt', 'x-mtt'], // etc ... }); mime.lookup('x-sft'); // => 'text/x-some-format' mime.extension('text/x-some-format'); // => 'x-sf' ### mime.load(filepath) - Load mappings from an Apache \".types\" format file mime.load('./my_project.types');"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/express/node_modules/mkdirp/README.markdown","tags":[],"body":"mkdirp ====== Like `mkdir -p`, but in node.js! example ======= pow.js ------ var mkdirp = require('mkdirp'); mkdirp('/tmp/foo/bar/baz', function (err) { if (err) console.error(err) else console.log('pow!') }); Output pow! And now /tmp/foo/bar/baz exists, huzzah! methods ======= var mkdirp = require('mkdirp'); mkdirp(dir, mode, cb) --------------------- Create a new directory and any necessary subdirectories at `dir` with octal permission string `mode`. If `mode` isn't specified, it defaults to `0777 & (~process.umask())`. mkdirp.sync(dir, mode) ---------------------- Synchronously create a new directory and any necessary subdirectories at `dir` with octal permission string `mode`. If `mode` isn't specified, it defaults to `0777 & (~process.umask())`. install ======= With [npm](http://npmjs.org) do: npm install mkdirp license ======= MIT/X11"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/express/node_modules/qs/History.md","tags":[],"body":"0.4.2 / 2012-02-08 ================== * Fixed: ensure objects are created when appropriate not arrays [aheckmann] 0.4.1 / 2012-01-26 ================== * Fixed stringify()ing numbers. Closes #23 0.4.0 / 2011-11-21 ================== * Allow parsing of an existing object (for `bodyParser()`) [jackyz] * Replaced expresso with mocha 0.3.2 / 2011-11-08 ================== * Fixed global variable leak 0.3.1 / 2011-08-17 ================== * Added `try/catch` around malformed uri components * Add test coverage for Array native method bleed-though 0.3.0 / 2011-07-19 ================== * Allow `array[index]` and `object[property]` syntaxes [Aria Stewart] 0.2.0 / 2011-06-29 ================== * Added `qs.stringify()` [Cory Forsyth] 0.1.0 / 2011-04-13 ================== * Added jQuery-ish array support 0.0.7 / 2011-03-13 ================== * Fixed; handle empty string and `== null` in `qs.parse()` [dmit] allows for convenient `qs.parse(url.parse(str).query)` 0.0.6 / 2011-02-14 ================== * Fixed; support for implicit arrays 0.0.4 / 2011-02-09 ================== * Fixed `+` as a space 0.0.3 / 2011-02-08 ================== * Fixed case when right-hand value contains \"]\" 0.0.2 / 2011-02-07 ================== * Fixed \"=\" presence in key 0.0.1 / 2011-02-07 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/express/node_modules/qs/Readme.md","tags":[],"body":"# node-querystring query string parser for node supporting nesting, as it was removed from `0.3.x`, so this library provides the previous and commonly desired behaviour (and twice as fast). Used by [express](http://expressjs.com), [connect](http://senchalabs.github.com/connect) and others. ## Installation $ npm install qs ## Examples ```js var qs = require('qs'); qs.parse('user[name][first]=Tobi&user[email]=tobi@learnboost.com'); // => { user: { name: { first: 'Tobi' }, email: 'tobi@learnboost.com' } } qs.stringify({ user: { name: 'Tobi', email: 'tobi@learnboost.com' }}) // => user[name]=Tobi&user[email]=tobi%40learnboost.com ``` ## Testing Install dev dependencies: $ npm install -d and execute: $ make test ## License (The MIT License) Copyright (c) 2010 TJ Holowaychuk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/nopt/README.md","tags":[],"body":"If you want to write an option parser, and have it be good, there are two ways to do it. The Right Way, and the Wrong Way. The Wrong Way is to sit down and write an option parser. We've all done that. The Right Way is to write some complex configurable program with so many options that you hit the limit of your frustration just trying to manage them all, and defer it with duct-tape solutions until you see exactly to the core of the problem, and finally snap and write an awesome option parser. If you want to write an option parser, don't write an option parser. Write a package manager, or a source control system, or a service restarter, or an operating system. You probably won't end up with a good one of those, but if you don't give up, and you are relentless and diligent enough in your procrastination, you may just end up with a very nice option parser. ## USAGE // my-program.js var nopt = require(\"nopt\") , Stream = require(\"stream\").Stream , path = require(\"path\") , knownOpts = { \"foo\" : [String, null] , \"bar\" : [Stream, Number] , \"baz\" : path , \"bloo\" : [ \"big\", \"medium\", \"small\" ] , \"flag\" : Boolean , \"pick\" : Boolean , \"many1\" : [String, Array] , \"many2\" : [path] } , shortHands = { \"foofoo\" : [\"--foo\", \"Mr. Foo\"] , \"b7\" : [\"--bar\", \"7\"] , \"m\" : [\"--bloo\", \"medium\"] , \"p\" : [\"--pick\"] , \"f\" : [\"--flag\"] } // everything is optional. // knownOpts and shorthands default to {} // arg list defaults to process.argv // slice defaults to 2 , parsed = nopt(knownOpts, shortHands, process.argv, 2) console.log(parsed) This would give you support for any of the following: ```bash $ node my-program.js --foo \"blerp\" --no-flag { \"foo\" : \"blerp\", \"flag\" : false } $ node my-program.js ---bar 7 --foo \"Mr. Hand\" --flag { bar: 7, foo: \"Mr. Hand\", flag: true } $ node my-program.js --foo \"blerp\" -f -----p { foo: \"blerp\", flag: true, pick: true } $ node my-program.js -fp --foofoo { foo: \"Mr. Foo\", flag: true, pick: true } $ node my-program.js --foofoo -- -fp # -- stops the flag parsing. { foo: \"Mr. Foo\", argv: { remain: [\"-fp\"] } } $ node my-program.js --blatzk -fp # unknown opts are ok. { blatzk: true, flag: true, pick: true } $ node my-program.js --blatzk=1000 -fp # but you need to use = if they have a value { blatzk: 1000, flag: true, pick: true } $ node my-program.js --no-blatzk -fp # unless they start with \"no-\" { blatzk: false, flag: true, pick: true } $ node my-program.js --baz b/a/z # known paths are resolved. { baz: \"/Users/isaacs/b/a/z\" } # if Array is one of the types, then it can take many # values, and will always be an array. The other types provided # specify what types are allowed in the list. $ node my-program.js --many1 5 --many1 null --many1 foo { many1: [\"5\", \"null\", \"foo\"] } $ node my-program.js --many2 foo --many2 bar { many2: [\"/path/to/foo\", \"path/to/bar\"] } ``` Read the tests at the bottom of `lib/nopt.js` for more examples of what this puppy can do. ## Types The following types are supported, and defined on `nopt.typeDefs` * String: A normal string. No parsing is done. * path: A file system path. Gets resolved against cwd if not absolute. * url: A url. If it doesn't parse, it isn't accepted. * Number: Must be numeric. * Date: Must parse as a date. If it does, and `Date` is one of the options, then it will return a Date object, not a string. * Boolean: Must be either `true` or `false`. If an option is a boolean, then it does not need a value, and its presence will imply `true` as the value. To negate boolean flags, do `--no-whatever` or `--whatever false` * NaN: Means that the option is strictly not allowed. Any value will fail. * Stream: An object matching the \"Stream\" class in node. Valuable for use when validating programmatically. (npm uses this to let you supply any WriteStream on the `outfd` and `logfd` config options.) * Array: If `Array` is specified as one of the types, then the value will be parsed as a list of options. This means that multiple values can be specified, and that the value will always be an array. If a type is an array of values not on this list, then those are considered valid values. For instance, in the example above, the `--bloo` option can only be one of `\"big\"`, `\"medium\"`, or `\"small\"`, and any other value will be rejected. When parsing unknown fields, `\"true\"`, `\"false\"`, and `\"null\"` will be interpreted as their JavaScript equivalents. You can also mix types and values, or multiple types, in a list. For instance `{ blah: [Number, null] }` would allow a value to be set to either a Number or null. When types are ordered, this implies a preference, and the first type that can be used to properly interpret the value will be used. To define a new type, add it to `nopt.typeDefs`. Each item in that hash is an object with a `type` member and a `validate` method. The `type` member is an object that matches what goes in the type list. The `validate` method is a function that gets called with `validate(data, key, val)`. Validate methods should assign `data[key]` to the valid value of `val` if it can be handled properly, or return boolean `false` if it cannot. You can also call `nopt.clean(data, types, typeDefs)` to clean up a config object and remove its invalid properties. ## Error Handling By default, nopt outputs a warning to standard error when invalid values for known options are found. You can change this behavior by assigning a method to `nopt.invalidHandler`. This method will be called with the offending `nopt.invalidHandler(key, val, types)`. If no `nopt.invalidHandler` is assigned, then it will console.error its whining. If it is assigned to boolean `false` then the warning is suppressed. ## Abbreviations Yes, they are supported. If you define options like this: ```javascript { \"foolhardyelephants\" : Boolean , \"pileofmonkeys\" : Boolean } ``` Then this will work: ```bash node program.js --foolhar --pil node program.js --no-f --pileofmon # etc. ``` ## Shorthands Shorthands are a hash of shorter option names to a snippet of args that they expand to. If multiple one-character shorthands are all combined, and the combination does not unambiguously match any other option or shorthand, then they will be broken up into their constituent parts. For example: ```json { \"s\" : [\"--loglevel\", \"silent\"] , \"g\" : \"--global\" , \"f\" : \"--force\" , \"p\" : \"--parseable\" , \"l\" : \"--long\" } ``` ```bash npm ls -sgflp # just like doing this: npm ls --loglevel silent --global --force --long --parseable ``` ## The Rest of the args The config object returned by nopt is given a special member called `argv`, which is an object with the following fields: * `remain`: The remaining args after all the parsing has occurred. * `original`: The args as they originally appeared. * `cooked`: The args after flags and shorthands are expanded. ## Slicing Node programs are called with more or less the exact argv as it appears in C land, after the v8 and node-specific options have been plucked off. As such, `argv[0]` is always `node` and `argv[1]` is always the JavaScript program being run. That's usually not very useful to you. So they're sliced off by default. If you want them, then you can pass in `0` as the last argument, or any other number that you'd like to slice off the start of the list."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/nopt/node_modules/abbrev/README.md","tags":[],"body":"# abbrev-js Just like [ruby's Abbrev](http://apidock.com/ruby/Abbrev). Usage: var abbrev = require(\"abbrev\"); abbrev(\"foo\", \"fool\", \"folding\", \"flop\"); // returns: { fl: 'flop' , flo: 'flop' , flop: 'flop' , fol: 'folding' , fold: 'folding' , foldi: 'folding' , foldin: 'folding' , folding: 'folding' , foo: 'foo' , fool: 'fool' } This is handy for command-line scripts, or other cases where you want to be able to accept shorthands."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/underscore/README.md","tags":[],"body":"__ /\\ \\ __ __ __ ___ \\_\\ \\ __ _ __ ____ ___ ___ _ __ __ /\\_\\ ____ /\\ \\/\\ \\ /' _ `\\ /'_ \\ /'__`\\/\\ __\\/ ,__\\ / ___\\ / __`\\/\\ __\\/'__`\\ \\/\\ \\ /',__\\ \\ \\ \\_\\ \\/\\ \\/\\ \\/\\ \\ \\ \\/\\ __/\\ \\ \\//\\__, `\\/\\ \\__//\\ \\ \\ \\ \\ \\//\\ __/ __ \\ \\ \\/\\__, `\\ \\ \\____/\\ \\_\\ \\_\\ \\___,_\\ \\____\\\\ \\_\\\\/\\____/\\ \\____\\ \\____/\\ \\_\\\\ \\____\\/\\_\\ _\\ \\ \\/\\____/ \\/___/ \\/_/\\/_/\\/__,_ /\\/____/ \\/_/ \\/___/ \\/____/\\/___/ \\/_/ \\/____/\\/_//\\ \\_\\ \\/___/ \\ \\____/ \\/___/ Underscore.js is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter...) without extending any core JavaScript objects. For Docs, License, Tests, and pre-packed downloads, see: http://underscorejs.org Underscore is an open-sourced component of DocumentCloud: https://github.com/documentcloud Many thanks to our contributors: https://github.com/jashkenas/underscore/contributors"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/client/index.html","tags":[],"body":"weinre"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/client/inspector.html","tags":[],"body":""},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/demo/split.html","tags":[],"body":""},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/demo/weinre-demo-min.html","tags":[],"body":"weinre minified demo this is a green h1 this is a blue h1 this is a red h1 Some text, some italic text, and some bold text."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/demo/weinre-demo-strict.html","tags":[],"body":"weinre non-minified strict demo this is a green h1 this is a blue h1 this is a red h1 Some text, some italic text, and some bold text."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/demo/weinre-demo.html","tags":[],"body":"weinre non-minified demo this is a green h1 this is a blue h1 this is a red h1 Some text, some italic text, and some bold text."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/doc/Building.html","tags":[],"body":"weinre - Building clone weinre at apache weinre - Building Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The source repository for weinre is maintained at Apache. See the archives information on the Installing page for more information on downloading a source archive. If you'd prefer to obtain the source via git, you can use one of the following repos: Apache repo: https://git-wip-us.apache.org/repos/asf/cordova-weinre.git GitHub repo: https://github.com/apache/cordova-weinre The Apache repo is the canonical repo. The url can be used in a web browser, or as the argument of a git clone command. The GitHub repo is a clone of the Apache repo, and automatically shadowed at some regular interval. The url is the web view of the repo, from which you can obtain a url to use with git clone. See the file README.md in the top-most directory of the source distribution for more instructions on how to perform a build. A markdown-processed version of the README file is available on GitHub. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/doc/ChangeLog.html","tags":[],"body":"weinre - ChangeLog clone weinre at apache weinre - ChangeLog Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 2012/??/?? - version 2.0.0 port the server from Java to node.js lots of other changes issues resolved: CB-10 - Apache source headers in callback-weinre CB-36 - move/delete GitHub issues at phonegap/weinre and callback/callback-weinre into the Apache Callback JIRA CB-83 - implement the server in node CB-100 - fix issues regarding pre-req licenses for weinre distribution CB-175 - error when XHR contentType is null CB-176 - add vendor files to weinre instead of pulling in at build time CB-182 - error when XHR contentType is null CB-232 - rename assets from PhoneGap to Cordova CB-257 - the README.md in the weinre-node distribution is bogus CB-259 - create a weinre tarball as a build archive that is npm install-able CB-266 - weinre runtime error if you don't have a ~/.weinre/server.settings file CB-284 - invocation exception on WeinreClientEventsImpl.connectionCreated(): TypeError: Cannot read property 'url' of undefined CB-288 - re-version as 2.0.0 CB-293 - bullet-proof modjewel CB-294 - various exceptions thrown in the target in WeinreTargetEventsImpl.connectionCreated() CB-315 - generate valid Apache release artifact names CB-540 - ability to easily navigate to particular place in DOM via bookmarks/jump to selector CB-604 - weinre doesn't work in strict mode CB-873 - setTimeout() and setInterval() usage with string arguments is busted CB-984 - cannot install weinre with Node 0.8.0 CB-1666 - \"INVALID_STATE_ERR: DOM Exception 11\" with chbrody/Cordova-SQLitePlugin CB-1759 - doc indicates that you should launch weinre with a command prefix of `node` CB-1193 - add Windows Phone support CB-1800 - remove references to \"incubator\" CB-1494 - Supports running server behind a proxy, such as Heroku Cedar CB-2650 - Weinre style inspection breaks with normalize.css CB-3319 - Chrome is setting window properties which now breaks Weinre CB-3328 - chrome version >= 27 breaks flex-box usage CB-3378 - support for FF and IE10 CB-6991 - Weinre fails to load in browsers without a built-in development console CB-7367 - allow update of weinre id in page url without page refresh CB-7430 - weinre does not play nice with npm dedupe CB-7437 - xhr readystate event passed bad event on some platforms CB-7438 - weinre target not setting server url when from script's src attribute for https CB-5718 - Detection of HTTPS broken 2011/12/01 - version 1.6.1 Error handling for some built-in callbacks has been removed. This function was added in version 1.6.0. Unfortunately, it had some problems, and it wasn't clear if the fix was going to make things worse. issues resolved: apache/callback issue 82 - removeEventListener broken 2011/10/28 - version 1.6.0 The Network panel has been added to weinre, which will display information for any XHRs that you issue. Error handling for some built-in callbacks has been added. The support is very similar to what's provided in the log-callback-error project, though the implementation is different. The element highlighter has been modified to show brighter colors. The colors also now more closely match the Web Inspector colors. Currently, there are some artifacts in the corners in some cases, but it's not clear to me this is a huge problem - in fact, maybe it's a feachur. ~shrug~ As part of this clean up, I've made the element highlighter pluggable. If you think you can do better, it should be pretty straight-forward to code up a new one. Bring it on. The JavaScript code for weinre has been converted from the \"scoop\" DSL format to CoffeeScript. You no longer have a valid excuse for not hacking the code. The \"Test Drive\" page of the doc has been removed and replaced with the new \"User Interface\" page. weinre now adds an \"error\" listener to window. For JavaScript engines that support \"window onerror\", you will now see a message logged to the console when an error occurs anywhere in your JavaScript code. Unfortunately, just as support for \"window onerror\" is becoming available in JavaScript, the browsers are neutering it's support. Depending on your browser, you may or may not see these errors reported, and even if you do, they may not give you any useful information. Thanks to Ryan Seddon for supplying the following backgrounder links for your enjoyment: http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2011-September/033252.html https://bugzilla.mozilla.org/show_bug.cgi?id=568564 http://www.w3.org/Bugs/Public/show_bug.cgi?id=14177 https://bugs.webkit.org/show_bug.cgi?id=70574 issues resolved: issue apache/callback issue 1 - update the doc issue phonegap/weinre 41 - add support for XHRs on Network panel issue phonegap/weinre 40 - clean up spurious messages in the server console issue phonegap/weinre 38 - cleanup some of the exception handler bits issue phonegap/weinre 37 - Timeout function does not pass arguments issue phonegap/weinre 35 - convert JavaScript in weinre from scoop to CoffeeScript issue phonegap/weinre 20 - add support for window.onerror issue phonegap/weinre 19 - 404 error on /client/index.html in Mac app (incomplete build?) issue phonegap/weinre 11 - provide better error handling - by hook or by crook issue phonegap/weinre 10 - element highlighter code in the target is just awful 2011/07/22 - version 1.5.0 The Resources panel now includes an active Databases section. For any WebSQL database that you open, you should see an entry in the expanded section. For each database, you'll see the list of tables owned by the database when the database section is expanded. Note that you need to open the database to see it listed here. Databases which you have previously created in other browsing sessions will not be displayed until they are first opened. Clicking on a database table will dump the database contents to the panel. Clicking on the database itself will provide a prompter for you to run SQL commands against that database. For example, entering \"select * from YourTableNameHere\" will dump the table contents to the panel. Some of the console functions, like console.log(), were not handling object arguments correctly. You should now see a an object display. For example, typing \"window\" or \"console.log(window)\" into the console will show you the same object display for the window. The ant build script did not have the correctly-cased file names for some of the files, and the build failed. This has been fixed. You should be able to do a build on Linux, and other case-sensitive file systems. While weinre already removes some of the Web Inspector panels wholesale, there were still a number of meaningless gee-gaws on the panels that we do show. Those have been surgically removed with CSS. issues closed: issue 7 - support for WebSQL issue 8 - console.log() etal don't handle object parameters issue 12 - wrong-cased file names in ant scripts for Linux issue 16 - hide stuff in the Web Inspector UI that's not used 2011/05/09 - version 1.4.0 better calculation of object's class name. closes issue 41. initial set of changes in for extensions. closes issue 8. added json2.js to the mix; part of issue issue 45. works with recent scooj release. closes issue 52. add non-authenticated multi-user support. closes issue 50. See the MultiUser doc page for more information. issues closed: issue 8 - enable extensions issue 41 - in JSC, inspected object's class is always \"object\" issue 50 - add non-authenticated multi-user support issue 52 - react to recent modjewel / scooj changes 2011/04/05 - version 1.3.0 style editing now enabled in Elements panel localStorage and sessionStorage views enabled in Resources panel URLs to vendor repos updated for the weinre build check for bad versions of Prototype.js issues closed: issue 21 - add support for localStorage issue 35 - testing local files on IOS issue 36 - element.style cannot be edited issue 44 - update vendor repos 2011/03/12 - version 1.2.0 DOM elements are now updated live as they change in the target more console support; sprintf formatting and expandable object logging issues closed: issue 27 - edge case where programmatically created DOM is only picked up partially issue 37 - console.log output doesn't do sprintf-style string interpolations 2011/03/02 - version 1.1.0 added Timeline panel; tracks timers, intervals, XHRs, some other events, and console.markTimeline(string) now showing matching style rules in Elements panel no more diagnostic messages in the user's console; they are now written to the server console caught up to a more recent version of Web Inspector refactoring, technical debt paydown issues closed: issue 10 - enable Timeline panel, and provide some events issue 20 - catch up to latest Web Inspector code base issue 23 - mac app's web pages can't connect to server issue 24 - weinre server runs slowly on windows issue 25 - pay down technical debt issue 28 - create a standalone Java launch issue 29 - autoconnect does not always work issue 30 - all-json-idls.js is a pig issue 31 - redirect error/warn/info/debug messages from client and target to server issue 32 - monospace font too small everywhere issue 33 - update doc 2011/01/25 - version 1.0.0 Don't display \"not implemented\" messages. Closes issue 19. Remove node highlighting cruft. Closes issue 18. Add meta element to enable GCF for client. Closes issue 17. Make bookmarklet more portable. Closes issue 16. Enable node highlighting. Closes issue 2. Change copyright statements. Closes issue 13. Change Weinre.Console to Console. Closes issue 11. Add implementation for settings. Closes issue 5. Provide better escape for // comments in minifier. Closes issue 6. Get metrics working in Elements panel. Closes issue 1. 2010/12/16 - version 0.9.9 initial release ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/doc/Home.html","tags":[],"body":"weinre - Home clone weinre at apache weinre - Home Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ weinre is WEb INspector REmote. Pronounced like the word \"winery\". Or maybe like the word \"weiner\". Who knows, really. weinre is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it's designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone. Interesting places to visit: videos at YouTube: http://www.youtube.com/results?search_query=weinre this documentation: http://people.apache.org/~pmuellr/weinre/ [temporary] unofficial binary packages: http://people.apache.org/~pmuellr/weinre/ [temporary] issues: https://issues.apache.org/jira/gobble-de-gook/... create a new issue: bug or new feature cloneable source at Apache: https://git-wip-us.apache.org/repos/asf/cordova-weinre.git Apache repo cloned at GitHub: https://github.com/apache/cordova-weinre mailing lists at Apache: http://mail-archives.apache.org/mod_mbox/cordova-dev/ (for weinre development) discussion at Google Group: http://groups.google.com/group/weinre (for weinre usage) More information on weinre's big brothers, Web Inspector / Google Chrome Developer Tools, is available at Google's Chrome Dev Tools pages and Apple's Web Inspector pages. If you aren't familiar with FireBug or Web Inspector, weinre isn't going to make too much sense to you. weinre reuses the user interface code from the Web Inspector project at WebKit, so if you've used Safari's Web Inspector or Chrome's Developer Tools, weinre will be very familiar. If you're not familiar with Web Inspector, the links above to Google's and Apple's documentation will be useful. Here's an example session using weinre: Two screen captures are shown above. On the left is the weinre client application, displaying debug information. On the right is the target web page, running in Mobile Safari in the iOS Simulator. In normal usage, you will be running the client application in a browser on your desktop/laptop, and running a target web page on your mobile device. In the session above, the debugger is display the Elements panel, with the embedded console expanded in the bottom third of the window. In the console area, we've entered two statements: document.body.style.backgroundColor document.body.style.backgroundColor = \"pink\" The result of running the first statement shows the value of the body's background style is not set. The second statement sets the body's background to pink. That horrifying pink background is then rendered in the target's window. In addition, an h1 element is selected in the upper third of the Elements panel, which causes the side panels on the right to be filled in with relevant information. In this case, the matched CSS rules for that h1 element are being shown. If you are familiar with WebKit's Web Inspector, a partial list of differences between it and weinre are listed below: weinre does not make use of any 'native' code in the browser, it's all plain old boring JavaScript. Because weinre doesn't use 'native' code, it's functionality is limited. For instance, source level debug of JavaScript is not possible easy. Because weinre doesn't use 'native' code, the debug target code will run on browsers without specialized debug support. For instance, a browser running on your phone. weinre supports 'remote' interaction, so you can run the debugger user interface on one machine and can debug a web page running on another machine. For instance, debug a web page displayed on your phone from your laptop. Because weinre supports 'remote' interaction, multiple debug clients can be debugging the same debug target at the same time. One thing not different from Web Inspector is that the debug client user interface only runs on WebKit-based browsers. Supported Libraries and Platforms Generally version numbers listed here are the earliest versions of the relevant thing that have been tested. Later versions of those things are also hopefully supported, but let us know. Libraries not supported versions of Prototype.js before version 1.7 are not supported, as they do not support the JSON.stringify() API correctly. You will get an alert() in the web page you are debugging if you attempt to debug it with weinre and you are using an unsupported version of Prototype.js. Platforms supported - debug server Any platform that supports node.js. Platforms supported - debug client The browser where the debugger user interface runs. Google Chrome Apple Safari Other recent-ish WebKit-based browsers Platforms supported - debug target The browser with the page you are debugging. Android Browser application iOS Mobile Safari application PhoneGap/Cordova other Platforms not supported - debug target iOS 3.1.3 or earlier webOS 1.45 or earlier ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/doc/Installing.html","tags":[],"body":"weinre - Installing clone weinre at apache weinre - Installing Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ weinre is implemented as a node.js application, and so you'll need to download and install a node runtime to run weinre. To install weinre, use npm, or download a binary package. weinre is not sensitive to the directory it's installed in, and does not write to any files. npm installation weinre can be installed as an npm package. The *-bin.tar.gz urls/files for binary packages can be used as a target of the npm install command. It's likely you will want to install weinre globally instead of locally (in the npm sense), which means you will typically want to use the npm -g option to install. For *ix and Mac, this also means prefixing your command with sudo. For Windows, AFAIK, you don't need sudo or any equivalent. Here's an example of installing from a binary package via URL: sudo npm -g install http://example.com/path/to/apache-cordova-weinre-X.Y.Z-bin.tar.gz weinre is also deployed on https://npmjs.org/package/weinre so that you can install it via: sudo npm -g install weinre Binary Packages Unofficial binary packages for your convenience: http://people.apache.org/~pmuellr/weinre/ The binary packages available are: apache-cordova-weinre-{version}-bin.tar.gz apache-cordova-weinre-{version}-bin.zip apache-cordova-weinre-{version}-doc.tar.gz apache-cordova-weinre-{version}-doc.zip apache-cordova-weinre-{version}-src.tar.gz apache-cordova-weinre-{version}-src.zip The difference between the .tar.gz and .zip archives is the archive format only. When expanded, both archives produce the same files. The doc archives contain the stand-alone HTML documentation The src archives contain the ready-to-rebuild source The bin archives contain the ready-to-run binaries If the {version} contains a moniker like pre, this is indicative of an unofficial, non-final binary package for your convenience, as opposed to an official release. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/doc/License.html","tags":[],"body":"weinre - License clone weinre at apache weinre - License Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Source specific to weinre is all licensed under the Apache License, Version 2.0. weinre also makes use of third party code; the licensing details for those is available in the LICENSE file in the top-most directory of the source distribution. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/doc/MultiUser.html","tags":[],"body":"weinre - Muli-User clone weinre at apache weinre - Muli-User Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ weinre was originally designed so that each user that wanted to use weinre would run their own weinre server. The system has since been enhanced to support muliple users using the same server. Your debug id To use a multi-user server, you'll need to select an id for yourself. This id will be used in the client and target URLs of weinre to scope your clients and targets from the clients and targets of other users. There is no password, just an id. There is no real security here. The id is a secret shared between your debug target and client, but it is sent in the clear when your target and client connect to the server. If someone else knows your id, they can connect to clients or targets you are running with that id. So don't give your id to anyone else that you don't want to share with. To keep your id's familar but non-guessable, you might use a string consisting of your typical userid, followed by a dash, followed by another string not likely to be guessed by other people. If you are paranoid, you can change your id every time you start a debug session, of course. Using your id with the client Typically when start a weinre client session by visiting a URL like http://some.server.xyz/client/ To start a client with a particular id, append the hash character (#) and the id you want to use the URL. For instance, to connect with the id itsReallyMe, launch the client with the URL http://some.server.xyz/client/#itsReallyMe The id which is used will be displayed in the connected clients list for each connected client. Using your id with the target As with the server, append the hash character (#) to the URL of the script being injected into your web page. If you had previously used a use this script element to connect with id itsReallyMe Notes The weinre server always runs in multi-user mode. If you don't otherwise specify an id, the value of anonymous will be used for the id. The id is passed in the HTTP body of a POST request during the initial connection of the target and client to the server, and is not sent thereafter. Thus, it should remain out of view in server logs and the like, though it will be visible for anyone who has access to the contents of HTTP request bodies. There is no programmatic interface in weinre to list id's in current use, for security reasons. From the Remote panel of weinre, each connected client and target have their channel and id's listed, if you can't remember what id you used with the client. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/doc/Running.html","tags":[],"body":"weinre - Running clone weinre at apache weinre - Running Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ This page describes how to use weinre to debug your own web pages on a remote device. First, some background. Terminology When using weinre, there are three programs interacting with each other. Debug Server This is the HTTP server that you run from the weinre-node distribution. It's the HTTP server that's used by the Debug Client and Debug Target. Debug Client This is the Web Inspector user interface; the web page which displays the Elements and Console panels, for instance. Debug Target This is your web page that you want to debug. This name (Debug Target) is also used to refer to the machine running the browser displaying the web page. Since a design point of weinre is to allow debugging applications on mobile devices, the debug target, when speaking of the machine, is your mobile device. Both the Debug Client and the Debug Target communicate to the Debug Server via HTTP using XMLHttpRequest (XHR). Typically, you run both the Debug Client and the Debug Server on your desktop/laptop, and the Debug Target on your mobile device. The Debug Target is the squirrelliest bit. You will need to arrange to inject some JavaScript code, provided by the Debug Server, into your web page, in order for it to function as a Debug Target. Running the debug server using an npm installation To run weinre from an npm installation, assuming you've installed it globally (in the npm sense), execute the following command: weinre [options] The server will run until you kill it. Control-C will do the job. Options available are: --help (or -? or -h) Display this help. --httpPort [portNumber] The port to run the HTTP server on. Default: 8080 --boundHost [hostname | ip address | -all-] The ip address to bind the server to. Default: localhost With the default of localhost, you won't be able to access the server from any machine other than the one the server is running on. You will need to bind to another hostname / ip address to make the server accessible to other machines. You can use the value -all- to indicate that you want to bind to all interfaces available on the current machine. Use ifconfig on Linux or the Mac, and ipconfig on Windows, to get the ip addresses available on your machine. --verbose [true | false] Causes jibberish to be written to stdout Default: false --debug [true | false] Causes even more jibberish to be written to stdout Default: false --readTimeout [seconds] The number of seconds the server will wait for a message to be available to send to the target or client. Default: 5 Can probably be set larger, but then your browser may time out. Probably don't want to set it much lower than this as it will cause additional network traffic when no messages are being sent (it will cause more \"empty\" messages to be sent). --deathTimeout [seconds] The number of seconds to wait to hear back from a debug client or target before declaring them dead. Default: 3 * readTimeout Normally the default will be fine. However, if you're debugging weinre itself, you may wish to set it much longer. The ~/.weinre/server.properties file You may also create a file named server.properties in the directory .weinre in your home directory (eg. ~/.weinre/server.properties). Your home directory is the determined by the value of either the HOME or USERPROFILE environment variable. The keys should be the same as the name of the options above, with the same values. As an example, your ~/.weinre/server.properties file might look like this: boundHost: -all- httpPort: 8081 reuseAddr: true readTimeout: 1 deathTimeout: 5 Command-line options override the options specified in the ~/.weinre/server.properties file. Running the debug server bound to something other than localhost Since the web page you want to debug (the debug target) is probably running on a different machine (your mobile device) than the debug server (your desktop / laptop), you can't use the default localhost value for the --boundHost option. Instead, you will need to specify a host name / ip address with the --boundHost option. This host name / ip address must be accessible to the machine you want to use as the debug target. To get started, you can use the value -all- for the --boundHost option. Now you'll need to figure out what host name / ip address the debug target should use. If you've use the --boundHost -all- option, then bring up the debug client using the URL http://localhost:[portNumber]/client/ from the same machine the debug server is running on. On that page, under Server Properties, is a list of bound hosts that the server believes it's available on. From the debug target device (eg, your mobile device), try accessing the server home page from all of those host names, using the URL http://[host name / ipaddress]:[portNumber]/. Once you find one that displays the server's home page correctly, remember that host name / ip address, we'll be using it in a minute. When you run the debug server with a bound host other than localhost, by definition other machines can now access your debug server. See the Security page for information on how to protect yourself. Instrumenting your web page to act as a debug target At this point you now have a URL to the debug server which will be accessible from the debug target. Let's say that URL (to the debug server's home page) is: http://a.b.c:8081. To make your web page debuggable with weinre, add the following line to your web page: You can now open a debug client by browsing to http://a.b.c:8081/client (or probably http://localhost:8081/client as well) on your desktop/laptop, then reload your newly instrumented web page on your mobile device, and see the two connect in the Remote panel of the debug client. Hardcoding host names / IP addresses in your web page? Yeah, gross. Besides being gross, there are a few practical problems with hardcoding the debug server address in your web page as well: Your html file is probably stored in an SCM, and you don't really want to be storing that address in the SCM. It won't work for other people using that html file, for instance. But you don't want to be keeping the line in your SCM either. You should look for a way, as part of your personal build process to add that line only for development builds, and presumably with a user-customizable URL. The URL the debug server runs on may be different depending on your location. At work, you may use one IP address and host name; at home, you likely have a different IP address and host name. You may not have a host name at all, just an IP address (which is fine - a host name isn't required, but usually makes things easier). You may be running on a dynamically assigned IP address, in which case your IP changes every time you log into your network. One way out of the dilemma is to use a dynamic DNS solution for the the machine you run the debug server on. Doing a web search on the following terms will provide you some links to such services: dynamic dns static hostname If you use one of these dynamic DNS services, you can arrange to use the same host name for your debug server no matter what network you are connected to. Using a bookmarklet Some platforms support 'bookmarkets', which allow you to inject arbitrary JavaScript code into any web page running in your browser. Mobile Safari is one of these browsers. It appears that the browser shipped with Android 2.2 and later also supports bookmarklets. Unfortunately, installing bookmarkets on mobile devices isn't usually trivial. The easiest course of action is to add a new random bookmark to your bookmarks, and then edit it by hand to change the label and URL. The URL you should use is available in both a 'pre' and 'textarea' section of the server's home page (eg, http://localhost:8081/). You should be able to select the text from one of these areas easily, to paste into the previously added bookmark. Once the bookmarklet is installed, you can debug any web page by visiting it, and selecting the bookmarklet from your bookmarks menu. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/doc/Security.html","tags":[],"body":"weinre - Security clone weinre at apache weinre - Security Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ About security for weinre: there is none. Obviously there should be some. The question is, what do we need to do? Background and potential exposures Currently weinre uses plain old HTTP - not HTTPS - and provides no level of authentication for requests. The primary security exposure with weinre is via the debug server. Currently, the server only reads files from the weinre-node distribution, and from the ~/.weinre/ directory (for property files). The only thing the server writes to is stdout and stderr. If you use the default --boundHost option value of localhost, then any software on the machine running the debug server can communicate with the debug server. This probably isn't a big deal, since presumably you control the software running on that machine. If you use a non-default --boundHost option value, then any software on any machine that can access that specified host can communicate with the debug server. This is a much bigger deal. The most obvious exposure with using --boundHost and a specific hostname / ip address, is that any debug client or debug target that can access that hostname / ip address can access the server. For example, a rogue debug client could connect to your debug target and fiddle about with it. Other exposures include leaving a debug target injection script line (ie, ) in your web page, and then that web page connects to a rogue debug server running at that address. Future Implementation Ideas Let's chat ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/doc/UserInterface.html","tags":[],"body":"weinre - User Interface clone weinre at apache weinre - User Interface Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ This page describes the user interface provided by weinre. the server home page The server home page is accessed at the root URL of the server, in this case http://localhost:8081/. This link will launch the weinre client page, which is the debugger itself. Clicking this link will take you to the Remote panel, described below. This is the URL of the script that you add to your web page to allow it to be debugged by the client. Additional links shown in this image are for this documentation, and some demo pages. Further down on the page, not shown in the image, are: The text of the element you can copy and paste into your web page. The source for a bookmarklet, to inject the debug code into any web page displayed in your browser. Version numbers of weinre and it's components. the Remote panel The Remote panel is the initial panel of weinre, and displays some status regarding the server. The top portion of all of the weinre panels shows the panel switcher. To switch to a different panel, click on the panel's button. The current panel is displayed with a highlight, as shown above for the Remote panel. The Targets section of this page lists targets that are currently connected to the server. A target is a web page that you are debugging. In this case, there is one target connected the server. Information about each target is displayed in the list, including host name / ip address, and the URL the target is displaying. The Clients section of this page lists the clients that are currently connected to the server. A client is this user interface. Typically, there is just one - the client you are displaying at the time. The Server Properties section of this page displays the values of various server properties currently in effect. Shown here are the hosts that are bound to the server - which host names / ip addresses that the server will respond to. The colors of the entries in the Targets and Clients list indicates their status. Blue means the Target or Client is connected to the server, but not yet connected to a peer. Green means the Target or Client is connected to a peer, and you can start debugging. Red means the Target or Client has disconnected from the server, and will eventually fade away and be removed from the list. In case there are multiple targets connected, you can switch which one you are debugging by clicking on the item. the Elements panel The Elements panel displays your HTML DOM in a tree fashion, and properties associated with selected elements. The elements themselves may be expanded/collapsed via the disclosure buttons. Elements and text can be edited by double-clicking the item to be edited. Elements can also be deleted by selecting the element and then pressing the delete button. The sidebar area displays information about the selected element. In this case, the Styles sidebar is expanded, showing relevant CSS rules. Some sidebars allow editing of the contents. The Styles sidebar in particular allows you to add, edit and remove properties and values by double clicking on them. the Resources panel The Resources panel shows WebSQL databases, and data stored in Local Storage and Session Storage. The left hand side of the Resources panel is the navigator. Expanding the Databases entry will show all the Web SQL databases currently in use. Expanding a particular database will show all the tables in that database. The right hand side is the editor/viewer for whatever is selected in the navigator pane. When a database is selected, a prompt will appear in the editor/viewer area where you can enter SQL statements to be executed. The results are displayed inline. When a table is selected, all the rows from the table will be displayed. When a Local Storage or Session Storage entry is selected, all the relevant keys and values will be displayed. The keys and values in the Local Storage and Session Storage tables can be edited by double-clicking. The reload button will refresh the data from the target. the Network panel The Network panel shows you information regarding XHR requests that you've made. Each XHR will be shown in a separate row in the table. Clicking the path name of the XHR request will show additional information for that request in the right side of the panel. To display the table again, click the (x) button in the left top corner of the information pane (not shown in the image above). The \"dots and lines\" button can be used to change the table layout to show less information in a more compact format. The \"not\" button will clear the entries from the table. the Timeline panel The Timeline panel is used to show events that are occurring in the target. Currently only two types of events are shown: timers/intervals, and user-specified events. Use console.markTimeline(\"A Label\") to add a user-specified event to the timeline with the specified label. Note that timing events are not collected unless you enable the \"record\" button (see below). The left hand pane of the Timeline panel shows the events that have occurred. Hovering over an entry will show additional detail about the event. The right hand pane of the Timeline panel shows the events as they occurred in time. Some events have other events associated with them, which will be shown when the disclosure triangle is expanded. The top-most time line of the right panel can have it's right and left hand edges moved to show a particular time range in more detail. The \"dots and lines\" button can be used to show and hide events that last less than a fixed time (currently 15ms). The \"record\" button is used to start or stop event collection. When weinre starts, the record button is off (black). When you click the record button to start collecting events, it will turn red. The \"not\" button will clear the current timing entries. the Console panel The Console panel is used to execute arbitrary JavaScript expressions/statements. It also shows the output from various console methods, like console.log(). In the example above, the JavaScript statements entered by the user are in blue, the output of the statements is just below it, and messages generated by console.log() are in black. The \"not\" button will clear the console. The Console can also be embedded in every panel, by clicking the \"console\" button. The \"console\" button will embed the console in the bottom half of the other panels, or hide it if it's currently embedded in the other panels. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/doc/index.html","tags":[],"body":"weinre - Home clone weinre at apache weinre - Home Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ weinre is WEb INspector REmote. Pronounced like the word \"winery\". Or maybe like the word \"weiner\". Who knows, really. weinre is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it's designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone. Interesting places to visit: videos at YouTube: http://www.youtube.com/results?search_query=weinre this documentation: http://people.apache.org/~pmuellr/weinre/ [temporary] unofficial binary packages: http://people.apache.org/~pmuellr/weinre/ [temporary] issues: https://issues.apache.org/jira/gobble-de-gook/... create a new issue: bug or new feature cloneable source at Apache: https://git-wip-us.apache.org/repos/asf/cordova-weinre.git Apache repo cloned at GitHub: https://github.com/apache/cordova-weinre mailing lists at Apache: http://mail-archives.apache.org/mod_mbox/cordova-dev/ (for weinre development) discussion at Google Group: http://groups.google.com/group/weinre (for weinre usage) More information on weinre's big brothers, Web Inspector / Google Chrome Developer Tools, is available at Google's Chrome Dev Tools pages and Apple's Web Inspector pages. If you aren't familiar with FireBug or Web Inspector, weinre isn't going to make too much sense to you. weinre reuses the user interface code from the Web Inspector project at WebKit, so if you've used Safari's Web Inspector or Chrome's Developer Tools, weinre will be very familiar. If you're not familiar with Web Inspector, the links above to Google's and Apple's documentation will be useful. Here's an example session using weinre: Two screen captures are shown above. On the left is the weinre client application, displaying debug information. On the right is the target web page, running in Mobile Safari in the iOS Simulator. In normal usage, you will be running the client application in a browser on your desktop/laptop, and running a target web page on your mobile device. In the session above, the debugger is display the Elements panel, with the embedded console expanded in the bottom third of the window. In the console area, we've entered two statements: document.body.style.backgroundColor document.body.style.backgroundColor = \"pink\" The result of running the first statement shows the value of the body's background style is not set. The second statement sets the body's background to pink. That horrifying pink background is then rendered in the target's window. In addition, an h1 element is selected in the upper third of the Elements panel, which causes the side panels on the right to be filled in with relevant information. In this case, the matched CSS rules for that h1 element are being shown. If you are familiar with WebKit's Web Inspector, a partial list of differences between it and weinre are listed below: weinre does not make use of any 'native' code in the browser, it's all plain old boring JavaScript. Because weinre doesn't use 'native' code, it's functionality is limited. For instance, source level debug of JavaScript is not possible easy. Because weinre doesn't use 'native' code, the debug target code will run on browsers without specialized debug support. For instance, a browser running on your phone. weinre supports 'remote' interaction, so you can run the debugger user interface on one machine and can debug a web page running on another machine. For instance, debug a web page displayed on your phone from your laptop. Because weinre supports 'remote' interaction, multiple debug clients can be debugging the same debug target at the same time. One thing not different from Web Inspector is that the debug client user interface only runs on WebKit-based browsers. Supported Libraries and Platforms Generally version numbers listed here are the earliest versions of the relevant thing that have been tested. Later versions of those things are also hopefully supported, but let us know. Libraries not supported versions of Prototype.js before version 1.7 are not supported, as they do not support the JSON.stringify() API correctly. You will get an alert() in the web page you are debugging if you attempt to debug it with weinre and you are using an unsupported version of Prototype.js. Platforms supported - debug server Any platform that supports node.js. Platforms supported - debug client The browser where the debugger user interface runs. Google Chrome Apple Safari Other recent-ish WebKit-based browsers Platforms supported - debug target The browser with the page you are debugging. Android Browser application iOS Mobile Safari application PhoneGap/Cordova other Platforms not supported - debug target iOS 3.1.3 or earlier webOS 1.45 or earlier ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Home - User Interface - Installing - Running - Multi-User - Security - Building - ChangeLog - License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/index.html","tags":[],"body":"weinre server home weinre - web inspector remote Access Points debug client user interface: ??? documentation: ??? Target Demos The following links point to an already instrumented sample application, run in a couple of different environmental conditions. First open a new browser window for the debug client user interface, as specified above. Then open another new browser window for one of the demos below. They should auto-connect and result in an active debug connection between the client and the target demo. the non-minified demo the minified demo the non-minified strict demo Target Script You can use this script to inject the weinre target code into your web page. ??? Example: &ltscript src=\"???\"> Target Bookmarklet You can use this bookmarklet to inject the weinre target code into any web page you are viewing. link you can drag to your bookmarks: ??? bookmarklet url in a pre: bookmarklet url in a textarea: Development interfaces: ??? Versions weinre: ??? build: ???"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/interfaces/interfaces.html","tags":[],"body":"weinre interfaces weinre interfaces show: IDL / JavaScript / Java Interfaces interface 1 interface 2 interface 3 [ nothing selected ] [ nothing selected ]"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/tests/element-highlighter.html","tags":[],"body":"weinre.web/tests/element-highlighter.html top-level x x x x x x x x 2nd-level, single margin x x x x x x x x 2nd-level, double margin x x x x x x x x 2nd-level, double margin, negatives x x x x x x x x"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/tests/index.html","tags":[],"body":"weinre.web/tests element-highlighter"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/public/img/icons/preview.html","tags":[],"body":"Document Symbols Example usage: svg-bin svg-block svg-book svg-bug svg-circle-delete svg-circle-minus svg-circle-ok svg-circle-pause svg-circle-play svg-circle-plus svg-code svg-cog svg-devices svg-github svg-globe svg-help svg-home svg-imac svg-jh svg-list svg-list2 svg-logo-word svg-logo svg-newtab svg-pen svg-pencil svg-plug svg-repeat svg-square-add svg-square-up svg-sync-browser svg-sync svg-syncall svg-target svg-terminal svg-time svg-trash svg-twitter svg-wifi"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/public/index.html","tags":[],"body":"Browsersync %svg% %header% Loading... {{item.title | ucfirst}} CLOSE %footer% %pageMarkup% %templates% %footer%"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/components.html","tags":[],"body":"Browser Sync - Control Panel Crossbow WARNING: Include not found: ../../public/img/icons/svg/symbols.svg Browsersync UI Components Also, you can view static representations of each section: Overview | Sync Options | History | Plugins | Remote Debug | Network Throttle | Help / About Typography Heading 1 Heading 2 Heading 3 Lede paragraph. Lorem ipsum dolor sit amet. Paragraph. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Libero esse molestias, itaque, quia sed laudantium laboriosam amet aliquam ipsam, laborum asperiores quod obcaecati, maiores fugiat nihil cum minus provident vitae. Small paragraph. Lorem ipsum dolor sit amet. Link | Another link Inline tags. Lorem strong ipsum code dolar mark si em. Lorem ipsum dolor sit amet. Ratione dolore veritatis voluptas consequuntur! Odit quis, pariatur ipsum vel. Lorem ipsum dolor sit amet. Ratione dolore veritatis voluptas consequuntur! Odit quis, pariatur ipsum vel. Suscipit laudantium, quam debitis tempore. Nobis vero nesciunt suscipit porro. Suscipit laudantium, quam debitis tempore. Nobis vero nesciunt suscipit porro. Lorem ipsum dolor sit amet. Ratione dolore veritatis voluptas consequuntur! Odit quis, pariatur ipsum vel. Lorem ipsum dolor sit amet. Ratione dolore veritatis voluptas consequuntur! Odit quis, pariatur ipsum vel. Suscipit laudantium, quam debitis tempore. Nobis vero nesciunt suscipit porro. Suscipit laudantium, quam debitis tempore. Nobis vero nesciunt suscipit porro. Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellendus, hic. Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellendus, hic. Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellendus, hic. The Very Best Eggnog Ingredients Serves 12 Serves 24 Milk 1 quart 2 quart Cloves 5 10 Egg Yolks 12 24 Cups Sugar 1 ½ cups 3 cups Dark Rum 1 ½ cups 3 cups Freshly grated nutmeg to taste Buttons Default button styles Button Button Small Button Small Subtle button styles Button Button Small Button Small Alternative Subtle button styles Button Button Small Button Small Default buttons with icons Icon Left Icon Right Icon Left Icon Right Subtle buttons with icons Icon Left Icon Right Icon Left Icon Right Alternative Subtle button styles with icons Icon Left Icon Right Button bars Website Twitter Github Button Button Small n/a Button Small Button Button Small n/a Button Small Button Button Small n/a Button Small Form inputs Grid Size Some input Form label Input + Button rs New Restriction Add Lists Simple list Item 1 Item 2 Item 3 Item 4 Item 5 Bordered list /gallery/new-item https://github.com/shakyShane/browser-sync/pull/400 Item 3 Item 4 Item 5 Bordered list with controls https://github.com/Browsersync/UI/ https://github.com/Browsersync/UI/issues https://twitter.com/browsersync http://browsersync.io http://stackoverflow.com/questions/tagged/browser-sync http://www.browsersync.io/docs/options/#option-snippetOptions https://github.com/shakyShane/browser-sync/blob/master/CONTRIBUTING.md http://www.browsersync.io/docs/options/#option http://www.wearejh.com Headings Server Info Panels Page heading Overview Sync all Enable All Disable all Overview Header v{{app.options.version}} Reload all New Tab Scroll Top Reset All Switches Css Grid Overlay Some other content Grid Size Grid Colour Grid Selector Offset Top Offset Bottom Vertical Axis Horizontal Axis"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/components/button-bars.html","tags":[],"body":"Website Twitter Github Button Button Small n/a Button Small Button Button Small n/a Button Small Button Button Small n/a Button Small"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/components/buttons.html","tags":[],"body":"Default button styles Button Button Small Button Small Subtle button styles Button Button Small Button Small Alternative Subtle button styles Button Button Small Button Small Default buttons with icons Icon Left Icon Right Icon Left Icon Right Subtle buttons with icons Icon Left Icon Right Icon Left Icon Right Alternative Subtle button styles with icons Icon Left Icon Right"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/components/footer.html","tags":[],"body":"© 2016 - Browsersync.io"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/components/forms.html","tags":[],"body":"Grid Size Some input Form label Input + Button rs New Restriction Add"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/components/header.html","tags":[],"body":"v{{app.options.version}} Reload all New Tab Scroll Top Reset All"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/components/heading.html","tags":[],"body":"Server Info"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/components/help-content.html","tags":[],"body":"Help Content Browsersync is an open-source project created and maintained by the front-end designers/developers at [JH](http://www.wearejh.com) . Together with contributors from all over the world, we aim to make modern, multi-device web development faster & easier. Help Why isn’t Browsersync connecting with my project? 99% of the time, it's because your web page doesn't have a `body` tag. In order for Browsersync to connect properly the `body` tag must be present in your website (we add a script tag just after it). Alternatively you can provide a custom rule for the snippet using [snippetOptions](http://www.browsersync.io/docs/options/#option-snippetOptions) Which mode should I be running in? If you have simple HTML, CSS & JavaScript files, you need the [server option](http://www.browsersync.io/docs/options/#option-server). If you already have an existing server setup (such as an Express app, Mamp, Rails etc, then you need the [proxy option](http://www.browsersync.io/docs/options/#option-proxy). If you intend to copy/paste the snippet into your website manually, you use the `snippet` mode. This is the default mode and is achieved by omitting both the server & proxy options Where can I report an issue? If you have found an issue with the Browsersync UI, please use our [issue tracker](https://github.com/Browsersync/UI/issues) Need more assistance? Please try our [documentation](http://www.browsersync.io/docs/) for user guides or our [stackoverflow](http://stackoverflow.com/questions/tagged/browser-sync) tag for answers to common problems. Contribute We'd love for you to contribute to Browsersync and help make it even better than it is today! Please read our [contributor guidelines](https://github.com/shakyShane/browser-sync/blob/master/CONTRIBUTING.md)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/components/lists.html","tags":[],"body":"Simple list Item 1 Item 2 Item 3 Item 4 Item 5 Bordered list /gallery/new-item https://github.com/shakyShane/browser-sync/pull/400 Item 3 Item 4 Item 5 Bordered list with controls https://github.com/Browsersync/UI/ https://github.com/Browsersync/UI/issues https://twitter.com/browsersync http://browsersync.io http://stackoverflow.com/questions/tagged/browser-sync http://www.browsersync.io/docs/options/#option-snippetOptions https://github.com/shakyShane/browser-sync/blob/master/CONTRIBUTING.md http://www.browsersync.io/docs/options/#option http://www.wearejh.com"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/components/panels.html","tags":[],"body":"Page heading Overview Sync all Enable All Disable all Overview"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/components/switches.html","tags":[],"body":"Css Grid Overlay Some other content Grid Size Grid Colour Grid Selector Offset Top Offset Bottom Vertical Axis Horizontal Axis"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/components/type.html","tags":[],"body":"Heading 1 Heading 2 Heading 3 Lede paragraph. Lorem ipsum dolor sit amet. Paragraph. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Libero esse molestias, itaque, quia sed laudantium laboriosam amet aliquam ipsam, laborum asperiores quod obcaecati, maiores fugiat nihil cum minus provident vitae. Small paragraph. Lorem ipsum dolor sit amet. Link | Another link Inline tags. Lorem strong ipsum code dolar mark si em. Lorem ipsum dolor sit amet. Ratione dolore veritatis voluptas consequuntur! Odit quis, pariatur ipsum vel. Lorem ipsum dolor sit amet. Ratione dolore veritatis voluptas consequuntur! Odit quis, pariatur ipsum vel. Suscipit laudantium, quam debitis tempore. Nobis vero nesciunt suscipit porro. Suscipit laudantium, quam debitis tempore. Nobis vero nesciunt suscipit porro. Lorem ipsum dolor sit amet. Ratione dolore veritatis voluptas consequuntur! Odit quis, pariatur ipsum vel. Lorem ipsum dolor sit amet. Ratione dolore veritatis voluptas consequuntur! Odit quis, pariatur ipsum vel. Suscipit laudantium, quam debitis tempore. Nobis vero nesciunt suscipit porro. Suscipit laudantium, quam debitis tempore. Nobis vero nesciunt suscipit porro. Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellendus, hic. Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellendus, hic. Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellendus, hic. The Very Best Eggnog Ingredients Serves 12 Serves 24 Milk 1 quart 2 quart Cloves 5 10 Egg Yolks 12 24 Cups Sugar 1 ½ cups 3 cups Dark Rum 1 ½ cups 3 cups Freshly grated nutmeg to taste"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/content/help.content.html","tags":[],"body":"Help / About Browsersync is an open-source project created and maintained by the front-end designers/developers at JH . Together with contributors from all over the world, we aim to make modern, multi-device web development faster & easier. Help Why isn’t Browsersync connecting with my project? 99% of the time, it's because your web page doesn't have a body tag. In order for Browsersync to connect properly the body tag must be present in your website (we add a script tag just after it). Alternatively you can provide a custom rule for the snippet using snippetOptions Which mode should I be running in? If you have simple HTML, CSS & JavaScript files, you need the server option. If you already have an existing server setup (such as an Express app, Mamp, Rails etc, then you need the proxy option. If you intend to copy/paste the snippet into your website manually, you use the snippet mode. This is the default mode and is achieved by omitting both the server & proxy options Where can I report an issue? If you have found an issue with the Browsersync UI, please use our issue tracker Need more assistance? Please try our documentation for user guides or our stackoverflow tag for answers to common problems. Contribute We'd love for you to contribute to Browsersync and help make it even better than it is today! Please read our contributor guidelines."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/help.html","tags":[],"body":"Browser Sync - Control Panel Rectangle 1 + Rectangle 2 + Rectangle 3 browser Fill 213 + Fill 132 Twitter v{{app.options.version}} Reload all New Tab Scroll Top Reset All Overview Sync Options History Plugins Remote Debug Network Throttle Help / About CLOSE © 2016 - Browsersync.io Help / About Browsersync is an open-source project created and maintained by the front-end designers/developers at JH . Together with contributors from all over the world, we aim to make modern, multi-device web development faster & easier. Help Why isn’t Browsersync connecting with my project? 99% of the time, it's because your web page doesn't have a body tag. In order for Browsersync to connect properly the body tag must be present in your website (we add a script tag just after it). Alternatively you can provide a custom rule for the snippet using snippetOptions Which mode should I be running in? If you have simple HTML, CSS & JavaScript files, you need the server option. If you already have an existing server setup (such as an Express app, Mamp, Rails etc, then you need the proxy option. If you intend to copy/paste the snippet into your website manually, you use the snippet mode. This is the default mode and is achieved by omitting both the server & proxy options Where can I report an issue? If you have found an issue with the Browsersync UI, please use our issue tracker Need more assistance? Please try our documentation for user guides or our stackoverflow tag for answers to common problems. Contribute We'd love for you to contribute to Browsersync and help make it even better than it is today! Please read our contributor guidelines. © 2016 - Browsersync.io"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/history.html","tags":[],"body":"Browser Sync - Control Panel Rectangle 1 + Rectangle 2 + Rectangle 3 browser Fill 213 + Fill 132 Twitter v{{app.options.version}} Reload all New Tab Scroll Top Reset All Overview Sync Options History Plugins Remote Debug Network Throttle Help / About CLOSE © 2016 - Browsersync.io History Clear all / Sync all /store-home.php Sync all /store-product.php Sync all /store-product.php?element=thisisit.php&color=we23 Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all /store-home.php Sync all © 2016 - Browsersync.io"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/network-throttle.html","tags":[],"body":"Browser Sync - Control Panel Rectangle 1 + Rectangle 2 + Rectangle 3 browser Fill 213 + Fill 132 Twitter v{{app.options.version}} Reload all New Tab Scroll Top Reset All Overview Sync Options History Plugins Remote Debug Network Throttle Help / About CLOSE © 2016 - Browsersync.io Network Throttle Speed DSL (2Mbps, 5ms RTT) 3G (750kbs, 100ms RTT) EDGE (250kbs, 300ms RTT) GPRS (50kbs, 500ms RTT) None Port Auto Detection User specified Create Server Your Servers 1. 3G https://localhost:3001 https://192.136.1.0:3001 2. GPRS https://localhost:3002 https://192.136.1.0:3002 © 2016 - Browsersync.io"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/plugins.html","tags":[],"body":"Browser Sync - Control Panel Rectangle 1 + Rectangle 2 + Rectangle 3 browser Fill 213 + Fill 132 Twitter v{{app.options.version}} Reload all New Tab Scroll Top Reset All Overview Sync Options History Plugins Remote Debug Network Throttle Help / About CLOSE © 2016 - Browsersync.io Plugins Rewrite Rules Add Rewrite Rule Current Replacements Rule 1 id: rewrite-1 Match string HTML Injector Default behaviour is to compare the entire page. You can also restrict the comparisons for localized edits. New Restriction Current Restrictions: #main #header #footer © 2016 - Browsersync.io"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/remote-debug.html","tags":[],"body":"Browser Sync - Control Panel Rectangle 1 + Rectangle 2 + Rectangle 3 browser Fill 213 + Fill 132 Twitter v{{app.options.version}} Reload all New Tab Scroll Top Reset All Overview Sync Options History Plugins Remote Debug Network Throttle Help / About CLOSE © 2016 - Browsersync.io Remote Debug Enable All Disable All Remote Debug (weinre) Some Awesome tagline here CSS Outlining Some Awesome tagline here Css Grid Overlay Some other content Grid Size Grid Colour Grid Selector Offset Top Offset Bottom Vertical Axis Horizontal Axis © 2016 - Browsersync.io"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/server-info-snippet.html","tags":[],"body":"Browser Sync - Control Panel Rectangle 1 + Rectangle 2 + Rectangle 3 browser Fill 213 + Fill 132 Twitter v{{app.options.version}} Reload all New Tab Scroll Top Reset All Overview Sync Options History Plugins Remote Debug Network Throttle Help / About CLOSE © 2016 - Browsersync.io Snippet Info Place this snippet somewhere before the closing tag in your website © 2016 - Browsersync.io"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/server-info.html","tags":[],"body":"Browser Sync - Control Panel Rectangle 1 + Rectangle 2 + Rectangle 3 browser Fill 213 + Fill 132 Twitter v{{app.options.version}} Reload all New Tab Scroll Top Reset All Overview Sync Options History Plugins Remote Debug Network Throttle Help / About CLOSE © 2016 - Browsersync.io Server Info Local http://localhost:3000 new tab sync all External http://192.168.0.1:3000 new tab sync all Tunnel http://14frwed.localtunnel.me new tab sync all Serving files from /Users/shakyshane/Sites/browser-sync-modules/browser-sync-cp/test/fixtures /Users/shakyshane/Sites/browser-sync-modules/browser-sync-cp/test/fixtures /Users/shakyshane/Sites/browser-sync-modules/browser-sync-cp/test/fixtures © 2016 - Browsersync.io"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/static/sync-options.html","tags":[],"body":"Browser Sync - Control Panel Rectangle 1 + Rectangle 2 + Rectangle 3 browser Fill 213 + Fill 132 Twitter v{{app.options.version}} Reload all New Tab Scroll Top Reset All Overview Sync Options History Plugins Remote Debug Network Throttle Help / About CLOSE © 2016 - Browsersync.io Sync Options Enable All Disable All Clicks Mirrors click events across devices Scroll Mirrors click events across devices Forms: Submit Mirrors click events across devices Forms: Toggles Mirrors click events across devices Forms: Inputs Mirrors click events across devices Clicks Mirrors click events across devices Scroll Mirrors click events across devices Forms: Submit Mirrors click events across devices Forms: Toggles Mirrors click events across devices Forms: Inputs Mirrors click events across devices © 2016 - Browsersync.io"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/browser-sync-ui/templates/directives/bs-switch.html","tags":[],"body":"{{item.title}} {{item.tagline}}"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/readme.md","tags":[],"body":"## Browsersync recipes. There are endless amounts of possible integrations and workflow scenarios when using Browsersync, so this project is an attempt to highlight as many of them as we can, whilst providing full, working examples. Here's what we have currently... - [Grunt, SASS, HTML/CSS injection example](https://github.com/Browsersync/recipes/tree/master/recipes/grunt.html.injection) - [Grunt & SASS](https://github.com/Browsersync/recipes/tree/master/recipes/grunt.sass) - [Grunt, SASS & Autoprefixer](https://github.com/Browsersync/recipes/tree/master/recipes/grunt.sass.autoprefixer) - [Browserify, Babelify + Watchify + Sourcemaps Example](https://github.com/Browsersync/recipes/tree/master/recipes/gulp.browserify) - [Gulp, SASS + Jade Templates](https://github.com/Browsersync/recipes/tree/master/recipes/gulp.jade) - [Gulp & Ruby SASS](https://github.com/Browsersync/recipes/tree/master/recipes/gulp.ruby.sass) - [Gulp & SASS](https://github.com/Browsersync/recipes/tree/master/recipes/gulp.sass) - [Gulp & Swig Templates](https://github.com/Browsersync/recipes/tree/master/recipes/gulp.swig) - [Gulp, SASS + Slow running tasks](https://github.com/Browsersync/recipes/tree/master/recipes/gulp.task.sequence) - [HTML/CSS injection example](https://github.com/Browsersync/recipes/tree/master/recipes/html.injection) - [Middleware + CSS example](https://github.com/Browsersync/recipes/tree/master/recipes/middleware.css.injection) - [Proxy example + injecting custom css file](https://github.com/Browsersync/recipes/tree/master/recipes/proxy.custom-css) - [Server example](https://github.com/Browsersync/recipes/tree/master/recipes/server) - [Server with pre-gzipped assets example](https://github.com/Browsersync/recipes/tree/master/recipes/server.gzipped.assets) - [Server includes example](https://github.com/Browsersync/recipes/tree/master/recipes/server.includes) - [Server + Logging + History API fallback middlewares Example](https://github.com/Browsersync/recipes/tree/master/recipes/server.middleware) - [Webpack + Babel](https://github.com/Browsersync/recipes/tree/master/recipes/webpack.babel) - [Webpack + Monkey Hot Loader](https://github.com/Browsersync/recipes/tree/master/recipes/webpack.monkey-hot-loader) - [Webpack + React Hot Loader](https://github.com/Browsersync/recipes/tree/master/recipes/webpack.react-hot-loader) - [Webpack + React Transform HMR](https://github.com/Browsersync/recipes/tree/master/recipes/webpack.react-transform-hmr) - [Webpack + TypeScript](https://github.com/Browsersync/recipes/tree/master/recipes/webpack.typescript) - [Webpack, TypeScript + React](https://github.com/Browsersync/recipes/tree/master/recipes/webpack.typescript.react) ... each one is a full, working example - just have a look at the `readme.md` in each one for installation instructions. ### Contributions / Feedback Spotted an error? Couldn't get one of the examples running? Have your own sweet setup that you want to show off to the world? We'd love to receive your feedback and contributions - so please get in touch! We aim to make this project the canonical source of example projects & code snippets related to running Browsersync. ### How to contribute an example First thing you should do, is take a look at our [simplest example here](https://github.com/Browsersync/recipes/tree/master/recipes/server) - this will give you a great head-start on setting up your code. Then, `fork` this repo and `clone` your fork down to your local machine. Now create a new folder inside `recipes` (note the naming structure). This is where you create your awesome example. You're free to do as you like, but there are a couple of rules you'll need to follow to ensure the project can build. **Required Files** - `package.json` (see below for requirements) - `app.js` (or any JS file showing the example) - `./app` directory. Always include the minimum HTML, JS & CSS needed to prove your example. **Do NOT include** - `readme.md` (this is created dynamically for you) - any other files that are not related to your example. ### package.json requirements **start command**: For consistency, ensure your example can be run with the command `npm start`. To do this, you just need to provide something along these lines: ```json \"scripts\": { \"start\": \"node app.js\" }, ``` **main file**: We inline your main Javascript file into the `readme.md`, so don't miss this field. ```json \"main\": \"app.js\" // or gulpfile.js etc ``` **description**: We use this as the Title. So make it short and descriptive, such as ```json \"description\": \"Server example\" ``` ### Finally, build. After you've added your example in the recipes folder, return to the root and run ```bash npm install && npm run build ``` This will install [Crossbow.js](https://github.com/shakyShane/crossbow.js) and compile the project. Commit everything that has changed and push it up to your fork. Send a Pull Request when you're ready, or if you'd like us to have a look over your code before that, just ping us [twitter](https://twitter.com/browsersync) and we'll take a look!"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/grunt.html.injection/app/index.html","tags":[],"body":"Browsersync Grunt + HTML Injection Example Browsersync Grunt, SASS & HTML injection Example Any changes you make to the HTML will be injected"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/grunt.html.injection/desc.md","tags":[],"body":"To see the live HTML injecting, along with CSS injection, simply perform changes to either `index.html` or `css/main.css`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/grunt.html.injection/readme.md","tags":[],"body":"#Browsersync - Grunt, SASS, HTML/CSS injection example ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/grunt.html.injection ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: To see the live HTML injecting, along with CSS injection, simply perform changes to either `index.html` or `css/main.css` ### Preview of `Gruntfile.js`: ```js // This shows a full config file! module.exports = function (grunt) { grunt.initConfig({ watch: { files: 'app/scss/**/*.scss', tasks: ['bsReload:css'] }, sass: { dev: { files: { 'app/css/main.css': 'app/scss/main.scss' } } }, browserSync: { dev: { options: { watchTask: true, server: './app', plugins: [ { module: \"bs-html-injector\", options: { files: \"./app/*.html\" } } ] } } }, bsReload: { css: \"main.css\" } }); // load npm tasks grunt.loadNpmTasks('grunt-contrib-sass'); grunt.loadNpmTasks('grunt-contrib-watch'); grunt.loadNpmTasks('grunt-browser-sync'); // define default task grunt.registerTask('default', ['browserSync', 'watch']); }; ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/grunt.sass.autoprefixer/app/index.html","tags":[],"body":"Browsersync, Grunt + SASS Example Browsersync, Grunt + SASS Example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/grunt.sass.autoprefixer/desc.md","tags":[],"body":"This example shows how you can chain potentially slow-running tasks, but still achieve CSS Injection. The trick, as seen below, is to use the `bsReload` task that now comes bundled with `grunt-browser-sync` since `2.1.0` Don't forget the `spawn: false` option for the watch task - it's a requirement that allows Browsersync to work correctly ```js watch: { options: { spawn: false // Important, don't remove this! }, files: 'app/**/*.scss', tasks: ['sass', 'autoprefixer', 'bsReload:css'] }, ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/grunt.sass.autoprefixer/readme.md","tags":[],"body":"#Browsersync - Grunt, SASS & Autoprefixer ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/grunt.sass.autoprefixer ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: This example shows how you can chain potentially slow-running tasks, but still achieve CSS Injection. The trick, as seen below, is to use the `bsReload` task that now comes bundled with `grunt-browser-sync` since `2.1.0` Don't forget the `spawn: false` option for the watch task - it's a requirement that allows Browsersync to work correctly ```js watch: { options: { spawn: false // Important, don't remove this! }, files: 'app/**/*.scss', tasks: ['sass', 'autoprefixer', 'bsReload:css'] }, ``` ### Preview of `Gruntfile.js`: ```js module.exports = function (grunt) { grunt.initConfig({ dirs: { css: \"app/css\", scss: \"app/scss\" }, watch: { options: { spawn: false }, sass: { files: '/**/*.scss', tasks: ['sass', 'autoprefixer', 'bsReload:css'] }, html: { files: 'app/*.html', tasks: ['bsReload:all'] } }, sass: { dev: { files: { '/main.css': '/main.scss' } } }, autoprefixer: { options: { browsers: ['last 5 versions', 'ie 8'] }, css: { src: '/main.css', dest: '/main.css' } }, browserSync: { dev: { options: { server: \"./app\", background: true } } }, bsReload: { css: { reload: \"main.css\" }, all: { reload: true } } }); // load npm tasks grunt.loadNpmTasks('grunt-contrib-sass'); grunt.loadNpmTasks('grunt-autoprefixer'); grunt.loadNpmTasks('grunt-browser-sync'); grunt.loadNpmTasks('grunt-contrib-watch'); // define default task grunt.registerTask('default', ['browserSync', 'watch']); }; ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/grunt.sass/app/index.html","tags":[],"body":"Browsersync, Grunt + SASS Example Browsersync, Grunt + SASS Example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/grunt.sass/desc.md","tags":[],"body":""},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/grunt.sass/readme.md","tags":[],"body":"#Browsersync - Grunt & SASS ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/grunt.sass ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: ### Preview of `Gruntfile.js`: ```js // This shows a full config file! module.exports = function (grunt) { grunt.initConfig({ watch: { files: 'app/scss/**/*.scss', tasks: ['sass'] }, sass: { dev: { files: { 'app/css/main.css': 'app/scss/main.scss' } } }, browserSync: { dev: { bsFiles: { src : [ 'app/css/*.css', 'app/*.html' ] }, options: { watchTask: true, server: './app' } } } }); // load npm tasks grunt.loadNpmTasks('grunt-contrib-sass'); grunt.loadNpmTasks('grunt-contrib-watch'); grunt.loadNpmTasks('grunt-browser-sync'); // define default task grunt.registerTask('default', ['browserSync', 'watch']); }; ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.browserify/app/index.html","tags":[],"body":"Browsersync Browserify Example Browsersync Browserify Example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.browserify/desc.md","tags":[],"body":"This one is a beast. Write your React JSX code, in ES6, compiled by Browserify and auto-reload all devices when the compilation is complete."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.browserify/readme.md","tags":[],"body":"#Browsersync - Browserify, Babelify + Watchify + Sourcemaps Example ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/gulp.browserify ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: This one is a beast. Write your React JSX code, in ES6, compiled by Browserify and auto-reload all devices when the compilation is complete. ### Preview of `gulpfile.js`: ```js var gulp = require('gulp'); var gutil = require('gulp-util'); var source = require('vinyl-source-stream'); var babelify = require('babelify'); var watchify = require('watchify'); var exorcist = require('exorcist'); var browserify = require('browserify'); var browserSync = require('browser-sync').create(); // Input file. watchify.args.debug = true; var bundler = watchify(browserify('./app/js/app.js', watchify.args)); // Babel transform bundler.transform(babelify.configure({ sourceMapRelative: 'app/js' })); // On updates recompile bundler.on('update', bundle); function bundle() { gutil.log('Compiling JS...'); return bundler.bundle() .on('error', function (err) { gutil.log(err.message); browserSync.notify(\"Browserify Error!\"); this.emit(\"end\"); }) .pipe(exorcist('app/js/dist/bundle.js.map')) .pipe(source('bundle.js')) .pipe(gulp.dest('./app/js/dist')) .pipe(browserSync.stream({once: true})); } /** * Gulp task alias */ gulp.task('bundle', function () { return bundle(); }); /** * First bundle, then serve from the ./app directory */ gulp.task('default', ['bundle'], function () { browserSync.init({ server: \"./app\" }); }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.jade/desc.md","tags":[],"body":""},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.jade/readme.md","tags":[],"body":"#Browsersync - Gulp, SASS + Jade Templates ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/gulp.jade ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: ### Preview of `gulpfile.js`: ```js var gulp = require('gulp'); var browserSync = require('browser-sync'); var sass = require('gulp-sass'); var jade = require('gulp-jade'); var reload = browserSync.reload; /** * Compile jade files into HTML */ gulp.task('templates', function() { var YOUR_LOCALS = {}; return gulp.src('./app/*.jade') .pipe(jade({ locals: YOUR_LOCALS })) .pipe(gulp.dest('./dist/')) }); /** * Important!! * Separate task for the reaction to `.jade` files */ gulp.task('jade-watch', ['templates'], reload); /** * Sass task for live injecting into all browsers */ gulp.task('sass', function () { return gulp.src('./app/scss/*.scss') .pipe(sass()) .pipe(gulp.dest('./dist/css')) .pipe(reload({stream: true})); }); /** * Serve and watch the scss/jade files for changes */ gulp.task('default', ['sass', 'templates'], function () { browserSync({server: './dist'}); gulp.watch('./app/scss/*.scss', ['sass']); gulp.watch('./app/*.jade', ['jade-watch']); }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.ruby.sass/app/index.html","tags":[],"body":"Browsersync, Gulp + Ruby SASS Example Browsersync, Gulp + Ruby SASS Example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.ruby.sass/desc.md","tags":[],"body":"This example highlights both the stream support for injecting CSS, aswell as the support for calling `reload` directly following html changes. We also need to filter out any source maps created by ruby-sass."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.ruby.sass/readme.md","tags":[],"body":"#Browsersync - Gulp & Ruby SASS ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/gulp.ruby.sass ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: This example highlights both the stream support for injecting CSS, aswell as the support for calling `reload` directly following html changes. We also need to filter out any source maps created by ruby-sass. ### Preview of `gulpfile.js`: ```js var gulp = require('gulp'); var browserSync = require('browser-sync'); var filter = require('gulp-filter'); var sass = require('gulp-ruby-sass'); var sourcemaps = require('gulp-sourcemaps'); var reload = browserSync.reload; var src = { scss: 'app/scss/*.scss', css: 'app/css', html: 'app/*.html' }; /** * Kick off the sass stream with source maps + error handling */ function sassStream () { return sass('app/scss', {sourcemap: true}) .on('error', function (err) { console.error('Error!', err.message); }) .pipe(sourcemaps.write('./', { includeContent: false, sourceRoot: '/app/scss' })); } /** * Start the Browsersync Static Server + Watch files */ gulp.task('serve', ['sass'], function() { browserSync({ server: \"./app\" }); gulp.watch(src.scss, ['sass']); gulp.watch(src.html).on('change', reload); }); /** * Compile sass, filter the results, inject CSS into all browsers */ gulp.task('sass', function() { return sassStream() .pipe(gulp.dest(src.css)) .pipe(filter(\"**/*.css\")) .pipe(reload({stream: true})); }); /** * Default task */ gulp.task('default', ['serve']); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.sass/app/index.html","tags":[],"body":"Browsersync, Gulp + SASS Example Browsersync, Gulp + SASS Example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.sass/desc.md","tags":[],"body":"This example highlights both the stream support for injecting CSS, as well as the support for calling `reload` directly following html changes."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.sass/readme.md","tags":[],"body":"#Browsersync - Gulp & SASS ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/gulp.sass ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: This example highlights both the stream support for injecting CSS, as well as the support for calling `reload` directly following html changes. ### Preview of `gulpfile.js`: ```js var gulp = require('gulp'); var browserSync = require('browser-sync'); var sass = require('gulp-sass'); var reload = browserSync.reload; var src = { scss: 'app/scss/*.scss', css: 'app/css', html: 'app/*.html' }; // Static Server + watching scss/html files gulp.task('serve', ['sass'], function() { browserSync({ server: \"./app\" }); gulp.watch(src.scss, ['sass']); gulp.watch(src.html).on('change', reload); }); // Compile sass into CSS gulp.task('sass', function() { return gulp.src(src.scss) .pipe(sass()) .pipe(gulp.dest(src.css)) .pipe(reload({stream: true})); }); gulp.task('default', ['serve']); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.swig/app/index.html","tags":[],"body":"Browsersync, Gulp + Swig templates Browsersync, Gulp + Swig templates"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.swig/desc.md","tags":[],"body":"This example will build HTML files from `./app` with `gulp-swig` and place them into the `dist` folder. Browsersync then serves from that folder and reloads after the templates are compiled."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.swig/readme.md","tags":[],"body":"#Browsersync - Gulp & Swig Templates ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/gulp.swig ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: This example will build HTML files from `./app` with `gulp-swig` and place them into the `dist` folder. Browsersync then serves from that folder and reloads after the templates are compiled. ### Preview of `gulpfile.js`: ```js var gulp = require('gulp'); var browserSync = require('browser-sync'); var sass = require('gulp-sass'); var swig = require('gulp-swig'); var reload = browserSync.reload; var src = { scss: 'app/scss/*.scss', css: 'app/css', html: 'app/*.html' }; // Static Server + watching scss/html files gulp.task('serve', ['sass'], function() { browserSync({ server: \"./dist\" }); gulp.watch(src.scss, ['sass']); gulp.watch(src.html, ['templates']); }); // Swig templates gulp.task('templates', function() { return gulp.src(src.html) .pipe(swig()) .pipe(gulp.dest('./dist')) .on(\"end\", reload); }); // Compile sass into CSS gulp.task('sass', function() { return gulp.src(src.scss) .pipe(sass()) .pipe(gulp.dest(src.css)) .pipe(reload({stream: true})); }); gulp.task('default', ['serve']); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.task.sequence/app/index.html","tags":[],"body":"Browsersync, Gulp, SASS + Slow tasks example Browsersync, Gulp, SASS + Slow tasks example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.task.sequence/desc.md","tags":[],"body":"This example highlights a common problem where you don't want to reload the browser until a 2 or more slow-running tasks have completed. The solution is to create the intermediate task that ensures `browserSync.reload` is not called until both slow tasks are complete."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/gulp.task.sequence/readme.md","tags":[],"body":"#Browsersync - Gulp, SASS + Slow running tasks ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/gulp.task.sequence ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: This example highlights a common problem where you don't want to reload the browser until a 2 or more slow-running tasks have completed. The solution is to create the intermediate task that ensures `browserSync.reload` is not called until both slow tasks are complete. ### Preview of `gulpfile.js`: ```js var gulp = require('gulp'); var browserSync = require('browser-sync'); var sass = require('gulp-sass'); var reload = browserSync.reload; var through = require(\"through2\"); /** * A slow task */ gulp.task('slow1', function () { return gulp.src('./app/*.html') .pipe(slowStream()); }); /** * Another Slow task */ gulp.task('slow2', function () { return gulp.src('./app/*.html') .pipe(slowStream()); }); /** * Separate task for the reaction to a file change */ gulp.task('html-watch', ['slow1', 'slow2'], reload); /** * Sass task for live injecting into all browsers */ gulp.task('sass', function () { return gulp.src('./app/scss/*.scss') .pipe(sass()) .pipe(gulp.dest('./app/css')) .pipe(reload({stream: true})); }); /** * Serve and watch the html files for changes */ gulp.task('default', function () { browserSync({server: './app'}); gulp.watch('./app/scss/*.scss', ['sass']); gulp.watch('./app/*.html', ['html-watch']); }); /** * Simulate a slow task */ function slowStream () { return through.obj(function (file, enc, cb) { this.push(file); setTimeout(cb, 2000); }); } ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/html.injection/app/index.html","tags":[],"body":"Browsersync Server Example Browsersync HTML injection Examples Any changes you make to the HTML will be injected"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/html.injection/desc.md","tags":[],"body":"To see the live HTML injecting, along with CSS injection, simply perform changes to either `index.html` or `css/main.css`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/html.injection/readme.md","tags":[],"body":"#Browsersync - HTML/CSS injection example ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/html.injection ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: To see the live HTML injecting, along with CSS injection, simply perform changes to either `index.html` or `css/main.css` ### Preview of `app.js`: ```js /** * Require Browsersync */ var bs = require('browser-sync').create(); /** * Run Browsersync with server config */ bs.init({ server: \"app\", files: [\"app/css/*.css\"], plugins: [ { module: \"bs-html-injector\", options: { files: [\"app/*.html\"] } } ] }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/middleware.css.injection/app/index.html","tags":[],"body":"Browsersync Server Example Browsersync Middleware CSS injection Example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/middleware.css.injection/desc.md","tags":[],"body":"- Perform changes to `app/css/main.less` to see live css injection"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/middleware.css.injection/readme.md","tags":[],"body":"#Browsersync - Middleware + CSS example ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/middleware.css.injection ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: - Perform changes to `app/css/main.less` to see live css injection ### Preview of `app.js`: ```js /** * Require Browsersync */ var browserSync = require(\"browser-sync\"); /** * Run the middleware on files that contain .less */ function lessMiddleware (req, res, next) { var parsed = require(\"url\").parse(req.url); if (parsed.pathname.match(/\\.less$/)) { return less(parsed.pathname).then(function (o) { res.setHeader('Content-Type', 'text/css'); res.end(o.css); }); } next(); } /** * Compile less */ function less(src) { var f = require('fs').readFileSync('app' + src).toString(); return require('less').render(f); } /** * Run Browsersync with less middleware */ browserSync({ files: \"app/css/*.less\", server: \"app\", injectFileTypes: [\"less\"], /** * Catch all requests, if any are for .less files, recompile on the fly and * send back a CSS response */ middleware: lessMiddleware }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/proxy.custom-css/desc.md","tags":[],"body":"To see the live-updating and CSS injecting, simply perform changes to `app/static/_custom.css`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/proxy.custom-css/readme.md","tags":[],"body":"#Browsersync - Proxy example + injecting custom css file ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/proxy.custom-css ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: To see the live-updating and CSS injecting, simply perform changes to `app/static/_custom.css` ### Preview of `app.js`: ```js /** * Require Browsersync */ var browserSync = require('browser-sync').create(); /** * Run Browsersync with server config * You can use an arrays for files to specify multiple files */ browserSync.init({ proxy: \"example.com\", serveStatic: [\"app/static\"], files: \"app/static/_custom.css\", snippetOptions: { rule: { match: //i, fn: function (snippet, match) { return '' + snippet + match; } } } }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.gzipped.assets/app/index.html","tags":[],"body":"Browsersync Server + Gzipped assets Example Browsersync Server + Gzipped assets Example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.gzipped.assets/desc.md","tags":[],"body":"This example shows how you can use the `connect-gzip-static` middleware to serve already-gzipped assets."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.gzipped.assets/readme.md","tags":[],"body":"#Browsersync - Server with pre-gzipped assets example ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/server.gzipped.assets ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: This example shows how you can use the `connect-gzip-static` middleware to serve already-gzipped assets. ### Preview of `app.js`: ```js /** * Require Browsersync */ var browserSync = require('browser-sync').create(); var middleware = require('connect-gzip-static')('./app'); /** * Run Browsersync with server config * Add middleware with override:true to ensure all files are * picked up. */ browserSync.init({ server: 'app', files: ['app/*.html', 'app/css/*.css'] }, function (err, bs) { bs.addMiddleware(\"*\", middleware, { override: true }); }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.includes/app/footer.html","tags":[],"body":"Copyright"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.includes/app/header.html","tags":[],"body":"Some title!"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.includes/app/index.html","tags":[],"body":"Browsersync Server Includes Example @include(\"app/header.html\") Browsersync Server Includes Example @include(\"app/footer.html\")"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.includes/desc.md","tags":[],"body":""},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.includes/readme.md","tags":[],"body":"#Browsersync - Server includes example ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/server.includes ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: ### Preview of `app.js`: ```js /** * Require Browsersync */ var browserSync = require('browser-sync').create(); var fs = require('fs'); /** * Run Browsersync with server config */ browserSync.init({ server: 'app', files: ['app/*.html', 'app/css/*.css'], rewriteRules: [ { match: /@include\\(\"(.+?)\"\\)/g, fn: function (match, filename) { if (fs.existsSync(filename)) { return fs.readFileSync(filename); } else { return ''+filename+' could not be found'; } } } ] }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.middleware/app/index.html","tags":[],"body":"Browsersync Server Example Browsersync Server Example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.middleware/desc.md","tags":[],"body":"This example adds the [connect-logger](https://www.npmjs.com/package/connect-logger) middleware ![Logger](http://f.cl.ly/items/3i2G451L3O3R182b3p14/Screen%20Shot%202015-02-18%20at%2016.02.59.png)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.middleware/readme.md","tags":[],"body":"#Browsersync - Server + Logging + History API fallback middlewares Example ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/server.middleware ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: This example adds the [connect-logger](https://www.npmjs.com/package/connect-logger) middleware ![Logger](http://f.cl.ly/items/3i2G451L3O3R182b3p14/Screen%20Shot%202015-02-18%20at%2016.02.59.png) ### Preview of `app.js`: ```js /** * Require Browsersync */ var browserSync = require('browser-sync').create(); var historyApiFallback = require('connect-history-api-fallback') /** * Run Browsersync with server config */ browserSync.init({ server: \"app\", files: [\"app/*.html\", \"app/css/*.css\"], middleware: [require(\"connect-logger\")(), historyApiFallback()] }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server/app/index.html","tags":[],"body":"Browsersync Server Example Browsersync Server Example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server/desc.md","tags":[],"body":"To see the live-updating and CSS injecting, simply perform changes to either `index.html` or `css/main.css`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/server/readme.md","tags":[],"body":"#Browsersync - Server example ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/server ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: To see the live-updating and CSS injecting, simply perform changes to either `index.html` or `css/main.css` ### Preview of `app.js`: ```js /** * Require Browsersync */ var browserSync = require('browser-sync'); /** * Run Browsersync with server config */ browserSync({ server: \"app\", files: [\"app/*.html\", \"app/css/*.css\"] }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.babel/app/index.html","tags":[],"body":"Browsersync, Webpack + Babel Browsersync, Webpack + Babel Example 0 Increase Decrease"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.babel/desc.md","tags":[],"body":"Edit any files within the `src` folder"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.babel/readme.md","tags":[],"body":"#Browsersync - Webpack + Babel ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/webpack.babel ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: Edit any files within the `src` folder ### Preview of `app.js`: ```js /** * Require Browsersync along with webpack and middleware for it */ var browserSync = require('browser-sync').create(); var webpack = require('webpack'); var webpackDevMiddleware = require('webpack-dev-middleware'); var stripAnsi = require('strip-ansi'); /** * Require ./webpack.config.js and make a bundler from it */ var webpackConfig = require('./webpack.config'); var bundler = webpack(webpackConfig); /** * Reload all devices when bundle is complete * or send a fullscreen error message to the browser instead */ bundler.plugin('done', function (stats) { if (stats.hasErrors() || stats.hasWarnings()) { return browserSync.sockets.emit('fullscreen:message', { title: \"Webpack Error:\", body: stripAnsi(stats.toString()), timeout: 100000 }); } browserSync.reload(); }); /** * Run Browsersync and use middleware for Hot Module Replacement */ browserSync.init({ server: 'app', open: false, logFileChanges: false, middleware: [ webpackDevMiddleware(bundler, { publicPath: webpackConfig.output.publicPath, stats: {colors: true} }) ], plugins: ['bs-fullscreen-message'], files: [ 'app/css/*.css', 'app/*.html' ] }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.monkey-hot-loader/app/index.html","tags":[],"body":"Browsersync, Webpack + Monkey Hot Loader Example Browsersync, Webpack + Monkey Hot Loader Example 0 Increase Decrease"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.monkey-hot-loader/desc.md","tags":[],"body":"To see `monkey-hot-loader` in action, edit top-level functions (`inc`, `dec`) inside `main.js` file"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.monkey-hot-loader/readme.md","tags":[],"body":"#Browsersync - Webpack + Monkey Hot Loader ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/webpack.monkey-hot-loader ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: To see `monkey-hot-loader` in action, edit top-level functions (`inc`, `dec`) inside `main.js` file ### Preview of `app.js`: ```js /** * Require Browsersync along with webpack and middleware for it */ var browserSync = require('browser-sync'); var webpack = require('webpack'); var webpackDevMiddleware = require('webpack-dev-middleware'); var webpackHotMiddleware = require('webpack-hot-middleware'); /** * Require ./webpack.config.js and make a bundler from it */ var webpackConfig = require('./webpack.config'); var bundler = webpack(webpackConfig); /** * Run Browsersync and use middleware for Hot Module Replacement */ browserSync({ server: { baseDir: 'app', middleware: [ webpackDevMiddleware(bundler, { // IMPORTANT: dev middleware can't access config, so we should // provide publicPath by ourselves publicPath: webpackConfig.output.publicPath, // pretty colored output stats: { colors: true } // for other settings see // http://webpack.github.io/docs/webpack-dev-middleware.html }), // bundler should be the same as above webpackHotMiddleware(bundler) ] }, // no need to watch '*.js' here, webpack will take care of it for us, // including full page reloads if HMR won't work files: [ 'app/css/*.css', 'app/*.html' ] }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.react-hot-loader/app/index.html","tags":[],"body":"Browsersync, Webpack + React Hot Loader Example Browsersync, Webpack + React Hot Loader Example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.react-hot-loader/desc.md","tags":[],"body":"To see `react-hot-loader` in action, edit `js/HelloWorld.jsx`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.react-hot-loader/readme.md","tags":[],"body":"#Browsersync - Webpack + React Hot Loader ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/webpack.react-hot-loader ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: To see `react-hot-loader` in action, edit `js/HelloWorld.jsx` ### Preview of `app.js`: ```js /** * Require Browsersync along with webpack and middleware for it */ var browserSync = require('browser-sync'); var webpack = require('webpack'); var webpackDevMiddleware = require('webpack-dev-middleware'); var webpackHotMiddleware = require('webpack-hot-middleware'); /** * Require ./webpack.config.js and make a bundler from it */ var webpackConfig = require('./webpack.config'); var bundler = webpack(webpackConfig); /** * Run Browsersync and use middleware for Hot Module Replacement */ browserSync({ server: { baseDir: 'app', middleware: [ webpackDevMiddleware(bundler, { // IMPORTANT: dev middleware can't access config, so we should // provide publicPath by ourselves publicPath: webpackConfig.output.publicPath, // pretty colored output stats: { colors: true } // for other settings see // http://webpack.github.io/docs/webpack-dev-middleware.html }), // bundler should be the same as above webpackHotMiddleware(bundler) ] }, // no need to watch '*.js' here, webpack will take care of it for us, // including full page reloads if HMR won't work files: [ 'app/css/*.css', 'app/*.html' ] }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.react-transform-hmr/app/index.html","tags":[],"body":"Browsersync, Webpack + React Hot Loader Example Browsersync, Webpack + React Hot Loader Example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.react-transform-hmr/desc.md","tags":[],"body":"To see `react-transform-hmr` in action, edit `js/HelloWorld.jsx`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.react-transform-hmr/readme.md","tags":[],"body":"#Browsersync - Webpack + React Transform HMR ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/webpack.react-transform-hmr ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: To see `react-transform-hmr` in action, edit `js/HelloWorld.jsx` ### Preview of `app.js`: ```js /** * Require Browsersync along with webpack and middleware for it */ var browserSync = require('browser-sync'); var webpack = require('webpack'); var webpackDevMiddleware = require('webpack-dev-middleware'); var webpackHotMiddleware = require('webpack-hot-middleware'); /** * Require ./webpack.config.js and make a bundler from it */ var webpackConfig = require('./webpack.config'); var bundler = webpack(webpackConfig); /** * Run Browsersync and use middleware for Hot Module Replacement */ browserSync({ server: { baseDir: 'app', middleware: [ webpackDevMiddleware(bundler, { // IMPORTANT: dev middleware can't access config, so we should // provide publicPath by ourselves publicPath: webpackConfig.output.publicPath, // pretty colored output stats: { colors: true } // for other settings see // http://webpack.github.io/docs/webpack-dev-middleware.html }), // bundler should be the same as above webpackHotMiddleware(bundler) ] }, // no need to watch '*.js' here, webpack will take care of it for us, // including full page reloads if HMR won't work files: [ 'app/css/*.css', 'app/*.html' ] }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.typescript.react/app/index.html","tags":[],"body":"Browsersync, Webpack, TypeScript + React Browsersync, Webpack, TypeScript + React example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.typescript.react/desc.md","tags":[],"body":"Run `npm run preview` for the 8k (zipped) production version"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.typescript.react/readme.md","tags":[],"body":"#Browsersync - Webpack, TypeScript + React ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/webpack.typescript.react ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: Run `npm run preview` for the 8k (zipped) production version ### Preview of `app.js`: ```js /** * Require Browsersync along with webpack and middleware for it */ var browserSync = require('browser-sync').create(); var webpack = require('webpack'); var webpackDevMiddleware = require('webpack-dev-middleware'); var stripAnsi = require('strip-ansi'); /** * Require ./webpack.config.js and make a bundler from it */ var webpackConfig = require('./webpack.dev.config'); var bundler = webpack(webpackConfig); /** * Reload all devices when bundle is complete * or send a fullscreen error message to the browser instead */ bundler.plugin('done', function (stats) { if (stats.hasErrors() || stats.hasWarnings()) { return browserSync.sockets.emit('fullscreen:message', { title: \"Webpack Error:\", body: stripAnsi(stats.toString()), timeout: 100000 }); } browserSync.reload(); }); /** * Run Browsersync and use middleware for Hot Module Replacement */ browserSync.init({ server: 'app', logFileChanges: false, middleware: [ webpackDevMiddleware(bundler, { publicPath: webpackConfig.output.publicPath, stats: {colors: true} }) ], plugins: ['bs-fullscreen-message'], files: [ 'app/css/*.css', 'app/*.html' ] }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.typescript/app/index.html","tags":[],"body":"Browsersync, Webpack + TypeScript Browsersync, Webpack, and TypeScript Example"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.typescript/desc.md","tags":[],"body":"See `src/main.ts`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/bs-recipes/recipes/webpack.typescript/readme.md","tags":[],"body":"#Browsersync - Webpack + TypeScript ## Installation/Usage: To try this example, follow these 4 simple steps. **Step 1**: Clone this entire repo ```bash $ git clone https://github.com/Browsersync/recipes.git bs-recipes ``` **Step 2**: Move into the directory containing this example ```bash $ cd bs-recipes/recipes/webpack.typescript ``` **Step 3**: Install dependencies ```bash $ npm install ``` **Step 4**: Run the example ```bash $ npm start ``` ### Additional Info: See `src/main.ts` ### Preview of `app.js`: ```js /** * Require Browsersync along with webpack and middleware for it */ var browserSync = require('browser-sync').create(); var webpack = require('webpack'); var webpackDevMiddleware = require('webpack-dev-middleware'); var stripAnsi = require('strip-ansi'); /** * Require ./webpack.config.js and make a bundler from it */ var webpackConfig = require('./webpack.config'); var bundler = webpack(webpackConfig); /** * Reload all devices when bundle is complete * or send a fullscreen error message to the browser instead */ bundler.plugin('done', function (stats) { if (stats.hasErrors() || stats.hasWarnings()) { return browserSync.sockets.emit('fullscreen:message', { title: \"Webpack Error:\", body: stripAnsi(stats.toString()), timeout: 100000 }); } browserSync.reload(); }); /** * Run Browsersync and use middleware for Hot Module Replacement */ browserSync.init({ server: 'app', open: false, logFileChanges: false, middleware: [ webpackDevMiddleware(bundler, { publicPath: webpackConfig.output.publicPath, stats: {colors: true} }) ], plugins: ['bs-fullscreen-message'], files: [ 'app/css/*.css', 'app/*.html' ] }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/CHANGELOG.md","tags":[],"body":"# Chokidar 1.4.3 (Feb 26, 2016) * Update async-each dependency to ^1.0.0 # Chokidar 1.4.2 (Dec 30, 2015) * Now correctly emitting `stats` with `awaitWriteFinish` option. # Chokidar 1.4.1 (Dec 9, 2015) * The watcher could now be correctly subclassed with ES6 class syntax. # Chokidar 1.4.0 (Dec 3, 2015) * Add `.getWatched()` method, exposing all file system entries being watched * Apply `awaitWriteFinish` methodology to `change` events (in addition to `add`) * Fix handling of symlinks within glob paths (#293) * Fix `addDir` and `unlinkDir` events under globs (#337, #401) * Fix issues with `.unwatch()` (#374, #403) # Chokidar 1.3.0 (Nov 18, 2015) * Improve `awaitWriteFinish` option behavior * Fix some `cwd` option behavior on Windows * `awaitWriteFinish` and `cwd` are now compatible * Fix some race conditions. * #379: Recreating deleted directory doesn't trigger event * When adding a previously-deleted file, emit 'add', not 'change' # Chokidar 1.2.0 (Oct 1, 2015) * Allow nested arrays of paths to be provided to `.watch()` and `.add()` * Add `awaitWriteFinish` option # Chokidar 1.1.0 (Sep 23, 2015) * Dependency updates including fsevents@1.0.0, improving installation # Chokidar 1.0.6 (Sep 18, 2015) * Fix issue with `.unwatch()` method and relative paths # Chokidar 1.0.5 (Jul 20, 2015) * Fix regression with regexes/fns using in `ignored` # Chokidar 1.0.4 (Jul 15, 2015) * Fix bug with `ignored` files/globs while `cwd` option is set # Chokidar 1.0.3 (Jun 4, 2015) * Fix race issue with `alwaysStat` option and removed files # Chokidar 1.0.2 (May 30, 2015) * Fix bug with absolute paths and ENAMETOOLONG error # Chokidar 1.0.1 (Apr 8, 2015) * Fix bug with `.close()` method in `fs.watch` mode with `persistent: false` option # Chokidar 1.0.0 (Apr 7, 2015) * Glob support! Use globs in `watch`, `add`, and `unwatch` methods * Comprehensive symlink support * New `unwatch` method to turn off watching of previously watched paths * More flexible `ignored` option allowing regex, function, glob, or array courtesy of [anymatch](https://github.com/es128/anymatch) * New `cwd` option to set base dir from which relative paths are derived * New `depth` option for limiting recursion * New `alwaysStat` option to ensure [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats) gets passed with every add/change event * New `ready` event emitted when initial fs tree scan is done and watcher is ready for changes * New `raw` event exposing data and events from the lower-level watch modules * New `followSymlinks` option to impact whether symlinks' targets or the symlink files themselves are watched * New `atomic` option for normalizing artifacts from text editors that use atomic write methods * Ensured watcher's stability with lots of bugfixes. # Chokidar 0.12.6 (Jan 6, 2015) * Fix bug which breaks `persistent: false` mode when change events occur # Chokidar 0.12.5 (Dec 17, 2014) * Fix bug with matching parent path detection for fsevents instance sharing * Fix bug with ignored watch path in nodefs modes # Chokidar 0.12.4 (Dec 14, 2014) * Fix bug in `fs.watch` mode that caused watcher to leak into `cwd` * Fix bug preventing ready event when there are symlinks to ignored paths # Chokidar 0.12.3 (Dec 13, 2014) * Fix handling of special files such as named pipes and sockets # Chokidar 0.12.2 (Dec 12, 2014) * Fix recursive symlink handling and some other path resolution problems # Chokidar 0.12.1 (Dec 10, 2014) * Fix a case where file symlinks were not followed properly # Chokidar 0.12.0 (Dec 8, 2014) * Symlink support * Add `followSymlinks` option, which defaults to `true` * Change default watch mode on Linux to non-polling `fs.watch` * Add `atomic` option to normalize events from editors using atomic writes * Particularly Vim and Sublime * Add `raw` event which exposes data from the underlying watch method # Chokidar 0.11.1 (Nov 19, 2014) * Fix a bug where an error is thrown when `fs.watch` instantiation fails # Chokidar 0.11.0 (Nov 16, 2014) * Add a `ready` event, which is emitted after initial file scan completes * Fix issue with options keys passed in defined as `undefined` * Rename some internal `FSWatcher` properties to indicate they're private # Chokidar 0.10.9 (Nov 15, 2014) * Fix some leftover issues from adding watcher reuse # Chokidar 0.10.8 (Nov 14, 2014) * Remove accidentally committed/published `console.log` statement. * Sry 'bout that :crying_cat_face: # Chokidar 0.10.7 (Nov 14, 2014) * Apply watcher reuse methodology to `fs.watch` and `fs.watchFile` as well # Chokidar 0.10.6 (Nov 12, 2014) * More efficient creation/reuse of FSEvents instances to avoid system limits * Reduce simultaneous FSEvents instances allowed in a process * Handle errors thrown by `fs.watch` upon invocation # Chokidar 0.10.5 (Nov 6, 2014) * Limit number of simultaneous FSEvents instances (fall back to other methods) * Prevent some cases of EMFILE errors during initialization * Fix ignored files emitting events in some fsevents-mode circumstances # Chokidar 0.10.4 (Nov 5, 2014) * Bump fsevents dependency to ~0.3.1 * Should resolve build warnings and `npm rebuild` on non-Macs # Chokidar 0.10.3 (Oct 28, 2014) * Fix removed dir emitting as `unlink` instead of `unlinkDir` * Fix issues with file changing to dir or vice versa (gh-165) * Fix handling of `ignored` option in fsevents mode # Chokidar 0.10.2 (Oct 23, 2014) * Improve individual file watching * Fix fsevents keeping process alive when `persistent: false` # Chokidar 0.10.1 (19 October 2014) * Improve handling of text editor atomic writes # Chokidar 0.10.0 (Oct 18, 2014) * Many stability and consistency improvements * Resolve many cases of duplicate or wrong events * Correct for fsevents inconsistencies * Standardize handling of errors and relative paths * Fix issues with watching `./` # Chokidar 0.9.0 (Sep 25, 2014) * Updated fsevents to 0.3 * Update per-system defaults * Fix issues with closing chokidar instance * Fix duplicate change events on win32 # Chokidar 0.8.2 (Mar 26, 2014) * Fixed npm issues related to fsevents dep. * Updated fsevents to 0.2. # Chokidar 0.8.1 (Dec 16, 2013) * Optional deps are now truly optional on windows and linux. * Rewritten in JS, again. * Fixed some FSEvents-related bugs. # Chokidar 0.8.0 (Nov 29, 2013) * Added ultra-fast low-CPU OS X file watching with FSEvents. It is enabled by default. * Added `addDir` and `unlinkDir` events. * Polling is now disabled by default on all platforms. # Chokidar 0.7.1 (Nov 18, 2013) * `Watcher#close` now also removes all event listeners. # Chokidar 0.7.0 (Oct 22, 2013) * When `options.ignored` is two-argument function, it will also be called after stating the FS, with `stats` argument. * `unlink` is no longer emitted on directories. # Chokidar 0.6.3 (Aug 12, 2013) * Added `usePolling` option (default: `true`). When `false`, chokidar will use `fs.watch` as backend. `fs.watch` is much faster, but not like super reliable. # Chokidar 0.6.2 (Mar 19, 2013) * Fixed watching initially empty directories with `ignoreInitial` option. # Chokidar 0.6.1 (Mar 19, 2013) * Added node.js 0.10 support. # Chokidar 0.6.0 (Mar 10, 2013) * File attributes (stat()) are now passed to `add` and `change` events as second arguments. * Changed default polling interval for binary files to 300ms. # Chokidar 0.5.3 (Jan 13, 2013) * Removed emitting of `change` events before `unlink`. # Chokidar 0.5.2 (Jan 13, 2013) * Removed postinstall script to prevent various npm bugs. # Chokidar 0.5.1 (Jan 6, 2013) * When starting to watch non-existing paths, chokidar will no longer throw ENOENT error. * Fixed bug with absolute path. # Chokidar 0.5.0 (Dec 9, 2012) * Added a bunch of new options: * `ignoreInitial` that allows to ignore initial `add` events. * `ignorePermissionErrors` that allows to ignore ENOENT etc perm errors. * `interval` and `binaryInterval` that allow to change default fs polling intervals. # Chokidar 0.4.0 (Jul 26, 2012) * Added `all` event that receives two args (event name and path) that combines `add`, `change` and `unlink` events. * Switched to `fs.watchFile` on node.js 0.8 on windows. * Files are now correctly unwatched after unlink. # Chokidar 0.3.0 (Jun 24, 2012) * `unlink` event are no longer emitted for directories, for consistency with `add`. # Chokidar 0.2.6 (Jun 8, 2012) * Prevented creating of duplicate 'add' events. # Chokidar 0.2.5 (Jun 8, 2012) * Fixed a bug when new files in new directories hadn't been added. # Chokidar 0.2.4 (Jun 7, 2012) * Fixed a bug when unlinked files emitted events after unlink. # Chokidar 0.2.3 (May 12, 2012) * Fixed watching of files on windows. # Chokidar 0.2.2 (May 4, 2012) * Fixed watcher signature. # Chokidar 0.2.1 (May 4, 2012) * Fixed invalid API bug when using `watch()`. # Chokidar 0.2.0 (May 4, 2012) * Rewritten in js. # Chokidar 0.1.1 (Apr 26, 2012) * Changed api to `chokidar.watch()`. * Fixed compilation on windows. # Chokidar 0.1.0 (Apr 20, 2012) * Initial release, extracted from [Brunch](https://github.com/brunch/brunch/blob/9847a065aea300da99bd0753f90354cde9de1261/src/helpers.coffee#L66)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/anymatch/README.md","tags":[],"body":"anymatch [![Build Status](https://travis-ci.org/es128/anymatch.svg?branch=master)](https://travis-ci.org/es128/anymatch) [![Coverage Status](https://img.shields.io/coveralls/es128/anymatch.svg?branch=master)](https://coveralls.io/r/es128/anymatch?branch=master) ====== Javascript module to match a string against a regular expression, glob, string, or function that takes the string as an argument and returns a truthy or falsy value. The matcher can also be an array of any or all of these. Useful for allowing a very flexible user-defined config to define things like file paths. [![NPM](https://nodei.co/npm/anymatch.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/anymatch/) [![NPM](https://nodei.co/npm-dl/anymatch.png?height=3&months=9)](https://nodei.co/npm-dl/anymatch/) Usage ----- ```sh npm install anymatch --save ``` #### anymatch (matchers, testString, [returnIndex], [startIndex], [endIndex]) * __matchers__: (_Array|String|RegExp|Function_) String to be directly matched, string with glob patterns, regular expression test, function that takes the testString as an argument and returns a truthy value if it should be matched, or an array of any number and mix of these types. * __testString__: (_String|Array_) The string to test against the matchers. If passed as an array, the first element of the array will be used as the `testString` for non-function matchers, while the entire array will be applied as the arguments for function matchers. * __returnIndex__: (_Boolean [optional]_) If true, return the array index of the first matcher that that testString matched, or -1 if no match, instead of a boolean result. * __startIndex, endIndex__: (_Integer [optional]_) Can be used to define a subset out of the array of provided matchers to test against. Can be useful with bound matcher functions (see below). When used with `returnIndex = true` preserves original indexing. Behaves the same as `Array.prototype.slice` (i.e. includes array members up to, but not including endIndex). ```js var anymatch = require('anymatch'); var matchers = [ 'path/to/file.js', 'path/anyjs/**/*.js', /foo.js$/, function (string) { return string.indexOf('bar') !== -1 && string.length > 10 } ]; anymatch(matchers, 'path/to/file.js'); // true anymatch(matchers, 'path/anyjs/baz.js'); // true anymatch(matchers, 'path/to/foo.js'); // true anymatch(matchers, 'path/to/bar.js'); // true anymatch(matchers, 'bar.js'); // false // returnIndex = true anymatch(matchers, 'foo.js', true); // 2 anymatch(matchers, 'path/anyjs/foo.js', true); // 1 // skip matchers anymatch(matchers, 'path/to/file.js', false, 1); // false anymatch(matchers, 'path/anyjs/foo.js', true, 2, 3); // 2 anymatch(matchers, 'path/to/bar.js', true, 0, 3); // -1 ``` #### anymatch (matchers) You can also pass in only your matcher(s) to get a curried function that has already been bound to the provided matching criteria. This can be used as an `Array.prototype.filter` callback. ```js var matcher = anymatch(matchers); matcher('path/to/file.js'); // true matcher('path/anyjs/baz.js', true); // 1 matcher('path/anyjs/baz.js', true, 2); // -1 ['foo.js', 'bar.js'].filter(matcher); // ['foo.js'] ``` Change Log ---------- [See release notes page on GitHub](https://github.com/es128/anymatch/releases) NOTE: As of v1.2.0, anymatch uses [micromatch](https://github.com/jonschlinkert/micromatch) for glob pattern matching. The glob matching behavior should be functionally equivalent to the commonly used [minimatch](https://github.com/isaacs/minimatch) library (aside from some fixed bugs and greater performance), so a major version bump wasn't merited. Issues with glob pattern matching should be reported directly to the [micromatch issue tracker](https://github.com/jonschlinkert/micromatch/issues). License ------- [ISC](https://raw.github.com/es128/anymatch/master/LICENSE)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/anymatch/node_modules/arrify/readme.md","tags":[],"body":"# arrify [![Build Status](https://travis-ci.org/sindresorhus/arrify.svg?branch=master)](https://travis-ci.org/sindresorhus/arrify) > Convert a value to an array ## Install ``` $ npm install --save arrify ``` ## Usage ```js const arrify = require('arrify'); arrify('unicorn'); //=> ['unicorn'] arrify(['unicorn']); //=> ['unicorn'] arrify(null); //=> [] arrify(undefined); //=> [] ``` *Supplying `null` or `undefined` results in an empty array.* ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/async-each/CHANGELOG.md","tags":[],"body":"# async-each 1.0.0 (26 November 2015) * Bumped version to 1.0.0 (no functional changes) # async-each 0.1.6 (5 November 2014) * Add license to package.json # async-each 0.1.5 (22 October 2014) * Clean up package.json to fix npm warning about `repo` # async-each 0.1.4 (12 November 2013) * Fixed AMD definition. # async-each 0.1.3 (25 July 2013) * Fixed double wrapping of errors. # async-each 0.1.2 (7 July 2013) * Fixed behaviour on empty arrays. # async-each 0.1.1 (14 June 2013) * Wrapped function in closure, enabled strict mode. # async-each 0.1.0 (14 June 2013) * Initial release."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/async-each/README.md","tags":[],"body":"# async-each No-bullshit, ultra-simple, 35-lines-of-code async parallel forEach function for JavaScript. We don't need junky 30K async libs. Really. For browsers and node.js. ## Installation * Just include async-each before your scripts. * `npm install async-each` if you’re using node.js. * `component install paulmillr/async-each` if you’re using [component(1)](https://github.com/component/component). * `bower install async-each` if you’re using [Twitter Bower](http://bower.io). ## Usage * `each(array, iterator, callback);` — `Array`, `Function`, `(optional) Function` * `iterator(item, next)` receives current item and a callback that will mark the item as done. `next` callback receives optional `error, transformedItem` arguments. * `callback(error, transformedArray)` optionally receives first error and transformed result `Array`. Node.js: ```javascript var each = require('async-each'); each(['a.js', 'b.js', 'c.js'], fs.readFile, function(error, contents) { if (error) console.error(error); console.log('Contents for a, b and c:', contents); }); ``` Browser: ```javascript // component(1) var each = require('async-each'); each(list, fn, callback); // Default: window.asyncEach(list, fn, callback); ``` ## License The MIT License (MIT) Copyright (c) 2013 Paul Miller [paulmillr.com](http://paulmillr.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/glob-parent/README.md","tags":[],"body":"glob-parent [![Build Status](https://travis-ci.org/es128/glob-parent.svg)](https://travis-ci.org/es128/glob-parent) [![Coverage Status](https://img.shields.io/coveralls/es128/glob-parent.svg)](https://coveralls.io/r/es128/glob-parent?branch=master) ====== Javascript module to extract the non-magic parent path from a glob string. [![NPM](https://nodei.co/npm/glob-parent.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/glob-parent/) [![NPM](https://nodei.co/npm-dl/glob-parent.png?height=3&months=9)](https://nodei.co/npm-dl/glob-parent/) Usage ----- ```sh npm install glob-parent --save ``` ```js var globParent = require('glob-parent'); globParent('path/to/*.js'); // 'path/to' globParent('/root/path/to/*.js'); // '/root/path/to' globParent('/*.js'); // '/' globParent('*.js'); // '.' globParent('**/*.js'); // '.' globParent('path/{to,from}'); // 'path' globParent('path/!(to|from)'); // 'path' globParent('path/?(to|from)'); // 'path' globParent('path/+(to|from)'); // 'path' globParent('path/*(to|from)'); // 'path' globParent('path/@(to|from)'); // 'path' globParent('path/**/*'); // 'path' // if provided a non-glob path, returns the nearest dir globParent('path/foo/bar.js'); // 'path/foo' globParent('path/foo/'); // 'path/foo' globParent('path/foo'); // 'path' (see issue #3 for details) ``` Change Log ---------- [See release notes page on GitHub](https://github.com/es128/glob-parent/releases) License ------- [ISC](https://raw.github.com/es128/glob-parent/master/LICENSE)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/inherits/README.md","tags":[],"body":"Browser-friendly inheritance fully compatible with standard node.js [inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor). This package exports standard `inherits` from node.js `util` module in node environment, but also provides alternative browser-friendly implementation through [browser field](https://gist.github.com/shtylman/4339901). Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of `util`. It also has a shim for old browsers with no `Object.create` support. While keeping you sure you are using standard `inherits` implementation in node.js environment, it allows bundlers such as [browserify](https://github.com/substack/node-browserify) to not include full `util` package to your client code if all you need is just `inherits` function. It worth, because browser shim for `util` package is large and `inherits` is often the single function you need from it. It's recommended to use this package instead of `require('util').inherits` for any code that has chances to be used not only in node.js but in browser too. ## usage ```js var inherits = require('inherits'); // then use exactly as the standard one ``` ## note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js `inherits`. If you are using version ~1.0 and planning to switch to ~2.0, be careful: * new version uses `super_` instead of `super` for referencing superclass * new version overwrites current prototype while old one preserves any existing fields on it"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/is-binary-path/node_modules/binary-extensions/readme.md","tags":[],"body":"# binary-extensions [![Build Status](https://travis-ci.org/sindresorhus/binary-extensions.svg?branch=master)](https://travis-ci.org/sindresorhus/binary-extensions) > List of binary file extensions The list is just a [JSON file](binary-extensions.json) and can be used wherever. ## Install ``` $ npm install --save binary-extensions ``` ## Usage ```js var binaryExtensions = require('binary-extensions'); console.log(binaryExtensions); //=> ['3ds', '3g2', ...] ``` ## Related - [`is-binary-path`](https://github.com/sindresorhus/is-binary-path) - Check if a filepath is a binary file - [`text-extensions`](https://github.com/sindresorhus/text-extensions) - List of text file extensions ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/is-binary-path/readme.md","tags":[],"body":"# is-binary-path [![Build Status](https://travis-ci.org/sindresorhus/is-binary-path.svg?branch=master)](https://travis-ci.org/sindresorhus/is-binary-path) > Check if a filepath is a binary file ## Install ``` $ npm install --save is-binary-path ``` ## Usage ```js var isBinaryPath = require('is-binary-path'); isBinaryPath('src/unicorn.png'); //=> true isBinaryPath('src/unicorn.txt'); //=> false ``` ## Related - [`binary-extensions`](https://github.com/sindresorhus/binary-extensions) - List of binary file extensions - [`is-text-path`](https://github.com/sindresorhus/is-text-path) - Check if a filepath is a text file ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/is-glob/README.md","tags":[],"body":"# is-glob [![NPM version](https://badge.fury.io/js/is-glob.svg)](http://badge.fury.io/js/is-glob) [![Build Status](https://travis-ci.org/jonschlinkert/is-glob.svg)](https://travis-ci.org/jonschlinkert/is-glob) > Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a better user experience. Also take a look at [is-valid-glob](https://github.com/jonschlinkert/is-valid-glob) and [has-glob](https://github.com/jonschlinkert/has-glob). ## Install Install with [npm](https://www.npmjs.com/) ```sh $ npm i is-glob --save ``` ## Usage ```js var isGlob = require('is-glob'); ``` **True** Patterns that have glob characters or regex patterns will return `true`: ```js isGlob('!foo.js'); isGlob('*.js'); isGlob('**/abc.js'); isGlob('abc/*.js'); isGlob('abc/(aaa|bbb).js'); isGlob('abc/[a-z].js'); isGlob('abc/{a,b}.js'); isGlob('abc/?.js'); //=> true ``` Extglobs ```js isGlob('abc/@(a).js'); isGlob('abc/!(a).js'); isGlob('abc/+(a).js'); isGlob('abc/*(a).js'); isGlob('abc/?(a).js'); //=> true ``` **False** Patterns that do not have glob patterns return `false`: ```js isGlob('abc.js'); isGlob('abc/def/ghi.js'); isGlob('foo.js'); isGlob('abc/@.js'); isGlob('abc/+.js'); isGlob(); isGlob(null); //=> false ``` Arrays are also `false` (If you want to check if an array has a glob pattern, use [has-glob](https://github.com/jonschlinkert/has-glob)): ```js isGlob(['**/*.js']); isGlob(['foo.js']); //=> false ``` ## Related * [has-glob](https://www.npmjs.com/package/has-glob): Returns `true` if an array has a glob pattern. | [homepage](https://github.com/jonschlinkert/has-glob) * [is-extglob](https://www.npmjs.com/package/is-extglob): Returns true if a string has an extglob. | [homepage](https://github.com/jonschlinkert/is-extglob) * [is-posix-bracket](https://www.npmjs.com/package/is-posix-bracket): Returns true if the given string is a POSIX bracket expression (POSIX character class). | [homepage](https://github.com/jonschlinkert/is-posix-bracket) * [is-valid-glob](https://www.npmjs.com/package/is-valid-glob): Return true if a value is a valid glob pattern or patterns. | [homepage](https://github.com/jonschlinkert/is-valid-glob) * [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. Just… [more](https://www.npmjs.com/package/micromatch) | [homepage](https://github.com/jonschlinkert/micromatch) ## Run tests Install dev dependencies: ```sh $ npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-glob/issues/new). ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2015 Jon Schlinkert Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on October 02, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/is-glob/node_modules/is-extglob/README.md","tags":[],"body":"# is-extglob [![NPM version](https://badge.fury.io/js/is-extglob.svg)](http://badge.fury.io/js/is-extglob) [![Build Status](https://travis-ci.org/jonschlinkert/is-extglob.svg)](https://travis-ci.org/jonschlinkert/is-extglob) > Returns true if a string has an extglob. ## Install with [npm](npmjs.org) ```bash npm i is-extglob --save ``` ## Usage ```js var isExtglob = require('is-extglob'); ``` **True** ```js isExtglob('?(abc)'); isExtglob('@(abc)'); isExtglob('!(abc)'); isExtglob('*(abc)'); isExtglob('+(abc)'); ``` **False** Everything else... ```js isExtglob('foo.js'); isExtglob('!foo.js'); isExtglob('*.js'); isExtglob('**/abc.js'); isExtglob('abc/*.js'); isExtglob('abc/(aaa|bbb).js'); isExtglob('abc/[a-z].js'); isExtglob('abc/{a,b}.js'); isExtglob('abc/?.js'); isExtglob('abc.js'); isExtglob('abc/def/ghi.js'); ``` ## Related * [extglob](https://github.com/jonschlinkert/extglob): Extended globs. extglobs add the expressive power of regular expressions to glob patterns. * [micromatch](https://github.com/jonschlinkert/micromatch): Glob matching for javascript/node.js. A faster alternative to minimatch (10-45x faster on avg), with all the features you're used to using in your Grunt and gulp tasks. * [parse-glob](https://github.com/jonschlinkert/parse-glob): Parse a glob pattern into an object of tokens. ## Run tests Install dev dependencies. ```bash npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-extglob/issues) ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright (c) 2015 Jon Schlinkert Released under the MIT license *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on March 06, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/path-is-absolute/readme.md","tags":[],"body":"# path-is-absolute [![Build Status](https://travis-ci.org/sindresorhus/path-is-absolute.svg?branch=master)](https://travis-ci.org/sindresorhus/path-is-absolute) > Node.js 0.12 [`path.isAbsolute()`](http://nodejs.org/api/path.html#path_path_isabsolute_path) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save path-is-absolute ``` ## Usage ```js var pathIsAbsolute = require('path-is-absolute'); // Linux pathIsAbsolute('/home/foo'); //=> true // Windows pathIsAbsolute('C:/Users/'); //=> true // Any OS pathIsAbsolute.posix('/home/foo'); //=> true ``` ## API See the [`path.isAbsolute()` docs](http://nodejs.org/api/path.html#path_path_isabsolute_path). ### pathIsAbsolute(path) ### pathIsAbsolute.posix(path) The Posix specific version. ### pathIsAbsolute.win32(path) The Windows specific version. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/README.md","tags":[],"body":"# readdirp [![Build Status](https://secure.travis-ci.org/thlorenz/readdirp.png)](http://travis-ci.org/thlorenz/readdirp) [![NPM](https://nodei.co/npm/readdirp.png?downloads=true&stars=true)](https://nodei.co/npm/readdirp/) Recursive version of [fs.readdir](http://nodejs.org/docs/latest/api/fs.html#fs_fs_readdir_path_callback). Exposes a **stream api**. ```javascript var readdirp = require('readdirp') , path = require('path') , es = require('event-stream'); // print out all JavaScript files along with their size var stream = readdirp({ root: path.join(__dirname), fileFilter: '*.js' }); stream .on('warn', function (err) { console.error('non-fatal error', err); // optionally call stream.destroy() here in order to abort and cause 'close' to be emitted }) .on('error', function (err) { console.error('fatal error', err); }) .pipe(es.mapSync(function (entry) { return { path: entry.path, size: entry.stat.size }; })) .pipe(es.stringify()) .pipe(process.stdout); ``` Meant to be one of the recursive versions of [fs](http://nodejs.org/docs/latest/api/fs.html) functions, e.g., like [mkdirp](https://github.com/substack/node-mkdirp). **Table of Contents** *generated with [DocToc](http://doctoc.herokuapp.com/)* - [Installation](#installation) - [API](#api) - [entry stream](#entry-stream) - [options](#options) - [entry info](#entry-info) - [Filters](#filters) - [Callback API](#callback-api) - [allProcessed ](#allprocessed) - [fileProcessed](#fileprocessed) - [More Examples](#more-examples) - [stream api](#stream-api) - [stream api pipe](#stream-api-pipe) - [grep](#grep) - [using callback api](#using-callback-api) - [tests](#tests) # Installation npm install readdirp # API ***var entryStream = readdirp (options)*** Reads given root recursively and returns a `stream` of [entry info](#entry-info)s. ## entry stream Behaves as follows: - `emit('data')` passes an [entry info](#entry-info) whenever one is found - `emit('warn')` passes a non-fatal `Error` that prevents a file/directory from being processed (i.e., if it is inaccessible to the user) - `emit('error')` passes a fatal `Error` which also ends the stream (i.e., when illegal options where passed) - `emit('end')` called when all entries were found and no more will be emitted (i.e., we are done) - `emit('close')` called when the stream is destroyed via `stream.destroy()` (which could be useful if you want to manually abort even on a non fatal error) - at that point the stream is no longer `readable` and no more entries, warning or errors are emitted - to learn more about streams, consult the very detailed [nodejs streams documentation](http://nodejs.org/api/stream.html) or the [stream-handbook](https://github.com/substack/stream-handbook) ## options - **root**: path in which to start reading and recursing into subdirectories - **fileFilter**: filter to include/exclude files found (see [Filters](#filters) for more) - **directoryFilter**: filter to include/exclude directories found and to recurse into (see [Filters](#filters) for more) - **depth**: depth at which to stop recursing even if more subdirectories are found - **entryType**: determines if data events on the stream should be emitted for `'files'`, `'directories'`, `'both'`, or `'all'`. Setting to `'all'` will also include entries for other types of file descriptors like character devices, unix sockets and named pipes. Defaults to `'files'`. - **lstat**: if `true`, readdirp uses `fs.lstat` instead of `fs.stat` in order to stat files and includes symlink entries in the stream along with files. ## entry info Has the following properties: - **parentDir** : directory in which entry was found (relative to given root) - **fullParentDir** : full path to parent directory - **name** : name of the file/directory - **path** : path to the file/directory (relative to given root) - **fullPath** : full path to the file/directory found - **stat** : built in [stat object](http://nodejs.org/docs/v0.4.9/api/fs.html#fs.Stats) - **Example**: (assuming root was `/User/dev/readdirp`) parentDir : 'test/bed/root_dir1', fullParentDir : '/User/dev/readdirp/test/bed/root_dir1', name : 'root_dir1_subdir1', path : 'test/bed/root_dir1/root_dir1_subdir1', fullPath : '/User/dev/readdirp/test/bed/root_dir1/root_dir1_subdir1', stat : [ ... ] ## Filters There are three different ways to specify filters for files and directories respectively. - **function**: a function that takes an entry info as a parameter and returns true to include or false to exclude the entry - **glob string**: a string (e.g., `*.js`) which is matched using [minimatch](https://github.com/isaacs/minimatch), so go there for more information. Globstars (`**`) are not supported since specifiying a recursive pattern for an already recursive function doesn't make sense. Negated globs (as explained in the minimatch documentation) are allowed, e.g., `!*.txt` matches everything but text files. - **array of glob strings**: either need to be all inclusive or all exclusive (negated) patterns otherwise an error is thrown. `[ '*.json', '*.js' ]` includes all JavaScript and Json files. `[ '!.git', '!node_modules' ]` includes all directories except the '.git' and 'node_modules'. Directories that do not pass a filter will not be recursed into. ## Callback API Although the stream api is recommended, readdirp also exposes a callback based api. ***readdirp (options, callback1 [, callback2])*** If callback2 is given, callback1 functions as the **fileProcessed** callback, and callback2 as the **allProcessed** callback. If only callback1 is given, it functions as the **allProcessed** callback. ### allProcessed - function with err and res parameters, e.g., `function (err, res) { ... }` - **err**: array of errors that occurred during the operation, **res may still be present, even if errors occurred** - **res**: collection of file/directory [entry infos](#entry-info) ### fileProcessed - function with [entry info](#entry-info) parameter e.g., `function (entryInfo) { ... }` # More Examples `on('error', ..)`, `on('warn', ..)` and `on('end', ..)` handling omitted for brevity ```javascript var readdirp = require('readdirp'); // Glob file filter readdirp({ root: './test/bed', fileFilter: '*.js' }) .on('data', function (entry) { // do something with each JavaScript file entry }); // Combined glob file filters readdirp({ root: './test/bed', fileFilter: [ '*.js', '*.json' ] }) .on('data', function (entry) { // do something with each JavaScript and Json file entry }); // Combined negated directory filters readdirp({ root: './test/bed', directoryFilter: [ '!.git', '!*modules' ] }) .on('data', function (entry) { // do something with each file entry found outside '.git' or any modules directory }); // Function directory filter readdirp({ root: './test/bed', directoryFilter: function (di) { return di.name.length === 9; } }) .on('data', function (entry) { // do something with each file entry found inside directories whose name has length 9 }); // Limiting depth readdirp({ root: './test/bed', depth: 1 }) .on('data', function (entry) { // do something with each file entry found up to 1 subdirectory deep }); // callback api readdirp( { root: '.' } , function(fileInfo) { // do something with file entry here } , function (err, res) { // all done, move on or do final step for all file entries here } ); ``` Try more examples by following [instructions](https://github.com/thlorenz/readdirp/blob/master/examples/Readme.md) on how to get going. ## stream api [stream-api.js](https://github.com/thlorenz/readdirp/blob/master/examples/stream-api.js) Demonstrates error and data handling by listening to events emitted from the readdirp stream. ## stream api pipe [stream-api-pipe.js](https://github.com/thlorenz/readdirp/blob/master/examples/stream-api-pipe.js) Demonstrates error handling by listening to events emitted from the readdirp stream and how to pipe the data stream into another destination stream. ## grep [grep.js](https://github.com/thlorenz/readdirp/blob/master/examples/grep.js) Very naive implementation of grep, for demonstration purposes only. ## using callback api [callback-api.js](https://github.com/thlorenz/readdirp/blob/master/examples/callback-api.js) Shows how to pass callbacks in order to handle errors and/or data. ## tests The [readdirp tests](https://github.com/thlorenz/readdirp/blob/master/test/readdirp.js) also will give you a good idea on how things work."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/examples/Readme.md","tags":[],"body":"# readdirp examples ## How to run the examples Assuming you installed readdirp (`npm install readdirp`), you can do the following: 1. `npm explore readdirp` 2. `cd examples` 3. `npm install` At that point you can run the examples with node, i.e., `node grep`. ## stream api [stream-api.js](https://github.com/thlorenz/readdirp/blob/master/examples/stream-api.js) Demonstrates error and data handling by listening to events emitted from the readdirp stream. ## stream api pipe [stream-api-pipe.js](https://github.com/thlorenz/readdirp/blob/master/examples/stream-api-pipe.js) Demonstrates error handling by listening to events emitted from the readdirp stream and how to pipe the data stream into another destination stream. ## grep [grep.js](https://github.com/thlorenz/readdirp/blob/master/examples/grep.js) Very naive implementation of grep, for demonstration purposes only. ## using callback api [callback-api.js](https://github.com/thlorenz/readdirp/blob/master/examples/callback-api.js) Shows how to pass callbacks in order to handle errors and/or data."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/graceful-fs/README.md","tags":[],"body":"# graceful-fs graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors. ## Improvements over [fs module](http://api.nodejs.org/fs.html) * Queues up `open` and `readdir` calls, and retries them once something closes if there is an EMFILE error from too many file descriptors. * fixes `lchmod` for Node versions prior to 0.6.2. * implements `fs.lutimes` if possible. Otherwise it becomes a noop. * ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or `lchown` if the user isn't root. * makes `lchmod` and `lchown` become noops, if not available. * retries reading a file if `read` results in EAGAIN error. On Windows, it retries renaming a file for up to one second if `EACCESS` or `EPERM` error occurs, likely because antivirus software has locked the directory. ## USAGE ```javascript // use just like fs var fs = require('graceful-fs') // now go and do stuff with it... fs.readFileSync('some-file-or-whatever') ``` ## Global Patching If you want to patch the global fs module (or any other fs-like module) you can do this: ```javascript // Make sure to read the caveat below. var realFs = require('fs') var gracefulFs = require('graceful-fs') gracefulFs.gracefulify(realFs) ``` This should only ever be done at the top-level application layer, in order to delay on EMFILE errors from any fs-using dependencies. You should **not** do this in a library, because it can cause unexpected delays in other parts of the program. ## Changes This module is fairly stable at this point, and used by a lot of things. That being said, because it implements a subtle behavior change in a core part of the node API, even modest changes can be extremely breaking, and the versioning is thus biased towards bumping the major when in doubt. The main change between major versions has been switching between providing a fully-patched `fs` module vs monkey-patching the node core builtin, and the approach by which a non-monkey-patched `fs` was created. The goal is to trade `EMFILE` errors for slower fs operations. So, if you try to open a zillion files, rather than crashing, `open` operations will be queued up and wait for something else to `close`. There are advantages to each approach. Monkey-patching the fs means that no `EMFILE` errors can possibly occur anywhere in your application, because everything is using the same core `fs` module, which is patched. However, it can also obviously cause undesirable side-effects, especially if the module is loaded multiple times. Implementing a separate-but-identical patched `fs` module is more surgical (and doesn't run the risk of patching multiple times), but also imposes the challenge of keeping in sync with the core module. The current approach loads the `fs` module, and then creates a lookalike object that has all the same methods, except a few that are patched. It is safe to use in all versions of Node from 0.8 through 7.0. ### v4 * Do not monkey-patch the fs module. This module may now be used as a drop-in dep, and users can opt into monkey-patching the fs builtin if their app requires it. ### v3 * Monkey-patch fs, because the eval approach no longer works on recent node. * fixed possible type-error throw if rename fails on windows * verify that we *never* get EMFILE errors * Ignore ENOSYS from chmod/chown * clarify that graceful-fs must be used as a drop-in ### v2.1.0 * Use eval rather than monkey-patching fs. * readdir: Always sort the results * win32: requeue a file if error has an OK status ### v2.0 * A return to monkey patching * wrap process.cwd ### v1.1 * wrap readFile * Wrap fs.writeFile. * readdir protection * Don't clobber the fs builtin * Handle fs.read EAGAIN errors by trying again * Expose the curOpen counter * No-op lchown/lchmod if not implemented * fs.rename patch only for win32 * Patch fs.rename to handle AV software on Windows * Close #4 Chown should not fail on einval or eperm if non-root * Fix isaacs/fstream#1 Only wrap fs one time * Fix #3 Start at 1024 max files, then back off on EMFILE * lutimes that doens't blow up on Linux * A full on-rewrite using a queue instead of just swallowing the EMFILE error * Wrap Read/Write streams as well ### 1.0 * Update engines for node 0.6 * Be lstat-graceful on Windows * first"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/README.md","tags":[],"body":"# minimatch A minimal matching utility. [![Build Status](https://secure.travis-ci.org/isaacs/minimatch.svg)](http://travis-ci.org/isaacs/minimatch) This is the matching library used internally by npm. It works by converting glob expressions into JavaScript `RegExp` objects. ## Usage ```javascript var minimatch = require(\"minimatch\") minimatch(\"bar.foo\", \"*.foo\") // true! minimatch(\"bar.foo\", \"*.bar\") // false! minimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy! ``` ## Features Supports these glob features: * Brace Expansion * Extended glob matching * \"Globstar\" `**` matching See: * `man sh` * `man bash` * `man 3 fnmatch` * `man 5 gitignore` ## Minimatch Class Create a minimatch object by instantiating the `minimatch.Minimatch` class. ```javascript var Minimatch = require(\"minimatch\").Minimatch var mm = new Minimatch(pattern, options) ``` ### Properties * `pattern` The original pattern the minimatch object represents. * `options` The options supplied to the constructor. * `set` A 2-dimensional array of regexp or string expressions. Each row in the array corresponds to a brace-expanded pattern. Each item in the row corresponds to a single path-part. For example, the pattern `{a,b/c}/d` would expand to a set of patterns like: [ [ a, d ] , [ b, c, d ] ] If a portion of the pattern doesn't have any \"magic\" in it (that is, it's something like `\"foo\"` rather than `fo*o?`), then it will be left as a string rather than converted to a regular expression. * `regexp` Created by the `makeRe` method. A single regular expression expressing the entire pattern. This is useful in cases where you wish to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled. * `negate` True if the pattern is negated. * `comment` True if the pattern is a comment. * `empty` True if the pattern is `\"\"`. ### Methods * `makeRe` Generate the `regexp` member if necessary, and return it. Will return `false` if the pattern is invalid. * `match(fname)` Return true if the filename matches the pattern, or false otherwise. * `matchOne(fileArray, patternArray, partial)` Take a `/`-split filename, and match it against a single row in the `regExpSet`. This method is mainly for internal use, but is exposed so that it can be used by a glob-walker that needs to avoid excessive filesystem calls. All other methods are internal, and will be called as necessary. ### minimatch(path, pattern, options) Main export. Tests a path against the pattern using the options. ```javascript var isJS = minimatch(file, \"*.js\", { matchBase: true }) ``` ### minimatch.filter(pattern, options) Returns a function that tests its supplied argument, suitable for use with `Array.filter`. Example: ```javascript var javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true})) ``` ### minimatch.match(list, pattern, options) Match against the list of files, in the style of fnmatch or glob. If nothing is matched, and options.nonull is set, then return a list containing the pattern itself. ```javascript var javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true})) ``` ### minimatch.makeRe(pattern, options) Make a regular expression object from the pattern. ## Options All options are `false` by default. ### debug Dump a ton of stuff to stderr. ### nobrace Do not expand `{a,b}` and `{1..3}` brace sets. ### noglobstar Disable `**` matching against multiple folder names. ### dot Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot. Note that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot` is set. ### noext Disable \"extglob\" style patterns like `+(a|b)`. ### nocase Perform a case-insensitive match. ### nonull When a match is not found by `minimatch.match`, return a list containing the pattern itself if this option is set. When not set, an empty list is returned if there are no matches. ### matchBase If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, `a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`. ### nocomment Suppress the behavior of treating `#` at the start of a pattern as a comment. ### nonegate Suppress the behavior of treating a leading `!` character as negation. ### flipNegate Returns from negate expressions the same as if they were not negated. (Ie, true on a hit, false on a miss.) ## Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between minimatch and other implementations, and are intentional. If the pattern starts with a `!` character, then it is negated. Set the `nonegate` flag to suppress this behavior, and treat leading `!` characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like `!(a|B)`. Multiple `!` characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with `#`, then it is treated as a comment, and will not match anything. Use `\\#` to match a literal `#` at the start of a line, or set the `nocomment` flag to suppress this behavior. The double-star character `**` is supported by default, unless the `noglobstar` flag is set. This is supported in the manner of bsdglob and bash 4.1, where `**` only has special significance if it is the only thing in a path part. That is, `a/**/b` will match `a/x/y/b`, but `a/**b` will not. If an escaped pattern has no matches, and the `nonull` flag is set, then minimatch.match returns the pattern as-provided, rather than interpreting the character escapes. For example, `minimatch.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than `\"*a?\"`. This is akin to setting the `nullglob` option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like `+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded **first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are checked for validity. Since those two are valid, matching proceeds."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/README.md","tags":[],"body":"# brace-expansion [Brace expansion](https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html), as known from sh/bash, in JavaScript. [![build status](https://secure.travis-ci.org/juliangruber/brace-expansion.svg)](http://travis-ci.org/juliangruber/brace-expansion) [![downloads](https://img.shields.io/npm/dm/brace-expansion.svg)](https://www.npmjs.org/package/brace-expansion) [![testling badge](https://ci.testling.com/juliangruber/brace-expansion.png)](https://ci.testling.com/juliangruber/brace-expansion) ## Example ```js var expand = require('brace-expansion'); expand('file-{a,b,c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('-v{,,}') // => ['-v', '-v', '-v'] expand('file{0..2}.jpg') // => ['file0.jpg', 'file1.jpg', 'file2.jpg'] expand('file-{a..c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('file{2..0}.jpg') // => ['file2.jpg', 'file1.jpg', 'file0.jpg'] expand('file{0..4..2}.jpg') // => ['file0.jpg', 'file2.jpg', 'file4.jpg'] expand('file-{a..e..2}.jpg') // => ['file-a.jpg', 'file-c.jpg', 'file-e.jpg'] expand('file{00..10..5}.jpg') // => ['file00.jpg', 'file05.jpg', 'file10.jpg'] expand('{{A..C},{a..c}}') // => ['A', 'B', 'C', 'a', 'b', 'c'] expand('ppp{,config,oe{,conf}}') // => ['ppp', 'pppconfig', 'pppoe', 'pppoeconf'] ``` ## API ```js var expand = require('brace-expansion'); ``` ### var expanded = expand(str) Return an array of all possible and valid expansions of `str`. If none are found, `[str]` is returned. Valid expansions are: ```js /^(.*,)+(.+)?$/ // {a,b,...} ``` A comma seperated list of options, like `{a,b}` or `{a,{b,c}}` or `{,a,}`. ```js /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} ``` A numeric sequence from `x` to `y` inclusive, with optional increment. If `x` or `y` start with a leading `0`, all the numbers will be padded to have equal length. Negative numbers and backwards iteration work too. ```js /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} ``` An alphabetic sequence from `x` to `y` inclusive, with optional increment. `x` and `y` must be exactly one character, and if given, `incr` must be a number. For compatibility reasons, the string `${` is not eligible for brace expansion. ## Installation With [npm](https://npmjs.org) do: ```bash npm install brace-expansion ``` ## Contributors - [Julian Gruber](https://github.com/juliangruber) - [Isaac Z. Schlueter](https://github.com/isaacs) ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/LICENSE.md","tags":[],"body":"(MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/README.md","tags":[],"body":"# balanced-match Match balanced string pairs, like `{` and `}` or `` and ``. Supports regular expressions as well! [![build status](https://secure.travis-ci.org/juliangruber/balanced-match.svg)](http://travis-ci.org/juliangruber/balanced-match) [![downloads](https://img.shields.io/npm/dm/balanced-match.svg)](https://www.npmjs.org/package/balanced-match) [![testling badge](https://ci.testling.com/juliangruber/balanced-match.png)](https://ci.testling.com/juliangruber/balanced-match) ## Example Get the first matching pair of braces: ```js var balanced = require('balanced-match'); console.log(balanced('{', '}', 'pre{in{nested}}post')); console.log(balanced('{', '}', 'pre{first}between{second}post')); console.log(balanced(/\\s+\\{\\s+/, /\\s+\\}\\s+/, 'pre { in{nest} } post')); ``` The matches are: ```bash $ node example.js { start: 3, end: 14, pre: 'pre', body: 'in{nested}', post: 'post' } { start: 3, end: 9, pre: 'pre', body: 'first', post: 'between{second}post' } { start: 3, end: 17, pre: 'pre', body: 'in{nest}', post: 'post' } ``` ## API ### var m = balanced(a, b, str) For the first non-nested matching pair of `a` and `b` in `str`, return an object with those keys: * **start** the index of the first match of `a` * **end** the index of the matching `b` * **pre** the preamble, `a` and `b` not included * **body** the match, `a` and `b` not included * **post** the postscript, `a` and `b` not included If there's no match, `undefined` will be returned. If the `str` contains more `a` than `b` / there are unmatched pairs, the first match that was closed will be used. For example, `{{a}` will match `['{', 'a', '']`. ### var r = balanced.range(a, b, str) For the first non-nested matching pair of `a` and `b` in `str`, return an array with indexes: `[ , ]`. If there's no match, `undefined` will be returned. If the `str` contains more `a` than `b` / there are unmatched pairs, the first match that was closed will be used. For example, `{{a}` will match `[ 1, 3 ]`. ## Installation With [npm](https://npmjs.org) do: ```bash npm install balanced-match ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/README.markdown","tags":[],"body":"concat-map ========== Concatenative mapdashery. [![browser support](http://ci.testling.com/substack/node-concat-map.png)](http://ci.testling.com/substack/node-concat-map) [![build status](https://secure.travis-ci.org/substack/node-concat-map.png)](http://travis-ci.org/substack/node-concat-map) example ======= ``` js var concatMap = require('concat-map'); var xs = [ 1, 2, 3, 4, 5, 6 ]; var ys = concatMap(xs, function (x) { return x % 2 ? [ x - 0.1, x, x + 0.1 ] : []; }); console.dir(ys); ``` *** ``` [ 0.9, 1, 1.1, 2.9, 3, 3.1, 4.9, 5, 5.1 ] ``` methods ======= ``` js var concatMap = require('concat-map') ``` concatMap(xs, fn) ----------------- Return an array of concatenated elements by calling `fn(x, i)` for each element `x` and each index `i` in the array `xs`. When `fn(x, i)` returns an array, its result will be concatenated with the result array. If `fn(x, i)` returns anything else, that value will be pushed onto the end of the result array. install ======= With [npm](http://npmjs.org) do: ``` npm install concat-map ``` license ======= MIT notes ===== This module was written while sitting high above the ground in a tree."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/README.md","tags":[],"body":"# readable-stream ***Node-core v6.1.0 streams for userland*** [![Build Status](https://travis-ci.org/nodejs/readable-stream.svg?branch=master)](https://travis-ci.org/nodejs/readable-stream) [![NPM](https://nodei.co/npm/readable-stream.png?downloads=true&downloadRank=true)](https://nodei.co/npm/readable-stream/) [![NPM](https://nodei.co/npm-dl/readable-stream.png?&months=6&height=3)](https://nodei.co/npm/readable-stream/) [![Sauce Test Status](https://saucelabs.com/browser-matrix/readable-stream.svg)](https://saucelabs.com/u/readable-stream) ```bash npm install --save readable-stream ``` ***Node-core streams for userland*** This package is a mirror of the Streams2 and Streams3 implementations in Node-core, including [documentation](doc/stream.md). If you want to guarantee a stable streams base, regardless of what version of Node you, or the users of your libraries are using, use **readable-stream** *only* and avoid the *\"stream\"* module in Node-core, for background see [this blogpost](http://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html). As of version 2.0.0 **readable-stream** uses semantic versioning. # Streams WG Team Members * **Chris Dickinson** ([@chrisdickinson](https://github.com/chrisdickinson)) - Release GPG key: 9554F04D7259F04124DE6B476D5A82AC7E37093B * **Calvin Metcalf** ([@calvinmetcalf](https://github.com/calvinmetcalf)) - Release GPG key: F3EF5F62A87FC27A22E643F714CE4FF5015AA242 * **Rod Vagg** ([@rvagg](https://github.com/rvagg)) - Release GPG key: DD8F2338BAE7501E3DD5AC78C273792F7D83545D * **Sam Newman** ([@sonewman](https://github.com/sonewman)) * **Mathias Buus** ([@mafintosh](https://github.com/mafintosh)) * **Domenic Denicola** ([@domenic](https://github.com/domenic))"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/doc/stream.md","tags":[],"body":"# Stream Stability: 2 - Stable A stream is an abstract interface implemented by various objects in Node.js. For example a [request to an HTTP server][http-incoming-message] is a stream, as is [`process.stdout`][]. Streams are readable, writable, or both. All streams are instances of [`EventEmitter`][]. You can load the Stream base classes by doing `require('stream')`. There are base classes provided for [Readable][] streams, [Writable][] streams, [Duplex][] streams, and [Transform][] streams. This document is split up into 3 sections: 1. The first section explains the parts of the API that you need to be aware of to use streams in your programs. 2. The second section explains the parts of the API that you need to use if you implement your own custom streams yourself. The API is designed to make this easy for you to do. 3. The third section goes into more depth about how streams work, including some of the internal mechanisms and functions that you should probably not modify unless you definitely know what you are doing. ## API for Stream Consumers Streams can be either [Readable][], [Writable][], or both ([Duplex][]). All streams are EventEmitters, but they also have other custom methods and properties depending on whether they are Readable, Writable, or Duplex. If a stream is both Readable and Writable, then it implements all of the methods and events. So, a [Duplex][] or [Transform][] stream is fully described by this API, though their implementation may be somewhat different. It is not necessary to implement Stream interfaces in order to consume streams in your programs. If you **are** implementing streaming interfaces in your own program, please also refer to [API for Stream Implementors][]. Almost all Node.js programs, no matter how simple, use Streams in some way. Here is an example of using Streams in an Node.js program: ```js const http = require('http'); var server = http.createServer( (req, res) => { // req is an http.IncomingMessage, which is a Readable Stream // res is an http.ServerResponse, which is a Writable Stream var body = ''; // we want to get the data as utf8 strings // If you don't set an encoding, then you'll get Buffer objects req.setEncoding('utf8'); // Readable streams emit 'data' events once a listener is added req.on('data', (chunk) => { body += chunk; }); // the end event tells you that you have entire body req.on('end', () => { try { var data = JSON.parse(body); } catch (er) { // uh oh! bad json! res.statusCode = 400; return res.end(`error: ${er.message}`); } // write back something interesting to the user: res.write(typeof data); res.end(); }); }); server.listen(1337); // $ curl localhost:1337 -d '{}' // object // $ curl localhost:1337 -d '\"foo\"' // string // $ curl localhost:1337 -d 'not json' // error: Unexpected token o ``` ### Class: stream.Duplex Duplex streams are streams that implement both the [Readable][] and [Writable][] interfaces. Examples of Duplex streams include: * [TCP sockets][] * [zlib streams][zlib] * [crypto streams][crypto] ### Class: stream.Readable The Readable stream interface is the abstraction for a *source* of data that you are reading from. In other words, data comes *out* of a Readable stream. A Readable stream will not start emitting data until you indicate that you are ready to receive it. Readable streams have two \"modes\": a **flowing mode** and a **paused mode**. When in flowing mode, data is read from the underlying system and provided to your program as fast as possible. In paused mode, you must explicitly call [`stream.read()`][stream-read] to get chunks of data out. Streams start out in paused mode. **Note**: If no data event handlers are attached, and there are no [`stream.pipe()`][] destinations, and the stream is switched into flowing mode, then data will be lost. You can switch to flowing mode by doing any of the following: * Adding a [`'data'`][] event handler to listen for data. * Calling the [`stream.resume()`][stream-resume] method to explicitly open the flow. * Calling the [`stream.pipe()`][] method to send the data to a [Writable][]. You can switch back to paused mode by doing either of the following: * If there are no pipe destinations, by calling the [`stream.pause()`][stream-pause] method. * If there are pipe destinations, by removing any [`'data'`][] event handlers, and removing all pipe destinations by calling the [`stream.unpipe()`][] method. Note that, for backwards compatibility reasons, removing [`'data'`][] event handlers will **not** automatically pause the stream. Also, if there are piped destinations, then calling [`stream.pause()`][stream-pause] will not guarantee that the stream will *remain* paused once those destinations drain and ask for more data. Examples of readable streams include: * [HTTP responses, on the client][http-incoming-message] * [HTTP requests, on the server][http-incoming-message] * [fs read streams][] * [zlib streams][zlib] * [crypto streams][crypto] * [TCP sockets][] * [child process stdout and stderr][] * [`process.stdin`][] #### Event: 'close' Emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed. The event indicates that no more events will be emitted, and no further computation will occur. Not all streams will emit the `'close'` event as the `'close'` event is optional. #### Event: 'data' * `chunk` {Buffer|String} The chunk of data. Attaching a `'data'` event listener to a stream that has not been explicitly paused will switch the stream into flowing mode. Data will then be passed as soon as it is available. If you just want to get all the data out of the stream as fast as possible, this is the best way to do so. ```js var readable = getReadableStreamSomehow(); readable.on('data', (chunk) => { console.log('got %d bytes of data', chunk.length); }); ``` #### Event: 'end' This event fires when there will be no more data to read. Note that the `'end'` event **will not fire** unless the data is completely consumed. This can be done by switching into flowing mode, or by calling [`stream.read()`][stream-read] repeatedly until you get to the end. ```js var readable = getReadableStreamSomehow(); readable.on('data', (chunk) => { console.log('got %d bytes of data', chunk.length); }); readable.on('end', () => { console.log('there will be no more data.'); }); ``` #### Event: 'error' * {Error} Emitted if there was an error receiving data. #### Event: 'readable' When a chunk of data can be read from the stream, it will emit a `'readable'` event. In some cases, listening for a `'readable'` event will cause some data to be read into the internal buffer from the underlying system, if it hadn't already. ```javascript var readable = getReadableStreamSomehow(); readable.on('readable', () => { // there is some data to read now }); ``` Once the internal buffer is drained, a `'readable'` event will fire again when more data is available. The `'readable'` event is not emitted in the \"flowing\" mode with the sole exception of the last one, on end-of-stream. The `'readable'` event indicates that the stream has new information: either new data is available or the end of the stream has been reached. In the former case, [`stream.read()`][stream-read] will return that data. In the latter case, [`stream.read()`][stream-read] will return null. For instance, in the following example, `foo.txt` is an empty file: ```js const fs = require('fs'); var rr = fs.createReadStream('foo.txt'); rr.on('readable', () => { console.log('readable:', rr.read()); }); rr.on('end', () => { console.log('end'); }); ``` The output of running this script is: ``` $ node test.js readable: null end ``` #### readable.isPaused() * Return: {Boolean} This method returns whether or not the `readable` has been **explicitly** paused by client code (using [`stream.pause()`][stream-pause] without a corresponding [`stream.resume()`][stream-resume]). ```js var readable = new stream.Readable readable.isPaused() // === false readable.pause() readable.isPaused() // === true readable.resume() readable.isPaused() // === false ``` #### readable.pause() * Return: `this` This method will cause a stream in flowing mode to stop emitting [`'data'`][] events, switching out of flowing mode. Any data that becomes available will remain in the internal buffer. ```js var readable = getReadableStreamSomehow(); readable.on('data', (chunk) => { console.log('got %d bytes of data', chunk.length); readable.pause(); console.log('there will be no more data for 1 second'); setTimeout(() => { console.log('now data will start flowing again'); readable.resume(); }, 1000); }); ``` #### readable.pipe(destination[, options]) * `destination` {stream.Writable} The destination for writing data * `options` {Object} Pipe options * `end` {Boolean} End the writer when the reader ends. Default = `true` This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream. Multiple destinations can be piped to safely. ```js var readable = getReadableStreamSomehow(); var writable = fs.createWriteStream('file.txt'); // All the data from readable goes into 'file.txt' readable.pipe(writable); ``` This function returns the destination stream, so you can set up pipe chains like so: ```js var r = fs.createReadStream('file.txt'); var z = zlib.createGzip(); var w = fs.createWriteStream('file.txt.gz'); r.pipe(z).pipe(w); ``` For example, emulating the Unix `cat` command: ```js process.stdin.pipe(process.stdout); ``` By default [`stream.end()`][stream-end] is called on the destination when the source stream emits [`'end'`][], so that `destination` is no longer writable. Pass `{ end: false }` as `options` to keep the destination stream open. This keeps `writer` open so that \"Goodbye\" can be written at the end. ```js reader.pipe(writer, { end: false }); reader.on('end', () => { writer.end('Goodbye\\n'); }); ``` Note that [`process.stderr`][] and [`process.stdout`][] are never closed until the process exits, regardless of the specified options. #### readable.read([size]) * `size` {Number} Optional argument to specify how much data to read. * Return {String|Buffer|Null} The `read()` method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return `null`. If you pass in a `size` argument, then it will return that many bytes. If `size` bytes are not available, then it will return `null`, unless we've ended, in which case it will return the data remaining in the buffer. If you do not specify a `size` argument, then it will return all the data in the internal buffer. This method should only be called in paused mode. In flowing mode, this method is called automatically until the internal buffer is drained. ```js var readable = getReadableStreamSomehow(); readable.on('readable', () => { var chunk; while (null !== (chunk = readable.read())) { console.log('got %d bytes of data', chunk.length); } }); ``` If this method returns a data chunk, then it will also trigger the emission of a [`'data'`][] event. Note that calling [`stream.read([size])`][stream-read] after the [`'end'`][] event has been triggered will return `null`. No runtime error will be raised. #### readable.resume() * Return: `this` This method will cause the readable stream to resume emitting [`'data'`][] events. This method will switch the stream into flowing mode. If you do *not* want to consume the data from a stream, but you *do* want to get to its [`'end'`][] event, you can call [`stream.resume()`][stream-resume] to open the flow of data. ```js var readable = getReadableStreamSomehow(); readable.resume(); readable.on('end', () => { console.log('got to the end, but did not read anything'); }); ``` #### readable.setEncoding(encoding) * `encoding` {String} The encoding to use. * Return: `this` Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects. For example, if you do `readable.setEncoding('utf8')`, then the output data will be interpreted as UTF-8 data, and returned as strings. If you do `readable.setEncoding('hex')`, then the data will be encoded in hexadecimal string format. This properly handles multi-byte characters that would otherwise be potentially mangled if you simply pulled the Buffers directly and called [`buf.toString(encoding)`][] on them. If you want to read the data as strings, always use this method. Also you can disable any encoding at all with `readable.setEncoding(null)`. This approach is very useful if you deal with binary data or with large multi-byte strings spread out over multiple chunks. ```js var readable = getReadableStreamSomehow(); readable.setEncoding('utf8'); readable.on('data', (chunk) => { assert.equal(typeof chunk, 'string'); console.log('got %d characters of string data', chunk.length); }); ``` #### readable.unpipe([destination]) * `destination` {stream.Writable} Optional specific stream to unpipe This method will remove the hooks set up for a previous [`stream.pipe()`][] call. If the destination is not specified, then all pipes are removed. If the destination is specified, but no pipe is set up for it, then this is a no-op. ```js var readable = getReadableStreamSomehow(); var writable = fs.createWriteStream('file.txt'); // All the data from readable goes into 'file.txt', // but only for the first second readable.pipe(writable); setTimeout(() => { console.log('stop writing to file.txt'); readable.unpipe(writable); console.log('manually close the file stream'); writable.end(); }, 1000); ``` #### readable.unshift(chunk) * `chunk` {Buffer|String} Chunk of data to unshift onto the read queue This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party. Note that `stream.unshift(chunk)` cannot be called after the [`'end'`][] event has been triggered; a runtime error will be raised. If you find that you must often call `stream.unshift(chunk)` in your programs, consider implementing a [Transform][] stream instead. (See [API for Stream Implementors][].) ```js // Pull off a header delimited by \\n\\n // use unshift() if we get too much // Call the callback with (error, header, stream) const StringDecoder = require('string_decoder').StringDecoder; function parseHeader(stream, callback) { stream.on('error', callback); stream.on('readable', onReadable); var decoder = new StringDecoder('utf8'); var header = ''; function onReadable() { var chunk; while (null !== (chunk = stream.read())) { var str = decoder.write(chunk); if (str.match(/\\n\\n/)) { // found the header boundary var split = str.split(/\\n\\n/); header += split.shift(); var remaining = split.join('\\n\\n'); var buf = Buffer.from(remaining, 'utf8'); if (buf.length) stream.unshift(buf); stream.removeListener('error', callback); stream.removeListener('readable', onReadable); // now the body of the message can be read from the stream. callback(null, header, stream); } else { // still reading the header. header += str; } } } } ``` Note that, unlike [`stream.push(chunk)`][stream-push], `stream.unshift(chunk)` will not end the reading process by resetting the internal reading state of the stream. This can cause unexpected results if `unshift()` is called during a read (i.e. from within a [`stream._read()`][stream-_read] implementation on a custom stream). Following the call to `unshift()` with an immediate [`stream.push('')`][stream-push] will reset the reading state appropriately, however it is best to simply avoid calling `unshift()` while in the process of performing a read. #### readable.wrap(stream) * `stream` {Stream} An \"old style\" readable stream Versions of Node.js prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See [Compatibility][] for more information.) If you are using an older Node.js library that emits [`'data'`][] events and has a [`stream.pause()`][stream-pause] method that is advisory only, then you can use the `wrap()` method to create a [Readable][] stream that uses the old stream as its data source. You will very rarely ever need to call this function, but it exists as a convenience for interacting with old Node.js programs and libraries. For example: ```js const OldReader = require('./old-api-module.js').OldReader; const Readable = require('stream').Readable; const oreader = new OldReader; const myReader = new Readable().wrap(oreader); myReader.on('readable', () => { myReader.read(); // etc. }); ``` ### Class: stream.Transform Transform streams are [Duplex][] streams where the output is in some way computed from the input. They implement both the [Readable][] and [Writable][] interfaces. Examples of Transform streams include: * [zlib streams][zlib] * [crypto streams][crypto] ### Class: stream.Writable The Writable stream interface is an abstraction for a *destination* that you are writing data *to*. Examples of writable streams include: * [HTTP requests, on the client][] * [HTTP responses, on the server][] * [fs write streams][] * [zlib streams][zlib] * [crypto streams][crypto] * [TCP sockets][] * [child process stdin][] * [`process.stdout`][], [`process.stderr`][] #### Event: 'close' Emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed. The event indicates that no more events will be emitted, and no further computation will occur. Not all streams will emit the `'close'` event as the `'close'` event is optional. #### Event: 'drain' If a [`stream.write(chunk)`][stream-write] call returns `false`, then the `'drain'` event will indicate when it is appropriate to begin writing more data to the stream. ```js // Write the data to the supplied writable stream one million times. // Be attentive to back-pressure. function writeOneMillionTimes(writer, data, encoding, callback) { var i = 1000000; write(); function write() { var ok = true; do { i -= 1; if (i === 0) { // last time! writer.write(data, encoding, callback); } else { // see if we should continue, or wait // don't pass the callback, because we're not done yet. ok = writer.write(data, encoding); } } while (i > 0 && ok); if (i > 0) { // had to stop early! // write some more once it drains writer.once('drain', write); } } } ``` #### Event: 'error' * {Error} Emitted if there was an error when writing or piping data. #### Event: 'finish' When the [`stream.end()`][stream-end] method has been called, and all data has been flushed to the underlying system, this event is emitted. ```javascript var writer = getWritableStreamSomehow(); for (var i = 0; i { console.error('all writes are now complete.'); }); ``` #### Event: 'pipe' * `src` {stream.Readable} source stream that is piping to this writable This is emitted whenever the [`stream.pipe()`][] method is called on a readable stream, adding this writable to its set of destinations. ```js var writer = getWritableStreamSomehow(); var reader = getReadableStreamSomehow(); writer.on('pipe', (src) => { console.error('something is piping into the writer'); assert.equal(src, reader); }); reader.pipe(writer); ``` #### Event: 'unpipe' * `src` {[Readable][] Stream} The source stream that [unpiped][`stream.unpipe()`] this writable This is emitted whenever the [`stream.unpipe()`][] method is called on a readable stream, removing this writable from its set of destinations. ```js var writer = getWritableStreamSomehow(); var reader = getReadableStreamSomehow(); writer.on('unpipe', (src) => { console.error('something has stopped piping into the writer'); assert.equal(src, reader); }); reader.pipe(writer); reader.unpipe(writer); ``` #### writable.cork() Forces buffering of all writes. Buffered data will be flushed either at [`stream.uncork()`][] or at [`stream.end()`][stream-end] call. #### writable.end([chunk][, encoding][, callback]) * `chunk` {String|Buffer} Optional data to write * `encoding` {String} The encoding, if `chunk` is a String * `callback` {Function} Optional callback for when the stream is finished Call this method when no more data will be written to the stream. If supplied, the callback is attached as a listener on the [`'finish'`][] event. Calling [`stream.write()`][stream-write] after calling [`stream.end()`][stream-end] will raise an error. ```js // write 'hello, ' and then end with 'world!' var file = fs.createWriteStream('example.txt'); file.write('hello, '); file.end('world!'); // writing more now is not allowed! ``` #### writable.setDefaultEncoding(encoding) * `encoding` {String} The new default encoding * Return: `this` Sets the default encoding for a writable stream. #### writable.uncork() Flush all data, buffered since [`stream.cork()`][] call. #### writable.write(chunk[, encoding][, callback]) * `chunk` {String|Buffer} The data to write * `encoding` {String} The encoding, if `chunk` is a String * `callback` {Function} Callback for when this chunk of data is flushed * Returns: {Boolean} `true` if the data was handled completely. This method writes some data to the underlying system, and calls the supplied callback once the data has been fully handled. If an error occurs, the callback may or may not be called with the error as its first argument. To detect write errors, listen for the `'error'` event. The return value indicates if you should continue writing right now. If the data had to be buffered internally, then it will return `false`. Otherwise, it will return `true`. This return value is strictly advisory. You MAY continue to write, even if it returns `false`. However, writes will be buffered in memory, so it is best not to do this excessively. Instead, wait for the [`'drain'`][] event before writing more data. ## API for Stream Implementors To implement any sort of stream, the pattern is the same: 1. Extend the appropriate parent class in your own subclass. (The [`util.inherits()`][] method is particularly helpful for this.) 2. Call the appropriate parent class constructor in your constructor, to be sure that the internal mechanisms are set up properly. 3. Implement one or more specific methods, as detailed below. The class to extend and the method(s) to implement depend on the sort of stream class you are writing: Use-case Class Method(s) to implement Reading only [Readable](#stream_class_stream_readable_1) [_read][stream-_read] Writing only [Writable](#stream_class_stream_writable_1) [_write][stream-_write], [_writev][stream-_writev] Reading and writing [Duplex](#stream_class_stream_duplex_1) [_read][stream-_read], [_write][stream-_write], [_writev][stream-_writev] Operate on written data, then read the result [Transform](#stream_class_stream_transform_1) [_transform][stream-_transform], [_flush][stream-_flush] In your implementation code, it is very important to never call the methods described in [API for Stream Consumers][]. Otherwise, you can potentially cause adverse side effects in programs that consume your streaming interfaces. ### Class: stream.Duplex A \"duplex\" stream is one that is both Readable and Writable, such as a TCP socket connection. Note that `stream.Duplex` is an abstract class designed to be extended with an underlying implementation of the [`stream._read(size)`][stream-_read] and [`stream._write(chunk, encoding, callback)`][stream-_write] methods as you would with a Readable or Writable stream class. Since JavaScript doesn't have multiple prototypal inheritance, this class prototypally inherits from Readable, and then parasitically from Writable. It is thus up to the user to implement both the low-level [`stream._read(n)`][stream-_read] method as well as the low-level [`stream._write(chunk, encoding, callback)`][stream-_write] method on extension duplex classes. #### new stream.Duplex(options) * `options` {Object} Passed to both Writable and Readable constructors. Also has the following fields: * `allowHalfOpen` {Boolean} Default = `true`. If set to `false`, then the stream will automatically end the readable side when the writable side ends and vice versa. * `readableObjectMode` {Boolean} Default = `false`. Sets `objectMode` for readable side of the stream. Has no effect if `objectMode` is `true`. * `writableObjectMode` {Boolean} Default = `false`. Sets `objectMode` for writable side of the stream. Has no effect if `objectMode` is `true`. In classes that extend the Duplex class, make sure to call the constructor so that the buffering settings can be properly initialized. ### Class: stream.PassThrough This is a trivial implementation of a [Transform][] stream that simply passes the input bytes across to the output. Its purpose is mainly for examples and testing, but there are occasionally use cases where it can come in handy as a building block for novel sorts of streams. ### Class: stream.Readable `stream.Readable` is an abstract class designed to be extended with an underlying implementation of the [`stream._read(size)`][stream-_read] method. Please see [API for Stream Consumers][] for how to consume streams in your programs. What follows is an explanation of how to implement Readable streams in your programs. #### new stream.Readable([options]) * `options` {Object} * `highWaterMark` {Number} The maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource. Default = `16384` (16kb), or `16` for `objectMode` streams * `encoding` {String} If specified, then buffers will be decoded to strings using the specified encoding. Default = `null` * `objectMode` {Boolean} Whether this stream should behave as a stream of objects. Meaning that [`stream.read(n)`][stream-read] returns a single value instead of a Buffer of size n. Default = `false` * `read` {Function} Implementation for the [`stream._read()`][stream-_read] method. In classes that extend the Readable class, make sure to call the Readable constructor so that the buffering settings can be properly initialized. #### readable.\\_read(size) * `size` {Number} Number of bytes to read asynchronously Note: **Implement this method, but do NOT call it directly.** This method is prefixed with an underscore because it is internal to the class that defines it and should only be called by the internal Readable class methods. All Readable stream implementations must provide a \\_read method to fetch data from the underlying resource. When `_read()` is called, if data is available from the resource, the `_read()` implementation should start pushing that data into the read queue by calling [`this.push(dataChunk)`][stream-push]. `_read()` should continue reading from the resource and pushing data until push returns `false`, at which point it should stop reading from the resource. Only when `_read()` is called again after it has stopped should it start reading more data from the resource and pushing that data onto the queue. Note: once the `_read()` method is called, it will not be called again until the [`stream.push()`][stream-push] method is called. The `size` argument is advisory. Implementations where a \"read\" is a single call that returns data can use this to know how much data to fetch. Implementations where that is not relevant, such as TCP or TLS, may ignore this argument, and simply provide data whenever it becomes available. There is no need, for example to \"wait\" until `size` bytes are available before calling [`stream.push(chunk)`][stream-push]. #### readable.push(chunk[, encoding]) * `chunk` {Buffer|Null|String} Chunk of data to push into the read queue * `encoding` {String} Encoding of String chunks. Must be a valid Buffer encoding, such as `'utf8'` or `'ascii'` * return {Boolean} Whether or not more pushes should be performed Note: **This method should be called by Readable implementors, NOT by consumers of Readable streams.** If a value other than null is passed, The `push()` method adds a chunk of data into the queue for subsequent stream processors to consume. If `null` is passed, it signals the end of the stream (EOF), after which no more data can be written. The data added with `push()` can be pulled out by calling the [`stream.read()`][stream-read] method when the [`'readable'`][] event fires. This API is designed to be as flexible as possible. For example, you may be wrapping a lower-level source which has some sort of pause/resume mechanism, and a data callback. In those cases, you could wrap the low-level source object by doing something like this: ```js // source is an object with readStop() and readStart() methods, // and an `ondata` member that gets called when it has data, and // an `onend` member that gets called when the data is over. util.inherits(SourceWrapper, Readable); function SourceWrapper(options) { Readable.call(this, options); this._source = getLowlevelSourceObject(); // Every time there's data, we push it into the internal buffer. this._source.ondata = (chunk) => { // if push() returns false, then we need to stop reading from source if (!this.push(chunk)) this._source.readStop(); }; // When the source ends, we push the EOF-signaling `null` chunk this._source.onend = () => { this.push(null); }; } // _read will be called when the stream wants to pull more data in // the advisory size argument is ignored in this case. SourceWrapper.prototype._read = function(size) { this._source.readStart(); }; ``` #### Example: A Counting Stream This is a basic example of a Readable stream. It emits the numerals from 1 to 1,000,000 in ascending order, and then ends. ```js const Readable = require('stream').Readable; const util = require('util'); util.inherits(Counter, Readable); function Counter(opt) { Readable.call(this, opt); this._max = 1000000; this._index = 1; } Counter.prototype._read = function() { var i = this._index++; if (i > this._max) this.push(null); else { var str = '' + i; var buf = Buffer.from(str, 'ascii'); this.push(buf); } }; ``` #### Example: SimpleProtocol v1 (Sub-optimal) This is similar to the `parseHeader` function described [here](#stream_readable_unshift_chunk), but implemented as a custom stream. Also, note that this implementation does not convert the incoming data to a string. However, this would be better implemented as a [Transform][] stream. See [SimpleProtocol v2][] for a better implementation. ```js // A parser for a simple data protocol. // The \"header\" is a JSON object, followed by 2 \\n characters, and // then a message body. // // NOTE: This can be done more simply as a Transform stream! // Using Readable directly for this is sub-optimal. See the // alternative example below under the Transform section. const Readable = require('stream').Readable; const util = require('util'); util.inherits(SimpleProtocol, Readable); function SimpleProtocol(source, options) { if (!(this instanceof SimpleProtocol)) return new SimpleProtocol(source, options); Readable.call(this, options); this._inBody = false; this._sawFirstCr = false; // source is a readable stream, such as a socket or file this._source = source; source.on('end', () => { this.push(null); }); // give it a kick whenever the source is readable // read(0) will not consume any bytes source.on('readable', () => { this.read(0); }); this._rawHeader = []; this.header = null; } SimpleProtocol.prototype._read = function(n) { if (!this._inBody) { var chunk = this._source.read(); // if the source doesn't have data, we don't have data yet. if (chunk === null) return this.push(''); // check if the chunk has a \\n\\n var split = -1; for (var i = 0; i { // we add an 'end' method, but never consume the data socket.on('end', () => { // It will never get here. socket.end('I got your message (but didnt read it)\\n'); }); }).listen(1337); ``` In versions of Node.js prior to v0.10, the incoming message data would be simply discarded. However, in Node.js v0.10 and beyond, the socket will remain paused forever. The workaround in this situation is to call the [`stream.resume()`][stream-resume] method to start the flow of data: ```js // Workaround net.createServer((socket) => { socket.on('end', () => { socket.end('I got your message (but didnt read it)\\n'); }); // start the flow of data, discarding it. socket.resume(); }).listen(1337); ``` In addition to new Readable streams switching into flowing mode, pre-v0.10 style streams can be wrapped in a Readable class using the [`stream.wrap()`][] method. ### Object Mode Normally, Streams operate on Strings and Buffers exclusively. Streams that are in **object mode** can emit generic JavaScript values other than Buffers and Strings. A Readable stream in object mode will always return a single item from a call to [`stream.read(size)`][stream-read], regardless of what the size argument is. A Writable stream in object mode will always ignore the `encoding` argument to [`stream.write(data, encoding)`][stream-write]. The special value `null` still retains its special value for object mode streams. That is, for object mode readable streams, `null` as a return value from [`stream.read()`][stream-read] indicates that there is no more data, and [`stream.push(null)`][stream-push] will signal the end of stream data (`EOF`). No streams in Node.js core are object mode streams. This pattern is only used by userland streaming libraries. You should set `objectMode` in your stream child class constructor on the options object. Setting `objectMode` mid-stream is not safe. For Duplex streams `objectMode` can be set exclusively for readable or writable side with `readableObjectMode` and `writableObjectMode` respectively. These options can be used to implement parsers and serializers with Transform streams. ```js const util = require('util'); const StringDecoder = require('string_decoder').StringDecoder; const Transform = require('stream').Transform; util.inherits(JSONParseStream, Transform); // Gets \\n-delimited JSON string data, and emits the parsed objects function JSONParseStream() { if (!(this instanceof JSONParseStream)) return new JSONParseStream(); Transform.call(this, { readableObjectMode : true }); this._buffer = ''; this._decoder = new StringDecoder('utf8'); } JSONParseStream.prototype._transform = function(chunk, encoding, cb) { this._buffer += this._decoder.write(chunk); // split on newlines var lines = this._buffer.split(/\\r?\\n/); // keep the last partial line buffered this._buffer = lines.pop(); for (var l = 0; l < lines.length; l++) { var line = lines[l]; try { var obj = JSON.parse(line); } catch (er) { this.emit('error', er); return; } // push the parsed object out to the readable consumer this.push(obj); } cb(); }; JSONParseStream.prototype._flush = function(cb) { // Just handle any leftover var rem = this._buffer.trim(); if (rem) { try { var obj = JSON.parse(rem); } catch (er) { this.emit('error', er); return; } // push the parsed object out to the readable consumer this.push(obj); } cb(); }; ``` ### `stream.read(0)` There are some cases where you want to trigger a refresh of the underlying readable stream mechanisms, without actually consuming any data. In that case, you can call `stream.read(0)`, which will always return null. If the internal read buffer is below the `highWaterMark`, and the stream is not currently reading, then calling `stream.read(0)` will trigger a low-level [`stream._read()`][stream-_read] call. There is almost never a need to do this. However, you will see some cases in Node.js's internals where this is done, particularly in the Readable stream class internals. ### `stream.push('')` Pushing a zero-byte string or Buffer (when not in [Object mode][]) has an interesting side effect. Because it *is* a call to [`stream.push()`][stream-push], it will end the `reading` process. However, it does *not* add any data to the readable buffer, so there's nothing for a user to consume. Very rarely, there are cases where you have no data to provide now, but the consumer of your stream (or, perhaps, another bit of your own code) will know when to check again, by calling [`stream.read(0)`][stream-read]. In those cases, you *may* call `stream.push('')`. So far, the only use case for this functionality is in the [`tls.CryptoStream`][] class, which is deprecated in Node.js/io.js v1.0. If you find that you have to use `stream.push('')`, please consider another approach, because it almost certainly indicates that something is horribly wrong. [`'data'`]: #stream_event_data [`'drain'`]: #stream_event_drain [`'end'`]: #stream_event_end [`'finish'`]: #stream_event_finish [`'readable'`]: #stream_event_readable [`buf.toString(encoding)`]: https://nodejs.org/docs/v6.1.0/api/buffer.html#buffer_buf_tostring_encoding_start_end [`EventEmitter`]: https://nodejs.org/docs/v6.1.0/api/events.html#events_class_eventemitter [`process.stderr`]: https://nodejs.org/docs/v6.1.0/api/process.html#process_process_stderr [`process.stdin`]: https://nodejs.org/docs/v6.1.0/api/process.html#process_process_stdin [`process.stdout`]: https://nodejs.org/docs/v6.1.0/api/process.html#process_process_stdout [`stream.cork()`]: #stream_writable_cork [`stream.pipe()`]: #stream_readable_pipe_destination_options [`stream.uncork()`]: #stream_writable_uncork [`stream.unpipe()`]: #stream_readable_unpipe_destination [`stream.wrap()`]: #stream_readable_wrap_stream [`tls.CryptoStream`]: https://nodejs.org/docs/v6.1.0/api/tls.html#tls_class_cryptostream [`util.inherits()`]: https://nodejs.org/docs/v6.1.0/api/util.html#util_util_inherits_constructor_superconstructor [API for Stream Consumers]: #stream_api_for_stream_consumers [API for Stream Implementors]: #stream_api_for_stream_implementors [child process stdin]: https://nodejs.org/docs/v6.1.0/api/child_process.html#child_process_child_stdin [child process stdout and stderr]: https://nodejs.org/docs/v6.1.0/api/child_process.html#child_process_child_stdout [Compatibility]: #stream_compatibility_with_older_node_js_versions [crypto]: crypto.html [Duplex]: #stream_class_stream_duplex [fs read streams]: https://nodejs.org/docs/v6.1.0/api/fs.html#fs_class_fs_readstream [fs write streams]: https://nodejs.org/docs/v6.1.0/api/fs.html#fs_class_fs_writestream [HTTP requests, on the client]: https://nodejs.org/docs/v6.1.0/api/http.html#http_class_http_clientrequest [HTTP responses, on the server]: https://nodejs.org/docs/v6.1.0/api/http.html#http_class_http_serverresponse [http-incoming-message]: https://nodejs.org/docs/v6.1.0/api/http.html#http_class_http_incomingmessage [Object mode]: #stream_object_mode [Readable]: #stream_class_stream_readable [SimpleProtocol v2]: #stream_example_simpleprotocol_parser_v2 [stream-_flush]: #stream_transform_flush_callback [stream-_read]: #stream_readable_read_size_1 [stream-_transform]: #stream_transform_transform_chunk_encoding_callback [stream-_write]: #stream_writable_write_chunk_encoding_callback_1 [stream-_writev]: #stream_writable_writev_chunks_callback [stream-end]: #stream_writable_end_chunk_encoding_callback [stream-pause]: #stream_readable_pause [stream-push]: #stream_readable_push_chunk_encoding [stream-read]: #stream_readable_read_size [stream-resume]: #stream_readable_resume [stream-write]: #stream_writable_write_chunk_encoding_callback [TCP sockets]: https://nodejs.org/docs/v6.1.0/api/net.html#net_class_net_socket [Transform]: #stream_class_stream_transform [Writable]: #stream_class_stream_writable [zlib]: zlib.html"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md","tags":[],"body":"# streams WG Meeting 2015-01-30 ## Links * **Google Hangouts Video**: http://www.youtube.com/watch?v=I9nDOSGfwZg * **GitHub Issue**: https://github.com/iojs/readable-stream/issues/106 * **Original Minutes Google Doc**: https://docs.google.com/document/d/17aTgLnjMXIrfjgNaTUnHQO7m3xgzHR2VXBTmi03Qii4/ ## Agenda Extracted from https://github.com/iojs/readable-stream/labels/wg-agenda prior to meeting. * adopt a charter [#105](https://github.com/iojs/readable-stream/issues/105) * release and versioning strategy [#101](https://github.com/iojs/readable-stream/issues/101) * simpler stream creation [#102](https://github.com/iojs/readable-stream/issues/102) * proposal: deprecate implicit flowing of streams [#99](https://github.com/iojs/readable-stream/issues/99) ## Minutes ### adopt a charter * group: +1's all around ### What versioning scheme should be adopted? * group: +1’s 3.0.0 * domenic+group: pulling in patches from other sources where appropriate * mikeal: version independently, suggesting versions for io.js * mikeal+domenic: work with TC to notify in advance of changes simpler stream creation ### streamline creation of streams * sam: streamline creation of streams * domenic: nice simple solution posted but, we lose the opportunity to change the model may not be backwards incompatible (double check keys) **action item:** domenic will check ### remove implicit flowing of streams on(‘data’) * add isFlowing / isPaused * mikeal: worrying that we’re documenting polyfill methods – confuses users * domenic: more reflective API is probably good, with warning labels for users * new section for mad scientists (reflective stream access) * calvin: name the “third state” * mikeal: maybe borrow the name from whatwg? * domenic: we’re missing the “third state” * consensus: kind of difficult to name the third state * mikeal: figure out differences in states / compat * mathias: always flow on data – eliminates third state * explore what it breaks **action items:** * ask isaac for ability to list packages by what public io.js APIs they use (esp. Stream) * ask rod/build for infrastructure * **chris**: explore the “flow on data” approach * add isPaused/isFlowing * add new docs section * move isPaused to that section"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/buffer-shims/license.md","tags":[],"body":"# Copyright (c) 2016 Calvin Metcalf Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. **THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/buffer-shims/readme.md","tags":[],"body":"buffer-shims === functions to make sure the new buffer methods work in older browsers. ```js var bufferShim = require('buffer-shims'); bufferShim.from('foo'); bufferShim.alloc(9, 'cafeface', 'hex'); bufferShim.allocUnsafe(15); bufferShim.allocUnsafeSlow(21); ``` should just use the original in newer nodes and on older nodes uses fallbacks. Known Issues === - this does not patch the buffer object, only the constructor stuff - it's actually a polyfill ![](https://i.imgur.com/zxII3jJ.gif)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/core-util-is/README.md","tags":[],"body":"# core-util-is The `util.is*` functions introduced in Node v0.12."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. [![build status](https://secure.travis-ci.org/juliangruber/isarray.svg)](http://travis-ci.org/juliangruber/isarray) [![downloads](https://img.shields.io/npm/dm/isarray.svg)](https://www.npmjs.org/package/isarray) [![browser support](https://ci.testling.com/juliangruber/isarray.png) ](https://ci.testling.com/juliangruber/isarray) ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/process-nextick-args/license.md","tags":[],"body":"# Copyright (c) 2015 Calvin Metcalf Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. **THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/process-nextick-args/readme.md","tags":[],"body":"process-nextick-args ===== [![Build Status](https://travis-ci.org/calvinmetcalf/process-nextick-args.svg?branch=master)](https://travis-ci.org/calvinmetcalf/process-nextick-args) ```bash npm install --save process-nextick-args ``` Always be able to pass arguments to process.nextTick, no matter the platform ```js var nextTick = require('process-nextick-args'); nextTick(function (a, b, c) { console.log(a, b, c); }, 'step', 3, 'profit'); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/string_decoder/README.md","tags":[],"body":"**string_decoder.js** (`require('string_decoder')`) from Node.js core Copyright Joyent, Inc. and other Node contributors. See LICENCE file for details. Version numbers match the versions found in Node core, e.g. 0.10.24 matches Node 0.10.24, likewise 0.11.10 matches Node 0.11.10. **Prefer the stable version over the unstable.** The *build/* directory contains a build script that will scrape the source from the [joyent/node](https://github.com/joyent/node) repo given a specific Node version."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/util-deprecate/History.md","tags":[],"body":"1.0.2 / 2015-10-07 ================== * use try/catch when checking `localStorage` (#3, @kumavis) 1.0.1 / 2014-11-25 ================== * browser: use `console.warn()` for deprecation calls * browser: more jsdocs 1.0.0 / 2014-04-30 ================== * initial commit"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/util-deprecate/README.md","tags":[],"body":"util-deprecate ============== ### The Node.js `util.deprecate()` function with browser support In Node.js, this module simply re-exports the `util.deprecate()` function. In the web browser (i.e. via browserify), a browser-specific implementation of the `util.deprecate()` function is used. ## API A `deprecate()` function is the only thing exposed by this module. ``` javascript // setup: exports.foo = deprecate(foo, 'foo() is deprecated, use bar() instead'); // users see: foo(); // foo() is deprecated, use bar() instead foo(); foo(); ``` ## License (The MIT License) Copyright (c) 2014 Nathan Rajlich Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/chokidar/node_modules/readdirp/node_modules/set-immediate-shim/readme.md","tags":[],"body":"# set-immediate-shim [![Build Status](https://travis-ci.org/sindresorhus/set-immediate-shim.svg?branch=master)](https://travis-ci.org/sindresorhus/set-immediate-shim) > Simple [`setImmediate`](https://developer.mozilla.org/en-US/docs/Web/API/Window.setImmediate) shim ## Install ``` $ npm install --save set-immediate-shim ``` ## Usage ```js var setImmediateShim = require('set-immediate-shim'); setImmediateShim(function () { console.log('2'); }); console.log('1'); //=> 1 //=> 2 ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/History.md","tags":[],"body":"3.4.1 / 2016-01-23 ================== * deps: finalhandler@0.4.1 - deps: escape-html@~1.0.3 * deps: parseurl@~1.3.1 - perf: enable strict mode 3.4.0 / 2015-06-18 ================== * deps: debug@~2.2.0 - deps: ms@0.7.1 * deps: finalhandler@0.4.0 - Fix a false-positive when unpiping in Node.js 0.8 - Support `statusCode` property on `Error` objects - Use `unpipe` module for unpiping requests - deps: debug@~2.2.0 - deps: escape-html@1.0.2 - deps: on-finished@~2.3.0 - perf: enable strict mode - perf: remove argument reassignment * perf: enable strict mode * perf: remove argument reassignments 3.3.5 / 2015-03-16 ================== * deps: debug@~2.1.3 - Fix high intensity foreground color for bold - deps: ms@0.7.0 * deps: finalhandler@0.3.4 - deps: debug@~2.1.3 3.3.4 / 2015-01-07 ================== * deps: debug@~2.1.1 * deps: finalhandler@0.3.3 - deps: debug@~2.1.1 - deps: on-finished@~2.2.0 3.3.3 / 2014-11-09 ================== * Correctly invoke async callback asynchronously 3.3.2 / 2014-10-28 ================== * Fix handling of URLs containing `://` in the path 3.3.1 / 2014-10-22 ================== * deps: finalhandler@0.3.2 - deps: on-finished@~2.1.1 3.3.0 / 2014-10-17 ================== * deps: debug@~2.1.0 - Implement `DEBUG_FD` env variable support * deps: finalhandler@0.3.1 - Terminate in progress response only on error - Use `on-finished` to determine request status - deps: debug@~2.1.0 3.2.0 / 2014-09-08 ================== * deps: debug@~2.0.0 * deps: finalhandler@0.2.0 - Set `X-Content-Type-Options: nosniff` header - deps: debug@~2.0.0 3.1.1 / 2014-08-10 ================== * deps: parseurl@~1.3.0 3.1.0 / 2014-07-22 ================== * deps: debug@1.0.4 * deps: finalhandler@0.1.0 - Respond after request fully read - deps: debug@1.0.4 * deps: parseurl@~1.2.0 - Cache URLs based on original value - Remove no-longer-needed URL mis-parse work-around - Simplify the \"fast-path\" `RegExp` * perf: reduce executed logic in routing * perf: refactor location of `try` block 3.0.2 / 2014-07-10 ================== * deps: debug@1.0.3 - Add support for multiple wildcards in namespaces * deps: parseurl@~1.1.3 - faster parsing of href-only URLs 3.0.1 / 2014-06-19 ================== * use `finalhandler` for final response handling * deps: debug@1.0.2 3.0.0 / 2014-05-29 ================== * No changes 3.0.0-rc.2 / 2014-05-04 ======================= * Call error stack even when response has been sent * Prevent default 404 handler after response sent * dep: debug@0.8.1 * encode stack in HTML for default error handler * remove `proto` export 3.0.0-rc.1 / 2014-03-06 ======================= * move middleware to separate repos * remove docs * remove node patches * remove connect(middleware...) * remove the old `connect.createServer()` method * remove various private `connect.utils` functions * drop node.js 0.8 support 2.30.2 / 2015-07-31 =================== * deps: body-parser@~1.13.3 - deps: type-is@~1.6.6 * deps: compression@~1.5.2 - deps: accepts@~1.2.12 - deps: compressible@~2.0.5 - deps: vary@~1.0.1 * deps: errorhandler@~1.4.2 - deps: accepts@~1.2.12 * deps: method-override@~2.3.5 - deps: vary@~1.0.1 - perf: enable strict mode * deps: serve-index@~1.7.2 - deps: accepts@~1.2.12 - deps: mime-types@~2.1.4 * deps: type-is@~1.6.6 - deps: mime-types@~2.1.4 * deps: vhost@~3.0.1 - perf: enable strict mode 2.30.1 / 2015-07-05 =================== * deps: body-parser@~1.13.2 - deps: iconv-lite@0.4.11 - deps: qs@4.0.0 - deps: raw-body@~2.1.2 - deps: type-is@~1.6.4 * deps: compression@~1.5.1 - deps: accepts@~1.2.10 - deps: compressible@~2.0.4 * deps: errorhandler@~1.4.1 - deps: accepts@~1.2.10 * deps: qs@4.0.0 - Fix dropping parameters like `hasOwnProperty` - Fix various parsing edge cases * deps: morgan@~1.6.1 - deps: basic-auth@~1.0.3 * deps: pause@0.1.0 - Re-emit events with all original arguments - Refactor internals - perf: enable strict mode * deps: serve-index@~1.7.1 - deps: accepts@~1.2.10 - deps: mime-types@~2.1.2 * deps: type-is@~1.6.4 - deps: mime-types@~2.1.2 - perf: enable strict mode - perf: remove argument reassignment 2.30.0 / 2015-06-18 =================== * deps: body-parser@~1.13.1 - Add `statusCode` property on `Error`s, in addition to `status` - Change `type` default to `application/json` for JSON parser - Change `type` default to `application/x-www-form-urlencoded` for urlencoded parser - Provide static `require` analysis - Use the `http-errors` module to generate errors - deps: bytes@2.1.0 - deps: iconv-lite@0.4.10 - deps: on-finished@~2.3.0 - deps: raw-body@~2.1.1 - deps: type-is@~1.6.3 - perf: enable strict mode - perf: remove argument reassignment - perf: remove delete call * deps: bytes@2.1.0 - Slight optimizations - Units no longer case sensitive when parsing * deps: compression@~1.5.0 - Fix return value from `.end` and `.write` after end - Improve detection of zero-length body without `Content-Length` - deps: accepts@~1.2.9 - deps: bytes@2.1.0 - deps: compressible@~2.0.3 - perf: enable strict mode - perf: remove flush reassignment - perf: simplify threshold detection * deps: cookie@0.1.3 - Slight optimizations * deps: cookie-parser@~1.3.5 - deps: cookie@0.1.3 * deps: csurf@~1.8.3 - Add `sessionKey` option - deps: cookie@0.1.3 - deps: csrf@~3.0.0 * deps: errorhandler@~1.4.0 - Add charset to the `Content-Type` header - Support `statusCode` property on `Error` objects - deps: accepts@~1.2.9 - deps: escape-html@1.0.2 * deps: express-session@~1.11.3 - Support an array in `secret` option for key rotation - deps: cookie@0.1.3 - deps: crc@3.3.0 - deps: debug@~2.2.0 - deps: depd@~1.0.1 - deps: uid-safe@~2.0.0 * deps: finalhandler@0.4.0 - Fix a false-positive when unpiping in Node.js 0.8 - Support `statusCode` property on `Error` objects - Use `unpipe` module for unpiping requests - deps: escape-html@1.0.2 - deps: on-finished@~2.3.0 - perf: enable strict mode - perf: remove argument reassignment * deps: fresh@0.3.0 - Add weak `ETag` matching support * deps: morgan@~1.6.0 - Add `morgan.compile(format)` export - Do not color 1xx status codes in `dev` format - Fix `response-time` token to not include response latency - Fix `status` token incorrectly displaying before response in `dev` format - Fix token return values to be `undefined` or a string - Improve representation of multiple headers in `req` and `res` tokens - Use `res.getHeader` in `res` token - deps: basic-auth@~1.0.2 - deps: on-finished@~2.3.0 - pref: enable strict mode - pref: reduce function closure scopes - pref: remove dynamic compile on every request for `dev` format - pref: remove an argument reassignment - pref: skip function call without `skip` option * deps: serve-favicon@~2.3.0 - Send non-chunked response for `OPTIONS` - deps: etag@~1.7.0 - deps: fresh@0.3.0 - perf: enable strict mode - perf: remove argument reassignment - perf: remove bitwise operations * deps: serve-index@~1.7.0 - Accept `function` value for `template` option - Send non-chunked response for `OPTIONS` - Stat parent directory when necessary - Use `Date.prototype.toLocaleDateString` to format date - deps: accepts@~1.2.9 - deps: escape-html@1.0.2 - deps: mime-types@~2.1.1 - perf: enable strict mode - perf: remove argument reassignment * deps: serve-static@~1.10.0 - Add `fallthrough` option - Fix reading options from options prototype - Improve the default redirect response headers - Malformed URLs now `next()` instead of 400 - deps: escape-html@1.0.2 - deps: send@0.13.0 - perf: enable strict mode - perf: remove argument reassignment * deps: type-is@~1.6.3 - deps: mime-types@~2.1.1 - perf: reduce try block size - perf: remove bitwise operations 2.29.2 / 2015-05-14 =================== * deps: body-parser@~1.12.4 - Slight efficiency improvement when not debugging - deps: debug@~2.2.0 - deps: depd@~1.0.1 - deps: iconv-lite@0.4.8 - deps: on-finished@~2.2.1 - deps: qs@2.4.2 - deps: raw-body@~2.0.1 - deps: type-is@~1.6.2 * deps: compression@~1.4.4 - deps: accepts@~1.2.7 - deps: debug@~2.2.0 * deps: connect-timeout@~1.6.2 - deps: debug@~2.2.0 - deps: ms@0.7.1 * deps: debug@~2.2.0 - deps: ms@0.7.1 * deps: depd@~1.0.1 * deps: errorhandler@~1.3.6 - deps: accepts@~1.2.7 * deps: finalhandler@0.3.6 - deps: debug@~2.2.0 - deps: on-finished@~2.2.1 * deps: method-override@~2.3.3 - deps: debug@~2.2.0 * deps: morgan@~1.5.3 - deps: basic-auth@~1.0.1 - deps: debug@~2.2.0 - deps: depd@~1.0.1 - deps: on-finished@~2.2.1 * deps: qs@2.4.2 - Fix allowing parameters like `constructor` * deps: response-time@~2.3.1 - deps: depd@~1.0.1 * deps: serve-favicon@~2.2.1 - deps: etag@~1.6.0 - deps: ms@0.7.1 * deps: serve-index@~1.6.4 - deps: accepts@~1.2.7 - deps: debug@~2.2.0 - deps: mime-types@~2.0.11 * deps: serve-static@~1.9.3 - deps: send@0.12.3 * deps: type-is@~1.6.2 - deps: mime-types@~2.0.11 2.29.1 / 2015-03-16 =================== * deps: body-parser@~1.12.2 - deps: debug@~2.1.3 - deps: qs@2.4.1 - deps: type-is@~1.6.1 * deps: compression@~1.4.3 - Fix error when code calls `res.end(str, encoding)` - deps: accepts@~1.2.5 - deps: debug@~2.1.3 * deps: connect-timeout@~1.6.1 - deps: debug@~2.1.3 * deps: debug@~2.1.3 - Fix high intensity foreground color for bold - deps: ms@0.7.0 * deps: errorhandler@~1.3.5 - deps: accepts@~1.2.5 * deps: express-session@~1.10.4 - deps: debug@~2.1.3 * deps: finalhandler@0.3.4 - deps: debug@~2.1.3 * deps: method-override@~2.3.2 - deps: debug@~2.1.3 * deps: morgan@~1.5.2 - deps: debug@~2.1.3 * deps: qs@2.4.1 - Fix error when parameter `hasOwnProperty` is present * deps: serve-index@~1.6.3 - Properly escape file names in HTML - deps: accepts@~1.2.5 - deps: debug@~2.1.3 - deps: escape-html@1.0.1 - deps: mime-types@~2.0.10 * deps: serve-static@~1.9.2 - deps: send@0.12.2 * deps: type-is@~1.6.1 - deps: mime-types@~2.0.10 2.29.0 / 2015-02-17 =================== * Use `content-type` to parse `Content-Type` headers * deps: body-parser@~1.12.0 - add `debug` messages - accept a function for the `type` option - make internal `extended: true` depth limit infinity - use `content-type` to parse `Content-Type` headers - deps: iconv-lite@0.4.7 - deps: raw-body@1.3.3 - deps: type-is@~1.6.0 * deps: compression@~1.4.1 - Prefer `gzip` over `deflate` on the server - deps: accepts@~1.2.4 * deps: connect-timeout@~1.6.0 - deps: http-errors@~1.3.1 * deps: cookie-parser@~1.3.4 - deps: cookie-signature@1.0.6 * deps: cookie-signature@1.0.6 * deps: csurf@~1.7.0 - Accept `CSRF-Token` and `XSRF-Token` request headers - Default `cookie.path` to `'/'`, if using cookies - deps: cookie-signature@1.0.6 - deps: csrf@~2.0.6 - deps: http-errors@~1.3.1 * deps: errorhandler@~1.3.4 - deps: accepts@~1.2.4 * deps: express-session@~1.10.3 - deps: cookie-signature@1.0.6 - deps: uid-safe@1.1.0 * deps: http-errors@~1.3.1 - Construct errors using defined constructors from `createError` - Fix error names that are not identifiers - Set a meaningful `name` property on constructed errors * deps: response-time@~2.3.0 - Add function argument to support recording of response time * deps: serve-index@~1.6.2 - deps: accepts@~1.2.4 - deps: http-errors@~1.3.1 - deps: mime-types@~2.0.9 * deps: serve-static@~1.9.1 - deps: send@0.12.1 * deps: type-is@~1.6.0 - fix argument reassignment - fix false-positives in `hasBody` `Transfer-Encoding` check - support wildcard for both type and subtype (`*/*`) - deps: mime-types@~2.0.9 2.28.3 / 2015-01-31 =================== * deps: compression@~1.3.1 - deps: accepts@~1.2.3 - deps: compressible@~2.0.2 * deps: csurf@~1.6.6 - deps: csrf@~2.0.5 * deps: errorhandler@~1.3.3 - deps: accepts@~1.2.3 * deps: express-session@~1.10.2 - deps: uid-safe@1.0.3 * deps: serve-index@~1.6.1 - deps: accepts@~1.2.3 - deps: mime-types@~2.0.8 * deps: type-is@~1.5.6 - deps: mime-types@~2.0.8 2.28.2 / 2015-01-20 =================== * deps: body-parser@~1.10.2 - deps: iconv-lite@0.4.6 - deps: raw-body@1.3.2 * deps: serve-static@~1.8.1 - Fix redirect loop in Node.js 0.11.14 - Fix root path disclosure - deps: send@0.11.1 2.28.1 / 2015-01-08 =================== * deps: csurf@~1.6.5 - deps: csrf@~2.0.4 * deps: express-session@~1.10.1 - deps: uid-safe@~1.0.2 2.28.0 / 2015-01-05 =================== * deps: body-parser@~1.10.1 - Make internal `extended: true` array limit dynamic - deps: on-finished@~2.2.0 - deps: type-is@~1.5.5 * deps: compression@~1.3.0 - Export the default `filter` function for wrapping - deps: accepts@~1.2.2 - deps: debug@~2.1.1 * deps: connect-timeout@~1.5.0 - deps: debug@~2.1.1 - deps: http-errors@~1.2.8 - deps: ms@0.7.0 * deps: csurf@~1.6.4 - deps: csrf@~2.0.3 - deps: http-errors@~1.2.8 * deps: debug@~2.1.1 * deps: errorhandler@~1.3.2 - Add `log` option - Fix heading content to not include stack - deps: accepts@~1.2.2 * deps: express-session@~1.10.0 - Add `store.touch` interface for session stores - Fix `MemoryStore` expiration with `resave: false` - deps: debug@~2.1.1 * deps: finalhandler@0.3.3 - deps: debug@~2.1.1 - deps: on-finished@~2.2.0 * deps: method-override@~2.3.1 - deps: debug@~2.1.1 - deps: methods@~1.1.1 * deps: morgan@~1.5.1 - Add multiple date formats `clf`, `iso`, and `web` - Deprecate `buffer` option - Fix date format in `common` and `combined` formats - Fix token arguments to accept values with `\"` - deps: debug@~2.1.1 - deps: on-finished@~2.2.0 * deps: serve-favicon@~2.2.0 - Support query string in the URL - deps: etag@~1.5.1 - deps: ms@0.7.0 * deps: serve-index@~1.6.0 - Add link to root directory - deps: accepts@~1.2.2 - deps: batch@0.5.2 - deps: debug@~2.1.1 - deps: mime-types@~2.0.7 * deps: serve-static@~1.8.0 - Fix potential open redirect when mounted at root - deps: send@0.11.0 * deps: type-is@~1.5.5 - deps: mime-types@~2.0.7 2.27.6 / 2014-12-10 =================== * deps: serve-index@~1.5.3 - deps: accepts@~1.1.4 - deps: http-errors@~1.2.8 - deps: mime-types@~2.0.4 2.27.5 / 2014-12-10 =================== * deps: compression@~1.2.2 - Fix `.end` to only proxy to `.end` - deps: accepts@~1.1.4 * deps: express-session@~1.9.3 - Fix error when `req.sessionID` contains a non-string value * deps: http-errors@~1.2.8 - Fix stack trace from exported function - Remove `arguments.callee` usage * deps: serve-index@~1.5.2 - Fix icon name background alignment on mobile view * deps: type-is@~1.5.4 - deps: mime-types@~2.0.4 2.27.4 / 2014-11-23 =================== * deps: body-parser@~1.9.3 - deps: iconv-lite@0.4.5 - deps: qs@2.3.3 - deps: raw-body@1.3.1 - deps: type-is@~1.5.3 * deps: compression@~1.2.1 - deps: accepts@~1.1.3 * deps: errorhandler@~1.2.3 - deps: accepts@~1.1.3 * deps: express-session@~1.9.2 - deps: crc@3.2.1 * deps: qs@2.3.3 - Fix `arrayLimit` behavior * deps: serve-favicon@~2.1.7 - Avoid errors from enumerables on `Object.prototype` * deps: serve-index@~1.5.1 - deps: accepts@~1.1.3 - deps: mime-types@~2.0.3 * deps: type-is@~1.5.3 - deps: mime-types@~2.0.3 2.27.3 / 2014-11-09 =================== * Correctly invoke async callback asynchronously * deps: csurf@~1.6.3 - bump csrf - bump http-errors 2.27.2 / 2014-10-28 =================== * Fix handling of URLs containing `://` in the path * deps: body-parser@~1.9.2 - deps: qs@2.3.2 * deps: qs@2.3.2 - Fix parsing of mixed objects and values 2.27.1 / 2014-10-22 =================== * deps: body-parser@~1.9.1 - deps: on-finished@~2.1.1 - deps: qs@2.3.0 - deps: type-is@~1.5.2 * deps: express-session@~1.9.1 - Remove unnecessary empty write call * deps: finalhandler@0.3.2 - deps: on-finished@~2.1.1 * deps: morgan@~1.4.1 - deps: on-finished@~2.1.1 * deps: qs@2.3.0 - Fix parsing of mixed implicit and explicit arrays * deps: serve-static@~1.7.1 - deps: send@0.10.1 2.27.0 / 2014-10-16 =================== * Use `http-errors` module for creating errors * Use `utils-merge` module for merging objects * deps: body-parser@~1.9.0 - include the charset in \"unsupported charset\" error message - include the encoding in \"unsupported content encoding\" error message - deps: depd@~1.0.0 * deps: compression@~1.2.0 - deps: debug@~2.1.0 * deps: connect-timeout@~1.4.0 - Create errors with `http-errors` - deps: debug@~2.1.0 * deps: debug@~2.1.0 - Implement `DEBUG_FD` env variable support * deps: depd@~1.0.0 * deps: express-session@~1.9.0 - deps: debug@~2.1.0 - deps: depd@~1.0.0 * deps: finalhandler@0.3.1 - Terminate in progress response only on error - Use `on-finished` to determine request status - deps: debug@~2.1.0 * deps: method-override@~2.3.0 - deps: debug@~2.1.0 * deps: morgan@~1.4.0 - Add `debug` messages - deps: depd@~1.0.0 * deps: response-time@~2.2.0 - Add `header` option for custom header name - Add `suffix` option - Change `digits` argument to an `options` argument - deps: depd@~1.0.0 * deps: serve-favicon@~2.1.6 - deps: etag@~1.5.0 * deps: serve-index@~1.5.0 - Add `dir` argument to `filter` function - Add icon for mkv files - Create errors with `http-errors` - Fix incorrect 403 on Windows and Node.js 0.11 - Lookup icon by mime type for greater icon support - Support using tokens multiple times - deps: accepts@~1.1.2 - deps: debug@~2.1.0 - deps: mime-types@~2.0.2 * deps: serve-static@~1.7.0 - deps: send@0.10.0 2.26.6 / 2014-10-15 =================== * deps: compression@~1.1.2 - deps: accepts@~1.1.2 - deps: compressible@~2.0.1 * deps: csurf@~1.6.2 - bump http-errors - fix cookie name when using `cookie: true` * deps: errorhandler@~1.2.2 - deps: accepts@~1.1.2 2.26.5 / 2014-10-08 =================== * Fix accepting non-object arguments to `logger` * deps: serve-static@~1.6.4 - Fix redirect loop when index file serving disabled 2.26.4 / 2014-10-02 =================== * deps: morgan@~1.3.2 - Fix `req.ip` integration when `immediate: false` * deps: type-is@~1.5.2 - deps: mime-types@~2.0.2 2.26.3 / 2014-09-24 =================== * deps: body-parser@~1.8.4 - fix content encoding to be case-insensitive * deps: serve-favicon@~2.1.5 - deps: etag@~1.4.0 * deps: serve-static@~1.6.3 - deps: send@0.9.3 2.26.2 / 2014-09-19 =================== * deps: body-parser@~1.8.3 - deps: qs@2.2.4 * deps: qs@2.2.4 - Fix issue with object keys starting with numbers truncated 2.26.1 / 2014-09-15 =================== * deps: body-parser@~1.8.2 - deps: depd@0.4.5 * deps: depd@0.4.5 * deps: express-session@~1.8.2 - Use `crc` instead of `buffer-crc32` for speed - deps: depd@0.4.5 * deps: morgan@~1.3.1 - Remove un-used `bytes` dependency - deps: depd@0.4.5 * deps: serve-favicon@~2.1.4 - Fix content headers being sent in 304 response - deps: etag@~1.3.1 * deps: serve-static@~1.6.2 - deps: send@0.9.2 2.26.0 / 2014-09-08 =================== * deps: body-parser@~1.8.1 - add `parameterLimit` option to `urlencoded` parser - change `urlencoded` extended array limit to 100 - make empty-body-handling consistent between chunked requests - respond with 415 when over `parameterLimit` in `urlencoded` - deps: media-typer@0.3.0 - deps: qs@2.2.3 - deps: type-is@~1.5.1 * deps: compression@~1.1.0 - deps: accepts@~1.1.0 - deps: compressible@~2.0.0 - deps: debug@~2.0.0 * deps: connect-timeout@~1.3.0 - deps: debug@~2.0.0 * deps: cookie-parser@~1.3.3 - deps: cookie-signature@1.0.5 * deps: cookie-signature@1.0.5 * deps: csurf@~1.6.1 - add `ignoreMethods` option - bump cookie-signature - csrf-tokens -> csrf - set `code` property on CSRF token errors * deps: debug@~2.0.0 * deps: errorhandler@~1.2.0 - Display error using `util.inspect` if no other representation - deps: accepts@~1.1.0 * deps: express-session@~1.8.1 - Do not resave already-saved session at end of request - Prevent session prototype methods from being overwritten - deps: cookie-signature@1.0.5 - deps: debug@~2.0.0 * deps: finalhandler@0.2.0 - Set `X-Content-Type-Options: nosniff` header - deps: debug@~2.0.0 * deps: fresh@0.2.4 * deps: media-typer@0.3.0 - Throw error when parameter format invalid on parse * deps: method-override@~2.2.0 - deps: debug@~2.0.0 * deps: morgan@~1.3.0 - Assert if `format` is not a function or string * deps: qs@2.2.3 - Fix issue where first empty value in array is discarded * deps: serve-favicon@~2.1.3 - Accept string for `maxAge` (converted by `ms`) - Use `etag` to generate `ETag` header - deps: fresh@0.2.4 * deps: serve-index@~1.2.1 - Add `debug` messages - Resolve relative paths at middleware setup - deps: accepts@~1.1.0 * deps: serve-static@~1.6.1 - Add `lastModified` option - deps: send@0.9.1 * deps: type-is@~1.5.1 - fix `hasbody` to be true for `content-length: 0` - deps: media-typer@0.3.0 - deps: mime-types@~2.0.1 * deps: vhost@~3.0.0 2.25.10 / 2014-09-04 ==================== * deps: serve-static@~1.5.4 - deps: send@0.8.5 2.25.9 / 2014-08-29 =================== * deps: body-parser@~1.6.7 - deps: qs@2.2.2 * deps: qs@2.2.2 2.25.8 / 2014-08-27 =================== * deps: body-parser@~1.6.6 - deps: qs@2.2.0 * deps: csurf@~1.4.1 * deps: qs@2.2.0 - Array parsing fix - Performance improvements 2.25.7 / 2014-08-18 =================== * deps: body-parser@~1.6.5 - deps: on-finished@2.1.0 * deps: express-session@~1.7.6 - Fix exception on `res.end(null)` calls * deps: morgan@~1.2.3 - deps: on-finished@2.1.0 * deps: serve-static@~1.5.3 - deps: send@0.8.3 2.25.6 / 2014-08-14 =================== * deps: body-parser@~1.6.4 - deps: qs@1.2.2 * deps: qs@1.2.2 * deps: serve-static@~1.5.2 - deps: send@0.8.2 2.25.5 / 2014-08-11 =================== * Fix backwards compatibility in `logger` 2.25.4 / 2014-08-10 =================== * Fix `query` middleware breaking with argument - It never really took one in the first place * deps: body-parser@~1.6.3 - deps: qs@1.2.1 * deps: compression@~1.0.11 - deps: on-headers@~1.0.0 - deps: parseurl@~1.3.0 * deps: connect-timeout@~1.2.2 - deps: on-headers@~1.0.0 * deps: express-session@~1.7.5 - Fix parsing original URL - deps: on-headers@~1.0.0 - deps: parseurl@~1.3.0 * deps: method-override@~2.1.3 * deps: on-headers@~1.0.0 * deps: parseurl@~1.3.0 * deps: qs@1.2.1 * deps: response-time@~2.0.1 - deps: on-headers@~1.0.0 * deps: serve-index@~1.1.6 - Fix URL parsing * deps: serve-static@~1.5.1 - Fix parsing of weird `req.originalUrl` values - deps: parseurl@~1.3.0 = deps: utils-merge@1.0.0 2.25.3 / 2014-08-07 =================== * deps: multiparty@3.3.2 - Fix potential double-callback 2.25.2 / 2014-08-07 =================== * deps: body-parser@~1.6.2 - deps: qs@1.2.0 * deps: qs@1.2.0 - Fix parsing array of objects 2.25.1 / 2014-08-06 =================== * deps: body-parser@~1.6.1 - deps: qs@1.1.0 * deps: qs@1.1.0 - Accept urlencoded square brackets - Accept empty values in implicit array notation 2.25.0 / 2014-08-05 =================== * deps: body-parser@~1.6.0 - deps: qs@1.0.2 * deps: compression@~1.0.10 - Fix upper-case Content-Type characters prevent compression - deps: compressible@~1.1.1 * deps: csurf@~1.4.0 - Support changing `req.session` after `csurf` middleware - Calling `res.csrfToken()` after `req.session.destroy()` will now work * deps: express-session@~1.7.4 - Fix `res.end` patch to call correct upstream `res.write` - Fix response end delay for non-chunked responses * deps: qs@1.0.2 - Complete rewrite - Limits array length to 20 - Limits object depth to 5 - Limits parameters to 1,000 * deps: serve-static@~1.5.0 - Add `extensions` option - deps: send@0.8.1 2.24.3 / 2014-08-04 =================== * deps: serve-index@~1.1.5 - Fix Content-Length calculation for multi-byte file names - deps: accepts@~1.0.7 * deps: serve-static@~1.4.4 - Fix incorrect 403 on Windows and Node.js 0.11 - deps: send@0.7.4 2.24.2 / 2014-07-27 =================== * deps: body-parser@~1.5.2 * deps: depd@0.4.4 - Work-around v8 generating empty stack traces * deps: express-session@~1.7.2 * deps: morgan@~1.2.2 * deps: serve-static@~1.4.2 2.24.1 / 2014-07-26 =================== * deps: body-parser@~1.5.1 * deps: depd@0.4.3 - Fix exception when global `Error.stackTraceLimit` is too low * deps: express-session@~1.7.1 * deps: morgan@~1.2.1 * deps: serve-index@~1.1.4 * deps: serve-static@~1.4.1 2.24.0 / 2014-07-22 =================== * deps: body-parser@~1.5.0 - deps: depd@0.4.2 - deps: iconv-lite@0.4.4 - deps: raw-body@1.3.0 - deps: type-is@~1.3.2 * deps: compression@~1.0.9 - Add `debug` messages - deps: accepts@~1.0.7 * deps: connect-timeout@~1.2.1 - Accept string for `time` (converted by `ms`) - deps: debug@1.0.4 * deps: debug@1.0.4 * deps: depd@0.4.2 - Add `TRACE_DEPRECATION` environment variable - Remove non-standard grey color from color output - Support `--no-deprecation` argument - Support `--trace-deprecation` argument * deps: express-session@~1.7.0 - Improve session-ending error handling - deps: debug@1.0.4 - deps: depd@0.4.2 * deps: finalhandler@0.1.0 - Respond after request fully read - deps: debug@1.0.4 * deps: method-override@~2.1.2 - deps: debug@1.0.4 - deps: parseurl@~1.2.0 * deps: morgan@~1.2.0 - Add `:remote-user` token - Add `combined` log format - Add `common` log format - Remove non-standard grey color from `dev` format * deps: multiparty@3.3.1 * deps: parseurl@~1.2.0 - Cache URLs based on original value - Remove no-longer-needed URL mis-parse work-around - Simplify the \"fast-path\" `RegExp` * deps: serve-static@~1.4.0 - Add `dotfiles` option - deps: parseurl@~1.2.0 - deps: send@0.7.0 2.23.0 / 2014-07-10 =================== * deps: debug@1.0.3 - Add support for multiple wildcards in namespaces * deps: express-session@~1.6.4 * deps: method-override@~2.1.0 - add simple debug output - deps: methods@1.1.0 - deps: parseurl@~1.1.3 * deps: parseurl@~1.1.3 - faster parsing of href-only URLs * deps: serve-static@~1.3.1 - deps: parseurl@~1.1.3 2.22.0 / 2014-07-03 =================== * deps: csurf@~1.3.0 - Fix `cookie.signed` option to actually sign cookie * deps: express-session@~1.6.1 - Fix `res.end` patch to return correct value - Fix `res.end` patch to handle multiple `res.end` calls - Reject cookies with missing signatures * deps: multiparty@3.3.0 - Always emit close after all parts ended - Fix callback hang in node.js 0.8 on errors * deps: serve-static@~1.3.0 - Accept string for `maxAge` (converted by `ms`) - Add `setHeaders` option - Include HTML link in redirect response - deps: send@0.5.0 2.21.1 / 2014-06-26 =================== * deps: cookie-parser@1.3.2 - deps: cookie-signature@1.0.4 * deps: cookie-signature@1.0.4 - fix for timing attacks * deps: express-session@~1.5.2 - deps: cookie-signature@1.0.4 * deps: type-is@~1.3.2 - more mime types 2.21.0 / 2014-06-20 =================== * deprecate `connect(middleware)` -- use `app.use(middleware)` instead * deprecate `connect.createServer()` -- use `connect()` instead * fix `res.setHeader()` patch to work with get -> append -> set pattern * deps: compression@~1.0.8 * deps: errorhandler@~1.1.1 * deps: express-session@~1.5.0 - Deprecate integration with `cookie-parser` middleware - Deprecate looking for secret in `req.secret` - Directly read cookies; `cookie-parser` no longer required - Directly set cookies; `res.cookie` no longer required - Generate session IDs with `uid-safe`, faster and even less collisions * deps: serve-index@~1.1.3 2.20.2 / 2014-06-19 =================== * deps: body-parser@1.4.3 - deps: type-is@1.3.1 2.20.1 / 2014-06-19 =================== * deps: type-is@1.3.1 - fix global variable leak 2.20.0 / 2014-06-19 =================== * deprecate `verify` option to `json` -- use `body-parser` npm module instead * deprecate `verify` option to `urlencoded` -- use `body-parser` npm module instead * deprecate things with `depd` module * use `finalhandler` for final response handling * use `media-typer` to parse `content-type` for charset * deps: body-parser@1.4.2 - check accepted charset in content-type (accepts utf-8) - check accepted encoding in content-encoding (accepts identity) - deprecate `urlencoded()` without provided `extended` option - lazy-load urlencoded parsers - support gzip and deflate bodies - set `inflate: false` to turn off - deps: raw-body@1.2.2 - deps: type-is@1.3.0 - Support all encodings from `iconv-lite` * deps: connect-timeout@1.1.1 - deps: debug@1.0.2 * deps: cookie-parser@1.3.1 - export parsing functions - `req.cookies` and `req.signedCookies` are now plain objects - slightly faster parsing of many cookies * deps: csurf@1.2.2 * deps: errorhandler@1.1.0 - Display error on console formatted like `throw` - Escape HTML in stack trace - Escape HTML in title - Fix up edge cases with error sent in response - Set `X-Content-Type-Options: nosniff` header - Use accepts for negotiation * deps: express-session@1.4.0 - Add `genid` option to generate custom session IDs - Add `saveUninitialized` option to control saving uninitialized sessions - Add `unset` option to control unsetting `req.session` - Generate session IDs with `rand-token` by default; reduce collisions - Integrate with express \"trust proxy\" by default - deps: buffer-crc32@0.2.3 - deps: debug@1.0.2 * deps: multiparty@3.2.9 * deps: serve-index@1.1.2 - deps: batch@0.5.1 * deps: type-is@1.3.0 - improve type parsing * deps: vhost@2.0.0 - Accept `RegExp` object for `hostname` - Provide `req.vhost` object - Support IPv6 literal in `Host` header 2.19.6 / 2014-06-11 =================== * deps: body-parser@1.3.1 - deps: type-is@1.2.1 * deps: compression@1.0.7 - use vary module for better `Vary` behavior - deps: accepts@1.0.3 - deps: compressible@1.1.0 * deps: debug@1.0.2 * deps: serve-index@1.1.1 - deps: accepts@1.0.3 * deps: serve-static@1.2.3 - Do not throw un-catchable error on file open race condition - deps: send@0.4.3 2.19.5 / 2014-06-09 =================== * deps: csurf@1.2.1 - refactor to use csrf-tokens@~1.0.2 * deps: debug@1.0.1 * deps: serve-static@1.2.2 - fix \"event emitter leak\" warnings - deps: send@0.4.2 * deps: type-is@1.2.1 - Switch dependency from `mime` to `mime-types@1.0.0` 2.19.4 / 2014-06-05 =================== * deps: errorhandler@1.0.2 - Pass on errors from reading error files * deps: method-override@2.0.2 - use vary module for better `Vary` behavior * deps: serve-favicon@2.0.1 - Reduce byte size of `ETag` header 2.19.3 / 2014-06-03 =================== * deps: compression@1.0.6 - fix listeners for delayed stream creation - fix regression for certain `stream.pipe(res)` situations - fix regression when negotiation fails 2.19.2 / 2014-06-03 =================== * deps: compression@1.0.4 - fix adding `Vary` when value stored as array - fix back-pressure behavior - fix length check for `res.end` 2.19.1 / 2014-06-02 =================== * fix deprecated `utils.escape` 2.19.0 / 2014-06-02 =================== * deprecate `methodOverride()` -- use `method-override` npm module instead * deps: body-parser@1.3.0 - add `extended` option to urlencoded parser * deps: method-override@2.0.1 - set `Vary` header - deps: methods@1.0.1 * deps: multiparty@3.2.8 * deps: response-time@2.0.0 - add `digits` argument - do not override existing `X-Response-Time` header - timer not subject to clock drift - timer resolution down to nanoseconds * deps: serve-static@1.2.1 - send max-age in Cache-Control in correct format - use `escape-html` for escaping - deps: send@0.4.1 2.18.0 / 2014-05-29 =================== * deps: compression@1.0.3 * deps: serve-index@1.1.0 - Fix content negotiation when no `Accept` header - Properly support all HTTP methods - Support vanilla node.js http servers - Treat `ENAMETOOLONG` as code 414 - Use accepts for negotiation * deps: serve-static@1.2.0 - Calculate ETag with md5 for reduced collisions - Fix wrong behavior when index file matches directory - Ignore stream errors after request ends - Skip directories in index file search - deps: send@0.4.0 2.17.3 / 2014-05-27 =================== * deps: express-session@1.2.1 - Fix `resave` such that `resave: true` works 2.17.2 / 2014-05-27 =================== * deps: body-parser@1.2.2 - invoke `next(err)` after request fully read - deps: raw-body@1.1.6 * deps: method-override@1.0.2 - Handle `req.body` key referencing array or object - Handle multiple HTTP headers 2.17.1 / 2014-05-21 =================== * fix `res.charset` appending charset when `content-type` has one 2.17.0 / 2014-05-20 =================== * deps: express-session@1.2.0 - Add `resave` option to control saving unmodified sessions * deps: morgan@1.1.1 - \"dev\" format will use same tokens as other formats - `:response-time` token is now empty when immediate used - `:response-time` token is now monotonic - `:response-time` token has precision to 1 μs - fix `:status` + immediate output in node.js 0.8 - improve `buffer` option to prevent indefinite event loop holding - simplify method to get remote address - deps: bytes@1.0.0 * deps: serve-index@1.0.3 - Fix error from non-statable files in HTML view 2.16.2 / 2014-05-18 =================== * fix edge-case in `res.appendHeader` that would append in wrong order * deps: method-override@1.0.1 2.16.1 / 2014-05-17 =================== * remove usages of `res.headerSent` from core 2.16.0 / 2014-05-17 =================== * deprecate `res.headerSent` -- use `res.headersSent` * deprecate `res.on(\"header\")` -- use on-headers module instead * fix `connect.version` to reflect the actual version * json: use body-parser - add `type` option - fix repeated limit parsing with every request - improve parser speed * urlencoded: use body-parser - add `type` option - fix repeated limit parsing with every request * dep: bytes@1.0.0 * add negative support * dep: cookie-parser@1.1.0 - deps: cookie@0.1.2 * dep: csurf@1.2.0 - add support for double-submit cookie * dep: express-session@1.1.0 - Add `name` option; replacement for `key` option - Use `setImmediate` in MemoryStore for node.js >= 0.10 2.15.0 / 2014-05-04 =================== * Add simple `res.cookie` support * Add `res.appendHeader` * Call error stack even when response has been sent * Patch `res.headerSent` to return Boolean * Patch `res.headersSent` for node.js 0.8 * Prevent default 404 handler after response sent * dep: compression@1.0.2 * support headers given to `res.writeHead` * deps: bytes@0.3.0 * deps: negotiator@0.4.3 * dep: connect-timeout@1.1.0 * Add `req.timedout` property * Add `respond` option to constructor * Clear timer on socket destroy * deps: debug@0.8.1 * dep: debug@^0.8.0 * add `enable()` method * change from stderr to stdout * dep: errorhandler@1.0.1 * Clean up error CSS * Do not respond after headers sent * dep: express-session@1.0.4 * Remove import of `setImmediate` * Use `res.cookie()` instead of `res.setHeader()` * deps: cookie@0.1.2 * deps: debug@0.8.1 * dep: morgan@1.0.1 * Make buffer unique per morgan instance * deps: bytes@0.3.0 * dep: serve-favicon@2.0.0 * Accept `Buffer` of icon as first argument * Non-GET and HEAD requests are denied * Send valid max-age value * Support conditional requests * Support max-age=0 * Support OPTIONS method * Throw if `path` argument is directory * dep: serve-index@1.0.2 * Add stylesheet option * deps: negotiator@0.4.3 2.14.5 / 2014-04-24 =================== * dep: raw-body@1.1.4 * allow true as an option * deps: bytes@0.3.0 * dep: serve-static@1.1.0 * Accept options directly to `send` module * deps: send@0.3.0 2.14.4 / 2014-04-07 =================== * dep: bytes@0.3.0 * added terabyte support * dep: csurf@1.1.0 * add constant-time string compare * dep: serve-static@1.0.4 * Resolve relative paths at middleware setup * Use parseurl to parse the URL from request * fix node.js 0.8 compatibility with memory session 2.14.3 / 2014-03-18 =================== * dep: static-favicon@1.0.2 * Fixed content of default icon 2.14.2 / 2014-03-11 =================== * dep: static-favicon@1.0.1 * Fixed path to default icon 2.14.1 / 2014-03-06 =================== * dep: fresh@0.2.2 * no real changes * dep: serve-index@1.0.1 * deps: negotiator@0.4.2 * dep: serve-static@1.0.2 * deps: send@0.2.0 2.14.0 / 2014-03-05 =================== * basicAuth: use basic-auth-connect * cookieParser: use cookie-parser * compress: use compression * csrf: use csurf * dep: cookie-signature@1.0.3 * directory: use serve-index * errorHandler: use errorhandler * favicon: use static-favicon * logger: use morgan * methodOverride: use method-override * responseTime: use response-time * session: use express-session * static: use serve-static * timeout: use connect-timeout * vhost: use vhost 2.13.1 / 2014-03-05 =================== * cookieSession: compare full value rather than crc32 * deps: raw-body@1.1.3 2.13.0 / 2014-02-14 =================== * fix typo in memory store warning #974 @rvagg * compress: use compressible * directory: add template option #990 @gottaloveit @Earl-Brown * csrf: prevent deprecated warning with old sessions 2.12.0 / 2013-12-10 =================== * bump qs * directory: sort folders before files * directory: add folder icons * directory: de-duplicate icons, details/mobile views #968 @simov * errorHandler: end default 404 handler with a newline #972 @rlidwka * session: remove long cookie expire check #870 @undoZen 2.11.2 / 2013-12-01 =================== * bump raw-body 2.11.1 / 2013-11-27 =================== * bump raw-body * errorHandler: use `res.setHeader()` instead of `res.writeHead()` #949 @lo1tuma 2.11.0 / 2013-10-29 =================== * update bytes * update uid2 * update negotiator * sessions: add rolling session option #944 @ilmeo * sessions: property set cookies when given FQDN * cookieSessions: properly set cookies when given FQDN #948 @bmancini55 * proto: fix FQDN mounting when multiple handlers #945 @bmancini55 2.10.1 / 2013-10-23 =================== * fixed; fixed a bug with static middleware at root and trailing slashes #942 (@dougwilson) 2.10.0 / 2013-10-22 =================== * fixed: set headers written by writeHead before emitting 'header' * fixed: mounted path should ignore querystrings on FQDNs #940 (@dougwilson) * fixed: parsing protocol-relative URLs with @ as pathnames #938 (@dougwilson) * fixed: fix static directory redirect for mount's root #937 (@dougwilson) * fixed: setting set-cookie header when mixing arrays and strings #893 (@anuj123) * bodyParser: optional verify function for urlencoded and json parsers for signing request bodies * compress: compress checks content-length to check threshold * compress: expose `res.flush()` for flushing responses * cookieParser: pass options into node-cookie #803 (@cauldrath) * errorHandler: replace `\\n`s with ``s in error handler 2.9.2 / 2013-10-18 ================== * warn about multiparty and limit middleware deprecation for v3 * fix fully qualified domain name mounting. #920 (@dougwilson) * directory: Fix potential security issue with serving files outside the root. #929 (@dougwilson) * logger: store IP at beginning in case socket prematurely closes #930 (@dougwilson) 2.9.1 / 2013-10-15 ================== * update multiparty * compress: Set vary header only if Content-Type passes filter #904 * directory: Fix directory middleware URI escaping #917 (@dougwilson) * directory: Fix directory seperators for Windows #914 (@dougwilson) * directory: Keep query string intact during directory redirect #913 (@dougwilson) * directory: Fix paths in links #730 (@JacksonTian) * errorHandler: Don't escape text/plain as HTML #875 (@johan) * logger: Write '0' instead of '-' when response time is zero #910 (@dougwilson) * logger: Log even when connections are aborted #760 (@dylanahsmith) * methodOverride: Check req.body is an object #907 (@kbjr) * multipart: Add .type back to file parts for backwards compatibility #912 (@dougwilson) * multipart: Allow passing options to the Multiparty constructor #902 (@niftylettuce) 2.9.0 / 2013-09-07 ================== * multipart: add docs regarding tmpfiles * multipart: add .name back to file parts * multipart: use multiparty instead of formidable 2.8.8 / 2013-09-02 ================== * csrf: change to math.random() salt and remove csrfToken() callback 2.8.7 / 2013-08-28 ================== * csrf: prevent salt generation on every request, and add async req.csrfToken(fn) 2.8.6 / 2013-08-28 ================== * csrf: refactor to use HMAC tokens (BREACH attack) * compress: add compression of SVG and common font files by default. 2.8.5 / 2013-08-11 ================== * add: compress Dart source files by default * update fresh 2.8.4 / 2013-07-08 ================== * update send 2.8.3 / 2013-07-04 ================== * add a name back to static middleware (\"staticMiddleware\") * fix .hasBody() utility to require transfer-encoding or content-length 2.8.2 / 2013-07-03 ================== * update send * update cookie dep. * add better debug() for middleware * add whitelisting of supported methods to methodOverride() 2.8.1 / 2013-06-27 ================== * fix: escape req.method in 404 response 2.8.0 / 2013-06-26 ================== * add `threshold` option to `compress()` to prevent compression of small responses * add support for vendor JSON mime types in json() * add X-Forwarded-Proto initial https proxy support * change static redirect to 303 * change octal escape sequences for strict mode * change: replace utils.uid() with uid2 lib * remove other \"static\" function name. Fixes #794 * fix: hasBody() should return false if Content-Length: 0 2.7.11 / 2013-06-02 ================== * update send 2.7.10 / 2013-05-21 ================== * update qs * update formidable * fix: write/end to noop() when request aborted 2.7.9 / 2013-05-07 ================== * update qs * drop support for node = 0.4.1 = 0.3.1` 1.6.2 / 2011-08-11 ================== * Fixed `connect.static()` null byte vulnerability * Fixed `connect.directory()` null byte vulnerability * Changed: 301 redirect in `static()` to postfix \"/\" on directory. Closes #289 1.6.1 / 2011-08-03 ================== * Added: allow retval `== null` from logger callback to ignore line * Added `getOnly` option to `connect.static.send()` * Added response \"header\" event allowing augmentation * Added `X-CSRF-Token` header field check * Changed dep `qs >= 0.3.0` * Changed: persist csrf token. Closes #322 * Changed: sort directory middleware files alphabetically 1.6.0 / 2011-07-10 ================== * Added :response-time to \"dev\" logger format * Added simple `csrf()` middleware. Closes #315 * Fixed `res._headers` logger regression. Closes #318 * Removed support for multiple middleware being passed to `.use()` 1.5.2 / 2011-07-06 ================== * Added `filter` function option to `directory()` [David Rio Deiros] * Changed: re-write of the `logger()` middleware, with extensible tokens and formats * Changed: `static.send()` \"..\" in path without root considered malicious * Fixed quotes in docs. Closes #312 * Fixed urls when mounting `directory()`, use `originalUrl` [Daniel Dickison] 1.5.1 / 2011-06-20 ================== * Added malicious path check to `directory()` middleware * Added `utils.forbidden(res)` * Added `connect.query()` middleware 1.5.0 / 2011-06-20 ================== * Added `connect.directory()` middleware for serving directory listings 1.4.6 / 2011-06-18 ================== * Fixed `connect.static()` root with `..` * Fixed `connect.static()` __EBADF__ 1.4.5 / 2011-06-17 ================== * Fixed EBADF in `connect.static()`. Closes #297 1.4.4 / 2011-06-16 ================== * Changed `connect.static()` to check resolved dirname. Closes #294 1.4.3 / 2011-06-06 ================== * Fixed fd leak in `connect.static()` when the socket is closed * Fixed; `bodyParser()` ignoring __GET/HEAD__. Closes #285 1.4.2 / 2011-05-27 ================== * Changed to `devDependencies` * Fixed stream creation on `static()` __HEAD__ request. [Andreas Lind Petersen] * Fixed Win32 support for `static()` * Fixed monkey-patch issue. Closes #261 1.4.1 / 2011-05-08 ================== * Added \"hidden\" option to `static()`. ignores hidden files by default. Closes * Added; expose `connect.static.mime.define()`. Closes #251 * Fixed `errorHandler` middleware for missing stack traces. [aseemk] #274 1.4.0 / 2011-04-25 ================== * Added route-middleware `next('route')` support to jump passed the route itself * Added Content-Length support to `limit()` * Added route-specific middleware support (used to be in express) * Changed; refactored duplicate session logic * Changed; prevent redefining `store.generate` per request * Fixed; `static()` does not set Content-Type when explicitly set [nateps] * Fixed escape `errorHandler()` {error} contents * NOTE: `router` will be removed in 2.0 1.3.0 / 2011-04-06 ================== * Added `router.remove(path[, method])` to remove a route 1.2.3 / 2011-04-05 ================== * Fixed basicAuth realm issue when passing strings. Closes #253 1.2.2 / 2011-04-05 ================== * Added `basicAuth(username, password)` support * Added `errorHandler.title` defaulting to \"Connect\" * Changed `errorHandler` css 1.2.1 / 2011-03-30 ================== * Fixed `logger()` https `remoteAddress` logging [Alexander Simmerl] 1.2.0 / 2011-03-30 ================== * Added `router.lookup(path[, method])` * Added `router.match(url[, method])` * Added basicAuth async support. Closes #223 1.1.5 / 2011-03-27 ================== * Added; allow `logger()` callback function to return an empty string to ignore logging * Fixed; utilizing `mime.charsets.lookup()` for `static()`. Closes 245 1.1.4 / 2011-03-23 ================== * Added `logger()` support for format function * Fixed `logger()` to support mess of writeHead()/progressive api for node 0.4.x 1.1.3 / 2011-03-21 ================== * Changed; `limit()` now calls `req.destroy()` 1.1.2 / 2011-03-21 ================== * Added request \"limit\" event to `limit()` middleware * Changed; `limit()` middleware will `next(err)` on failure 1.1.1 / 2011-03-18 ================== * Fixed session middleware for HTTPS. Closes #241 [reported by mt502] 1.1.0 / 2011-03-17 ================== * Added `Session#reload(fn)` 1.0.6 / 2011-03-09 ================== * Fixed `res.setHeader()` patch, preserve casing 1.0.5 / 2011-03-09 ================== * Fixed; `logger()` using `req.originalUrl` instead of `req.url` 1.0.4 / 2011-03-09 ================== * Added `res.charset` * Added conditional sessions example * Added support for `session.ignore` to be replaced. Closes #227 * Fixed `Cache-Control` delimiters. Closes #228 1.0.3 / 2011-03-03 ================== * Fixed; `static.send()` invokes callback with connection error 1.0.2 / 2011-03-02 ================== * Fixed exported connect function * Fixed package.json; node \">= 0.4.1 = 0.0.4 0.5.8 / 2011-02-04 ================== * Added `qs` dependency * Fixed router race-condition causing possible failure when `next()`ing to one or more routes with parallel requests 0.5.7 / 2011-02-01 ================== * Added `onvhost()` call so Express (and others) can know when they are * Revert \"Added stylus support\" (use the middleware which ships with stylus) * Removed custom `Server#listen()` to allow regular `http.Server#listen()` args to work properly * Fixed long standing router issue (#83) that causes '.' to be disallowed within named placeholders in routes [Andreas Lind Petersen] * Fixed `utils.uid()` length error [Jxck] mounted 0.5.6 / 2011-01-23 ================== * Added stylus support to `compiler` * _favicon.js_ cleanup * _compiler.js_ cleanup * _bodyDecoder.js_ cleanup 0.5.5 / 2011-01-13 ================== * Changed; using sha256 HMAC instead of md5. [Paul Querna] * Changed; generated a longer random UID, without time influence. [Paul Querna] * Fixed; session middleware throws when secret is not present. [Paul Querna] 0.5.4 / 2011-01-07 ================== * Added; throw when router path or callback is missing * Fixed; `next(err)` on cookie parse exception instead of ignoring * Revert \"Added utils.pathname(), memoized url.parse(str).pathname\" 0.5.3 / 2011-01-05 ================== * Added _docs/api.html_ * Added `utils.pathname()`, memoized url.parse(str).pathname * Fixed `session.id` issue. Closes #183 * Changed; Defaulting `staticProvider` maxAge to 0 not 1 year. Closes #179 * Removed bad outdated docs, we need something new / automated eventually 0.5.2 / 2010-12-28 ================== * Added default __OPTIONS__ support to _router_ middleware 0.5.1 / 2010-12-28 ================== * Added `req.session.id` mirroring `req.sessionID` * Refactored router, exposing `connect.router.methods` * Exclude non-lib files from npm * Removed imposed headers `X-Powered-By`, `Server`, etc 0.5.0 / 2010-12-06 ================== * Added _./index.js_ * Added route segment precondition support and example * Added named capture group support to router 0.4.0 / 2010-11-29 ================== * Added `basicAuth` middleware * Added more HTTP methods to the `router` middleware 0.3.0 / 2010-07-21 ================== * Added _staticGzip_ middleware * Added `connect.utils` to expose utils * Added `connect.session.Session` * Added `connect.session.Store` * Added `connect.session.MemoryStore` * Added `connect.middleware` to expose the middleware getters * Added `buffer` option to _logger_ for performance increase * Added _favicon_ middleware for serving your own favicon or the connect default * Added option support to _staticProvider_, can now pass _root_ and _lifetime_. * Added; mounted `Server` instances now have the `route` property exposed for reflection * Added support for callback as first arg to `Server#use()` * Added support for `next(true)` in _router_ to bypass match attempts * Added `Server#listen()` _host_ support * Added `Server#route` when `Server#use()` is called with a route on a `Server` instance * Added _methodOverride_ X-HTTP-Method-Override support * Refactored session internals, adds _secret_ option * Renamed `lifetime` option to `maxAge` in _staticProvider_ * Removed connect(1), it is now [spark(1)](http://github.com/senchalabs/spark) * Removed connect(1) dependency on examples, they can all now run with node(1) * Remove a typo that was leaking a global. * Removed `Object.prototype` forEach() and map() methods * Removed a few utils not used * Removed `connect.createApp()` * Removed `res.simpleBody()` * Removed _format_ middleware * Removed _flash_ middleware * Removed _redirect_ middleware * Removed _jsonrpc_ middleware, use [visionmedia/connect-jsonrpc](http://github.com/visionmedia/connect-jsonrpc) * Removed _pubsub_ middleware * Removed need for `params.{captures,splat}` in _router_ middleware, `params` is an array * Changed; _compiler_ no longer 404s * Changed; _router_ signature now matches connect middleware signature * Fixed a require in _session_ for default `MemoryStore` * Fixed nasty request body bug in _router_. Closes #54 * Fixed _less_ support in _compiler_ * Fixed bug preventing proper bubbling of exceptions in mounted servers * Fixed bug in `Server#use()` preventing `Server` instances as the first arg * Fixed **ENOENT** special case, is now treated as any other exception * Fixed spark env support 0.2.1 / 2010-07-09 ================== * Added support for _router_ `next()` to continue calling matched routes * Added mime type for _cache.manifest_ files. * Changed _compiler_ middleware to use async require * Changed session api, stores now only require `#get()`, and `#set()` * Fixed _cacheManifest_ by adding `utils.find()` back 0.2.0 / 2010-07-01 ================== * Added calls to `Session()` casts the given object as a `Session` instance * Added passing of `next()` to _router_ callbacks. Closes #46 * Changed; `MemoryStore#destroy()` removes `req.session` * Changed `res.redirect(\"back\")` to default to \"/\" when Referr?er is not present * Fixed _staticProvider_ urlencoded paths issue. Closes #47 * Fixed _staticProvider_ middleware responding to **GET** requests * Fixed _jsonrpc_ middleware `Accept` header check. Closes #43 * Fixed _logger_ format option * Fixed typo in _compiler_ middleware preventing the _dest_ option from working 0.1.0 / 2010-06-25 ================== * Revamped the api, view the [Connect documentation](http://extjs.github.com/Connect/index.html#Middleware-Authoring) for more info (hover on the right for menu) * Added [extended api docs](http://extjs.github.com/Connect/api.html) * Added docs for several more middleware layers * Added `connect.Server#use()` * Added _compiler_ middleware which provides arbitrary static compilation * Added `req.originalUrl` * Removed _blog_ example * Removed _sass_ middleware (use _compiler_) * Removed _less_ middleware (use _compiler_) * Renamed middleware to be camelcase, _body-decoder_ is now _bodyDecoder_ etc. * Fixed `req.url` mutation bug when matching `connect.Server#use()` routes * Fixed `mkdir -p` implementation used in _bin/connect_. Closes #39 * Fixed bug in _bodyDecoder_ throwing exceptions on request empty bodies * `make install` installing lib to $LIB_PREFIX aka $HOME/.node_libraries 0.0.6 / 2010-06-22 ================== * Added _static_ middleware usage example * Added support for regular expressions as paths for _router_ * Added `util.merge()` * Increased performance of _static_ by ~ 200 rps * Renamed the _rest_ middleware to _router_ * Changed _rest_ api to accept a callback function * Removed _router_ middleware * Removed _proto.js_, only `Object#forEach()` remains 0.0.5 / 2010-06-21 ================== * Added Server#use() which contains the Layer normalization logic * Added documentation for several middleware * Added several new examples * Added _less_ middleware * Added _repl_ middleware * Added _vhost_ middleware * Added _flash_ middleware * Added _cookie_ middleware * Added _session_ middleware * Added `utils.htmlEscape()` * Added `utils.base64Decode()` * Added `utils.base64Encode()` * Added `utils.uid()` * Added bin/connect app path and --config path support for .js suffix, although optional. Closes #26 * Moved mime code to `utils.mime`, ex `utils.mime.types`, and `utils.mime.type()` * Renamed req.redirect() to res.redirect(). Closes #29 * Fixed _sass_ 404 on **ENOENT** * Fixed +new Date duplication. Closes #24 0.0.4 / 2010-06-16 ================== * Added workerPidfile() to bin/connect * Added --workers support to bin/connect stop and status commands * Added _redirect_ middleware * Added better --config support to bin/connect. All flags can be utilized * Added auto-detection of _./config.js_ * Added config example * Added `net.Server` support to bin/connect * Writing worker pids relative to `env.pidfile` * s/parseQuery/parse/g * Fixed npm support 0.0.3 / 2010-06-16 ================== * Fixed node dependency in package.json, now _\">= 0.1.98-0\"_ to support __HEAD__ 0.0.2 / 2010-06-15 ================== * Added `-V, --version` to bin/connect * Added `utils.parseCookie()` * Added `utils.serializeCookie()` * Added `utils.toBoolean()` * Added _sass_ middleware * Added _cookie_ middleware * Added _format_ middleware * Added _lint_ middleware * Added _rest_ middleware * Added _./package.json_ (npm install connect) * Added `handleError()` support * Added `process.connectEnv` * Added custom log format support to _log_ middleware * Added arbitrary env variable support to bin/connect (ext: --logFormat \":method :url\") * Added -w, --workers to bin/connect * Added bin/connect support for --user NAME and --group NAME * Fixed url re-writing support 0.0.1 / 2010-06-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/Readme.md","tags":[],"body":"# Connect [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] [![Gratipay][gratipay-image]][gratipay-url] Connect is an extensible HTTP server framework for [node](http://nodejs.org) using \"plugins\" known as _middleware_. ```js var connect = require('connect'); var http = require('http'); var app = connect(); // gzip/deflate outgoing responses var compression = require('compression'); app.use(compression()); // store session state in browser cookie var cookieSession = require('cookie-session'); app.use(cookieSession({ keys: ['secret1', 'secret2'] })); // parse urlencoded request bodies into req.body var bodyParser = require('body-parser'); app.use(bodyParser.urlencoded()); // respond to all requests app.use(function(req, res){ res.end('Hello from Connect!\\n'); }); //create node.js http server and listen on port http.createServer(app).listen(3000); ``` ## Getting Started Connect is a simple framework to glue together various \"middleware\" to handle requests. ### Install Connect ```sh $ npm install connect ``` ### Create an app The main component is a Connect \"app\". This will store all the middleware added and is, itself, a function. ```js var app = connect(); ``` ### Use middleware The core of Connect is \"using\" middleware. Middleware are added as a \"stack\" where incoming requests will execute each middleware one-by-one until a middleware does not call `next()` within it. ```js app.use(function middleware1(req, res, next) { // middleware 1 next(); }); app.use(function middleware2(req, res, next) { // middleware 2 next(); }); ``` ### Mount middleware The `.use()` method also takes an optional path string that is matched against the beginning of the incoming request URL. This allows for basic routing. ```js app.use('/foo', function fooMiddleware(req, res, next) { // req.url starts with \"/foo\" next(); }); app.use('/bar', function barMiddleware(req, res, next) { // req.url starts with \"/bar\" next(); }); ``` ### Error middleware There are special cases of \"error-handling\" middleware. There are middleware where the function takes exactly 4 arguments. Errors that occur in the middleware added before the error middleware will invoke this middleware when errors occur. ```js app.use(function onerror(err, req, res, next) { // an error occurred! }); ``` ### Create a server from the app The last step is to actually use the Connect app in a server. The `.listen()` method is a convenience to start a HTTP server. ```js var server = app.listen(port); ``` The app itself is really just a function with three arguments, so it can also be handed to `.createServer()` in Node.js. ```js var server = http.createServer(app); ``` ## Middleware These middleware and libraries are officially supported by the Connect/Express team: - [body-parser](https://www.npmjs.com/package/body-parser) - previous `bodyParser`, `json`, and `urlencoded`. You may also be interested in: - [body](https://www.npmjs.com/package/body) - [co-body](https://www.npmjs.com/package/co-body) - [raw-body](https://www.npmjs.com/package/raw-body) - [compression](https://www.npmjs.com/package/compression) - previously `compress` - [connect-timeout](https://www.npmjs.com/package/connect-timeout) - previously `timeout` - [cookie-parser](https://www.npmjs.com/package/cookie-parser) - previously `cookieParser` - [cookie-session](https://www.npmjs.com/package/cookie-session) - previously `cookieSession` - [csurf](https://www.npmjs.com/package/csurf) - previously `csrf` - [errorhandler](https://www.npmjs.com/package/errorhandler) - previously `error-handler` - [express-session](https://www.npmjs.com/package/express-session) - previously `session` - [method-override](https://www.npmjs.com/package/method-override) - previously `method-override` - [morgan](https://www.npmjs.com/package/morgan) - previously `logger` - [response-time](https://www.npmjs.com/package/response-time) - previously `response-time` - [serve-favicon](https://www.npmjs.com/package/serve-favicon) - previously `favicon` - [serve-index](https://www.npmjs.com/package/serve-index) - previously `directory` - [serve-static](https://www.npmjs.com/package/serve-static) - previously `static` - [vhost](https://www.npmjs.com/package/vhost) - previously `vhost` Most of these are exact ports of their Connect 2.x equivalents. The primary exception is `cookie-session`. Some middleware previously included with Connect are no longer supported by the Connect/Express team, are replaced by an alternative module, or should be superseded by a better module. Use one of these alternatives instead: - `cookieParser` - [cookies](https://www.npmjs.com/package/cookies) and [keygrip](https://www.npmjs.com/package/keygrip) - `limit` - [raw-body](https://www.npmjs.com/package/raw-body) - `multipart` - [connect-multiparty](https://www.npmjs.com/package/connect-multiparty) - [connect-busboy](https://www.npmjs.com/package/connect-busboy) - `query` - [qs](https://www.npmjs.com/package/qs) - `staticCache` - [st](https://www.npmjs.com/package/st) - [connect-static](https://www.npmjs.com/package/connect-static) Checkout [http-framework](https://github.com/Raynos/http-framework/wiki/Modules) for many other compatible middleware! ## Running Tests ```bash npm install npm test ``` ## Contributors https://github.com/senchalabs/connect/graphs/contributors ## Node Compatibility - Connect `= 2.8 = 3` - node `0.10`, `0.12`; io.js `1.x`, `2.x` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/connect.svg [npm-url]: https://npmjs.org/package/connect [travis-image]: https://img.shields.io/travis/senchalabs/connect/master.svg [travis-url]: https://travis-ci.org/senchalabs/connect [coveralls-image]: https://img.shields.io/coveralls/senchalabs/connect/master.svg [coveralls-url]: https://coveralls.io/r/senchalabs/connect [downloads-image]: https://img.shields.io/npm/dm/connect.svg [downloads-url]: https://npmjs.org/package/connect [gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg [gratipay-url]: https://www.gratipay.com/dougwilson/"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/debug/History.md","tags":[],"body":"2.2.0 / 2015-05-09 ================== * package: update \"ms\" to v0.7.1 (#202, @dougwilson) * README: add logging to file example (#193, @DanielOchoa) * README: fixed a typo (#191, @amir-s) * browser: expose `storage` (#190, @stephenmathieson) * Makefile: add a `distclean` target (#189, @stephenmathieson) 2.1.3 / 2015-03-13 ================== * Updated stdout/stderr example (#186) * Updated example/stdout.js to match debug current behaviour * Renamed example/stderr.js to stdout.js * Update Readme.md (#184) * replace high intensity foreground color for bold (#182, #183) 2.1.2 / 2015-03-01 ================== * dist: recompile * update \"ms\" to v0.7.0 * package: update \"browserify\" to v9.0.3 * component: fix \"ms.js\" repo location * changed bower package name * updated documentation about using debug in a browser * fix: security error on safari (#167, #168, @yields) 2.1.1 / 2014-12-29 ================== * browser: use `typeof` to check for `console` existence * browser: check for `console.log` truthiness (fix IE 8/9) * browser: add support for Chrome apps * Readme: added Windows usage remarks * Add `bower.json` to properly support bower install 2.1.0 / 2014-10-15 ================== * node: implement `DEBUG_FD` env variable support * package: update \"browserify\" to v6.1.0 * package: add \"license\" field to package.json (#135, @panuhorsmalahti) 2.0.0 / 2014-09-01 ================== * package: update \"browserify\" to v5.11.0 * node: use stderr rather than stdout for logging (#29, @stephenmathieson) 1.0.4 / 2014-07-15 ================== * dist: recompile * example: remove `console.info()` log usage * example: add \"Content-Type\" UTF-8 header to browser example * browser: place %c marker after the space character * browser: reset the \"content\" color via `color: inherit` * browser: add colors support for Firefox >= v31 * debug: prefer an instance `log()` function over the global one (#119) * Readme: update documentation about styled console logs for FF v31 (#116, @wryk) 1.0.3 / 2014-07-09 ================== * Add support for multiple wildcards in namespaces (#122, @seegno) * browser: fix lint 1.0.2 / 2014-06-10 ================== * browser: update color palette (#113, @gscottolson) * common: make console logging function configurable (#108, @timoxley) * node: fix %o colors on old node <= 0.8.x * Makefile: find node path using shell/which (#109, @timoxley) 1.0.1 / 2014-06-06 ================== * browser: use `removeItem()` to clear localStorage * browser, node: don't set DEBUG if namespaces is undefined (#107, @leedm777) * package: add \"contributors\" section * node: fix comment typo * README: list authors 1.0.0 / 2014-06-04 ================== * make ms diff be global, not be scope * debug: ignore empty strings in enable() * node: make DEBUG_COLORS able to disable coloring * *: export the `colors` array * npmignore: don't publish the `dist` dir * Makefile: refactor to use browserify * package: add \"browserify\" as a dev dependency * Readme: add Web Inspector Colors section * node: reset terminal color for the debug content * node: map \"%o\" to `util.inspect()` * browser: map \"%j\" to `JSON.stringify()` * debug: add custom \"formatters\" * debug: use \"ms\" module for humanizing the diff * Readme: add \"bash\" syntax highlighting * browser: add Firebug color support * browser: add colors for WebKit browsers * node: apply log to `console` * rewrite: abstract common logic for Node & browsers * add .jshintrc file 0.8.1 / 2014-04-14 ================== * package: re-add the \"component\" section 0.8.0 / 2014-03-30 ================== * add `enable()` method for nodejs. Closes #27 * change from stderr to stdout * remove unnecessary index.js file 0.7.4 / 2013-11-13 ================== * remove \"browserify\" key from package.json (fixes something in browserify) 0.7.3 / 2013-10-30 ================== * fix: catch localStorage security error when cookies are blocked (Chrome) * add debug(err) support. Closes #46 * add .browser prop to package.json. Closes #42 0.7.2 / 2013-02-06 ================== * fix package.json * fix: Mobile Safari (private mode) is broken with debug * fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript 0.7.1 / 2013-02-05 ================== * add repository URL to package.json * add DEBUG_COLORED to force colored output * add browserify support * fix component. Closes #24 0.7.0 / 2012-05-04 ================== * Added .component to package.json * Added debug.component.js build 0.6.0 / 2012-03-16 ================== * Added support for \"-\" prefix in DEBUG [Vinay Pulim] * Added `.enabled` flag to the node version [TooTallNate] 0.5.0 / 2012-02-02 ================== * Added: humanize diffs. Closes #8 * Added `debug.disable()` to the CS variant * Removed padding. Closes #10 * Fixed: persist client-side variant again. Closes #9 0.4.0 / 2012-02-01 ================== * Added browser variant support for older browsers [TooTallNate] * Added `debug.enable('project:*')` to browser variant [TooTallNate] * Added padding to diff (moved it to the right) 0.3.0 / 2012-01-26 ================== * Added millisecond diff when isatty, otherwise UTC string 0.2.0 / 2012-01-22 ================== * Added wildcard support 0.1.0 / 2011-12-02 ================== * Added: remove colors unless stderr isatty [TooTallNate] 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/debug/Readme.md","tags":[],"body":"# debug tiny node.js debugging utility modelled after node core's debugging technique. ## Installation ```bash $ npm install debug ``` ## Usage With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you're used to work fine. A unique color is selected per-function for visibility. Example _app.js_: ```js var debug = require('debug')('http') , http = require('http') , name = 'My App'; // fake app debug('booting %s', name); http.createServer(function(req, res){ debug(req.method + ' ' + req.url); res.end('hello\\n'); }).listen(3000, function(){ debug('listening'); }); // fake worker of some kind require('./worker'); ``` Example _worker.js_: ```js var debug = require('debug')('worker'); setInterval(function(){ debug('doing some work'); }, 1000); ``` The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png) ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png) #### Windows note On Windows the environment variable is set using the `set` command. ```cmd set DEBUG=*,-not_this ``` Then, run the program to be debugged as usual. ## Millisecond diff When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls. ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png) When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below: ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png) ## Conventions If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\". ## Wildcards The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`. You can also exclude specific debuggers by prefixing them with a \"-\" character. For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\". ## Browser support Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include: ```js window.myDebug = require(\"debug\"); ``` (\"debug\" is a global object in the browser so we give this object a different name.) When your page is open in the browser, type the following in the console: ```js myDebug.enable(\"worker:*\") ``` Refresh the page. Debug output will continue to be sent to the console until it is disabled by typing `myDebug.disable()` in the console. ```js a = debug('worker:a'); b = debug('worker:b'); setInterval(function(){ a('doing some work'); }, 1000); setInterval(function(){ b('doing some work'); }, 1200); ``` #### Web Inspector Colors Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting option. These are WebKit web inspectors, Firefox ([since version 31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/)) and the Firebug plugin for Firefox (any version). Colored output looks something like: ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png) ### stderr vs stdout You can set an alternative logging method per-namespace by overriding the `log` method on a per-namespace or globally: Example _stdout.js_: ```js var debug = require('debug'); var error = debug('app:error'); // by default stderr is used error('goes to stderr!'); var log = debug('app:log'); // set this namespace to log via console.log log.log = console.log.bind(console); // don't forget to bind to console! log('goes to stdout'); error('still goes to stderr!'); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error('now goes to stdout via console.info'); log('still goes to stdout, but via console.info now'); ``` ### Save debug output to a file You can save all debug statements to a file by piping them. Example: ```bash $ DEBUG_FD=3 node your-app.js 3> whatever.log ``` ## Authors - TJ Holowaychuk - Nathan Rajlich ## License (The MIT License) Copyright (c) 2014 TJ Holowaychuk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/debug/node_modules/ms/History.md","tags":[],"body":"0.7.1 / 2015-04-20 ================== * prevent extraordinary long inputs (@evilpacket) * Fixed broken readme link 0.7.0 / 2014-11-24 ================== * add time abbreviations, updated tests and readme for the new units * fix example in the readme. * add LICENSE file 0.6.2 / 2013-12-05 ================== * Adding repository section to package.json to suppress warning from NPM. 0.6.1 / 2013-05-10 ================== * fix singularization [visionmedia] 0.6.0 / 2013-03-15 ================== * fix minutes 0.5.1 / 2013-02-24 ================== * add component namespace 0.5.0 / 2012-11-09 ================== * add short formatting as default and .long option * add .license property to component.json * add version to component.json 0.4.0 / 2012-10-22 ================== * add rounding to fix crazy decimals 0.3.0 / 2012-09-07 ================== * fix `ms()` [visionmedia] 0.2.0 / 2012-09-03 ================== * add component.json [visionmedia] * add days support [visionmedia] * add hours support [visionmedia] * add minutes support [visionmedia] * add seconds support [visionmedia] * add ms string support [visionmedia] * refactor tests to facilitate ms(number) [visionmedia] 0.1.0 / 2012-03-07 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/debug/node_modules/ms/README.md","tags":[],"body":"# ms.js: miliseconds conversion utility ```js ms('2 days') // 172800000 ms('1d') // 86400000 ms('10h') // 36000000 ms('2.5 hrs') // 9000000 ms('2h') // 7200000 ms('1m') // 60000 ms('5s') // 5000 ms('100') // 100 ``` ```js ms(60000) // \"1m\" ms(2 * 60000) // \"2m\" ms(ms('10 hours')) // \"10h\" ``` ```js ms(60000, { long: true }) // \"1 minute\" ms(2 * 60000, { long: true }) // \"2 minutes\" ms(ms('10 hours'), { long: true }) // \"10 hours\" ``` - Node/Browser compatible. Published as [`ms`](https://www.npmjs.org/package/ms) in [NPM](http://nodejs.org/download). - If a number is supplied to `ms`, a string with a unit is returned. - If a string that contains the number is supplied, it returns it as a number (e.g: it returns `100` for `'100'`). - If you pass a string with a number and a valid unit, the number of equivalent ms is returned. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/finalhandler/HISTORY.md","tags":[],"body":"0.4.1 / 2015-12-02 ================== * deps: escape-html@~1.0.3 - perf: enable strict mode - perf: optimize string replacement - perf: use faster string coercion 0.4.0 / 2015-06-14 ================== * Fix a false-positive when unpiping in Node.js 0.8 * Support `statusCode` property on `Error` objects * Use `unpipe` module for unpiping requests * deps: escape-html@1.0.2 * deps: on-finished@~2.3.0 - Add defined behavior for HTTP `CONNECT` requests - Add defined behavior for HTTP `Upgrade` requests - deps: ee-first@1.1.1 * perf: enable strict mode * perf: remove argument reassignment 0.3.6 / 2015-05-11 ================== * deps: debug@~2.2.0 - deps: ms@0.7.1 0.3.5 / 2015-04-22 ================== * deps: on-finished@~2.2.1 - Fix `isFinished(req)` when data buffered 0.3.4 / 2015-03-15 ================== * deps: debug@~2.1.3 - Fix high intensity foreground color for bold - deps: ms@0.7.0 0.3.3 / 2015-01-01 ================== * deps: debug@~2.1.1 * deps: on-finished@~2.2.0 0.3.2 / 2014-10-22 ================== * deps: on-finished@~2.1.1 - Fix handling of pipelined requests 0.3.1 / 2014-10-16 ================== * deps: debug@~2.1.0 - Implement `DEBUG_FD` env variable support 0.3.0 / 2014-09-17 ================== * Terminate in progress response only on error * Use `on-finished` to determine request status 0.2.0 / 2014-09-03 ================== * Set `X-Content-Type-Options: nosniff` header * deps: debug@~2.0.0 0.1.0 / 2014-07-16 ================== * Respond after request fully read - prevents hung responses and socket hang ups * deps: debug@1.0.4 0.0.3 / 2014-07-11 ================== * deps: debug@1.0.3 - Add support for multiple wildcards in namespaces 0.0.2 / 2014-06-19 ================== * Handle invalid status codes 0.0.1 / 2014-06-05 ================== * deps: debug@1.0.2 0.0.0 / 2014-06-05 ================== * Extracted from connect/express"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/finalhandler/README.md","tags":[],"body":"# finalhandler [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-image]][node-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Node.js function to invoke as the final step to respond to HTTP request. ## Installation ```sh $ npm install finalhandler ``` ## API ```js var finalhandler = require('finalhandler') ``` ### finalhandler(req, res, [options]) Returns function to be invoked as the final step for the given `req` and `res`. This function is to be invoked as `fn(err)`. If `err` is falsy, the handler will write out a 404 response to the `res`. If it is truthy, an error response will be written out to the `res`, and `res.statusCode` is set from `err.status`. The final handler will also unpipe anything from `req` when it is invoked. #### options.env By default, the environment is determined by `NODE_ENV` variable, but it can be overridden by this option. #### options.onerror Provide a function to be called with the `err` when it exists. Can be used for writing errors to a central location without excessive function generation. Called as `onerror(err, req, res)`. ## Examples ### always 404 ```js var finalhandler = require('finalhandler') var http = require('http') var server = http.createServer(function (req, res) { var done = finalhandler(req, res) done() }) server.listen(3000) ``` ### perform simple action ```js var finalhandler = require('finalhandler') var fs = require('fs') var http = require('http') var server = http.createServer(function (req, res) { var done = finalhandler(req, res) fs.readFile('index.html', function (err, buf) { if (err) return done(err) res.setHeader('Content-Type', 'text/html') res.end(buf) }) }) server.listen(3000) ``` ### use with middleware-style functions ```js var finalhandler = require('finalhandler') var http = require('http') var serveStatic = require('serve-static') var serve = serveStatic('public') var server = http.createServer(function (req, res) { var done = finalhandler(req, res) serve(req, res, done) }) server.listen(3000) ``` ### keep log of all errors ```js var finalhandler = require('finalhandler') var fs = require('fs') var http = require('http') var server = http.createServer(function (req, res) { var done = finalhandler(req, res, {onerror: logerror}) fs.readFile('index.html', function (err, buf) { if (err) return done(err) res.setHeader('Content-Type', 'text/html') res.end(buf) }) }) server.listen(3000) function logerror(err) { console.error(err.stack || err.toString()) } ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/finalhandler.svg [npm-url]: https://npmjs.org/package/finalhandler [node-image]: https://img.shields.io/node/v/finalhandler.svg [node-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/pillarjs/finalhandler.svg [travis-url]: https://travis-ci.org/pillarjs/finalhandler [coveralls-image]: https://img.shields.io/coveralls/pillarjs/finalhandler.svg [coveralls-url]: https://coveralls.io/r/pillarjs/finalhandler?branch=master [downloads-image]: https://img.shields.io/npm/dm/finalhandler.svg [downloads-url]: https://npmjs.org/package/finalhandler"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/finalhandler/node_modules/escape-html/Readme.md","tags":[],"body":"# escape-html Escape string for use in HTML ## Example ```js var escape = require('escape-html'); var html = escape('foo & bar'); // -> foo & bar ``` ## Benchmark ``` $ npm run-script bench > escape-html@1.0.3 bench nodejs-escape-html > node benchmark/index.js http_parser@1.0 node@0.10.33 v8@3.14.5.9 ares@1.9.0-DEV uv@0.10.29 zlib@1.2.3 modules@11 openssl@1.0.1j 1 test completed. 2 tests completed. 3 tests completed. no special characters x 19,435,271 ops/sec ±0.85% (187 runs sampled) single special character x 6,132,421 ops/sec ±0.67% (194 runs sampled) many special characters x 3,175,826 ops/sec ±0.65% (193 runs sampled) ``` ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/finalhandler/node_modules/on-finished/HISTORY.md","tags":[],"body":"2.3.0 / 2015-05-26 ================== * Add defined behavior for HTTP `CONNECT` requests * Add defined behavior for HTTP `Upgrade` requests * deps: ee-first@1.1.1 2.2.1 / 2015-04-22 ================== * Fix `isFinished(req)` when data buffered 2.2.0 / 2014-12-22 ================== * Add message object to callback arguments 2.1.1 / 2014-10-22 ================== * Fix handling of pipelined requests 2.1.0 / 2014-08-16 ================== * Check if `socket` is detached * Return `undefined` for `isFinished` if state unknown 2.0.0 / 2014-08-16 ================== * Add `isFinished` function * Move to `jshttp` organization * Remove support for plain socket argument * Rename to `on-finished` * Support both `req` and `res` as arguments * deps: ee-first@1.0.5 1.2.2 / 2014-06-10 ================== * Reduce listeners added to emitters - avoids \"event emitter leak\" warnings when used multiple times on same request 1.2.1 / 2014-06-08 ================== * Fix returned value when already finished 1.2.0 / 2014-06-05 ================== * Call callback when called on already-finished socket 1.1.4 / 2014-05-27 ================== * Support node.js 0.8 1.1.3 / 2014-04-30 ================== * Make sure errors passed as instanceof `Error` 1.1.2 / 2014-04-18 ================== * Default the `socket` to passed-in object 1.1.1 / 2014-01-16 ================== * Rename module to `finished` 1.1.0 / 2013-12-25 ================== * Call callback when called on already-errored socket 1.0.1 / 2013-12-20 ================== * Actually pass the error to the callback 1.0.0 / 2013-12-20 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/finalhandler/node_modules/on-finished/README.md","tags":[],"body":"# on-finished [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Execute a callback when a HTTP request closes, finishes, or errors. ## Install ```sh $ npm install on-finished ``` ## API ```js var onFinished = require('on-finished') ``` ### onFinished(res, listener) Attach a listener to listen for the response to finish. The listener will be invoked only once when the response finished. If the response finished to an error, the first argument will contain the error. If the response has already finished, the listener will be invoked. Listening to the end of a response would be used to close things associated with the response, like open files. Listener is invoked as `listener(err, res)`. ```js onFinished(res, function (err, res) { // clean up open fds, etc. // err contains the error is request error'd }) ``` ### onFinished(req, listener) Attach a listener to listen for the request to finish. The listener will be invoked only once when the request finished. If the request finished to an error, the first argument will contain the error. If the request has already finished, the listener will be invoked. Listening to the end of a request would be used to know when to continue after reading the data. Listener is invoked as `listener(err, req)`. ```js var data = '' req.setEncoding('utf8') res.on('data', function (str) { data += str }) onFinished(req, function (err, req) { // data is read unless there is err }) ``` ### onFinished.isFinished(res) Determine if `res` is already finished. This would be useful to check and not even start certain operations if the response has already finished. ### onFinished.isFinished(req) Determine if `req` is already finished. This would be useful to check and not even start certain operations if the request has already finished. ## Special Node.js requests ### HTTP CONNECT method The meaning of the `CONNECT` method from RFC 7231, section 4.3.6: > The CONNECT method requests that the recipient establish a tunnel to > the destination origin server identified by the request-target and, > if successful, thereafter restrict its behavior to blind forwarding > of packets, in both directions, until the tunnel is closed. Tunnels > are commonly used to create an end-to-end virtual connection, through > one or more proxies, which can then be secured using TLS (Transport > Layer Security, [RFC5246]). In Node.js, these request objects come from the `'connect'` event on the HTTP server. When this module is used on a HTTP `CONNECT` request, the request is considered \"finished\" immediately, **due to limitations in the Node.js interface**. This means if the `CONNECT` request contains a request entity, the request will be considered \"finished\" even before it has been read. There is no such thing as a response object to a `CONNECT` request in Node.js, so there is no support for for one. ### HTTP Upgrade request The meaning of the `Upgrade` header from RFC 7230, section 6.1: > The \"Upgrade\" header field is intended to provide a simple mechanism > for transitioning from HTTP/1.1 to some other protocol on the same > connection. In Node.js, these request objects come from the `'upgrade'` event on the HTTP server. When this module is used on a HTTP request with an `Upgrade` header, the request is considered \"finished\" immediately, **due to limitations in the Node.js interface**. This means if the `Upgrade` request contains a request entity, the request will be considered \"finished\" even before it has been read. There is no such thing as a response object to a `Upgrade` request in Node.js, so there is no support for for one. ## Example The following code ensures that file descriptors are always closed once the response finishes. ```js var destroy = require('destroy') var http = require('http') var onFinished = require('on-finished') http.createServer(function onRequest(req, res) { var stream = fs.createReadStream('package.json') stream.pipe(res) onFinished(res, function (err) { destroy(stream) }) }) ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/on-finished.svg [npm-url]: https://npmjs.org/package/on-finished [node-version-image]: https://img.shields.io/node/v/on-finished.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/on-finished/master.svg [travis-url]: https://travis-ci.org/jshttp/on-finished [coveralls-image]: https://img.shields.io/coveralls/jshttp/on-finished/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/on-finished?branch=master [downloads-image]: https://img.shields.io/npm/dm/on-finished.svg [downloads-url]: https://npmjs.org/package/on-finished"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/finalhandler/node_modules/on-finished/node_modules/ee-first/README.md","tags":[],"body":"# EE First [![NPM version][npm-image]][npm-url] [![Build status][travis-image]][travis-url] [![Test coverage][coveralls-image]][coveralls-url] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url] [![Gittip][gittip-image]][gittip-url] Get the first event in a set of event emitters and event pairs, then clean up after itself. ## Install ```sh $ npm install ee-first ``` ## API ```js var first = require('ee-first') ``` ### first(arr, listener) Invoke `listener` on the first event from the list specified in `arr`. `arr` is an array of arrays, with each array in the format `[ee, ...event]`. `listener` will be called only once, the first time any of the given events are emitted. If `error` is one of the listened events, then if that fires first, the `listener` will be given the `err` argument. The `listener` is invoked as `listener(err, ee, event, args)`, where `err` is the first argument emitted from an `error` event, if applicable; `ee` is the event emitter that fired; `event` is the string event name that fired; and `args` is an array of the arguments that were emitted on the event. ```js var ee1 = new EventEmitter() var ee2 = new EventEmitter() first([ [ee1, 'close', 'end', 'error'], [ee2, 'error'] ], function (err, ee, event, args) { // listener invoked }) ``` #### .cancel() The group of listeners can be cancelled before being invoked and have all the event listeners removed from the underlying event emitters. ```js var thunk = first([ [ee1, 'close', 'end', 'error'], [ee2, 'error'] ], function (err, ee, event, args) { // listener invoked }) // cancel and clean up thunk.cancel() ``` [npm-image]: https://img.shields.io/npm/v/ee-first.svg?style=flat-square [npm-url]: https://npmjs.org/package/ee-first [github-tag]: http://img.shields.io/github/tag/jonathanong/ee-first.svg?style=flat-square [github-url]: https://github.com/jonathanong/ee-first/tags [travis-image]: https://img.shields.io/travis/jonathanong/ee-first.svg?style=flat-square [travis-url]: https://travis-ci.org/jonathanong/ee-first [coveralls-image]: https://img.shields.io/coveralls/jonathanong/ee-first.svg?style=flat-square [coveralls-url]: https://coveralls.io/r/jonathanong/ee-first?branch=master [license-image]: http://img.shields.io/npm/l/ee-first.svg?style=flat-square [license-url]: LICENSE.md [downloads-image]: http://img.shields.io/npm/dm/ee-first.svg?style=flat-square [downloads-url]: https://npmjs.org/package/ee-first [gittip-image]: https://img.shields.io/gittip/jonathanong.svg?style=flat-square [gittip-url]: https://www.gittip.com/jonathanong/"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/finalhandler/node_modules/unpipe/HISTORY.md","tags":[],"body":"1.0.0 / 2015-06-14 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/finalhandler/node_modules/unpipe/README.md","tags":[],"body":"# unpipe [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-image]][node-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Unpipe a stream from all destinations. ## Installation ```sh $ npm install unpipe ``` ## API ```js var unpipe = require('unpipe') ``` ### unpipe(stream) Unpipes all destinations from a given stream. With stream 2+, this is equivalent to `stream.unpipe()`. When used with streams 1 style streams (typically Node.js 0.8 and below), this module attempts to undo the actions done in `stream.pipe(dest)`. ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/unpipe.svg [npm-url]: https://npmjs.org/package/unpipe [node-image]: https://img.shields.io/node/v/unpipe.svg [node-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/stream-utils/unpipe.svg [travis-url]: https://travis-ci.org/stream-utils/unpipe [coveralls-image]: https://img.shields.io/coveralls/stream-utils/unpipe.svg [coveralls-url]: https://coveralls.io/r/stream-utils/unpipe?branch=master [downloads-image]: https://img.shields.io/npm/dm/unpipe.svg [downloads-url]: https://npmjs.org/package/unpipe"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/parseurl/HISTORY.md","tags":[],"body":"1.3.1 / 2016-01-17 ================== * perf: enable strict mode 1.3.0 / 2014-08-09 ================== * Add `parseurl.original` for parsing `req.originalUrl` with fallback * Return `undefined` if `req.url` is `undefined` 1.2.0 / 2014-07-21 ================== * Cache URLs based on original value * Remove no-longer-needed URL mis-parse work-around * Simplify the \"fast-path\" `RegExp` 1.1.3 / 2014-07-08 ================== * Fix typo 1.1.2 / 2014-07-08 ================== * Seriously fix Node.js 0.8 compatibility 1.1.1 / 2014-07-08 ================== * Fix Node.js 0.8 compatibility 1.1.0 / 2014-07-08 ================== * Incorporate URL href-only parse fast-path 1.0.1 / 2014-03-08 ================== * Add missing `require` 1.0.0 / 2014-03-08 ================== * Genesis from `connect`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/parseurl/README.md","tags":[],"body":"# parseurl [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Parse a URL with memoization. ## Install ```bash $ npm install parseurl ``` ## API ```js var parseurl = require('parseurl') ``` ### parseurl(req) Parse the URL of the given request object (looks at the `req.url` property) and return the result. The result is the same as `url.parse` in Node.js core. Calling this function multiple times on the same `req` where `req.url` does not change will return a cached parsed object, rather than parsing again. ### parseurl.original(req) Parse the original URL of the given request object and return the result. This works by trying to parse `req.originalUrl` if it is a string, otherwise parses `req.url`. The result is the same as `url.parse` in Node.js core. Calling this function multiple times on the same `req` where `req.originalUrl` does not change will return a cached parsed object, rather than parsing again. ## Benchmark ```bash $ npm run-script bench > parseurl@1.3.1 bench nodejs-parseurl > node benchmark/index.js > node benchmark/fullurl.js Parsing URL \"http://localhost:8888/foo/bar?user=tj&pet=fluffy\" 1 test completed. 2 tests completed. 3 tests completed. fasturl x 1,290,780 ops/sec ±0.46% (195 runs sampled) nativeurl x 56,401 ops/sec ±0.22% (196 runs sampled) parseurl x 55,231 ops/sec ±0.22% (194 runs sampled) > node benchmark/pathquery.js Parsing URL \"/foo/bar?user=tj&pet=fluffy\" 1 test completed. 2 tests completed. 3 tests completed. fasturl x 1,986,668 ops/sec ±0.27% (190 runs sampled) nativeurl x 98,740 ops/sec ±0.21% (195 runs sampled) parseurl x 2,628,171 ops/sec ±0.36% (195 runs sampled) > node benchmark/samerequest.js Parsing URL \"/foo/bar?user=tj&pet=fluffy\" on same request object 1 test completed. 2 tests completed. 3 tests completed. fasturl x 2,184,468 ops/sec ±0.40% (194 runs sampled) nativeurl x 99,437 ops/sec ±0.71% (194 runs sampled) parseurl x 10,498,005 ops/sec ±0.61% (186 runs sampled) > node benchmark/simplepath.js Parsing URL \"/foo/bar\" 1 test completed. 2 tests completed. 3 tests completed. fasturl x 4,535,825 ops/sec ±0.27% (191 runs sampled) nativeurl x 98,769 ops/sec ±0.54% (191 runs sampled) parseurl x 4,164,865 ops/sec ±0.34% (192 runs sampled) > node benchmark/slash.js Parsing URL \"/\" 1 test completed. 2 tests completed. 3 tests completed. fasturl x 4,908,405 ops/sec ±0.42% (191 runs sampled) nativeurl x 100,945 ops/sec ±0.59% (188 runs sampled) parseurl x 4,333,208 ops/sec ±0.27% (194 runs sampled) ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/parseurl.svg [npm-url]: https://npmjs.org/package/parseurl [node-version-image]: https://img.shields.io/node/v/parseurl.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/pillarjs/parseurl/master.svg [travis-url]: https://travis-ci.org/pillarjs/parseurl [coveralls-image]: https://img.shields.io/coveralls/pillarjs/parseurl/master.svg [coveralls-url]: https://coveralls.io/r/pillarjs/parseurl?branch=master [downloads-image]: https://img.shields.io/npm/dm/parseurl.svg [downloads-url]: https://npmjs.org/package/parseurl"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/connect/node_modules/utils-merge/README.md","tags":[],"body":"# utils-merge Merges the properties from a source object into a destination object. ## Install $ npm install utils-merge ## Usage ```javascript var a = { foo: 'bar' } , b = { bar: 'baz' }; merge(a, b); // => { foo: 'bar', bar: 'baz' } ``` ## Tests $ npm install $ npm test [![Build Status](https://secure.travis-ci.org/jaredhanson/utils-merge.png)](http://travis-ci.org/jaredhanson/utils-merge) ## Credits - [Jared Hanson](http://github.com/jaredhanson) ## License [The MIT License](http://opensource.org/licenses/MIT) Copyright (c) 2013 Jared Hanson"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/dev-ip/README.md","tags":[],"body":"# dev-ip [![Build Status](https://travis-ci.org/shakyShane/dev-ip.png?branch=master)](https://travis-ci.org/shakyShane/dev-ip) Find a suitable IP host to view local websites on. ## Command line Install it globally to use on the command line: `sudo npm install -g dev-ip` then run: `dev-ip` > \"http://192.168.1.46\" ## In your project `npm install dev-ip` ```javascript var devip = require('dev-ip'); devip(); // \"192.168.1.76\" or false if nothing found (ie, offline user) ``` ## Contributing In lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Run lint & tests with `gulp`. ## Release History _(Nothing yet)_ ## License Copyright (c) 2013 Shane Osbourne Licensed under the MIT license."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/easy-extender/README.md","tags":[],"body":"##easy-extender [![Build Status](https://travis-ci.org/shakyShane/easy-extender.svg?branch=master)](https://travis-ci.org/shakyShane/easy-extender) [![Coverage Status](https://img.shields.io/coveralls/shakyShane/easy-extender.svg)](https://coveralls.io/r/shakyShane/easy-extender?branch=master) Plugin + hooks system extracted from [BrowserSync](https://github.com/shakyShane/browser-sync) for general use."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/easy-extender/node_modules/lodash/README.md","tags":[],"body":"# lodash v3.10.1 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash](https://lodash.com/) exported as [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) modules. Generated using [lodash-cli](https://www.npmjs.com/package/lodash-cli): ```bash $ lodash modularize modern exports=node -o ./ $ lodash modern -d -o ./index.js ``` ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash ``` In Node.js/io.js: ```js // load the modern build var _ = require('lodash'); // or a method category var array = require('lodash/array'); // or a method (great for smaller builds with browserify/webpack) var chunk = require('lodash/array/chunk'); ``` See the [package source](https://github.com/lodash/lodash/tree/3.10.1-npm) for more details. **Note:** Don’t assign values to the [special variable](http://nodejs.org/api/repl.html#repl_repl_features) `_` when in the REPL. Install [n_](https://www.npmjs.com/package/n_) for a REPL that includes lodash by default. ## Module formats lodash is also available in a variety of other builds & module formats. * npm packages for [modern](https://www.npmjs.com/package/lodash), [compatibility](https://www.npmjs.com/package/lodash-compat), & [per method](https://www.npmjs.com/browse/keyword/lodash-modularized) builds * AMD modules for [modern](https://github.com/lodash/lodash/tree/3.10.1-amd) & [compatibility](https://github.com/lodash/lodash-compat/tree/3.10.1-amd) builds * ES modules for the [modern](https://github.com/lodash/lodash/tree/3.10.1-es) build ## Further Reading * [API Documentation](https://lodash.com/docs) * [Build Differences](https://github.com/lodash/lodash/wiki/Build-Differences) * [Changelog](https://github.com/lodash/lodash/wiki/Changelog) * [Roadmap](https://github.com/lodash/lodash/wiki/Roadmap) * [More Resources](https://github.com/lodash/lodash/wiki/Resources) ## Features * ~100% [code coverage](https://coveralls.io/r/lodash) * Follows [semantic versioning](http://semver.org/) for releases * [Lazily evaluated](http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/) chaining * [_(…)](https://lodash.com/docs#_) supports implicit chaining * [_.ary](https://lodash.com/docs#ary) & [_.rearg](https://lodash.com/docs#rearg) to change function argument limits & order * [_.at](https://lodash.com/docs#at) for cherry-picking collection values * [_.attempt](https://lodash.com/docs#attempt) to execute functions which may error without a try-catch * [_.before](https://lodash.com/docs#before) to complement [_.after](https://lodash.com/docs#after) * [_.bindKey](https://lodash.com/docs#bindKey) for binding [*“lazy”*](http://michaux.ca/articles/lazy-function-definition-pattern) defined methods * [_.chunk](https://lodash.com/docs#chunk) for splitting an array into chunks of a given size * [_.clone](https://lodash.com/docs#clone) supports shallow cloning of `Date` & `RegExp` objects * [_.cloneDeep](https://lodash.com/docs#cloneDeep) for deep cloning arrays & objects * [_.curry](https://lodash.com/docs#curry) & [_.curryRight](https://lodash.com/docs#curryRight) for creating [curried](http://hughfdjackson.com/javascript/why-curry-helps/) functions * [_.debounce](https://lodash.com/docs#debounce) & [_.throttle](https://lodash.com/docs#throttle) are cancelable & accept options for more control * [_.defaultsDeep](https://lodash.com/docs#defaultsDeep) for recursively assigning default properties * [_.fill](https://lodash.com/docs#fill) to fill arrays with values * [_.findKey](https://lodash.com/docs#findKey) for finding keys * [_.flow](https://lodash.com/docs#flow) to complement [_.flowRight](https://lodash.com/docs#flowRight) (a.k.a `_.compose`) * [_.forEach](https://lodash.com/docs#forEach) supports exiting early * [_.forIn](https://lodash.com/docs#forIn) for iterating all enumerable properties * [_.forOwn](https://lodash.com/docs#forOwn) for iterating own properties * [_.get](https://lodash.com/docs#get) & [_.set](https://lodash.com/docs#set) for deep property getting & setting * [_.gt](https://lodash.com/docs#gt), [_.gte](https://lodash.com/docs#gte), [_.lt](https://lodash.com/docs#lt), & [_.lte](https://lodash.com/docs#lte) relational methods * [_.inRange](https://lodash.com/docs#inRange) for checking whether a number is within a given range * [_.isNative](https://lodash.com/docs#isNative) to check for native functions * [_.isPlainObject](https://lodash.com/docs#isPlainObject) & [_.toPlainObject](https://lodash.com/docs#toPlainObject) to check for & convert to `Object` objects * [_.isTypedArray](https://lodash.com/docs#isTypedArray) to check for typed arrays * [_.mapKeys](https://lodash.com/docs#mapKeys) for mapping keys to an object * [_.matches](https://lodash.com/docs#matches) supports deep object comparisons * [_.matchesProperty](https://lodash.com/docs#matchesProperty) to complement [_.matches](https://lodash.com/docs#matches) & [_.property](https://lodash.com/docs#property) * [_.merge](https://lodash.com/docs#merge) for a deep [_.extend](https://lodash.com/docs#extend) * [_.method](https://lodash.com/docs#method) & [_.methodOf](https://lodash.com/docs#methodOf) to create functions that invoke methods * [_.modArgs](https://lodash.com/docs#modArgs) for more advanced functional composition * [_.parseInt](https://lodash.com/docs#parseInt) for consistent cross-environment behavior * [_.pull](https://lodash.com/docs#pull), [_.pullAt](https://lodash.com/docs#pullAt), & [_.remove](https://lodash.com/docs#remove) for mutating arrays * [_.random](https://lodash.com/docs#random) supports returning floating-point numbers * [_.restParam](https://lodash.com/docs#restParam) & [_.spread](https://lodash.com/docs#spread) for applying rest parameters & spreading arguments to functions * [_.runInContext](https://lodash.com/docs#runInContext) for collisionless mixins & easier mocking * [_.slice](https://lodash.com/docs#slice) for creating subsets of array-like values * [_.sortByAll](https://lodash.com/docs#sortByAll) & [_.sortByOrder](https://lodash.com/docs#sortByOrder) for sorting by multiple properties & orders * [_.support](https://lodash.com/docs#support) for flagging environment features * [_.template](https://lodash.com/docs#template) supports [*“imports”*](https://lodash.com/docs#templateSettings-imports) options & [ES template delimiters](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components) * [_.transform](https://lodash.com/docs#transform) as a powerful alternative to [_.reduce](https://lodash.com/docs#reduce) for transforming objects * [_.unzipWith](https://lodash.com/docs#unzipWith) & [_.zipWith](https://lodash.com/docs#zipWith) to specify how grouped values should be combined * [_.valuesIn](https://lodash.com/docs#valuesIn) for getting values of all enumerable properties * [_.xor](https://lodash.com/docs#xor) to complement [_.difference](https://lodash.com/docs#difference), [_.intersection](https://lodash.com/docs#intersection), & [_.union](https://lodash.com/docs#union) * [_.add](https://lodash.com/docs#add), [_.round](https://lodash.com/docs#round), [_.sum](https://lodash.com/docs#sum), & [more](https://lodash.com/docs \"_.ceil & _.floor\") math methods * [_.bind](https://lodash.com/docs#bind), [_.curry](https://lodash.com/docs#curry), [_.partial](https://lodash.com/docs#partial), & [more](https://lodash.com/docs \"_.bindKey, _.curryRight, _.partialRight\") support customizable argument placeholders * [_.capitalize](https://lodash.com/docs#capitalize), [_.trim](https://lodash.com/docs#trim), & [more](https://lodash.com/docs \"_.camelCase, _.deburr, _.endsWith, _.escapeRegExp, _.kebabCase, _.pad, _.padLeft, _.padRight, _.repeat, _.snakeCase, _.startCase, _.startsWith, _.trimLeft, _.trimRight, _.trunc, _.words\") string methods * [_.clone](https://lodash.com/docs#clone), [_.isEqual](https://lodash.com/docs#isEqual), & [more](https://lodash.com/docs \"_.assign, _.cloneDeep, _.merge\") accept customizer callbacks * [_.dropWhile](https://lodash.com/docs#dropWhile), [_.takeWhile](https://lodash.com/docs#takeWhile), & [more](https://lodash.com/docs \"_.drop, _.dropRight, _.dropRightWhile, _.take, _.takeRight, _.takeRightWhile\") to complement [_.first](https://lodash.com/docs#first), [_.initial](https://lodash.com/docs#initial), [_.last](https://lodash.com/docs#last), & [_.rest](https://lodash.com/docs#rest) * [_.findLast](https://lodash.com/docs#findLast), [_.findLastKey](https://lodash.com/docs#findLastKey), & [more](https://lodash.com/docs \"_.curryRight, _.dropRight, _.dropRightWhile, _.flowRight, _.forEachRight, _.forInRight, _.forOwnRight, _.padRight, partialRight, _.takeRight, _.trimRight, _.takeRightWhile\") right-associative methods * [_.includes](https://lodash.com/docs#includes), [_.toArray](https://lodash.com/docs#toArray), & [more](https://lodash.com/docs \"_.at, _.countBy, _.every, _.filter, _.find, _.findLast, _.findWhere, _.forEach, _.forEachRight, _.groupBy, _.indexBy, _.invoke, _.map, _.max, _.min, _.partition, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.size, _.some, _.sortBy, _.sortByAll, _.sortByOrder, _.sum, _.where\") accept strings * [_#commit](https://lodash.com/docs#prototype-commit) & [_#plant](https://lodash.com/docs#prototype-plant) for working with chain sequences * [_#thru](https://lodash.com/docs#thru) to pass values thru a chain sequence ## Support Tested in Chrome 43-44, Firefox 38-39, IE 6-11, MS Edge, Safari 5-8, ChakraNode 0.12.2, io.js 2.5.0, Node.js 0.8.28, 0.10.40, & 0.12.7, PhantomJS 1.9.8, RingoJS 0.11, & Rhino 1.7.6. Automated [browser](https://saucelabs.com/u/lodash) & [CI](https://travis-ci.org/lodash/lodash/) test runs are available. Special thanks to [Sauce Labs](https://saucelabs.com/) for providing automated browser testing."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/eazy-logger/README.md","tags":[],"body":"##eazy-logger [![Build Status](https://travis-ci.org/shakyShane/easy-logger.svg?branch=master)](https://travis-ci.org/shakyShane/easy-logger) [![Coverage Status](https://img.shields.io/coveralls/shakyShane/easy-logger.svg)](https://coveralls.io/r/shakyShane/easy-logger?branch=master) [tFunk](https://github.com/shakyShane/tfunk) + [String Substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data) ![preview](http://cl.ly/image/3K2E2d111l15/Screen%20Shot%202014-09-17%20at%2020.49.17.png) ##Install ``` $ npm install eazy-logger --save ``` ##Usage ```js var logger = require(\"eazy-logger\").Logger({ prefix: \"{blue:[}{magenta:easy-logger}{blue:] }\", useLevelPrefixes: true }); ``` ```js /** * Standard loggers + prefixes */ logger.debug(\"Debugging Msg\"); logger.info(\"Info statement\"); logger.warn(\"A little warning with string %s\", \"substitution\"); logger.error(\"an error occurred in file: {red:%s}\", \"/users/awesomedev/file.js\"); ``` ```js /** * Use string substitution + colours */ logger.log(\"error\", \"Use {green:built-in} %s\", \"String substitution\"); ``` ```js /** * Set an option for the next log statement only */ logger.setOnce(\"useLevelPrefixes\", true).warn(\"Use {green:built-in} %s\", \"String substitution\"); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/eazy-logger/node_modules/tfunk/README.md","tags":[],"body":"##tfunk [![Build Status](https://travis-ci.org/shakyShane/tfunk.svg)](https://travis-ci.org/shakyShane/tfunk) Multi-colour console output from [Chalk](https://github.com/sindresorhus/chalk#styles) with added awesome. by [@shakyshane](https://github.com/shakyShane) & [@AydinHassan](https://github.com/AydinHassan) ![tfunk](http://f.cl.ly/items/15102k441h1U1Z1l253J/Screen%20Shot%202014-09-10%20at%2022.05.15.png) ##Install ```bash npm install tfunk ``` ##Usage **Syntax rules:** `{` `` `:` `YOUR STRING` `}` **Example** `{blue:This is a blue line}` **`}` is optional** `{blue:This is a blue line` tFunk terminal colours ``` Or get a custom compiler with a set prefix: ```js var compiler = require(\"tfunk\").Compiler({ prefix: \"[{magenta:tFunk}]\" }); console.log( compiler.compile(\"tFunk is awesome\") ); console.log( compiler.compile(\"don't you think?\") ); // => [tFunk] tFunk is awesome // => [tFunk] don't you think? ``` **Define your own syntax** You can define your own methods, they receive the string section as the first parameter & have access to the compiler through `this.compile()` keyword. ```js var compiler = require(\"tfunk\").Compiler({ \"warn\": function(string) { return this.compile(\"{red:WARNING:\" + string); } }); ``` Now you can use `warn` anywhere you like. ```js console.log( compiler.compile(\"{warn: Could not file your config file...\") ); // => WARNING: Could not file your config file... ``` ##Examples Here are some comparisons to chalk, to help you understand how to use tFunk. ###Single Colours ```js // chalk console.log( chalk.red(\"This has a single colour\") ); // tFunk console.log( tFunk(\"{red:This has a single colour\") ); ``` ###Single Colour mid string ```js // chalk console.log( \"This has a single colour \" + chalk.cyan(\"that begins mid-string\") ); // tFunck console.log( tFunk(\"This has a single colour {cyan:that begins mid-string\") ); ``` ###Single Colour with end point ```js // chalk console.log( chalk.red(\"This has a single colour with \") + \"an endpoint\"); // tFunk console.log( tFunk(\"{red:This has a single colour with }an endpoint\") ); ``` ###Two Colours ```js // chalk console.log( chalk.green(\"This has \") + chalk.cyan(\"two colours\") ); // tFunk console.log( tFunk(\"{green:This has {cyan:two colours\") ); ``` ###Nested Colours ```js // chalk console.log( chalk.green(\"This has a colour \" + chalk.cyan(\"nested inside\") + \" another colour\") ); //tFunk console.log( tFunk(\"{green:This has a colour {cyan:nested inside} another colour\") ); ``` ###Multiple Nested ```js // chalk console.log( chalk.blue(\"Multiple \" + chalk.cyan(\"NESTED\") + \" styles in \" + chalk.red(\"the same string\") + \" with an ending\") ); // tFunk console.log( tFunk(\"{blue:Multiple {cyan:NESTED} styles in {red:the same string} with an ending\") ); ``` ###Multi line ```js var multiline = require(\"multiline\"); var string = multiline(function () {/* {cyan:This is a multi-line coloured string With a single {yellow:yellow} word in the center of a line Pretty cool huh? */}); console.log( tFunk(string) ); ``` ###Escaping when you need curly braces ```js console.log( tFunk(\"This has a \\\\{\\\\{mustache\\\\}\\\\}\") ); ``` ##TODO - [x] Colours - [x] Nested Colours - [x] Custom syntax - [x] Prefixed compiler - [x] Make the chain-able API work like this `\"{white.bgRed: White text, red BG\"` - [x] Offer a way of escaping. Right now, ALL instances of `}` will be lost"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/eazy-logger/node_modules/tfunk/node_modules/chalk/node_modules/ansi-styles/readme.md","tags":[],"body":"# ansi-styles [![Build Status](https://travis-ci.org/chalk/ansi-styles.svg?branch=master)](https://travis-ci.org/chalk/ansi-styles) > [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors_and_Styles) for styling strings in the terminal You probably want the higher-level [chalk](https://github.com/chalk/chalk) module for styling your strings. ![](screenshot.png) ## Install ``` $ npm install --save ansi-styles ``` ## Usage ```js var ansi = require('ansi-styles'); console.log(ansi.green.open + 'Hello world!' + ansi.green.close); ``` ## API Each style has an `open` and `close` property. ## Styles ### Modifiers - `reset` - `bold` - `dim` - `italic` *(not widely supported)* - `underline` - `inverse` - `hidden` - `strikethrough` *(not widely supported)* ### Colors - `black` - `red` - `green` - `yellow` - `blue` - `magenta` - `cyan` - `white` - `gray` ### Background colors - `bgBlack` - `bgRed` - `bgGreen` - `bgYellow` - `bgBlue` - `bgMagenta` - `bgCyan` - `bgWhite` ## Advanced usage By default you get a map of styles, but the styles are also available as groups. They are non-enumerable so they don't show up unless you access them explicitly. This makes it easier to expose only a subset in a higher-level module. - `ansi.modifiers` - `ansi.colors` - `ansi.bgColors` ###### Example ```js console.log(ansi.colors.green.open); ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/eazy-logger/node_modules/tfunk/node_modules/chalk/node_modules/escape-string-regexp/readme.md","tags":[],"body":"# escape-string-regexp [![Build Status](https://travis-ci.org/sindresorhus/escape-string-regexp.svg?branch=master)](https://travis-ci.org/sindresorhus/escape-string-regexp) > Escape RegExp special characters ## Install ``` $ npm install --save escape-string-regexp ``` ## Usage ```js const escapeStringRegexp = require('escape-string-regexp'); const escapedString = escapeStringRegexp('how much $ for a unicorn?'); //=> 'how much \\$ for a unicorn\\?' new RegExp(escapedString); ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/eazy-logger/node_modules/tfunk/node_modules/chalk/node_modules/has-ansi/node_modules/ansi-regex/readme.md","tags":[],"body":"# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex) > Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save ansi-regex ``` ## Usage ```js var ansiRegex = require('ansi-regex'); ansiRegex().test('\\u001b[4mcake\\u001b[0m'); //=> true ansiRegex().test('cake'); //=> false '\\u001b[4mcake\\u001b[0m'.match(ansiRegex()); //=> ['\\u001b[4m', '\\u001b[0m'] ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/eazy-logger/node_modules/tfunk/node_modules/chalk/node_modules/has-ansi/readme.md","tags":[],"body":"# has-ansi [![Build Status](https://travis-ci.org/sindresorhus/has-ansi.svg?branch=master)](https://travis-ci.org/sindresorhus/has-ansi) > Check if a string has [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save has-ansi ``` ## Usage ```js var hasAnsi = require('has-ansi'); hasAnsi('\\u001b[4mcake\\u001b[0m'); //=> true hasAnsi('cake'); //=> false ``` ## Related - [has-ansi-cli](https://github.com/sindresorhus/has-ansi-cli) - CLI for this module - [strip-ansi](https://github.com/sindresorhus/strip-ansi) - Strip ANSI escape codes - [ansi-regex](https://github.com/sindresorhus/ansi-regex) - Regular expression for matching ANSI escape codes - [chalk](https://github.com/sindresorhus/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/eazy-logger/node_modules/tfunk/node_modules/chalk/node_modules/strip-ansi/node_modules/ansi-regex/readme.md","tags":[],"body":"# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex) > Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save ansi-regex ``` ## Usage ```js var ansiRegex = require('ansi-regex'); ansiRegex().test('\\u001b[4mcake\\u001b[0m'); //=> true ansiRegex().test('cake'); //=> false '\\u001b[4mcake\\u001b[0m'.match(ansiRegex()); //=> ['\\u001b[4m', '\\u001b[0m'] ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/eazy-logger/node_modules/tfunk/node_modules/chalk/node_modules/strip-ansi/readme.md","tags":[],"body":"# strip-ansi [![Build Status](https://travis-ci.org/chalk/strip-ansi.svg?branch=master)](https://travis-ci.org/chalk/strip-ansi) > Strip [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save strip-ansi ``` ## Usage ```js var stripAnsi = require('strip-ansi'); stripAnsi('\\u001b[4mcake\\u001b[0m'); //=> 'cake' ``` ## Related - [strip-ansi-cli](https://github.com/chalk/strip-ansi-cli) - CLI for this module - [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes - [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/eazy-logger/node_modules/tfunk/node_modules/chalk/node_modules/supports-color/readme.md","tags":[],"body":"# supports-color [![Build Status](https://travis-ci.org/chalk/supports-color.svg?branch=master)](https://travis-ci.org/chalk/supports-color) > Detect whether a terminal supports color ## Install ``` $ npm install --save supports-color ``` ## Usage ```js var supportsColor = require('supports-color'); if (supportsColor) { console.log('Terminal supports color'); } ``` It obeys the `--color` and `--no-color` CLI flags. For situations where using `--color` is not possible, add an environment variable `FORCE_COLOR` with any value to force color. Trumps `--no-color`. ## Related - [supports-color-cli](https://github.com/chalk/supports-color-cli) - CLI for this module - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/eazy-logger/node_modules/tfunk/node_modules/chalk/readme.md","tags":[],"body":"> Terminal string styling done right [![Build Status](https://travis-ci.org/chalk/chalk.svg?branch=master)](https://travis-ci.org/chalk/chalk) [![Coverage Status](https://coveralls.io/repos/chalk/chalk/badge.svg?branch=master)](https://coveralls.io/r/chalk/chalk?branch=master) [![](http://img.shields.io/badge/unicorn-approved-ff69b4.svg)](https://www.youtube.com/watch?v=9auOCbH5Ns4) [colors.js](https://github.com/Marak/colors.js) used to be the most popular string styling module, but it has serious deficiencies like extending `String.prototype` which causes all kinds of [problems](https://github.com/yeoman/yo/issues/68). Although there are other ones, they either do too much or not enough. **Chalk is a clean and focused alternative.** ![](https://github.com/chalk/ansi-styles/raw/master/screenshot.png) ## Why - Highly performant - Doesn't extend `String.prototype` - Expressive API - Ability to nest styles - Clean and focused - Auto-detects color support - Actively maintained - [Used by ~4500 modules](https://www.npmjs.com/browse/depended/chalk) as of July 15, 2015 ## Install ``` $ npm install --save chalk ``` ## Usage Chalk comes with an easy to use composable API where you just chain and nest the styles you want. ```js var chalk = require('chalk'); // style a string chalk.blue('Hello world!'); // combine styled and normal strings chalk.blue('Hello') + 'World' + chalk.red('!'); // compose multiple styles using the chainable API chalk.blue.bgRed.bold('Hello world!'); // pass in multiple arguments chalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz'); // nest styles chalk.red('Hello', chalk.underline.bgBlue('world') + '!'); // nest styles of the same type even (color, underline, background) chalk.green( 'I am a green line ' + chalk.blue.underline.bold('with a blue substring') + ' that becomes green again!' ); ``` Easily define your own themes. ```js var chalk = require('chalk'); var error = chalk.bold.red; console.log(error('Error!')); ``` Take advantage of console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data). ```js var name = 'Sindre'; console.log(chalk.green('Hello %s'), name); //=> Hello Sindre ``` ## API ### chalk.`[....](string, [string...])` Example: `chalk.red.bold.underline('Hello', 'world');` Chain [styles](#styles) and call the last one as a method with a string argument. Order doesn't matter, and later styles take precedent in case of a conflict. This simply means that `Chalk.red.yellow.green` is equivalent to `Chalk.green`. Multiple arguments will be separated by space. ### chalk.enabled Color support is automatically detected, but you can override it by setting the `enabled` property. You should however only do this in your own code as it applies globally to all chalk consumers. If you need to change this in a reusable module create a new instance: ```js var ctx = new chalk.constructor({enabled: false}); ``` ### chalk.supportsColor Detect whether the terminal [supports color](https://github.com/chalk/supports-color). Used internally and handled for you, but exposed for convenience. Can be overridden by the user with the flags `--color` and `--no-color`. For situations where using `--color` is not possible, add an environment variable `FORCE_COLOR` with any value to force color. Trumps `--no-color`. ### chalk.styles Exposes the styles as [ANSI escape codes](https://github.com/chalk/ansi-styles). Generally not useful, but you might need just the `.open` or `.close` escape code if you're mixing externally styled strings with your own. ```js var chalk = require('chalk'); console.log(chalk.styles.red); //=> {open: '\\u001b[31m', close: '\\u001b[39m'} console.log(chalk.styles.red.open + 'Hello' + chalk.styles.red.close); ``` ### chalk.hasColor(string) Check whether a string [has color](https://github.com/chalk/has-ansi). ### chalk.stripColor(string) [Strip color](https://github.com/chalk/strip-ansi) from a string. Can be useful in combination with `.supportsColor` to strip color on externally styled text when it's not supported. Example: ```js var chalk = require('chalk'); var styledString = getText(); if (!chalk.supportsColor) { styledString = chalk.stripColor(styledString); } ``` ## Styles ### Modifiers - `reset` - `bold` - `dim` - `italic` *(not widely supported)* - `underline` - `inverse` - `hidden` - `strikethrough` *(not widely supported)* ### Colors - `black` - `red` - `green` - `yellow` - `blue` *(on Windows the bright version is used as normal blue is illegible)* - `magenta` - `cyan` - `white` - `gray` ### Background colors - `bgBlack` - `bgRed` - `bgGreen` - `bgYellow` - `bgBlue` - `bgMagenta` - `bgCyan` - `bgWhite` ## 256-colors Chalk does not support anything other than the base eight colors, which guarantees it will work on all terminals and systems. Some terminals, specifically `xterm` compliant ones, will support the full range of 8-bit colors. For this the lower level [ansi-256-colors](https://github.com/jbnicolai/ansi-256-colors) package can be used. ## Windows If you're on Windows, do yourself a favor and use [`cmder`](http://bliker.github.io/cmder/) instead of `cmd.exe`. ## Related - [chalk-cli](https://github.com/chalk/chalk-cli) - CLI for this module - [ansi-styles](https://github.com/chalk/ansi-styles/) - ANSI escape codes for styling strings in the terminal - [supports-color](https://github.com/chalk/supports-color/) - Detect whether a terminal supports color - [strip-ansi](https://github.com/chalk/strip-ansi) - Strip ANSI escape codes - [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes - [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes - [wrap-ansi](https://github.com/chalk/wrap-ansi) - Wordwrap a string with ANSI escape codes ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/eazy-logger/node_modules/tfunk/node_modules/object-path/README.md","tags":[],"body":"object-path =========== Access deep properties using a path [![NPM version](https://badge.fury.io/js/object-path.png)](http://badge.fury.io/js/object-path) [![Build Status](https://travis-ci.org/mariocasciaro/object-path.png)](https://travis-ci.org/mariocasciaro/object-path) [![Coverage Status](https://coveralls.io/repos/mariocasciaro/object-path/badge.png)](https://coveralls.io/r/mariocasciaro/object-path) [![devDependency Status](https://david-dm.org/mariocasciaro/object-path/dev-status.svg)](https://david-dm.org/mariocasciaro/object-path#info=devDependencies) ![Downloads](http://img.shields.io/npm/dm/object-path.svg) ## Install ### Node.js ``` npm install object-path ``` ### Browser ``` bower install object-path ``` ### Typescript typings ``` tsd query object-path --action install --save ``` ## Usage ```javascript var obj = { a: { b: \"d\", c: [\"e\", \"f\"] } }; var objectPath = require(\"object-path\"); //get deep property objectPath.get(obj, \"a.b\"); //returns \"d\" //get the first non-undefined value objectPath.coalesce(obj, ['a.z', 'a.d', ['a','b']], 'default'); //empty a given path (but do not delete it) depending on their type,so it retains reference to objects and arrays. //functions that are not inherited from prototype are set to null. //object instances are considered objects and just own property names are deleted objectPath.empty(obj, 'a.b'); // obj.a.b is now '' objectPath.empty(obj, 'a.c'); // obj.a.c is now [] objectPath.empty(obj, 'a'); // obj.a is now {} //works also with arrays objectPath.get(obj, \"a.c.1\"); //returns \"f\" objectPath.get(obj, [\"a\",\"c\",\"1\"]); //returns \"f\" //can return a default value with get objectPath.get(obj, [\"a.c.b\"], \"DEFAULT\"); //returns \"DEFAULT\", since a.c.b path doesn't exists, if omitted, returns undefined //set objectPath.set(obj, \"a.h\", \"m\"); // or objectPath.set(obj, [\"a\",\"h\"], \"m\"); objectPath.get(obj, \"a.h\"); //returns \"m\" //set will create intermediate object/arrays objectPath.set(obj, \"a.j.0.f\", \"m\"); //will insert values in array objectPath.insert(obj, \"a.c\", \"m\", 1); // obj.a.c = [\"e\", \"m\", \"f\"] //push into arrays (and create intermediate objects/arrays) objectPath.push(obj, \"a.k\", \"o\"); //ensure a path exists (if it doesn't, set the default value you provide) objectPath.ensureExists(obj, \"a.k.1\", \"DEFAULT\"); //deletes a path objectPath.del(obj, \"a.b\"); // obj.a.b is now undefined objectPath.del(obj, [\"a\",\"c\",0]); // obj.a.c is now ['f'] //tests path existence objectPath.has(obj, \"a.b\"); // true objectPath.has(obj, [\"a\",\"d\"]); // false //bind object var model = objectPath({ a: { b: \"d\", c: [\"e\", \"f\"] } }); //now any method from above is supported directly w/o passing an object model.get(\"a.b\"); //returns \"d\" model.get([\"a.c.b\"], \"DEFAULT\"); //returns \"DEFAULT\" model.del(\"a.b\"); // obj.a.b is now undefined model.has(\"a.b\"); // false ``` ### Credits * [Mario Casciaro](https://github.com/mariocasciaro) - Author * [Paulo Cesar](https://github.com/pocesar) - Major contributor"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/emitter-steward/README.md","tags":[],"body":"##emitter-steward [![Build Status](https://travis-ci.org/shakyShane/emitter-steward.svg?branch=master)](https://travis-ci.org/shakyShane/emitter-steward) > allow emitters in 1 second intervals"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/CHANGELOG.md","tags":[],"body":"0.26.7 / 2016-03-16 ------------------- - fixed `copy()` if source and dest are the same. [#230][#230] 0.26.6 / 2016-03-15 ------------------- - fixed if `emptyDir()` does not have a callback: [#229][#229] 0.26.5 / 2016-01-27 ------------------- - `copy()` with two arguments (w/o callback) was broken. See: [#215][#215] 0.26.4 / 2016-01-05 ------------------- - `copySync()` made `preserveTimestamps` default consistent with `copy()` which is `false`. See: [#208][#208] 0.26.3 / 2015-12-17 ------------------- - fixed `copy()` hangup in copying blockDevice / characterDevice / `/dev/null`. See: [#193][#193] 0.26.2 / 2015-11-02 ------------------- - fixed `outputJson{Sync}()` spacing adherence to `fs.spaces` 0.26.1 / 2015-11-02 ------------------- - fixed `copySync()` when `clogger=true` and the destination is read only. See: [#190][#190] 0.26.0 / 2015-10-25 ------------------- - extracted the `walk()` function into its own module [`klaw`](https://github.com/jprichardson/node-klaw). 0.25.0 / 2015-10-24 ------------------- - now has a file walker `walk()` 0.24.0 / 2015-08-28 ------------------- - removed alias `delete()` and `deleteSync()`. See: [#171][#171] 0.23.1 / 2015-08-07 ------------------- - Better handling of errors for `move()` when moving across devices. [#170][#170] - `ensureSymlink()` and `ensureLink()` should not throw errors if link exists. [#169][#169] 0.23.0 / 2015-08-06 ------------------- - added `ensureLink{Sync}()` and `ensureSymlink{Sync}()`. See: [#165][#165] 0.22.1 / 2015-07-09 ------------------- - Prevent calling `hasMillisResSync()` on module load. See: [#149][#149]. Fixes regression that was introduced in `0.21.0`. 0.22.0 / 2015-07-09 ------------------- - preserve permissions / ownership in `copy()`. See: [#54][#54] 0.21.0 / 2015-07-04 ------------------- - add option to preserve timestamps in `copy()` and `copySync()`. See: [#141][#141] - updated `graceful-fs@3.x` to `4.x`. This brings in features from `amazing-graceful-fs` (much cleaner code / less hacks) 0.20.1 / 2015-06-23 ------------------- - fixed regression caused by latest jsonfile update: See: https://github.com/jprichardson/node-jsonfile/issues/26 0.20.0 / 2015-06-19 ------------------- - removed `jsonfile` aliases with `File` in the name, they weren't documented and probably weren't in use e.g. this package had both `fs.readJsonFile` and `fs.readJson` that were aliases to each other, now use `fs.readJson`. - preliminary walker created. Intentionally not documented. If you use it, it will almost certainly change and break your code. - started moving tests inline - upgraded to `jsonfile@2.1.0`, can now pass JSON revivers/replacers to `readJson()`, `writeJson()`, `outputJson()` 0.19.0 / 2015-06-08 ------------------- - `fs.copy()` had support for Node v0.8, dropped support 0.18.4 / 2015-05-22 ------------------- - fixed license field according to this: [#136][#136] and https://github.com/npm/npm/releases/tag/v2.10.0 0.18.3 / 2015-05-08 ------------------- - bugfix: handle `EEXIST` when clobbering on some Linux systems. [#134][#134] 0.18.2 / 2015-04-17 ------------------- - bugfix: allow `F_OK` ([#120][#120]) 0.18.1 / 2015-04-15 ------------------- - improved windows support for `move()` a bit. https://github.com/jprichardson/node-fs-extra/commit/92838980f25dc2ee4ec46b43ee14d3c4a1d30c1b - fixed a lot of tests for Windows (appveyor) 0.18.0 / 2015-03-31 ------------------- - added `emptyDir()` and `emptyDirSync()` 0.17.0 / 2015-03-28 ------------------- - `copySync` added `clobber` option (before always would clobber, now if `clobber` is `false` it throws an error if the destination exists). **Only works with files at the moment.** - `createOutputStream()` added. See: [#118][#118] 0.16.5 / 2015-03-08 ------------------- - fixed `fs.move` when `clobber` is `true` and destination is a directory, it should clobber. [#114][#114] 0.16.4 / 2015-03-01 ------------------- - `fs.mkdirs` fix infinite loop on Windows. See: See https://github.com/substack/node-mkdirp/pull/74 and https://github.com/substack/node-mkdirp/issues/66 0.16.3 / 2015-01-28 ------------------- - reverted https://github.com/jprichardson/node-fs-extra/commit/1ee77c8a805eba5b99382a2591ff99667847c9c9 0.16.2 / 2015-01-28 ------------------- - fixed `fs.copy` for Node v0.8 (support is temporary and will be removed in the near future) 0.16.1 / 2015-01-28 ------------------- - if `setImmediate` is not available, fall back to `process.nextTick` 0.16.0 / 2015-01-28 ------------------- - bugfix `fs.move()` into itself. Closes #104 - bugfix `fs.move()` moving directory across device. Closes #108 - added coveralls support - bugfix: nasty multiple callback `fs.copy()` bug. Closes #98 - misc fs.copy code cleanups 0.15.0 / 2015-01-21 ------------------- - dropped `ncp`, imported code in - because of previous, now supports `io.js` - `graceful-fs` is now a dependency 0.14.0 / 2015-01-05 ------------------- - changed `copy`/`copySync` from `fs.copy(src, dest, [filters], callback)` to `fs.copy(src, dest, [options], callback)` [#100][#100] - removed mockfs tests for mkdirp (this may be temporary, but was getting in the way of other tests) 0.13.0 / 2014-12-10 ------------------- - removed `touch` and `touchSync` methods (they didn't handle permissions like UNIX touch) - updated `\"ncp\": \"^0.6.0\"` to `\"ncp\": \"^1.0.1\"` - imported `mkdirp` => `minimist` and `mkdirp` are no longer dependences, should now appease people who wanted `mkdirp` to be `--use_strict` safe. See [#59]([#59][#59]) 0.12.0 / 2014-09-22 ------------------- - copy symlinks in `copySync()` [#85][#85] 0.11.1 / 2014-09-02 ------------------- - bugfix `copySync()` preserve file permissions [#80][#80] 0.11.0 / 2014-08-11 ------------------- - upgraded `\"ncp\": \"^0.5.1\"` to `\"ncp\": \"^0.6.0\"` - upgrade `jsonfile\": \"^1.2.0\"` to `jsonfile\": \"^2.0.0\"` => on write, json files now have `\\n` at end. Also adds `options.throws` to `readJsonSync()` see https://github.com/jprichardson/node-jsonfile#readfilesyncfilename-options for more details. 0.10.0 / 2014-06-29 ------------------ * bugfix: upgaded `\"jsonfile\": \"~1.1.0\"` to `\"jsonfile\": \"^1.2.0\"`, bumped minor because of `jsonfile` dep change from `~` to `^`. #67 0.9.1 / 2014-05-22 ------------------ * removed Node.js `0.8.x` support, `0.9.0` was published moments ago and should have been done there 0.9.0 / 2014-05-22 ------------------ * upgraded `ncp` from `~0.4.2` to `^0.5.1`, #58 * upgraded `rimraf` from `~2.2.6` to `^2.2.8` * upgraded `mkdirp` from `0.3.x` to `^0.5.0` * added methods `ensureFile()`, `ensureFileSync()` * added methods `ensureDir()`, `ensureDirSync()` #31 * added `move()` method. From: https://github.com/andrewrk/node-mv 0.8.1 / 2013-10-24 ------------------ * copy failed to return an error to the callback if a file doesn't exist (ulikoehler #38, #39) 0.8.0 / 2013-10-14 ------------------ * `filter` implemented on `copy()` and `copySync()`. (Srirangan / #36) 0.7.1 / 2013-10-12 ------------------ * `copySync()` implemented (Srirangan / #33) * updated to the latest `jsonfile` version `1.1.0` which gives `options` params for the JSON methods. Closes #32 0.7.0 / 2013-10-07 ------------------ * update readme conventions * `copy()` now works if destination directory does not exist. Closes #29 0.6.4 / 2013-09-05 ------------------ * changed `homepage` field in package.json to remove NPM warning 0.6.3 / 2013-06-28 ------------------ * changed JSON spacing default from `4` to `2` to follow Node conventions * updated `jsonfile` dep * updated `rimraf` dep 0.6.2 / 2013-06-28 ------------------ * added .npmignore, #25 0.6.1 / 2013-05-14 ------------------ * modified for `strict` mode, closes #24 * added `outputJson()/outputJsonSync()`, closes #23 0.6.0 / 2013-03-18 ------------------ * removed node 0.6 support * added node 0.10 support * upgraded to latest `ncp` and `rimraf`. * optional `graceful-fs` support. Closes #17 0.5.0 / 2013-02-03 ------------------ * Removed `readTextFile`. * Renamed `readJSONFile` to `readJSON` and `readJson`, same with write. * Restructured documentation a bit. Added roadmap. 0.4.0 / 2013-01-28 ------------------ * Set default spaces in `jsonfile` from 4 to 2. * Updated `testutil` deps for tests. * Renamed `touch()` to `createFile()` * Added `outputFile()` and `outputFileSync()` * Changed creation of testing diretories so the /tmp dir is not littered. * Added `readTextFile()` and `readTextFileSync()`. 0.3.2 / 2012-11-01 ------------------ * Added `touch()` and `touchSync()` methods. 0.3.1 / 2012-10-11 ------------------ * Fixed some stray globals. 0.3.0 / 2012-10-09 ------------------ * Removed all CoffeeScript from tests. * Renamed `mkdir` to `mkdirs`/`mkdirp`. 0.2.1 / 2012-09-11 ------------------ * Updated `rimraf` dep. 0.2.0 / 2012-09-10 ------------------ * Rewrote module into JavaScript. (Must still rewrite tests into JavaScript) * Added all methods of [jsonfile][https://github.com/jprichardson/node-jsonfile] * Added Travis-CI. 0.1.3 / 2012-08-13 ------------------ * Added method `readJSONFile`. 0.1.2 / 2012-06-15 ------------------ * Bug fix: `deleteSync()` didn't exist. * Verified Node v0.8 compatibility. 0.1.1 / 2012-06-15 ------------------ * Fixed bug in `remove()`/`delete()` that wouldn't execute the function if a callback wasn't passed. 0.1.0 / 2012-05-31 ------------------ * Renamed `copyFile()` to `copy()`. `copy()` can now copy directories (recursively) too. * Renamed `rmrf()` to `remove()`. * `remove()` aliased with `delete()`. * Added `mkdirp` capabilities. Named: `mkdir()`. Hides Node.js native `mkdir()`. * Instead of exporting the native `fs` module with new functions, I now copy over the native methods to a new object and export that instead. 0.0.4 / 2012-03-14 ------------------ * Removed CoffeeScript dependency 0.0.3 / 2012-01-11 ------------------ * Added methods rmrf and rmrfSync * Moved tests from Jasmine to Mocha [#215]: https://github.com/jprichardson/node-fs-extra/pull/215 [#214]: https://github.com/jprichardson/node-fs-extra/pull/214 [#213]: https://github.com/jprichardson/node-fs-extra/issues/213 [#212]: https://github.com/jprichardson/node-fs-extra/pull/212 [#211]: https://github.com/jprichardson/node-fs-extra/issues/211 [#210]: https://github.com/jprichardson/node-fs-extra/issues/210 [#209]: https://github.com/jprichardson/node-fs-extra/issues/209 [#208]: https://github.com/jprichardson/node-fs-extra/pull/208 [#207]: https://github.com/jprichardson/node-fs-extra/issues/207 [#206]: https://github.com/jprichardson/node-fs-extra/issues/206 [#205]: https://github.com/jprichardson/node-fs-extra/issues/205 [#204]: https://github.com/jprichardson/node-fs-extra/pull/204 [#203]: https://github.com/jprichardson/node-fs-extra/issues/203 [#202]: https://github.com/jprichardson/node-fs-extra/issues/202 [#201]: https://github.com/jprichardson/node-fs-extra/issues/201 [#200]: https://github.com/jprichardson/node-fs-extra/issues/200 [#199]: https://github.com/jprichardson/node-fs-extra/issues/199 [#198]: https://github.com/jprichardson/node-fs-extra/issues/198 [#197]: https://github.com/jprichardson/node-fs-extra/issues/197 [#196]: https://github.com/jprichardson/node-fs-extra/issues/196 [#195]: https://github.com/jprichardson/node-fs-extra/issues/195 [#194]: https://github.com/jprichardson/node-fs-extra/pull/194 [#193]: https://github.com/jprichardson/node-fs-extra/issues/193 [#192]: https://github.com/jprichardson/node-fs-extra/issues/192 [#191]: https://github.com/jprichardson/node-fs-extra/issues/191 [#190]: https://github.com/jprichardson/node-fs-extra/pull/190 [#189]: https://github.com/jprichardson/node-fs-extra/pull/189 [#188]: https://github.com/jprichardson/node-fs-extra/issues/188 [#187]: https://github.com/jprichardson/node-fs-extra/issues/187 [#186]: https://github.com/jprichardson/node-fs-extra/issues/186 [#185]: https://github.com/jprichardson/node-fs-extra/issues/185 [#184]: https://github.com/jprichardson/node-fs-extra/issues/184 [#183]: https://github.com/jprichardson/node-fs-extra/issues/183 [#182]: https://github.com/jprichardson/node-fs-extra/issues/182 [#181]: https://github.com/jprichardson/node-fs-extra/issues/181 [#180]: https://github.com/jprichardson/node-fs-extra/issues/180 [#179]: https://github.com/jprichardson/node-fs-extra/issues/179 [#178]: https://github.com/jprichardson/node-fs-extra/issues/178 [#177]: https://github.com/jprichardson/node-fs-extra/issues/177 [#176]: https://github.com/jprichardson/node-fs-extra/issues/176 [#175]: https://github.com/jprichardson/node-fs-extra/issues/175 [#174]: https://github.com/jprichardson/node-fs-extra/pull/174 [#173]: https://github.com/jprichardson/node-fs-extra/issues/173 [#172]: https://github.com/jprichardson/node-fs-extra/issues/172 [#171]: https://github.com/jprichardson/node-fs-extra/issues/171 [#170]: https://github.com/jprichardson/node-fs-extra/pull/170 [#169]: https://github.com/jprichardson/node-fs-extra/pull/169 [#168]: https://github.com/jprichardson/node-fs-extra/pull/168 [#167]: https://github.com/jprichardson/node-fs-extra/pull/167 [#166]: https://github.com/jprichardson/node-fs-extra/pull/166 [#165]: https://github.com/jprichardson/node-fs-extra/pull/165 [#164]: https://github.com/jprichardson/node-fs-extra/issues/164 [#163]: https://github.com/jprichardson/node-fs-extra/issues/163 [#162]: https://github.com/jprichardson/node-fs-extra/pull/162 [#161]: https://github.com/jprichardson/node-fs-extra/pull/161 [#160]: https://github.com/jprichardson/node-fs-extra/pull/160 [#159]: https://github.com/jprichardson/node-fs-extra/pull/159 [#158]: https://github.com/jprichardson/node-fs-extra/issues/158 [#157]: https://github.com/jprichardson/node-fs-extra/issues/157 [#156]: https://github.com/jprichardson/node-fs-extra/issues/156 [#155]: https://github.com/jprichardson/node-fs-extra/issues/155 [#154]: https://github.com/jprichardson/node-fs-extra/issues/154 [#153]: https://github.com/jprichardson/node-fs-extra/pull/153 [#152]: https://github.com/jprichardson/node-fs-extra/issues/152 [#151]: https://github.com/jprichardson/node-fs-extra/issues/151 [#150]: https://github.com/jprichardson/node-fs-extra/issues/150 [#149]: https://github.com/jprichardson/node-fs-extra/issues/149 [#148]: https://github.com/jprichardson/node-fs-extra/issues/148 [#147]: https://github.com/jprichardson/node-fs-extra/issues/147 [#146]: https://github.com/jprichardson/node-fs-extra/pull/146 [#145]: https://github.com/jprichardson/node-fs-extra/issues/145 [#144]: https://github.com/jprichardson/node-fs-extra/issues/144 [#143]: https://github.com/jprichardson/node-fs-extra/issues/143 [#142]: https://github.com/jprichardson/node-fs-extra/issues/142 [#141]: https://github.com/jprichardson/node-fs-extra/pull/141 [#140]: https://github.com/jprichardson/node-fs-extra/issues/140 [#139]: https://github.com/jprichardson/node-fs-extra/pull/139 [#138]: https://github.com/jprichardson/node-fs-extra/issues/138 [#137]: https://github.com/jprichardson/node-fs-extra/issues/137 [#136]: https://github.com/jprichardson/node-fs-extra/pull/136 [#135]: https://github.com/jprichardson/node-fs-extra/issues/135 [#134]: https://github.com/jprichardson/node-fs-extra/pull/134 [#133]: https://github.com/jprichardson/node-fs-extra/pull/133 [#132]: https://github.com/jprichardson/node-fs-extra/pull/132 [#131]: https://github.com/jprichardson/node-fs-extra/issues/131 [#130]: https://github.com/jprichardson/node-fs-extra/pull/130 [#129]: https://github.com/jprichardson/node-fs-extra/pull/129 [#128]: https://github.com/jprichardson/node-fs-extra/issues/128 [#127]: https://github.com/jprichardson/node-fs-extra/issues/127 [#126]: https://github.com/jprichardson/node-fs-extra/issues/126 [#125]: https://github.com/jprichardson/node-fs-extra/issues/125 [#124]: https://github.com/jprichardson/node-fs-extra/issues/124 [#123]: https://github.com/jprichardson/node-fs-extra/issues/123 [#122]: https://github.com/jprichardson/node-fs-extra/pull/122 [#121]: https://github.com/jprichardson/node-fs-extra/issues/121 [#120]: https://github.com/jprichardson/node-fs-extra/issues/120 [#119]: https://github.com/jprichardson/node-fs-extra/issues/119 [#118]: https://github.com/jprichardson/node-fs-extra/pull/118 [#117]: https://github.com/jprichardson/node-fs-extra/pull/117 [#116]: https://github.com/jprichardson/node-fs-extra/issues/116 [#115]: https://github.com/jprichardson/node-fs-extra/issues/115 [#114]: https://github.com/jprichardson/node-fs-extra/issues/114 [#113]: https://github.com/jprichardson/node-fs-extra/issues/113 [#112]: https://github.com/jprichardson/node-fs-extra/pull/112 [#111]: https://github.com/jprichardson/node-fs-extra/pull/111 [#110]: https://github.com/jprichardson/node-fs-extra/pull/110 [#109]: https://github.com/jprichardson/node-fs-extra/issues/109 [#108]: https://github.com/jprichardson/node-fs-extra/issues/108 [#107]: https://github.com/jprichardson/node-fs-extra/pull/107 [#106]: https://github.com/jprichardson/node-fs-extra/issues/106 [#105]: https://github.com/jprichardson/node-fs-extra/issues/105 [#104]: https://github.com/jprichardson/node-fs-extra/issues/104 [#103]: https://github.com/jprichardson/node-fs-extra/issues/103 [#102]: https://github.com/jprichardson/node-fs-extra/issues/102 [#101]: https://github.com/jprichardson/node-fs-extra/issues/101 [#100]: https://github.com/jprichardson/node-fs-extra/pull/100 [#99]: https://github.com/jprichardson/node-fs-extra/issues/99 [#98]: https://github.com/jprichardson/node-fs-extra/issues/98 [#97]: https://github.com/jprichardson/node-fs-extra/pull/97 [#96]: https://github.com/jprichardson/node-fs-extra/issues/96 [#95]: https://github.com/jprichardson/node-fs-extra/pull/95 [#94]: https://github.com/jprichardson/node-fs-extra/issues/94 [#93]: https://github.com/jprichardson/node-fs-extra/issues/93 [#92]: https://github.com/jprichardson/node-fs-extra/issues/92 [#91]: https://github.com/jprichardson/node-fs-extra/issues/91 [#90]: https://github.com/jprichardson/node-fs-extra/issues/90 [#89]: https://github.com/jprichardson/node-fs-extra/issues/89 [#88]: https://github.com/jprichardson/node-fs-extra/issues/88 [#87]: https://github.com/jprichardson/node-fs-extra/issues/87 [#86]: https://github.com/jprichardson/node-fs-extra/issues/86 [#85]: https://github.com/jprichardson/node-fs-extra/pull/85 [#84]: https://github.com/jprichardson/node-fs-extra/issues/84 [#83]: https://github.com/jprichardson/node-fs-extra/issues/83 [#82]: https://github.com/jprichardson/node-fs-extra/pull/82 [#81]: https://github.com/jprichardson/node-fs-extra/issues/81 [#80]: https://github.com/jprichardson/node-fs-extra/pull/80 [#79]: https://github.com/jprichardson/node-fs-extra/issues/79 [#78]: https://github.com/jprichardson/node-fs-extra/pull/78 [#77]: https://github.com/jprichardson/node-fs-extra/issues/77 [#76]: https://github.com/jprichardson/node-fs-extra/issues/76 [#75]: https://github.com/jprichardson/node-fs-extra/issues/75 [#74]: https://github.com/jprichardson/node-fs-extra/pull/74 [#73]: https://github.com/jprichardson/node-fs-extra/pull/73 [#72]: https://github.com/jprichardson/node-fs-extra/pull/72 [#71]: https://github.com/jprichardson/node-fs-extra/issues/71 [#70]: https://github.com/jprichardson/node-fs-extra/issues/70 [#69]: https://github.com/jprichardson/node-fs-extra/issues/69 [#68]: https://github.com/jprichardson/node-fs-extra/issues/68 [#67]: https://github.com/jprichardson/node-fs-extra/issues/67 [#66]: https://github.com/jprichardson/node-fs-extra/issues/66 [#65]: https://github.com/jprichardson/node-fs-extra/issues/65 [#64]: https://github.com/jprichardson/node-fs-extra/issues/64 [#63]: https://github.com/jprichardson/node-fs-extra/issues/63 [#62]: https://github.com/jprichardson/node-fs-extra/issues/62 [#61]: https://github.com/jprichardson/node-fs-extra/issues/61 [#60]: https://github.com/jprichardson/node-fs-extra/issues/60 [#59]: https://github.com/jprichardson/node-fs-extra/issues/59 [#58]: https://github.com/jprichardson/node-fs-extra/issues/58 [#57]: https://github.com/jprichardson/node-fs-extra/issues/57 [#56]: https://github.com/jprichardson/node-fs-extra/issues/56 [#55]: https://github.com/jprichardson/node-fs-extra/issues/55 [#54]: https://github.com/jprichardson/node-fs-extra/issues/54 [#53]: https://github.com/jprichardson/node-fs-extra/issues/53 [#52]: https://github.com/jprichardson/node-fs-extra/pull/52 [#51]: https://github.com/jprichardson/node-fs-extra/pull/51 [#50]: https://github.com/jprichardson/node-fs-extra/issues/50 [#49]: https://github.com/jprichardson/node-fs-extra/pull/49 [#48]: https://github.com/jprichardson/node-fs-extra/issues/48 [#47]: https://github.com/jprichardson/node-fs-extra/issues/47 [#46]: https://github.com/jprichardson/node-fs-extra/pull/46 [#45]: https://github.com/jprichardson/node-fs-extra/pull/45 [#44]: https://github.com/jprichardson/node-fs-extra/pull/44 [#43]: https://github.com/jprichardson/node-fs-extra/issues/43 [#42]: https://github.com/jprichardson/node-fs-extra/issues/42 [#41]: https://github.com/jprichardson/node-fs-extra/pull/41 [#40]: https://github.com/jprichardson/node-fs-extra/issues/40 [#39]: https://github.com/jprichardson/node-fs-extra/pull/39 [#38]: https://github.com/jprichardson/node-fs-extra/pull/38 [#37]: https://github.com/jprichardson/node-fs-extra/issues/37 [#36]: https://github.com/jprichardson/node-fs-extra/pull/36 [#35]: https://github.com/jprichardson/node-fs-extra/pull/35 [#34]: https://github.com/jprichardson/node-fs-extra/issues/34 [#33]: https://github.com/jprichardson/node-fs-extra/pull/33 [#32]: https://github.com/jprichardson/node-fs-extra/issues/32 [#31]: https://github.com/jprichardson/node-fs-extra/issues/31 [#30]: https://github.com/jprichardson/node-fs-extra/issues/30 [#29]: https://github.com/jprichardson/node-fs-extra/issues/29 [#28]: https://github.com/jprichardson/node-fs-extra/issues/28 [#27]: https://github.com/jprichardson/node-fs-extra/issues/27 [#26]: https://github.com/jprichardson/node-fs-extra/issues/26 [#25]: https://github.com/jprichardson/node-fs-extra/pull/25 [#24]: https://github.com/jprichardson/node-fs-extra/issues/24 [#23]: https://github.com/jprichardson/node-fs-extra/issues/23 [#22]: https://github.com/jprichardson/node-fs-extra/pull/22 [#21]: https://github.com/jprichardson/node-fs-extra/issues/21 [#20]: https://github.com/jprichardson/node-fs-extra/issues/20 [#19]: https://github.com/jprichardson/node-fs-extra/issues/19 [#18]: https://github.com/jprichardson/node-fs-extra/pull/18 [#17]: https://github.com/jprichardson/node-fs-extra/issues/17 [#16]: https://github.com/jprichardson/node-fs-extra/pull/16 [#15]: https://github.com/jprichardson/node-fs-extra/issues/15 [#14]: https://github.com/jprichardson/node-fs-extra/issues/14 [#13]: https://github.com/jprichardson/node-fs-extra/issues/13 [#12]: https://github.com/jprichardson/node-fs-extra/issues/12 [#11]: https://github.com/jprichardson/node-fs-extra/issues/11 [#10]: https://github.com/jprichardson/node-fs-extra/issues/10 [#9]: https://github.com/jprichardson/node-fs-extra/issues/9 [#8]: https://github.com/jprichardson/node-fs-extra/pull/8 [#6]: https://github.com/jprichardson/node-fs-extra/issues/6 [#5]: https://github.com/jprichardson/node-fs-extra/issues/5 [#4]: https://github.com/jprichardson/node-fs-extra/issues/4 [#3]: https://github.com/jprichardson/node-fs-extra/pull/3 [#2]: https://github.com/jprichardson/node-fs-extra/issues/2 [#1]: https://github.com/jprichardson/node-fs-extra/issues/1"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/README.md","tags":[],"body":"Node.js: fs-extra ================= [![build status](https://api.travis-ci.org/jprichardson/node-fs-extra.svg)](http://travis-ci.org/jprichardson/node-fs-extra) [![windows Build status](https://img.shields.io/appveyor/ci/jprichardson/node-fs-extra/master.svg?label=windows%20build)](https://ci.appveyor.com/project/jprichardson/node-fs-extra/branch/master) [![downloads per month](http://img.shields.io/npm/dm/fs-extra.svg)](https://www.npmjs.org/package/fs-extra) [![Coverage Status](https://img.shields.io/coveralls/jprichardson/node-fs-extra.svg)](https://coveralls.io/r/jprichardson/node-fs-extra) `fs-extra` adds file system methods that aren't included in the native `fs` module. It is a drop in replacement for `fs`. **NOTE (2016-01-13):** Node v0.10 will be unsupported AFTER Ubuntu LTS releases their next version AND [Amazon Lambda upgrades](http://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html) its Node.js runtime from v0.10. I anticipate this will happen around late spring / summer 2016. Please prepare accordingly. After this, we'll make a strong push for a 1.0.0 release. Why? ---- I got tired of including `mkdirp`, `rimraf`, and `cp -r` in most of my projects. Installation ------------ npm install --save fs-extra Usage ----- `fs-extra` is a drop in replacement for native `fs`. All methods in `fs` are unmodified and attached to `fs-extra`. You don't ever need to include the original `fs` module again: ```js var fs = require('fs') // this is no longer necessary ``` you can now do this: ```js var fs = require('fs-extra') ``` or if you prefer to make it clear that you're using `fs-extra` and not `fs`, you may want to name your `fs` variable `fse` like so: ```js var fse = require('fs-extra') ``` you can also keep both, but it's redundant: ```js var fs = require('fs') var fse = require('fs-extra') ``` Sync vs Async ------------- Most methods are async by default (they take a callback with an `Error` as first argument). Sync methods on the other hand will throw if an error occurs. Example: ```js var fs = require('fs-extra') fs.copy('/tmp/myfile', '/tmp/mynewfile', function (err) { if (err) return console.error(err) console.log(\"success!\") }); try { fs.copySync('/tmp/myfile', '/tmp/mynewfile') console.log(\"success!\") } catch (err) { console.error(err) } ``` Methods ------- - [copy](#copy) - [copySync](#copy) - [createOutputStream](#createoutputstreamfile-options) - [emptyDir](#emptydirdir-callback) - [emptyDirSync](#emptydirdir-callback) - [ensureFile](#ensurefilefile-callback) - [ensureFileSync](#ensurefilefile-callback) - [ensureDir](#ensuredirdir-callback) - [ensureDirSync](#ensuredirdir-callback) - [ensureLink](#ensurelinksrcpath-dstpath-callback) - [ensureLinkSync](#ensurelinksrcpath-dstpath-callback) - [ensureSymlink](#ensuresymlinksrcpath-dstpath-type-callback) - [ensureSymlinkSync](#ensuresymlinksrcpath-dstpath-type-callback) - [mkdirs](#mkdirsdir-callback) - [mkdirsSync](#mkdirsdir-callback) - [move](#movesrc-dest-options-callback) - [outputFile](#outputfilefile-data-options-callback) - [outputFileSync](#outputfilefile-data-options-callback) - [outputJson](#outputjsonfile-data-options-callback) - [outputJsonSync](#outputjsonfile-data-options-callback) - [readJson](#readjsonfile-options-callback) - [readJsonSync](#readjsonfile-options-callback) - [remove](#removedir-callback) - [removeSync](#removedir-callback) - [walk](#walk) - [writeJson](#writejsonfile-object-options-callback) - [writeJsonSync](#writejsonfile-object-options-callback) **NOTE:** You can still use the native Node.js methods. They are copied over to `fs-extra`. ### copy() **copy(src, dest, [options], callback)** Copy a file or directory. The directory can have contents. Like `cp -r`. Options: - clobber (boolean): overwrite existing file or directory - preserveTimestamps (boolean): will set last modification and access times to the ones of the original source files, default is `false`. - filter: Function or RegExp to filter copied files. If function, return true to include, false to exclude. If RegExp, same as function, where `filter` is `filter.test`. Sync: `copySync()` Example: ```js var fs = require('fs-extra') fs.copy('/tmp/myfile', '/tmp/mynewfile', function (err) { if (err) return console.error(err) console.log(\"success!\") }) // copies file fs.copy('/tmp/mydir', '/tmp/mynewdir', function (err) { if (err) return console.error(err) console.log('success!') }) // copies directory, even if it has subdirectories or files ``` ### createOutputStream(file, [options]) Exactly like `createWriteStream`, but if the directory does not exist, it's created. Examples: ```js var fs = require('fs-extra') // if /tmp/some does not exist, it is created var ws = fs.createOutputStream('/tmp/some/file.txt') ws.write('hello\\n') ``` Note on naming: you'll notice that fs-extra has some methods like `fs.outputJson`, `fs.outputFile`, etc that use the word `output` to denote that if the containing directory does not exist, it should be created. If you can think of a better succinct nomenclature for these methods, please open an issue for discussion. Thanks. ### emptyDir(dir, [callback]) Ensures that a directory is empty. Deletes directory contents if the directory is not empty. If the directory does not exist, it is created. The directory itself is not deleted. Alias: `emptydir()` Sync: `emptyDirSync()`, `emptydirSync()` Example: ```js var fs = require('fs-extra') // assume this directory has a lot of files and folders fs.emptyDir('/tmp/some/dir', function (err) { if (!err) console.log('success!') }) ``` ### ensureFile(file, callback) Ensures that the file exists. If the file that is requested to be created is in directories that do not exist, these directories are created. If the file already exists, it is **NOT MODIFIED**. Alias: `createFile()` Sync: `createFileSync()`,`ensureFileSync()` Example: ```js var fs = require('fs-extra') var file = '/tmp/this/path/does/not/exist/file.txt' fs.ensureFile(file, function (err) { console.log(err) // => null // file has now been created, including the directory it is to be placed in }) ``` ### ensureDir(dir, callback) Ensures that the directory exists. If the directory structure does not exist, it is created. Sync: `ensureDirSync()` Example: ```js var fs = require('fs-extra') var dir = '/tmp/this/path/does/not/exist' fs.ensureDir(dir, function (err) { console.log(err) // => null // dir has now been created, including the directory it is to be placed in }) ``` ### ensureLink(srcpath, dstpath, callback) Ensures that the link exists. If the directory structure does not exist, it is created. Sync: `ensureLinkSync()` Example: ```js var fs = require('fs-extra') var srcpath = '/tmp/file.txt' var dstpath = '/tmp/this/path/does/not/exist/file.txt' fs.ensureLink(srcpath, dstpath, function (err) { console.log(err) // => null // link has now been created, including the directory it is to be placed in }) ``` ### ensureSymlink(srcpath, dstpath, [type], callback) Ensures that the symlink exists. If the directory structure does not exist, it is created. Sync: `ensureSymlinkSync()` Example: ```js var fs = require('fs-extra') var srcpath = '/tmp/file.txt' var dstpath = '/tmp/this/path/does/not/exist/file.txt' fs.ensureSymlink(srcpath, dstpath, function (err) { console.log(err) // => null // symlink has now been created, including the directory it is to be placed in }) ``` ### mkdirs(dir, callback) Creates a directory. If the parent hierarchy doesn't exist, it's created. Like `mkdir -p`. Alias: `mkdirp()` Sync: `mkdirsSync()` / `mkdirpSync()` Examples: ```js var fs = require('fs-extra') fs.mkdirs('/tmp/some/long/path/that/prob/doesnt/exist', function (err) { if (err) return console.error(err) console.log(\"success!\") }) fs.mkdirsSync('/tmp/another/path') ``` ### move(src, dest, [options], callback) Moves a file or directory, even across devices. Options: - clobber (boolean): overwrite existing file or directory - limit (number): number of concurrent moves, see ncp for more information Example: ```js var fs = require('fs-extra') fs.move('/tmp/somefile', '/tmp/does/not/exist/yet/somefile', function (err) { if (err) return console.error(err) console.log(\"success!\") }) ``` ### outputFile(file, data, [options], callback) Almost the same as `writeFile` (i.e. it [overwrites](http://pages.citebite.com/v2o5n8l2f5reb)), except that if the parent directory does not exist, it's created. `options` are what you'd pass to [`fs.writeFile()`](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback). Sync: `outputFileSync()` Example: ```js var fs = require('fs-extra') var file = '/tmp/this/path/does/not/exist/file.txt' fs.outputFile(file, 'hello!', function (err) { console.log(err) // => null fs.readFile(file, 'utf8', function (err, data) { console.log(data) // => hello! }) }) ``` ### outputJson(file, data, [options], callback) Almost the same as `writeJson`, except that if the directory does not exist, it's created. `options` are what you'd pass to [`jsonFile.writeFile()`](https://github.com/jprichardson/node-jsonfile#writefilefilename-options-callback). Alias: `outputJSON()` Sync: `outputJsonSync()`, `outputJSONSync()` Example: ```js var fs = require('fs-extra') var file = '/tmp/this/path/does/not/exist/file.txt' fs.outputJson(file, {name: 'JP'}, function (err) { console.log(err) // => null fs.readJson(file, function(err, data) { console.log(data.name) // => JP }) }) ``` ### readJson(file, [options], callback) Reads a JSON file and then parses it into an object. `options` are the same that you'd pass to [`jsonFile.readFile`](https://github.com/jprichardson/node-jsonfile#readfilefilename-options-callback). Alias: `readJSON()` Sync: `readJsonSync()`, `readJSONSync()` Example: ```js var fs = require('fs-extra') fs.readJson('./package.json', function (err, packageObj) { console.log(packageObj.version) // => 0.1.3 }) ``` `readJsonSync()` can take a `throws` option set to `false` and it won't throw if the JSON is invalid. Example: ```js var fs = require('fs-extra') var file = path.join('/tmp/some-invalid.json') var data = '{not valid JSON' fs.writeFileSync(file, data) var obj = fs.readJsonSync(file, {throws: false}) console.log(obj) // => null ``` ### remove(dir, callback) Removes a file or directory. The directory can have contents. Like `rm -rf`. Sync: `removeSync()` Examples: ```js var fs = require('fs-extra') fs.remove('/tmp/myfile', function (err) { if (err) return console.error(err) console.log('success!') }) fs.removeSync('/home/jprichardson') //I just deleted my entire HOME directory. ``` ### walk() **walk(dir, [streamOptions])** The function `walk()` from the module [`klaw`](https://github.com/jprichardson/node-klaw). Returns a [Readable stream](https://nodejs.org/api/stream.html#stream_class_stream_readable) that iterates through every file and directory starting with `dir` as the root. Every `read()` or `data` event returns an object with two properties: `path` and `stats`. `path` is the full path of the file and `stats` is an instance of [fs.Stats](https://nodejs.org/api/fs.html#fs_class_fs_stats). Streams 1 (push) example: ```js var items = [] // files, directories, symlinks, etc fse.walk(TEST_DIR) .on('data', function (item) { items.push(item.path) }) .on('end', function () { console.dir(items) // => [ ... array of files] }) ``` Streams 2 & 3 (pull) example: ```js var items = [] // files, directories, symlinks, etc fse.walk(TEST_DIR) .on('readable', function () { var item while ((item = this.read())) { items.push(item.path) } }) .on('end', function () { console.dir(items) // => [ ... array of files] }) ``` If you're not sure of the differences on Node.js streams 1, 2, 3 then I'd recommend this resource as a good starting point: https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/. **See [`klaw` documentation](https://github.com/jprichardson/node-klaw) for more detailed usage.** ### writeJson(file, object, [options], callback) Writes an object to a JSON file. `options` are the same that you'd pass to [`jsonFile.writeFile()`](https://github.com/jprichardson/node-jsonfile#writefilefilename-options-callback). Alias: `writeJSON()` Sync: `writeJsonSync()`, `writeJSONSync()` Example: ```js var fs = require('fs-extra') fs.writeJson('./package.json', {name: 'fs-extra'}, function (err) { console.log(err) }) ``` Third Party ----------- ### Promises Use [Bluebird](https://github.com/petkaantonov/bluebird). See https://github.com/petkaantonov/bluebird/blob/master/API.md#promisification. `fs-extra` is explicitly listed as supported. ```js var Promise = require('bluebird') var fs = Promise.promisifyAll(require('fs-extra')) ``` Or you can use the package [`fs-extra-promise`](https://github.com/overlookmotel/fs-extra-promise) that marries the two together. ### TypeScript If you like TypeScript, you can use `fs-extra` with it: https://github.com/borisyankov/DefinitelyTyped/tree/master/fs-extra ### File / Directory Watching If you want to watch for changes to files or directories, then you should use [chokidar](https://github.com/paulmillr/chokidar). ### Misc. - [mfs](https://github.com/cadorn/mfs) - Monitor your fs-extra calls. Hacking on fs-extra ------------------- Wanna hack on `fs-extra`? Great! Your help is needed! [fs-extra is one of the most depended upon Node.js packages](http://nodei.co/npm/fs-extra.png?downloads=true&downloadRank=true&stars=true). This project uses [JavaScript Standard Style](https://github.com/feross/standard) - if the name or style choices bother you, you're gonna have to get over it :) If `standard` is good enough for `npm`, it's good enough for `fs-extra`. [![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard) What's needed? - First, take a look at existing issues. Those are probably going to be where the priority lies. - More tests for edge cases. Specifically on different platforms. There can never be enough tests. - Really really help with the Windows tests. See appveyor outputs for more info. - Improve test coverage. See coveralls output for more info. - A directory walker. Probably this one: https://github.com/thlorenz/readdirp imported into `fs-extra`. - After the directory walker is integrated, any function that needs to traverse directories like `copy`, `remove`, or `mkdirs` should be built on top of it. Note: If you make any big changes, **you should definitely post an issue for discussion first.** Naming ------ I put a lot of thought into the naming of these functions. Inspired by @coolaj86's request. So he deserves much of the credit for raising the issue. See discussion(s) here: * https://github.com/jprichardson/node-fs-extra/issues/2 * https://github.com/flatiron/utile/issues/11 * https://github.com/ryanmcgrath/wrench-js/issues/29 * https://github.com/substack/node-mkdirp/issues/17 First, I believe that in as many cases as possible, the [Node.js naming schemes](http://nodejs.org/api/fs.html) should be chosen. However, there are problems with the Node.js own naming schemes. For example, `fs.readFile()` and `fs.readdir()`: the **F** is capitalized in *File* and the **d** is not capitalized in *dir*. Perhaps a bit pedantic, but they should still be consistent. Also, Node.js has chosen a lot of POSIX naming schemes, which I believe is great. See: `fs.mkdir()`, `fs.rmdir()`, `fs.chown()`, etc. We have a dilemma though. How do you consistently name methods that perform the following POSIX commands: `cp`, `cp -r`, `mkdir -p`, and `rm -rf`? My perspective: when in doubt, err on the side of simplicity. A directory is just a hierarchical grouping of directories and files. Consider that for a moment. So when you want to copy it or remove it, in most cases you'll want to copy or remove all of its contents. When you want to create a directory, if the directory that it's suppose to be contained in does not exist, then in most cases you'll want to create that too. So, if you want to remove a file or a directory regardless of whether it has contents, just call `fs.remove(path)`. If you want to copy a file or a directory whether it has contents, just call `fs.copy(source, destination)`. If you want to create a directory regardless of whether its parent directories exist, just call `fs.mkdirs(path)` or `fs.mkdirp(path)`. Credit ------ `fs-extra` wouldn't be possible without using the modules from the following authors: - [Isaac Shlueter](https://github.com/isaacs) - [Charlie McConnel](https://github.com/avianflu) - [James Halliday](https://github.com/substack) - [Andrew Kelley](https://github.com/andrewrk) License ------- Licensed under MIT Copyright (c) 2011-2016 [JP Richardson](https://github.com/jprichardson) [1]: http://nodejs.org/docs/latest/api/fs.html [jsonfile]: https://github.com/jprichardson/node-jsonfile"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/graceful-fs/README.md","tags":[],"body":"# graceful-fs graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors. ## Improvements over [fs module](http://api.nodejs.org/fs.html) * Queues up `open` and `readdir` calls, and retries them once something closes if there is an EMFILE error from too many file descriptors. * fixes `lchmod` for Node versions prior to 0.6.2. * implements `fs.lutimes` if possible. Otherwise it becomes a noop. * ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or `lchown` if the user isn't root. * makes `lchmod` and `lchown` become noops, if not available. * retries reading a file if `read` results in EAGAIN error. On Windows, it retries renaming a file for up to one second if `EACCESS` or `EPERM` error occurs, likely because antivirus software has locked the directory. ## USAGE ```javascript // use just like fs var fs = require('graceful-fs') // now go and do stuff with it... fs.readFileSync('some-file-or-whatever') ``` ## Global Patching If you want to patch the global fs module (or any other fs-like module) you can do this: ```javascript // Make sure to read the caveat below. var realFs = require('fs') var gracefulFs = require('graceful-fs') gracefulFs.gracefulify(realFs) ``` This should only ever be done at the top-level application layer, in order to delay on EMFILE errors from any fs-using dependencies. You should **not** do this in a library, because it can cause unexpected delays in other parts of the program. ## Changes This module is fairly stable at this point, and used by a lot of things. That being said, because it implements a subtle behavior change in a core part of the node API, even modest changes can be extremely breaking, and the versioning is thus biased towards bumping the major when in doubt. The main change between major versions has been switching between providing a fully-patched `fs` module vs monkey-patching the node core builtin, and the approach by which a non-monkey-patched `fs` was created. The goal is to trade `EMFILE` errors for slower fs operations. So, if you try to open a zillion files, rather than crashing, `open` operations will be queued up and wait for something else to `close`. There are advantages to each approach. Monkey-patching the fs means that no `EMFILE` errors can possibly occur anywhere in your application, because everything is using the same core `fs` module, which is patched. However, it can also obviously cause undesirable side-effects, especially if the module is loaded multiple times. Implementing a separate-but-identical patched `fs` module is more surgical (and doesn't run the risk of patching multiple times), but also imposes the challenge of keeping in sync with the core module. The current approach loads the `fs` module, and then creates a lookalike object that has all the same methods, except a few that are patched. It is safe to use in all versions of Node from 0.8 through 7.0. ### v4 * Do not monkey-patch the fs module. This module may now be used as a drop-in dep, and users can opt into monkey-patching the fs builtin if their app requires it. ### v3 * Monkey-patch fs, because the eval approach no longer works on recent node. * fixed possible type-error throw if rename fails on windows * verify that we *never* get EMFILE errors * Ignore ENOSYS from chmod/chown * clarify that graceful-fs must be used as a drop-in ### v2.1.0 * Use eval rather than monkey-patching fs. * readdir: Always sort the results * win32: requeue a file if error has an OK status ### v2.0 * A return to monkey patching * wrap process.cwd ### v1.1 * wrap readFile * Wrap fs.writeFile. * readdir protection * Don't clobber the fs builtin * Handle fs.read EAGAIN errors by trying again * Expose the curOpen counter * No-op lchown/lchmod if not implemented * fs.rename patch only for win32 * Patch fs.rename to handle AV software on Windows * Close #4 Chown should not fail on einval or eperm if non-root * Fix isaacs/fstream#1 Only wrap fs one time * Fix #3 Start at 1024 max files, then back off on EMFILE * lutimes that doens't blow up on Linux * A full on-rewrite using a queue instead of just swallowing the EMFILE error * Wrap Read/Write streams as well ### 1.0 * Update engines for node 0.6 * Be lstat-graceful on Windows * first"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/jsonfile/CHANGELOG.md","tags":[],"body":"2.3.1 / 2016-05-13 ------------------ - fix to support BOM. [#45][#45] 2.3.0 / 2016-04-16 ------------------ - add `throws` to `readFile()`. See [#39][#39] - add support for any arbitrary `fs` module. Useful with [mock-fs](https://www.npmjs.com/package/mock-fs) 2.2.3 / 2015-10-14 ------------------ - include file name in parse error. See: https://github.com/jprichardson/node-jsonfile/pull/34 2.2.2 / 2015-09-16 ------------------ - split out tests into separate files - fixed `throws` when set to `true` in `readFileSync()`. See: https://github.com/jprichardson/node-jsonfile/pull/33 2.2.1 / 2015-06-25 ------------------ - fixed regression when passing in string as encoding for options in `writeFile()` and `writeFileSync()`. See: https://github.com/jprichardson/node-jsonfile/issues/28 2.2.0 / 2015-06-25 ------------------ - added `options.spaces` to `writeFile()` and `writeFileSync()` 2.1.2 / 2015-06-22 ------------------ - fixed if passed `readFileSync(file, 'utf8')`. See: https://github.com/jprichardson/node-jsonfile/issues/25 2.1.1 / 2015-06-19 ------------------ - fixed regressions if `null` is passed for options. See: https://github.com/jprichardson/node-jsonfile/issues/24 2.1.0 / 2015-06-19 ------------------ - cleanup: JavaScript Standard Style, rename files, dropped terst for assert - methods now support JSON revivers/replacers 2.0.1 / 2015-05-24 ------------------ - update license attribute https://github.com/jprichardson/node-jsonfile/pull/21 2.0.0 / 2014-07-28 ------------------ * added `\\n` to end of file on write. [#14](https://github.com/jprichardson/node-jsonfile/pull/14) * added `options.throws` to `readFileSync()` * dropped support for Node v0.8 1.2.0 / 2014-06-29 ------------------ * removed semicolons * bugfix: passed `options` to `fs.readFile` and `fs.readFileSync`. This technically changes behavior, but changes it according to docs. [#12][#12] 1.1.1 / 2013-11-11 ------------------ * fixed catching of callback bug (ffissore / #5) 1.1.0 / 2013-10-11 ------------------ * added `options` param to methods, (seanodell / #4) 1.0.1 / 2013-09-05 ------------------ * removed `homepage` field from package.json to remove NPM warning 1.0.0 / 2013-06-28 ------------------ * added `.npmignore`, #1 * changed spacing default from `4` to `2` to follow Node conventions 0.0.1 / 2012-09-10 ------------------ * Initial release. [#45]: https://github.com/jprichardson/node-jsonfile/issues/45 \"Reading of UTF8-encoded (w/ BOM) files fails\" [#44]: https://github.com/jprichardson/node-jsonfile/issues/44 \"Extra characters in written file\" [#43]: https://github.com/jprichardson/node-jsonfile/issues/43 \"Prettyfy json when written to file\" [#42]: https://github.com/jprichardson/node-jsonfile/pull/42 \"Moved fs.readFileSync within the try/catch\" [#41]: https://github.com/jprichardson/node-jsonfile/issues/41 \"Linux: Hidden file not working\" [#40]: https://github.com/jprichardson/node-jsonfile/issues/40 \"autocreate folder doesnt work from Path-value\" [#39]: https://github.com/jprichardson/node-jsonfile/pull/39 \"Add `throws` option for readFile (async)\" [#38]: https://github.com/jprichardson/node-jsonfile/pull/38 \"Update README.md writeFile[Sync] signature\" [#37]: https://github.com/jprichardson/node-jsonfile/pull/37 \"support append file\" [#36]: https://github.com/jprichardson/node-jsonfile/pull/36 \"Add typescript definition file.\" [#35]: https://github.com/jprichardson/node-jsonfile/pull/35 \"Add typescript definition file.\" [#34]: https://github.com/jprichardson/node-jsonfile/pull/34 \"readFile JSON parse error includes filename\" [#33]: https://github.com/jprichardson/node-jsonfile/pull/33 \"fix throw->throws typo in readFileSync()\" [#32]: https://github.com/jprichardson/node-jsonfile/issues/32 \"readFile & readFileSync can possible have strip-comments as an option?\" [#31]: https://github.com/jprichardson/node-jsonfile/pull/31 \"[Modify] Support string include is unicode escape string\" [#30]: https://github.com/jprichardson/node-jsonfile/issues/30 \"How to use Jsonfile package in Meteor.js App?\" [#29]: https://github.com/jprichardson/node-jsonfile/issues/29 \"writefile callback if no error?\" [#28]: https://github.com/jprichardson/node-jsonfile/issues/28 \"writeFile options argument broken \" [#27]: https://github.com/jprichardson/node-jsonfile/pull/27 \"Use svg instead of png to get better image quality\" [#26]: https://github.com/jprichardson/node-jsonfile/issues/26 \"Breaking change to fs-extra\" [#25]: https://github.com/jprichardson/node-jsonfile/issues/25 \"support string encoding param for read methods\" [#24]: https://github.com/jprichardson/node-jsonfile/issues/24 \"readFile: Passing in null options with a callback throws an error\" [#23]: https://github.com/jprichardson/node-jsonfile/pull/23 \"Add appendFile and appendFileSync\" [#22]: https://github.com/jprichardson/node-jsonfile/issues/22 \"Default value for spaces in readme.md is outdated\" [#21]: https://github.com/jprichardson/node-jsonfile/pull/21 \"Update license attribute\" [#20]: https://github.com/jprichardson/node-jsonfile/issues/20 \"Add simple caching functionallity\" [#19]: https://github.com/jprichardson/node-jsonfile/pull/19 \"Add appendFileSync method\" [#18]: https://github.com/jprichardson/node-jsonfile/issues/18 \"Add updateFile and updateFileSync methods\" [#17]: https://github.com/jprichardson/node-jsonfile/issues/17 \"seem read & write sync has sequentially problem\" [#16]: https://github.com/jprichardson/node-jsonfile/pull/16 \"export spaces defaulted to null\" [#15]: https://github.com/jprichardson/node-jsonfile/issues/15 \"`jsonfile.spaces` should default to `null`\" [#14]: https://github.com/jprichardson/node-jsonfile/pull/14 \"Add EOL at EOF\" [#13]: https://github.com/jprichardson/node-jsonfile/issues/13 \"Add a final newline\" [#12]: https://github.com/jprichardson/node-jsonfile/issues/12 \"readFile doesn't accept options\" [#11]: https://github.com/jprichardson/node-jsonfile/pull/11 \"Added try,catch to readFileSync\" [#10]: https://github.com/jprichardson/node-jsonfile/issues/10 \"No output or error from writeFile\" [#9]: https://github.com/jprichardson/node-jsonfile/pull/9 \"Change 'js' to 'jf' in example.\" [#8]: https://github.com/jprichardson/node-jsonfile/pull/8 \"Updated forgotten module.exports to me.\" [#7]: https://github.com/jprichardson/node-jsonfile/pull/7 \"Add file name in error message\" [#6]: https://github.com/jprichardson/node-jsonfile/pull/6 \"Use graceful-fs when possible\" [#5]: https://github.com/jprichardson/node-jsonfile/pull/5 \"Jsonfile doesn't behave nicely when used inside a test suite.\" [#4]: https://github.com/jprichardson/node-jsonfile/pull/4 \"Added options parameter to writeFile and writeFileSync\" [#3]: https://github.com/jprichardson/node-jsonfile/issues/3 \"test2\" [#2]: https://github.com/jprichardson/node-jsonfile/issues/2 \"homepage field must be a string url. Deleted.\" [#1]: https://github.com/jprichardson/node-jsonfile/pull/1 \"adding an `.npmignore` file\""},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/jsonfile/README.md","tags":[],"body":"Node.js - jsonfile ================ Easily read/write JSON files. [![npm Package](https://img.shields.io/npm/v/jsonfile.svg?style=flat-square)](https://www.npmjs.org/package/jsonfile) [![build status](https://secure.travis-ci.org/jprichardson/node-jsonfile.svg)](http://travis-ci.org/jprichardson/node-jsonfile) [![windows Build status](https://img.shields.io/appveyor/ci/jprichardson/node-jsonfile/master.svg?label=windows%20build)](https://ci.appveyor.com/project/jprichardson/node-jsonfile/branch/master) Why? ---- Writing `JSON.stringify()` and then `fs.writeFile()` and `JSON.parse()` with `fs.readFile()` enclosed in `try/catch` blocks became annoying. Installation ------------ npm install --save jsonfile API --- ### readFile(filename, [options], callback) `options` (`object`, default `undefined`): Pass in any `fs.readFile` options or set `reviver` for a [JSON reviver](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse). - `throws` (`boolean`, default: `true`). If `JSON.parse` throws an error, pass this error to the callback. If `false`, returns `null` for the object. ```js var jsonfile = require('jsonfile') var file = '/tmp/data.json' jsonfile.readFile(file, function(err, obj) { console.dir(obj) }) ``` ### readFileSync(filename, [options]) `options` (`object`, default `undefined`): Pass in any `fs.readFileSync` options or set `reviver` for a [JSON reviver](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse). - `throws` (`boolean`, default: `true`). If `JSON.parse` throws an error, throw the error. If `false`, returns `null` for the object. ```js var jsonfile = require('jsonfile') var file = '/tmp/data.json' console.dir(jsonfile.readFileSync(file)) ``` ### writeFile(filename, obj, [options], callback) `options`: Pass in any `fs.writeFile` options or set `replacer` for a [JSON replacer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify). Can also pass in `spaces`. ```js var jsonfile = require('jsonfile') var file = '/tmp/data.json' var obj = {name: 'JP'} jsonfile.writeFile(file, obj, function (err) { console.error(err) }) ``` **formatting with spaces:** ```js var jsonfile = require('jsonfile') var file = '/tmp/data.json' var obj = {name: 'JP'} jsonfile.writeFile(file, obj, {spaces: 2}, function(err) { console.error(err) }) ``` ### writeFileSync(filename, obj, [options]) `options`: Pass in any `fs.writeFileSync` options or set `replacer` for a [JSON replacer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify). Can also pass in `spaces`. ```js var jsonfile = require('jsonfile') var file = '/tmp/data.json' var obj = {name: 'JP'} jsonfile.writeFileSync(file, obj) ``` **formatting with spaces:** ```js var jsonfile = require('jsonfile') var file = '/tmp/data.json' var obj = {name: 'JP'} jsonfile.writeFileSync(file, obj, {spaces: 2}) ``` ### spaces Global configuration to set spaces to indent JSON files. **default:** `null` ```js var jsonfile = require('jsonfile') jsonfile.spaces = 4 var file = '/tmp/data.json' var obj = {name: 'JP'} // json file has four space indenting now jsonfile.writeFile(file, obj, function (err) { console.error(err) }) ``` Note, it's bound to `this.spaces`. So, if you do this: ```js var myObj = {} myObj.writeJsonSync = jsonfile.writeFileSync // => this.spaces = null ``` Could do the following: ```js var jsonfile = require('jsonfile') jsonfile.spaces = 4 jsonfile.writeFileSync(file, obj) // will have 4 spaces indentation var myCrazyObj = {spaces: 32} myCrazyObj.writeJsonSync = jsonfile.writeFileSync myCrazyObj.writeJsonSync(file, obj) // will have 32 space indentation myCrazyObj.writeJsonSync(file, obj, {spaces: 2}) // will have only 2 ``` License ------- (MIT License) Copyright 2012-2016, JP Richardson"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/klaw/CHANGELOG.md","tags":[],"body":"1.3.0 / 2016-06-09 ------------------ ### Added - `filter` option to pre-filter and not walk directories. 1.2.0 / 2016-04-16 ------------------ - added support for custom `fs` implementation. Useful for https://github.com/tschaub/mock-fs 1.1.3 / 2015-12-23 ------------------ - bugfix: if `readdir` error, got hung up. See: https://github.com/jprichardson/node-klaw/issues/1 1.1.2 / 2015-11-12 ------------------ - assert that param `dir` is a `string` 1.1.1 / 2015-10-25 ------------------ - bug fix, options not being passed 1.1.0 / 2015-10-25 ------------------ - added `queueMethod` and `pathSorter` to `options` to affect searching strategy. 1.0.0 / 2015-10-25 ------------------ - removed unused `filter` param - bugfix: always set `streamOptions` to `objectMode` - simplified, converted from push mode (streams 1) to proper pull mode (streams 3) 0.1.0 / 2015-10-25 ------------------ - initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/klaw/README.md","tags":[],"body":"Node.js - klaw ============== A Node.js file system walker extracted from [fs-extra](https://github.com/jprichardson/node-fs-extra). [![npm Package](https://img.shields.io/npm/v/klaw.svg?style=flat-square)](https://www.npmjs.org/package/klaw) [![build status](https://api.travis-ci.org/jprichardson/node-klaw.svg)](http://travis-ci.org/jprichardson/node-klaw) [![windows build status](https://ci.appveyor.com/api/projects/status/github/jprichardson/node-klaw?branch=master&svg=true)](https://ci.appveyor.com/project/jprichardson/node-klaw/branch/master) Install ------- npm i --save klaw Name ---- `klaw` is `walk` backwards :p Usage ----- ### klaw(directory, [options]) Returns a [Readable stream](https://nodejs.org/api/stream.html#stream_class_stream_readable) that iterates through every file and directory starting with `dir` as the root. Every `read()` or `data` event returns an object with two properties: `path` and `stats`. `path` is the full path of the file and `stats` is an instance of [fs.Stats](https://nodejs.org/api/fs.html#fs_class_fs_stats). - `directory`: The directory to recursively walk. Type `string`. - `options`: [Readable stream options](https://nodejs.org/api/stream.html#stream_new_stream_readable_options) and the following: - `queueMethod` (`string`, default: `'shift'`): Either `'shift'` or `'pop'`. On `readdir()` array, call either `shift()` or `pop()`. - `pathSorter` (`function`, default: `undefined`): Sorting [function for Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort). - `fs` (`object`, default: `require('fs')`): Use this to hook into the `fs` methods or to use [`mock-fs`](https://github.com/tschaub/mock-fs) - `filter` (`function`, default: `undefined`): Filtering [function for Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) **Streams 1 (push) example:** ```js var klaw = require('klaw') var items = [] // files, directories, symlinks, etc klaw('/some/dir') .on('data', function (item) { items.push(item.path) }) .on('end', function () { console.dir(items) // => [ ... array of files] }) ``` **Streams 2 & 3 (pull) example:** ```js var klaw = require('klaw') var items = [] // files, directories, symlinks, etc klaw('/some/dir') .on('readable', function () { var item while ((item = this.read())) { items.push(item.path) } }) .on('end', function () { console.dir(items) // => [ ... array of files] }) ``` If you're not sure of the differences on Node.js streams 1, 2, 3 then I'd recommend this resource as a good starting point: https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/. ### Error Handling Listen for the `error` event. Example: ```js var klaw = require('klaw') klaw('/some/dir') .on('readable', function () { var item while ((item = this.read())) { // do something with the file } }) .on('error', function (err, item) { console.log(err.message) console.log(item.path) // the file the error occurred on }) .on('end', function () { console.dir(items) // => [ ... array of files] }) ``` ### Aggregation / Filtering / Executing Actions (Through Streams) On many occasions you may want to filter files based upon size, extension, etc. Or you may want to aggregate stats on certain file types. Or maybe you want to perform an action on certain file types. You should use the module [`through2`](https://www.npmjs.com/package/through2) to easily accomplish this. Install `through2`: npm i --save through2 **Example (skipping directories):** ```js var klaw = require('klaw') var through2 = require('through2') var excludeDirFilter = through2.obj(function (item, enc, next) { if (!item.stats.isDirectory()) this.push(item) next() }) var items = [] // files, directories, symlinks, etc klaw('/some/dir') .pipe(excludeDirFilter) .on('data', function (item) { items.push(item.path) }) .on('end', function () { console.dir(items) // => [ ... array of files without directories] }) ``` **Example (ignore hidden directories):** ```js var klaw = require('klaw') var path = require('path') var filterFunc = function(item){ var basename = path.basename(item) return basename === '.' || basename[0] !== '.' } klaw('/some/dir', { filter : filterFunc }) .on('data', function(item){ // only items of none hidden folders will reach here }) ``` **Example (totaling size of PNG files):** ```js var klaw = require('klaw') var path = require('path') var through2 = require('through2') var totalPngsInBytes = 0 var aggregatePngSize = through2.obj(function (item, enc, next) { if (path.extname(item.path) === '.png') { totalPngsInBytes += item.stats.size } this.push(item) next() }) klaw('/some/dir') .pipe(aggregatePngSize) .on('data', function (item) { items.push(item.path) }) .on('end', function () { console.dir(totalPngsInBytes) // => total of all pngs (bytes) }) ``` **Example (deleting all .tmp files):** ```js var fs = require('fs') var klaw = require('klaw') var through2 = require('through2') var deleteAction = through2.obj(function (item, enc, next) { this.push(item) if (path.extname(item.path) === '.tmp') { item.deleted = true fs.unklink(item.path, next) } else { item.deleted = false next() } }) var deletedFiles = [] klaw('/some/dir') .pipe(deleteAction) .on('data', function (item) { if (!item.deleted) return deletedFiles.push(item.path) }) .on('end', function () { console.dir(deletedFiles) // => all deleted files }) ``` You can even chain a bunch of these filters and aggregators together. By using multiple pipes. **Example (using multiple filters / aggregators):** ```js klaw('/some/dir') .pipe(filterCertainFiles) .pipe(deleteSomeOtherFiles) .on('end', function () { console.log('all done!') }) ``` **Example passing (piping) through errors:** Node.js does not `pipe()` errors. This means that the error on one stream, like `klaw` will not pipe through to the next. If you want to do this, do the following: ```js var klaw = require('klaw') var through2 = require('through2') var excludeDirFilter = through2.obj(function (item, enc, next) { if (!item.stats.isDirectory()) this.push(item) next() }) var items = [] // files, directories, symlinks, etc klaw('/some/dir') .on('error', function (err) { excludeDirFilter.emit('error', err) }) // forward the error on .pipe(excludeDirFilter) .on('data', function (item) { items.push(item.path) }) .on('end', function () { console.dir(items) // => [ ... array of files without directories] }) ``` ### Searching Strategy Pass in options for `queueMethod` and `pathSorter` to affect how the file system is recursively iterated. See the code for more details, it's less than 50 lines :) License ------- MIT Copyright (c) 2015 [JP Richardson](https://github.com/jprichardson)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/path-is-absolute/readme.md","tags":[],"body":"# path-is-absolute [![Build Status](https://travis-ci.org/sindresorhus/path-is-absolute.svg?branch=master)](https://travis-ci.org/sindresorhus/path-is-absolute) > Node.js 0.12 [`path.isAbsolute()`](http://nodejs.org/api/path.html#path_path_isabsolute_path) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save path-is-absolute ``` ## Usage ```js var pathIsAbsolute = require('path-is-absolute'); // Linux pathIsAbsolute('/home/foo'); //=> true // Windows pathIsAbsolute('C:/Users/'); //=> true // Any OS pathIsAbsolute.posix('/home/foo'); //=> true ``` ## API See the [`path.isAbsolute()` docs](http://nodejs.org/api/path.html#path_path_isabsolute_path). ### pathIsAbsolute(path) ### pathIsAbsolute.posix(path) The Posix specific version. ### pathIsAbsolute.win32(path) The Windows specific version. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/README.md","tags":[],"body":"[![Build Status](https://travis-ci.org/isaacs/rimraf.svg?branch=master)](https://travis-ci.org/isaacs/rimraf) [![Dependency Status](https://david-dm.org/isaacs/rimraf.svg)](https://david-dm.org/isaacs/rimraf) [![devDependency Status](https://david-dm.org/isaacs/rimraf/dev-status.svg)](https://david-dm.org/isaacs/rimraf#info=devDependencies) The [UNIX command](http://en.wikipedia.org/wiki/Rm_(Unix)) `rm -rf` for node. Install with `npm install rimraf`, or just drop rimraf.js somewhere. ## API `rimraf(f, [opts], callback)` The first parameter will be interpreted as a globbing pattern for files. If you want to disable globbing you can do so with `opts.disableGlob` (defaults to `false`). This might be handy, for instance, if you have filenames that contain globbing wildcard characters. The callback will be called with an error if there is one. Certain errors are handled for you: * Windows: `EBUSY` and `ENOTEMPTY` - rimraf will back off a maximum of `opts.maxBusyTries` times before giving up, adding 100ms of wait between each attempt. The default `maxBusyTries` is 3. * `ENOENT` - If the file doesn't exist, rimraf will return successfully, since your desired outcome is already the case. * `EMFILE` - Since `readdir` requires opening a file descriptor, it's possible to hit `EMFILE` if too many file descriptors are in use. In the sync case, there's nothing to be done for this. But in the async case, rimraf will gradually back off with timeouts up to `opts.emfileWait` ms, which defaults to 1000. ## options * unlink, chmod, stat, lstat, rmdir, readdir, unlinkSync, chmodSync, statSync, lstatSync, rmdirSync, readdirSync In order to use a custom file system library, you can override specific fs functions on the options object. If any of these functions are present on the options object, then the supplied function will be used instead of the default fs method. Sync methods are only relevant for `rimraf.sync()`, of course. For example: ```javascript var myCustomFS = require('some-custom-fs') rimraf('some-thing', myCustomFS, callback) ``` * maxBusyTries If an `EBUSY`, `ENOTEMPTY`, or `EPERM` error code is encountered on Windows systems, then rimraf will retry with a linear backoff wait of 100ms longer on each try. The default maxBusyTries is 3. Only relevant for async usage. * emfileWait If an `EMFILE` error is encountered, then rimraf will retry repeatedly with a linear backoff of 1ms longer on each try, until the timeout counter hits this max. The default limit is 1000. If you repeatedly encounter `EMFILE` errors, then consider using [graceful-fs](http://npm.im/graceful-fs) in your program. Only relevant for async usage. * glob Set to `false` to disable [glob](http://npm.im/glob) pattern matching. Set to an object to pass options to the glob module. The default glob options are `{ nosort: true, silent: true }`. Glob version 6 is used in this module. Relevant for both sync and async usage. * disableGlob Set to any non-falsey value to disable globbing entirely. (Equivalent to setting `glob: false`.) ## rimraf.sync It can remove stuff synchronously, too. But that's not so good. Use the async API. It's better. ## CLI If installed with `npm install rimraf -g` it can be used as a global command `rimraf [ ...]` which is useful for cross platform support. ## mkdirp If you need to create a directory recursively, check out [mkdirp](https://github.com/substack/node-mkdirp)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/README.md","tags":[],"body":"# Glob Match files using the patterns the shell uses, like stars and stuff. [![Build Status](https://travis-ci.org/isaacs/node-glob.svg?branch=master)](https://travis-ci.org/isaacs/node-glob/) [![Build Status](https://ci.appveyor.com/api/projects/status/kd7f3yftf7unxlsx?svg=true)](https://ci.appveyor.com/project/isaacs/node-glob) [![Coverage Status](https://coveralls.io/repos/isaacs/node-glob/badge.svg?branch=master&service=github)](https://coveralls.io/github/isaacs/node-glob?branch=master) This is a glob implementation in JavaScript. It uses the `minimatch` library to do its matching. ![](oh-my-glob.gif) ## Usage Install with npm ``` npm i glob ``` ```javascript var glob = require(\"glob\") // options is optional glob(\"**/*.js\", options, function (er, files) { // files is an array of filenames. // If the `nonull` option is set, and nothing // was found, then files is [\"**/*.js\"] // er is an error object or null. }) ``` ## Glob Primer \"Globs\" are the patterns you type when you do stuff like `ls *.js` on the command line, or put `build/*` in a `.gitignore` file. Before parsing the path part patterns, braced sections are expanded into a set. Braced sections start with `{` and end with `}`, with any number of comma-delimited sections within. Braced sections may contain slash characters, so `a{/b/c,bcd}` would expand into `a/b/c` and `abcd`. The following characters have special magic meaning when used in a path portion: * `*` Matches 0 or more characters in a single path portion * `?` Matches 1 character * `[...]` Matches a range of characters, similar to a RegExp range. If the first character of the range is `!` or `^` then it matches any character not in the range. * `!(pattern|pattern|pattern)` Matches anything that does not match any of the patterns provided. * `?(pattern|pattern|pattern)` Matches zero or one occurrence of the patterns provided. * `+(pattern|pattern|pattern)` Matches one or more occurrences of the patterns provided. * `*(a|b|c)` Matches zero or more occurrences of the patterns provided * `@(pattern|pat*|pat?erN)` Matches exactly one of the patterns provided * `**` If a \"globstar\" is alone in a path portion, then it matches zero or more directories and subdirectories searching for matches. It does not crawl symlinked directories. ### Dots If a file or directory path portion has a `.` as the first character, then it will not match any glob pattern unless that pattern's corresponding path part also has a `.` as its first character. For example, the pattern `a/.*/c` would match the file at `a/.b/c`. However the pattern `a/*/c` would not, because `*` does not start with a dot character. You can make glob treat dots as normal characters by setting `dot:true` in the options. ### Basename Matching If you set `matchBase:true` in the options, and the pattern has no slashes in it, then it will seek for any file anywhere in the tree with a matching basename. For example, `*.js` would match `test/simple/basic.js`. ### Empty Sets If no matching files are found, then an empty array is returned. This differs from the shell, where the pattern itself is returned. For example: $ echo a*s*d*f a*s*d*f To get the bash-style behavior, set the `nonull:true` in the options. ### See Also: * `man sh` * `man bash` (Search for \"Pattern Matching\") * `man 3 fnmatch` * `man 5 gitignore` * [minimatch documentation](https://github.com/isaacs/minimatch) ## glob.hasMagic(pattern, [options]) Returns `true` if there are any special characters in the pattern, and `false` otherwise. Note that the options affect the results. If `noext:true` is set in the options object, then `+(a|b)` will not be considered a magic pattern. If the pattern has a brace expansion, like `a/{b/c,x/y}` then that is considered magical, unless `nobrace:true` is set in the options. ## glob(pattern, [options], cb) * `pattern` `{String}` Pattern to be matched * `options` `{Object}` * `cb` `{Function}` * `err` `{Error | null}` * `matches` `{Array}` filenames found matching the pattern Perform an asynchronous glob search. ## glob.sync(pattern, [options]) * `pattern` `{String}` Pattern to be matched * `options` `{Object}` * return: `{Array}` filenames found matching the pattern Perform a synchronous glob search. ## Class: glob.Glob Create a Glob object by instantiating the `glob.Glob` class. ```javascript var Glob = require(\"glob\").Glob var mg = new Glob(pattern, options, cb) ``` It's an EventEmitter, and starts walking the filesystem to find matches immediately. ### new glob.Glob(pattern, [options], [cb]) * `pattern` `{String}` pattern to search for * `options` `{Object}` * `cb` `{Function}` Called when an error occurs, or matches are found * `err` `{Error | null}` * `matches` `{Array}` filenames found matching the pattern Note that if the `sync` flag is set in the options, then matches will be immediately available on the `g.found` member. ### Properties * `minimatch` The minimatch object that the glob uses. * `options` The options object passed in. * `aborted` Boolean which is set to true when calling `abort()`. There is no way at this time to continue a glob search after aborting, but you can re-use the statCache to avoid having to duplicate syscalls. * `cache` Convenience object. Each field has the following possible values: * `false` - Path does not exist * `true` - Path exists * `'FILE'` - Path exists, and is not a directory * `'DIR'` - Path exists, and is a directory * `[file, entries, ...]` - Path exists, is a directory, and the array value is the results of `fs.readdir` * `statCache` Cache of `fs.stat` results, to prevent statting the same path multiple times. * `symlinks` A record of which paths are symbolic links, which is relevant in resolving `**` patterns. * `realpathCache` An optional object which is passed to `fs.realpath` to minimize unnecessary syscalls. It is stored on the instantiated Glob object, and may be re-used. ### Events * `end` When the matching is finished, this is emitted with all the matches found. If the `nonull` option is set, and no match was found, then the `matches` list contains the original pattern. The matches are sorted, unless the `nosort` flag is set. * `match` Every time a match is found, this is emitted with the specific thing that matched. It is not deduplicated or resolved to a realpath. * `error` Emitted when an unexpected error is encountered, or whenever any fs error occurs if `options.strict` is set. * `abort` When `abort()` is called, this event is raised. ### Methods * `pause` Temporarily stop the search * `resume` Resume the search * `abort` Stop the search forever ### Options All the options that can be passed to Minimatch can also be passed to Glob to change pattern matching behavior. Also, some have been added, or have glob-specific ramifications. All options are false by default, unless otherwise noted. All options are added to the Glob object, as well. If you are running many `glob` operations, you can pass a Glob object as the `options` argument to a subsequent operation to shortcut some `stat` and `readdir` calls. At the very least, you may pass in shared `symlinks`, `statCache`, `realpathCache`, and `cache` options, so that parallel glob operations will be sped up by sharing information about the filesystem. * `cwd` The current working directory in which to search. Defaults to `process.cwd()`. * `root` The place where patterns starting with `/` will be mounted onto. Defaults to `path.resolve(options.cwd, \"/\")` (`/` on Unix systems, and `C:\\` or some such on Windows.) * `dot` Include `.dot` files in normal matches and `globstar` matches. Note that an explicit dot in a portion of the pattern will always match dot files. * `nomount` By default, a pattern starting with a forward-slash will be \"mounted\" onto the root setting, so that a valid filesystem path is returned. Set this flag to disable that behavior. * `mark` Add a `/` character to directory matches. Note that this requires additional stat calls. * `nosort` Don't sort the results. * `stat` Set to true to stat *all* results. This reduces performance somewhat, and is completely unnecessary, unless `readdir` is presumed to be an untrustworthy indicator of file existence. * `silent` When an unusual error is encountered when attempting to read a directory, a warning will be printed to stderr. Set the `silent` option to true to suppress these warnings. * `strict` When an unusual error is encountered when attempting to read a directory, the process will just continue on in search of other matches. Set the `strict` option to raise an error in these cases. * `cache` See `cache` property above. Pass in a previously generated cache object to save some fs calls. * `statCache` A cache of results of filesystem information, to prevent unnecessary stat calls. While it should not normally be necessary to set this, you may pass the statCache from one glob() call to the options object of another, if you know that the filesystem will not change between calls. (See \"Race Conditions\" below.) * `symlinks` A cache of known symbolic links. You may pass in a previously generated `symlinks` object to save `lstat` calls when resolving `**` matches. * `sync` DEPRECATED: use `glob.sync(pattern, opts)` instead. * `nounique` In some cases, brace-expanded patterns can result in the same file showing up multiple times in the result set. By default, this implementation prevents duplicates in the result set. Set this flag to disable that behavior. * `nonull` Set to never return an empty set, instead returning a set containing the pattern itself. This is the default in glob(3). * `debug` Set to enable debug logging in minimatch and glob. * `nobrace` Do not expand `{a,b}` and `{1..3}` brace sets. * `noglobstar` Do not match `**` against multiple filenames. (Ie, treat it as a normal `*` instead.) * `noext` Do not match `+(a|b)` \"extglob\" patterns. * `nocase` Perform a case-insensitive match. Note: on case-insensitive filesystems, non-magic patterns will match by default, since `stat` and `readdir` will not raise errors. * `matchBase` Perform a basename-only match if the pattern does not contain any slash characters. That is, `*.js` would be treated as equivalent to `**/*.js`, matching all js files in all directories. * `nodir` Do not match directories, only files. (Note: to match *only* directories, simply put a `/` at the end of the pattern.) * `ignore` Add a pattern or an array of glob patterns to exclude matches. Note: `ignore` patterns are *always* in `dot:true` mode, regardless of any other settings. * `follow` Follow symlinked directories when expanding `**` patterns. Note that this can result in a lot of duplicate references in the presence of cyclic links. * `realpath` Set to true to call `fs.realpath` on all of the results. In the case of a symlink that cannot be resolved, the full absolute path to the matched entry is returned (though it will usually be a broken symlink) ## Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between node-glob and other implementations, and are intentional. The double-star character `**` is supported by default, unless the `noglobstar` flag is set. This is supported in the manner of bsdglob and bash 4.3, where `**` only has special significance if it is the only thing in a path part. That is, `a/**/b` will match `a/x/y/b`, but `a/**b` will not. Note that symlinked directories are not crawled as part of a `**`, though their contents may match against subsequent portions of the pattern. This prevents infinite loops and duplicates and the like. If an escaped pattern has no matches, and the `nonull` flag is set, then glob returns the pattern as-provided, rather than interpreting the character escapes. For example, `glob.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than `\"*a?\"`. This is akin to setting the `nullglob` option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like `+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded **first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are checked for validity. Since those two are valid, matching proceeds. ### Comments and Negation Previously, this module let you mark a pattern as a \"comment\" if it started with a `#` character, or a \"negated\" pattern if it started with a `!` character. These options were deprecated in version 5, and removed in version 6. To specify things that should not match, use the `ignore` option. ## Windows **Please only use forward-slashes in glob expressions.** Though windows uses either `/` or `\\` as its path separator, only `/` characters are used by this glob implementation. You must use forward-slashes **only** in glob expressions. Back-slashes will always be interpreted as escape characters, not path separators. Results from absolute patterns such as `/foo/*` are mounted onto the root setting using `path.join`. On windows, this will by default result in `/foo/*` matching `C:\\foo\\bar.txt`. ## Race Conditions Glob searching, by its very nature, is susceptible to race conditions, since it relies on directory walking and such. As a result, it is possible that a file that exists when glob looks for it may have been deleted or modified by the time it returns the result. As part of its internal implementation, this program caches all stat and readdir calls that it makes, in order to cut down on system overhead. However, this also makes it even more susceptible to races, especially if the cache or statCache objects are reused between glob calls. Users are thus advised not to use a glob result as a guarantee of filesystem state in the face of rapid changes. For the vast majority of operations, this is never a problem. ## Contributing Any change to behavior (including bugfixes) must come with a test. Patches that fail tests or reduce performance will be rejected. ``` # to run tests npm test # to re-generate test fixtures npm run test-regen # to benchmark against bash/zsh npm run bench # to profile javascript npm run prof ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/changelog.md","tags":[],"body":"## 7.0 - Raise error if `options.cwd` is specified, and not a directory ## 6.0 - Remove comment and negation pattern support - Ignore patterns are always in `dot:true` mode ## 5.0 - Deprecate comment and negation patterns - Fix regression in `mark` and `nodir` options from making all cache keys absolute path. - Abort if `fs.readdir` returns an error that's unexpected - Don't emit `match` events for ignored items - Treat ENOTSUP like ENOTDIR in readdir ## 4.5 - Add `options.follow` to always follow directory symlinks in globstar - Add `options.realpath` to call `fs.realpath` on all results - Always cache based on absolute path ## 4.4 - Add `options.ignore` - Fix handling of broken symlinks ## 4.3 - Bump minimatch to 2.x - Pass all tests on Windows ## 4.2 - Add `glob.hasMagic` function - Add `options.nodir` flag ## 4.1 - Refactor sync and async implementations for performance - Throw if callback provided to sync glob function - Treat symbolic links in globstar results the same as Bash 4.3 ## 4.0 - Use `^` for dependency versions (bumped major because this breaks older npm versions) - Ensure callbacks are only ever called once - switch to ISC license ## 3.x - Rewrite in JavaScript - Add support for setting root, cwd, and windows support - Cache many fs calls - Add globstar support - emit match events ## 2.x - Use `glob.h` and `fnmatch.h` from NetBSD ## 1.x - `glob.h` static binding."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/node_modules/fs.realpath/README.md","tags":[],"body":"# fs.realpath A backwards-compatible fs.realpath for Node v6 and above In Node v6, the JavaScript implementation of fs.realpath was replaced with a faster (but less resilient) native implementation. That raises new and platform-specific errors and cannot handle long or excessively symlink-looping paths. This module handles those cases by detecting the new errors and falling back to the JavaScript implementation. On versions of Node prior to v6, it has no effect. ## USAGE ```js var rp = require('fs.realpath') // async version rp.realpath(someLongAndLoopingPath, function (er, real) { // the ELOOP was handled, but it was a bit slower }) // sync version var real = rp.realpathSync(someLongAndLoopingPath) // monkeypatch at your own risk! // This replaces the fs.realpath/fs.realpathSync builtins rp.monkeypatch() // un-do the monkeypatching rp.unmonkeypatch() ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/node_modules/inflight/README.md","tags":[],"body":"# inflight Add callbacks to requests in flight to avoid async duplication ## USAGE ```javascript var inflight = require('inflight') // some request that does some stuff function req(key, callback) { // key is any random string. like a url or filename or whatever. // // will return either a falsey value, indicating that the // request for this key is already in flight, or a new callback // which when called will call all callbacks passed to inflightk // with the same key callback = inflight(key, callback) // If we got a falsey value back, then there's already a req going if (!callback) return // this is where you'd fetch the url or whatever // callback is also once()-ified, so it can safely be assigned // to multiple events etc. First call wins. setTimeout(function() { callback(null, key) }, 100) } // only assigns a single setTimeout // when it dings, all cbs get called req('foo', cb1) req('foo', cb2) req('foo', cb3) req('foo', cb4) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/node_modules/inflight/node_modules/wrappy/README.md","tags":[],"body":"# wrappy Callback wrapping utility ## USAGE ```javascript var wrappy = require(\"wrappy\") // var wrapper = wrappy(wrapperFunction) // make sure a cb is called only once // See also: http://npm.im/once for this specific use case var once = wrappy(function (cb) { var called = false return function () { if (called) return called = true return cb.apply(this, arguments) } }) function printBoo () { console.log('boo') } // has some rando property printBoo.iAmBooPrinter = true var onlyPrintOnce = once(printBoo) onlyPrintOnce() // prints 'boo' onlyPrintOnce() // does nothing // random property is retained! assert.equal(onlyPrintOnce.iAmBooPrinter, true) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/node_modules/inherits/README.md","tags":[],"body":"Browser-friendly inheritance fully compatible with standard node.js [inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor). This package exports standard `inherits` from node.js `util` module in node environment, but also provides alternative browser-friendly implementation through [browser field](https://gist.github.com/shtylman/4339901). Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of `util`. It also has a shim for old browsers with no `Object.create` support. While keeping you sure you are using standard `inherits` implementation in node.js environment, it allows bundlers such as [browserify](https://github.com/substack/node-browserify) to not include full `util` package to your client code if all you need is just `inherits` function. It worth, because browser shim for `util` package is large and `inherits` is often the single function you need from it. It's recommended to use this package instead of `require('util').inherits` for any code that has chances to be used not only in node.js but in browser too. ## usage ```js var inherits = require('inherits'); // then use exactly as the standard one ``` ## note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js `inherits`. If you are using version ~1.0 and planning to switch to ~2.0, be careful: * new version uses `super_` instead of `super` for referencing superclass * new version overwrites current prototype while old one preserves any existing fields on it"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/node_modules/minimatch/README.md","tags":[],"body":"# minimatch A minimal matching utility. [![Build Status](https://secure.travis-ci.org/isaacs/minimatch.svg)](http://travis-ci.org/isaacs/minimatch) This is the matching library used internally by npm. It works by converting glob expressions into JavaScript `RegExp` objects. ## Usage ```javascript var minimatch = require(\"minimatch\") minimatch(\"bar.foo\", \"*.foo\") // true! minimatch(\"bar.foo\", \"*.bar\") // false! minimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy! ``` ## Features Supports these glob features: * Brace Expansion * Extended glob matching * \"Globstar\" `**` matching See: * `man sh` * `man bash` * `man 3 fnmatch` * `man 5 gitignore` ## Minimatch Class Create a minimatch object by instantiating the `minimatch.Minimatch` class. ```javascript var Minimatch = require(\"minimatch\").Minimatch var mm = new Minimatch(pattern, options) ``` ### Properties * `pattern` The original pattern the minimatch object represents. * `options` The options supplied to the constructor. * `set` A 2-dimensional array of regexp or string expressions. Each row in the array corresponds to a brace-expanded pattern. Each item in the row corresponds to a single path-part. For example, the pattern `{a,b/c}/d` would expand to a set of patterns like: [ [ a, d ] , [ b, c, d ] ] If a portion of the pattern doesn't have any \"magic\" in it (that is, it's something like `\"foo\"` rather than `fo*o?`), then it will be left as a string rather than converted to a regular expression. * `regexp` Created by the `makeRe` method. A single regular expression expressing the entire pattern. This is useful in cases where you wish to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled. * `negate` True if the pattern is negated. * `comment` True if the pattern is a comment. * `empty` True if the pattern is `\"\"`. ### Methods * `makeRe` Generate the `regexp` member if necessary, and return it. Will return `false` if the pattern is invalid. * `match(fname)` Return true if the filename matches the pattern, or false otherwise. * `matchOne(fileArray, patternArray, partial)` Take a `/`-split filename, and match it against a single row in the `regExpSet`. This method is mainly for internal use, but is exposed so that it can be used by a glob-walker that needs to avoid excessive filesystem calls. All other methods are internal, and will be called as necessary. ### minimatch(path, pattern, options) Main export. Tests a path against the pattern using the options. ```javascript var isJS = minimatch(file, \"*.js\", { matchBase: true }) ``` ### minimatch.filter(pattern, options) Returns a function that tests its supplied argument, suitable for use with `Array.filter`. Example: ```javascript var javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true})) ``` ### minimatch.match(list, pattern, options) Match against the list of files, in the style of fnmatch or glob. If nothing is matched, and options.nonull is set, then return a list containing the pattern itself. ```javascript var javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true})) ``` ### minimatch.makeRe(pattern, options) Make a regular expression object from the pattern. ## Options All options are `false` by default. ### debug Dump a ton of stuff to stderr. ### nobrace Do not expand `{a,b}` and `{1..3}` brace sets. ### noglobstar Disable `**` matching against multiple folder names. ### dot Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot. Note that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot` is set. ### noext Disable \"extglob\" style patterns like `+(a|b)`. ### nocase Perform a case-insensitive match. ### nonull When a match is not found by `minimatch.match`, return a list containing the pattern itself if this option is set. When not set, an empty list is returned if there are no matches. ### matchBase If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, `a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`. ### nocomment Suppress the behavior of treating `#` at the start of a pattern as a comment. ### nonegate Suppress the behavior of treating a leading `!` character as negation. ### flipNegate Returns from negate expressions the same as if they were not negated. (Ie, true on a hit, false on a miss.) ## Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between minimatch and other implementations, and are intentional. If the pattern starts with a `!` character, then it is negated. Set the `nonegate` flag to suppress this behavior, and treat leading `!` characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like `!(a|B)`. Multiple `!` characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with `#`, then it is treated as a comment, and will not match anything. Use `\\#` to match a literal `#` at the start of a line, or set the `nocomment` flag to suppress this behavior. The double-star character `**` is supported by default, unless the `noglobstar` flag is set. This is supported in the manner of bsdglob and bash 4.1, where `**` only has special significance if it is the only thing in a path part. That is, `a/**/b` will match `a/x/y/b`, but `a/**b` will not. If an escaped pattern has no matches, and the `nonull` flag is set, then minimatch.match returns the pattern as-provided, rather than interpreting the character escapes. For example, `minimatch.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than `\"*a?\"`. This is akin to setting the `nullglob` option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like `+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded **first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are checked for validity. Since those two are valid, matching proceeds."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/README.md","tags":[],"body":"# brace-expansion [Brace expansion](https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html), as known from sh/bash, in JavaScript. [![build status](https://secure.travis-ci.org/juliangruber/brace-expansion.svg)](http://travis-ci.org/juliangruber/brace-expansion) [![downloads](https://img.shields.io/npm/dm/brace-expansion.svg)](https://www.npmjs.org/package/brace-expansion) [![testling badge](https://ci.testling.com/juliangruber/brace-expansion.png)](https://ci.testling.com/juliangruber/brace-expansion) ## Example ```js var expand = require('brace-expansion'); expand('file-{a,b,c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('-v{,,}') // => ['-v', '-v', '-v'] expand('file{0..2}.jpg') // => ['file0.jpg', 'file1.jpg', 'file2.jpg'] expand('file-{a..c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('file{2..0}.jpg') // => ['file2.jpg', 'file1.jpg', 'file0.jpg'] expand('file{0..4..2}.jpg') // => ['file0.jpg', 'file2.jpg', 'file4.jpg'] expand('file-{a..e..2}.jpg') // => ['file-a.jpg', 'file-c.jpg', 'file-e.jpg'] expand('file{00..10..5}.jpg') // => ['file00.jpg', 'file05.jpg', 'file10.jpg'] expand('{{A..C},{a..c}}') // => ['A', 'B', 'C', 'a', 'b', 'c'] expand('ppp{,config,oe{,conf}}') // => ['ppp', 'pppconfig', 'pppoe', 'pppoeconf'] ``` ## API ```js var expand = require('brace-expansion'); ``` ### var expanded = expand(str) Return an array of all possible and valid expansions of `str`. If none are found, `[str]` is returned. Valid expansions are: ```js /^(.*,)+(.+)?$/ // {a,b,...} ``` A comma seperated list of options, like `{a,b}` or `{a,{b,c}}` or `{,a,}`. ```js /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} ``` A numeric sequence from `x` to `y` inclusive, with optional increment. If `x` or `y` start with a leading `0`, all the numbers will be padded to have equal length. Negative numbers and backwards iteration work too. ```js /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} ``` An alphabetic sequence from `x` to `y` inclusive, with optional increment. `x` and `y` must be exactly one character, and if given, `incr` must be a number. For compatibility reasons, the string `${` is not eligible for brace expansion. ## Installation With [npm](https://npmjs.org) do: ```bash npm install brace-expansion ``` ## Contributors - [Julian Gruber](https://github.com/juliangruber) - [Isaac Z. Schlueter](https://github.com/isaacs) ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/LICENSE.md","tags":[],"body":"(MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/README.md","tags":[],"body":"# balanced-match Match balanced string pairs, like `{` and `}` or `` and ``. Supports regular expressions as well! [![build status](https://secure.travis-ci.org/juliangruber/balanced-match.svg)](http://travis-ci.org/juliangruber/balanced-match) [![downloads](https://img.shields.io/npm/dm/balanced-match.svg)](https://www.npmjs.org/package/balanced-match) [![testling badge](https://ci.testling.com/juliangruber/balanced-match.png)](https://ci.testling.com/juliangruber/balanced-match) ## Example Get the first matching pair of braces: ```js var balanced = require('balanced-match'); console.log(balanced('{', '}', 'pre{in{nested}}post')); console.log(balanced('{', '}', 'pre{first}between{second}post')); console.log(balanced(/\\s+\\{\\s+/, /\\s+\\}\\s+/, 'pre { in{nest} } post')); ``` The matches are: ```bash $ node example.js { start: 3, end: 14, pre: 'pre', body: 'in{nested}', post: 'post' } { start: 3, end: 9, pre: 'pre', body: 'first', post: 'between{second}post' } { start: 3, end: 17, pre: 'pre', body: 'in{nest}', post: 'post' } ``` ## API ### var m = balanced(a, b, str) For the first non-nested matching pair of `a` and `b` in `str`, return an object with those keys: * **start** the index of the first match of `a` * **end** the index of the matching `b` * **pre** the preamble, `a` and `b` not included * **body** the match, `a` and `b` not included * **post** the postscript, `a` and `b` not included If there's no match, `undefined` will be returned. If the `str` contains more `a` than `b` / there are unmatched pairs, the first match that was closed will be used. For example, `{{a}` will match `['{', 'a', '']`. ### var r = balanced.range(a, b, str) For the first non-nested matching pair of `a` and `b` in `str`, return an array with indexes: `[ , ]`. If there's no match, `undefined` will be returned. If the `str` contains more `a` than `b` / there are unmatched pairs, the first match that was closed will be used. For example, `{{a}` will match `[ 1, 3 ]`. ## Installation With [npm](https://npmjs.org) do: ```bash npm install balanced-match ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/README.markdown","tags":[],"body":"concat-map ========== Concatenative mapdashery. [![browser support](http://ci.testling.com/substack/node-concat-map.png)](http://ci.testling.com/substack/node-concat-map) [![build status](https://secure.travis-ci.org/substack/node-concat-map.png)](http://travis-ci.org/substack/node-concat-map) example ======= ``` js var concatMap = require('concat-map'); var xs = [ 1, 2, 3, 4, 5, 6 ]; var ys = concatMap(xs, function (x) { return x % 2 ? [ x - 0.1, x, x + 0.1 ] : []; }); console.dir(ys); ``` *** ``` [ 0.9, 1, 1.1, 2.9, 3, 3.1, 4.9, 5, 5.1 ] ``` methods ======= ``` js var concatMap = require('concat-map') ``` concatMap(xs, fn) ----------------- Return an array of concatenated elements by calling `fn(x, i)` for each element `x` and each index `i` in the array `xs`. When `fn(x, i)` returns an array, its result will be concatenated with the result array. If `fn(x, i)` returns anything else, that value will be pushed onto the end of the result array. install ======= With [npm](http://npmjs.org) do: ``` npm install concat-map ``` license ======= MIT notes ===== This module was written while sitting high above the ground in a tree."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/node_modules/once/README.md","tags":[],"body":"# once Only call a function once. ## usage ```javascript var once = require('once') function load (file, cb) { cb = once(cb) loader.load('file') loader.once('load', cb) loader.once('error', cb) } ``` Or add to the Function.prototype in a responsible way: ```javascript // only has to be done once require('once').proto() function load (file, cb) { cb = cb.once() loader.load('file') loader.once('load', cb) loader.once('error', cb) } ``` Ironically, the prototype feature makes this module twice as complicated as necessary. To check whether you function has been called, use `fn.called`. Once the function is called for the first time the return value of the original function is saved in `fn.value` and subsequent calls will continue to return this value. ```javascript var once = require('once') function load (cb) { cb = once(cb) var stream = createStream() stream.once('data', cb) stream.once('end', function () { if (!cb.called) cb(new Error('not found')) }) } ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/fs-extra/node_modules/rimraf/node_modules/glob/node_modules/once/node_modules/wrappy/README.md","tags":[],"body":"# wrappy Callback wrapping utility ## USAGE ```javascript var wrappy = require(\"wrappy\") // var wrapper = wrappy(wrapperFunction) // make sure a cb is called only once // See also: http://npm.im/once for this specific use case var once = wrappy(function (cb) { var called = false return function () { if (called) return called = true return cb.apply(this, arguments) } }) function printBoo () { console.log('boo') } // has some rando property printBoo.iAmBooPrinter = true var onlyPrintOnce = once(printBoo) onlyPrintOnce() // prints 'boo' onlyPrintOnce() // does nothing // random property is retained! assert.equal(onlyPrintOnce.iAmBooPrinter, true) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/http-proxy/README.md","tags":[],"body":"node-http-proxy =======    `node-http-proxy` is an HTTP programmable proxying library that supports websockets. It is suitable for implementing components such as reverse proxies and load balancers. ### Table of Contents * [Installation](#installation) * [Upgrading from 0.8.x ?](#upgrading-from-08x-) * [Core Concept](#core-concept) * [Use Cases](#use-cases) * [Setup a basic stand-alone proxy server](#setup-a-basic-stand-alone-proxy-server) * [Setup a stand-alone proxy server with custom server logic](#setup-a-stand-alone-proxy-server-with-custom-server-logic) * [Setup a stand-alone proxy server with proxy request header re-writing](#setup-a-stand-alone-proxy-server-with-proxy-request-header-re-writing) * [Modify a response from a proxied server](#modify-a-response-from-a-proxied-server) * [Setup a stand-alone proxy server with latency](#setup-a-stand-alone-proxy-server-with-latency) * [Using HTTPS](#using-https) * [Proxying WebSockets](#proxying-websockets) * [Options](#options) * [Listening for proxy events](#listening-for-proxy-events) * [Shutdown](#shutdown) * [Miscellaneous](#miscellaneous) * [Test](#test) * [ProxyTable API](#proxytable-api) * [Logo](#logo) * [Contributing and Issues](#contributing-and-issues) * [License](#license) ### Installation `npm install http-proxy --save` **[Back to top](#table-of-contents)** ### Upgrading from 0.8.x ? Click [here](UPGRADING.md) **[Back to top](#table-of-contents)** ### Core Concept A new proxy is created by calling `createProxyServer` and passing an `options` object as argument ([valid properties are available here](lib/http-proxy.js#L33-L50)) ```javascript var httpProxy = require('http-proxy'); var proxy = httpProxy.createProxyServer(options); // See (†) ``` †Unless listen(..) is invoked on the object, this does not create a webserver. See below. An object will be returned with four methods: * web `req, res, [options]` (used for proxying regular HTTP(S) requests) * ws `req, socket, head, [options]` (used for proxying WS(S) requests) * listen `port` (a function that wraps the object in a webserver, for your convenience) * close `[callback]` (a function that closes the inner webserver and stops listening on given port) It is then possible to proxy requests by calling these functions ```javascript http.createServer(function(req, res) { proxy.web(req, res, { target: 'http://mytarget.com:8080' }); }); ``` Errors can be listened on either using the Event Emitter API ```javascript proxy.on('error', function(e) { ... }); ``` or using the callback API ```javascript proxy.web(req, res, { target: 'http://mytarget.com:8080' }, function(e) { ... }); ``` When a request is proxied it follows two different pipelines ([available here](lib/http-proxy/passes)) which apply transformations to both the `req` and `res` object. The first pipeline (ingoing) is responsible for the creation and manipulation of the stream that connects your client to the target. The second pipeline (outgoing) is responsible for the creation and manipulation of the stream that, from your target, returns data to the client. **[Back to top](#table-of-contents)** ### Use Cases #### Setup a basic stand-alone proxy server ```js var http = require('http'), httpProxy = require('http-proxy'); // // Create your proxy server and set the target in the options. // httpProxy.createProxyServer({target:'http://localhost:9000'}).listen(8000); // See (†) // // Create your target server // http.createServer(function (req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.write('request successfully proxied!' + '\\n' + JSON.stringify(req.headers, true, 2)); res.end(); }).listen(9000); ``` †Invoking listen(..) triggers the creation of a web server. Otherwise, just the proxy instance is created. **[Back to top](#table-of-contents)** #### Setup a stand-alone proxy server with custom server logic This example show how you can proxy a request using your own HTTP server and also you can put your own logic to handle the request. ```js var http = require('http'), httpProxy = require('http-proxy'); // // Create a proxy server with custom application logic // var proxy = httpProxy.createProxyServer({}); // // Create your custom server and just call `proxy.web()` to proxy // a web request to the target passed in the options // also you can use `proxy.ws()` to proxy a websockets request // var server = http.createServer(function(req, res) { // You can define here your custom logic to handle the request // and then proxy the request. proxy.web(req, res, { target: 'http://127.0.0.1:5060' }); }); console.log(\"listening on port 5050\") server.listen(5050); ``` **[Back to top](#table-of-contents)** #### Setup a stand-alone proxy server with proxy request header re-writing This example shows how you can proxy a request using your own HTTP server that modifies the outgoing proxy request by adding a special header. ```js var http = require('http'), httpProxy = require('http-proxy'); // // Create a proxy server with custom application logic // var proxy = httpProxy.createProxyServer({}); // To modify the proxy connection before data is sent, you can listen // for the 'proxyReq' event. When the event is fired, you will receive // the following arguments: // (http.ClientRequest proxyReq, http.IncomingMessage req, // http.ServerResponse res, Object options). This mechanism is useful when // you need to modify the proxy request before the proxy connection // is made to the target. // proxy.on('proxyReq', function(proxyReq, req, res, options) { proxyReq.setHeader('X-Special-Proxy-Header', 'foobar'); }); var server = http.createServer(function(req, res) { // You can define here your custom logic to handle the request // and then proxy the request. proxy.web(req, res, { target: 'http://127.0.0.1:5060' }); }); console.log(\"listening on port 5050\") server.listen(5050); ``` **[Back to top](#table-of-contents)** #### Modify a response from a proxied server Sometimes when you have received a HTML/XML document from the server of origin you would like to modify it before forwarding it on. [Harmon](https://github.com/No9/harmon) allows you to do this in a streaming style so as to keep the pressure on the proxy to a minimum. **[Back to top](#table-of-contents)** #### Setup a stand-alone proxy server with latency ```js var http = require('http'), httpProxy = require('http-proxy'); // // Create a proxy server with latency // var proxy = httpProxy.createProxyServer(); // // Create your server that makes an operation that waits a while // and then proxies the request // http.createServer(function (req, res) { // This simulates an operation that takes 500ms to execute setTimeout(function () { proxy.web(req, res, { target: 'http://localhost:9008' }); }, 500); }).listen(8008); // // Create your target server // http.createServer(function (req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.write('request successfully proxied to: ' + req.url + '\\n' + JSON.stringify(req.headers, true, 2)); res.end(); }).listen(9008); ``` **[Back to top](#table-of-contents)** #### Using HTTPS You can activate the validation of a secure SSL certificate to the target connection (avoid self signed certs), just set `secure: true` in the options. ##### HTTPS -> HTTP ```js // // Create the HTTPS proxy server in front of a HTTP server // httpProxy.createServer({ target: { host: 'localhost', port: 9009 }, ssl: { key: fs.readFileSync('valid-ssl-key.pem', 'utf8'), cert: fs.readFileSync('valid-ssl-cert.pem', 'utf8') } }).listen(8009); ``` ##### HTTPS -> HTTPS ```js // // Create the proxy server listening on port 443 // httpProxy.createServer({ ssl: { key: fs.readFileSync('valid-ssl-key.pem', 'utf8'), cert: fs.readFileSync('valid-ssl-cert.pem', 'utf8') }, target: 'https://localhost:9010', secure: true // Depends on your needs, could be false. }).listen(443); ``` **[Back to top](#table-of-contents)** #### Proxying WebSockets You can activate the websocket support for the proxy using `ws:true` in the options. ```js // // Create a proxy server for websockets // httpProxy.createServer({ target: 'ws://localhost:9014', ws: true }).listen(8014); ``` Also you can proxy the websocket requests just calling the `ws(req, socket, head)` method. ```js // // Setup our server to proxy standard HTTP requests // var proxy = new httpProxy.createProxyServer({ target: { host: 'localhost', port: 9015 } }); var proxyServer = http.createServer(function (req, res) { proxy.web(req, res); }); // // Listen to the `upgrade` event and proxy the // WebSocket requests as well. // proxyServer.on('upgrade', function (req, socket, head) { proxy.ws(req, socket, head); }); proxyServer.listen(8015); ``` **[Back to top](#table-of-contents)** ### Options `httpProxy.createProxyServer` supports the following options: * **target**: url string to be parsed with the url module * **forward**: url string to be parsed with the url module * **agent**: object to be passed to http(s).request (see Node's [https agent](http://nodejs.org/api/https.html#https_class_https_agent) and [http agent](http://nodejs.org/api/http.html#http_class_http_agent) objects) * **ssl**: object to be passed to https.createServer() * **ws**: true/false, if you want to proxy websockets * **xfwd**: true/false, adds x-forward headers * **secure**: true/false, if you want to verify the SSL Certs * **toProxy**: true/false, passes the absolute URL as the `path` (useful for proxying to proxies) * **prependPath**: true/false, Default: true - specify whether you want to prepend the target's path to the proxy path * **ignorePath**: true/false, Default: false - specify whether you want to ignore the proxy path of the incoming request (note: you will have to append / manually if required). * **localAddress**: Local interface string to bind for outgoing connections * **changeOrigin**: true/false, Default: false - changes the origin of the host header to the target URL * **auth**: Basic authentication i.e. 'user:password' to compute an Authorization header. * **hostRewrite**: rewrites the location hostname on (301/302/307/308) redirects. * **autoRewrite**: rewrites the location host/port on (301/302/307/308) redirects based on requested host/port. Default: false. * **protocolRewrite**: rewrites the location protocol on (301/302/307/308) redirects to 'http' or 'https'. Default: null. * **headers**: object with extra headers to be added to target requests. **NOTE:** `options.ws` and `options.ssl` are optional. `options.target` and `options.forward` cannot both be missing If you are using the `proxyServer.listen` method, the following options are also applicable: * **ssl**: object to be passed to https.createServer() * **ws**: true/false, if you want to proxy websockets **[Back to top](#table-of-contents)** ### Listening for proxy events * `error`: The error event is emitted if the request to the target fail. **We do not do any error handling of messages passed between client and proxy, and messages passed between proxy and target, so it is recommended that you listen on errors and handle them.** * `proxyReq`: This event is emitted before the data is sent. It gives you a chance to alter the proxyReq request object. Applies to \"web\" connections * `proxyReqWs`: This event is emitted before the data is sent. It gives you a chance to alter the proxyReq request object. Applies to \"websocket\" connections * `proxyRes`: This event is emitted if the request to the target got a response. * `open`: This event is emitted once the proxy websocket was created and piped into the target websocket. * `close`: This event is emitted once the proxy websocket was closed. * (DEPRECATED) `proxySocket`: Deprecated in favor of `open`. ```js var httpProxy = require('http-proxy'); // Error example // // Http Proxy Server with bad target // var proxy = httpProxy.createServer({ target:'http://localhost:9005' }); proxy.listen(8005); // // Listen for the `error` event on `proxy`. proxy.on('error', function (err, req, res) { res.writeHead(500, { 'Content-Type': 'text/plain' }); res.end('Something went wrong. And we are reporting a custom error message.'); }); // // Listen for the `proxyRes` event on `proxy`. // proxy.on('proxyRes', function (proxyRes, req, res) { console.log('RAW Response from the target', JSON.stringify(proxyRes.headers, true, 2)); }); // // Listen for the `open` event on `proxy`. // proxy.on('open', function (proxySocket) { // listen for messages coming FROM the target here proxySocket.on('data', hybiParseAndLogMessage); }); // // Listen for the `close` event on `proxy`. // proxy.on('close', function (res, socket, head) { // view disconnected websocket connections console.log('Client disconnected'); }); ``` **[Back to top](#table-of-contents)** ### Shutdown * When testing or running server within another program it may be necessary to close the proxy. * This will stop the proxy from accepting new connections. ```js var proxy = new httpProxy.createProxyServer({ target: { host: 'localhost', port: 1337 } }); proxy.close(); ``` **[Back to top](#table-of-contents)** ### Miscellaneous #### ProxyTable API A proxy table API is available through this add-on [module](https://github.com/donasaur/http-proxy-rules), which lets you define a set of rules to translate matching routes to target routes that the reverse proxy will talk to. #### Test ``` $ npm test ``` #### Logo Logo created by [Diego Pasquali](http://dribbble.com/diegopq) **[Back to top](#table-of-contents)** ### Contributing and Issues * Search on Google/Github * If you can't find anything, open an issue * If you feel comfortable about fixing the issue, fork the repo * Commit to your local branch (which must be different from `master`) * Submit your Pull Request (be sure to include tests and update documentation) **[Back to top](#table-of-contents)** ### License >The MIT License (MIT) > >Copyright (c) 2010 - 2016 Charlie Robbins, Jarrett Cruger & the Contributors. > >Permission is hereby granted, free of charge, to any person obtaining a copy >of this software and associated documentation files (the \"Software\"), to deal >in the Software without restriction, including without limitation the rights >to use, copy, modify, merge, publish, distribute, sublicense, and/or sell >copies of the Software, and to permit persons to whom the Software is >furnished to do so, subject to the following conditions: > >The above copyright notice and this permission notice shall be included in >all copies or substantial portions of the Software. > >THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR >IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, >FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE >AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER >LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, >OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN >THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/http-proxy/node_modules/eventemitter3/README.md","tags":[],"body":"# EventEmitter3 [![Version npm](https://img.shields.io/npm/v/eventemitter3.svg?style=flat-square)](http://browsenpm.org/package/eventemitter3)[![Build Status](https://img.shields.io/travis/primus/eventemitter3/master.svg?style=flat-square)](https://travis-ci.org/primus/eventemitter3)[![Dependencies](https://img.shields.io/david/primus/eventemitter3.svg?style=flat-square)](https://david-dm.org/primus/eventemitter3)[![Coverage Status](https://img.shields.io/coveralls/primus/eventemitter3/master.svg?style=flat-square)](https://coveralls.io/r/primus/eventemitter3?branch=master)[![IRC channel](https://img.shields.io/badge/IRC-irc.freenode.net%23primus-00a8ff.svg?style=flat-square)](https://webchat.freenode.net/?channels=primus) [![Sauce Test Status](https://saucelabs.com/browser-matrix/eventemitter3.svg)](https://saucelabs.com/u/eventemitter3) EventEmitter3 is a high performance EventEmitter. It has been micro-optimized for various of code paths making this, one of, if not the fastest EventEmitter available for Node.js and browsers. The module is API compatible with the EventEmitter that ships by default with Node.js but there are some slight differences: - Domain support has been removed. - We do not `throw` an error when you emit an `error` event and nobody is listening. - The `newListener` event is removed as the use-cases for this functionality are really just edge cases. - No `setMaxListeners` and it's pointless memory leak warnings. If you want to add `end` listeners you should be able to do that without modules complaining. - No `listenerCount` function. Use `EE.listeners(event).length` instead. - Support for custom context for events so there is no need to use `fn.bind`. - `listeners` method can do existence checking instead of returning only arrays. It's a drop in replacement for existing EventEmitters, but just faster. Free performance, who wouldn't want that? The EventEmitter is written in EcmaScript 3 so it will work in the oldest browsers and node versions that you need to support. ## Installation ```bash $ npm install --save eventemitter3 # npm $ component install primus/eventemitter3 # Component $ bower install eventemitter3 # Bower ``` ## Usage After installation the only thing you need to do is require the module: ```js var EventEmitter = require('eventemitter3'); ``` And you're ready to create your own EventEmitter instances. For the API documentation, please follow the official Node.js documentation: http://nodejs.org/api/events.html ### Contextual emits We've upgraded the API of the `EventEmitter.on`, `EventEmitter.once` and `EventEmitter.removeListener` to accept an extra argument which is the `context` or `this` value that should be set for the emitted events. This means you no longer have the overhead of an event that required `fn.bind` in order to get a custom `this` value. ```js var EE = new EventEmitter() , context = { foo: 'bar' }; function emitted() { console.log(this === context); // true } EE.once('event-name', emitted, context); EE.on('another-event', emitted, context); EE.removeListener('another-event', emitted, context); ``` ### Existence To check if there is already a listener for a given event you can supply the `listeners` method with an extra boolean argument. This will transform the output from an array, to a boolean value which indicates if there are listeners in place for the given event: ```js var EE = new EventEmitter(); EE.once('event-name', function () {}); EE.on('another-event', function () {}); EE.listeners('event-name', true); // returns true EE.listeners('unknown-name', true); // returns false ``` ## License [MIT](LICENSE)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/http-proxy/node_modules/requires-port/README.md","tags":[],"body":"# requires-port [![Made by unshift](https://img.shields.io/badge/made%20by-unshift-00ffcc.svg?style=flat-square)](http://unshift.io)[![Version npm](http://img.shields.io/npm/v/requires-port.svg?style=flat-square)](http://browsenpm.org/package/requires-port)[![Build Status](http://img.shields.io/travis/unshiftio/requires-port/master.svg?style=flat-square)](https://travis-ci.org/unshiftio/requires-port)[![Dependencies](https://img.shields.io/david/unshiftio/requires-port.svg?style=flat-square)](https://david-dm.org/unshiftio/requires-port)[![Coverage Status](http://img.shields.io/coveralls/unshiftio/requires-port/master.svg?style=flat-square)](https://coveralls.io/r/unshiftio/requires-port?branch=master)[![IRC channel](http://img.shields.io/badge/IRC-irc.freenode.net%23unshift-00a8ff.svg?style=flat-square)](http://webchat.freenode.net/?channels=unshift) The module name says it all, check if a protocol requires a given port. ## Installation This module is intended to be used with browserify or Node.js and is distributed in the public npm registry. To install it simply run the following command from your CLI: ```j npm install --save requires-port ``` ## Usage The module exports it self as function and requires 2 arguments: 1. The port number, can be a string or number. 2. Protocol, can be `http`, `http:` or even `https://yomoma.com`. We just split it at `:` and use the first result. We currently accept the following protocols: - `http` - `https` - `ws` - `wss` - `ftp` - `gopher` - `file` It returns a boolean that indicates if protocol requires this port to be added to your URL. ```js 'use strict'; var required = require('requires-port'); console.log(required('8080', 'http')) // true console.log(required('80', 'http')) // false ``` # License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/immutable/README.md","tags":[],"body":"Immutable collections for JavaScript ==================================== [![Build Status](https://travis-ci.org/facebook/immutable-js.svg)](https://travis-ci.org/facebook/immutable-js) [Immutable][] data cannot be changed once created, leading to much simpler application development, no defensive copying, and enabling advanced memoization and change detection techniques with simple logic. [Persistent][] data presents a mutative API which does not update the data in-place, but instead always yields new updated data. Immutable.js provides many Persistent Immutable data structures including: `List`, `Stack`, `Map`, `OrderedMap`, `Set`, `OrderedSet` and `Record`. These data structures are highly efficient on modern JavaScript VMs by using structural sharing via [hash maps tries][] and [vector tries][] as popularized by Clojure and Scala, minimizing the need to copy or cache data. `Immutable` also provides a lazy `Seq`, allowing efficient chaining of collection methods like `map` and `filter` without creating intermediate representations. Create some `Seq` with `Range` and `Repeat`. Want to hear more? Watch the presentation about Immutable.js: [Persistent]: http://en.wikipedia.org/wiki/Persistent_data_structure [Immutable]: http://en.wikipedia.org/wiki/Immutable_object [hash maps tries]: http://en.wikipedia.org/wiki/Hash_array_mapped_trie [vector tries]: http://hypirion.com/musings/understanding-persistent-vector-pt-1 Getting started --------------- Install `immutable` using npm. ```shell npm install immutable ``` Then require it into any module. ```javascript var Immutable = require('immutable'); var map1 = Immutable.Map({a:1, b:2, c:3}); var map2 = map1.set('b', 50); map1.get('b'); // 2 map2.get('b'); // 50 ``` ### Browser To use `immutable` from a browser, download [dist/immutable.min.js](https://github.com/facebook/immutable-js/blob/master/dist/immutable.min.js) or use a CDN such as [CDNJS](https://cdnjs.com/libraries/immutable) or [jsDelivr](http://www.jsdelivr.com/#!immutable.js). Then, add it as a script tag to your page: ```html ``` Or use an AMD loader (such as [RequireJS](http://requirejs.org/)): ```javascript require(['./immutable.min.js'], function (Immutable) { var map1 = Immutable.Map({a:1, b:2, c:3}); var map2 = map1.set('b', 50); map1.get('b'); // 2 map2.get('b'); // 50 }); ``` If you're using [browserify](http://browserify.org/), the `immutable` npm module also works from the browser. ### TypeScript Use these Immutable collections and sequences as you would use native collections in your [TypeScript](http://typescriptlang.org) programs while still taking advantage of type generics, error detection, and auto-complete in your IDE. Just add a reference with a relative path to the type declarations at the top of your file. ```javascript /// import Immutable = require('immutable'); var map1: Immutable.Map; map1 = Immutable.Map({a:1, b:2, c:3}); var map2 = map1.set('b', 50); map1.get('b'); // 2 map2.get('b'); // 50 ``` The case for Immutability ------------------------- Much of what makes application development difficult is tracking mutation and maintaining state. Developing with immutable data encourages you to think differently about how data flows through your application. Subscribing to data events throughout your application creates a huge overhead of book-keeping which can hurt performance, sometimes dramatically, and creates opportunities for areas of your application to get out of sync with each other due to easy to make programmer error. Since immutable data never changes, subscribing to changes throughout the model is a dead-end and new data can only ever be passed from above. This model of data flow aligns well with the architecture of [React][] and especially well with an application designed using the ideas of [Flux][]. When data is passed from above rather than being subscribed to, and you're only interested in doing work when something has changed, you can use equality. Immutable collections should be treated as *values* rather than *objects*. While objects represents some thing which could change over time, a value represents the state of that thing at a particular instance of time. This principle is most important to understanding the appropriate use of immutable data. In order to treat Immutable.js collections as values, it's important to use the `Immutable.is()` function or `.equals()` method to determine value equality instead of the `===` operator which determines object reference identity. ```javascript var map1 = Immutable.Map({a:1, b:2, c:3}); var map2 = map1.set('b', 2); assert(map1.equals(map2) === true); var map3 = map1.set('b', 50); assert(map1.equals(map3) === false); ``` Note: As a performance optimization `Immutable` attempts to return the existing collection when an operation would result in an identical collection, allowing for using `===` reference equality to determine if something definitely has not changed. This can be extremely useful when used within memoization function which would prefer to re-run the function if a deeper equality check could potentially be more costly. The `===` equality check is also used internally by `Immutable.is` and `.equals()` as a performance optimization. If an object is immutable, it can be \"copied\" simply by making another reference to it instead of copying the entire object. Because a reference is much smaller than the object itself, this results in memory savings and a potential boost in execution speed for programs which rely on copies (such as an undo-stack). ```javascript var map1 = Immutable.Map({a:1, b:2, c:3}); var clone = map1; ``` [React]: http://facebook.github.io/react/ [Flux]: http://facebook.github.io/flux/docs/overview.html JavaScript-first API -------------------- While `immutable` is inspired by Clojure, Scala, Haskell and other functional programming environments, it's designed to bring these powerful concepts to JavaScript, and therefore has an Object-Oriented API that closely mirrors that of [ES6][] [Array][], [Map][], and [Set][]. [ES6]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla [Array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array [Map]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map [Set]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set The difference for the immutable collections is that methods which would mutate the collection, like `push`, `set`, `unshift` or `splice` instead return a new immutable collection. Methods which return new arrays like `slice` or `concat` instead return new immutable collections. ```javascript var list1 = Immutable.List.of(1, 2); var list2 = list1.push(3, 4, 5); var list3 = list2.unshift(0); var list4 = list1.concat(list2, list3); assert(list1.size === 2); assert(list2.size === 5); assert(list3.size === 6); assert(list4.size === 13); assert(list4.get(0) === 1); ``` Almost all of the methods on [Array][] will be found in similar form on `Immutable.List`, those of [Map][] found on `Immutable.Map`, and those of [Set][] found on `Immutable.Set`, including collection operations like `forEach()` and `map()`. ```javascript var alpha = Immutable.Map({a:1, b:2, c:3, d:4}); alpha.map((v, k) => k.toUpperCase()).join(); // 'A,B,C,D' ``` ### Accepts raw JavaScript objects. Designed to inter-operate with your existing JavaScript, `immutable` accepts plain JavaScript Arrays and Objects anywhere a method expects an `Iterable` with no performance penalty. ```javascript var map1 = Immutable.Map({a:1, b:2, c:3, d:4}); var map2 = Immutable.Map({c:10, a:20, t:30}); var obj = {d:100, o:200, g:300}; var map3 = map1.merge(map2, obj); // Map { a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 } ``` This is possible because `immutable` can treat any JavaScript Array or Object as an Iterable. You can take advantage of this in order to get sophisticated collection methods on JavaScript Objects, which otherwise have a very sparse native API. Because Seq evaluates lazily and does not cache intermediate results, these operations can be extremely efficient. ```javascript var myObject = {a:1,b:2,c:3}; Immutable.Seq(myObject).map(x => x * x).toObject(); // { a: 1, b: 4, c: 9 } ``` Keep in mind, when using JS objects to construct Immutable Maps, that JavaScript Object properties are always strings, even if written in a quote-less shorthand, while Immutable Maps accept keys of any type. ```js var obj = { 1: \"one\" }; Object.keys(obj); // [ \"1\" ] obj[\"1\"]; // \"one\" obj[1]; // \"one\" var map = Immutable.fromJS(obj); map.get(\"1\"); // \"one\" map.get(1); // undefined ``` Property access for JavaScript Objects first converts the key to a string, but since Immutable Map keys can be of any type the argument to `get()` is not altered. ### Converts back to raw JavaScript objects. All `immutable` Iterables can be converted to plain JavaScript Arrays and Objects shallowly with `toArray()` and `toObject()` or deeply with `toJS()`. All Immutable Iterables also implement `toJSON()` allowing them to be passed to `JSON.stringify` directly. ```javascript var deep = Immutable.Map({ a: 1, b: 2, c: Immutable.List.of(3, 4, 5) }); deep.toObject() // { a: 1, b: 2, c: List [ 3, 4, 5 ] } deep.toArray() // [ 1, 2, List [ 3, 4, 5 ] ] deep.toJS() // { a: 1, b: 2, c: [ 3, 4, 5 ] } JSON.stringify(deep) // '{\"a\":1,\"b\":2,\"c\":[3,4,5]}' ``` ### Embraces ES6 `Immutable` takes advantage of features added to JavaScript in [ES6][], the latest standard version of ECMAScript (JavaScript), including [Iterators][], [Arrow Functions][], [Classes][], and [Modules][]. It's also inspired by the [Map][] and [Set][] collections added to ES6. The library is \"transpiled\" to ES3 in order to support all modern browsers. All examples are presented in ES6. To run in all browsers, they need to be translated to ES3. ```js // ES6 foo.map(x => x * x); // ES3 foo.map(function (x) { return x * x; }); ``` [Iterators]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol [Arrow Functions]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions [Classes]: http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes [Modules]: http://www.2ality.com/2014/09/es6-modules-final.html Nested Structures ----------------- The collections in `immutable` are intended to be nested, allowing for deep trees of data, similar to JSON. ```javascript var nested = Immutable.fromJS({a:{b:{c:[3,4,5]}}}); // Map { a: Map { b: Map { c: List [ 3, 4, 5 ] } } } ``` A few power-tools allow for reading and operating on nested data. The most useful are `mergeDeep`, `getIn`, `setIn`, and `updateIn`, found on `List`, `Map` and `OrderedMap`. ```javascript var nested2 = nested.mergeDeep({a:{b:{d:6}}}); // Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } } ``` ```javascript nested2.getIn(['a', 'b', 'd']); // 6 var nested3 = nested2.updateIn(['a', 'b', 'd'], value => value + 1); // Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } } var nested4 = nested3.updateIn(['a', 'b', 'c'], list => list.push(6)); // Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } } ``` Lazy Seq -------- `Seq` describes a lazy operation, allowing them to efficiently chain use of all the Iterable methods (such as `map` and `filter`). **Seq is immutable** — Once a Seq is created, it cannot be changed, appended to, rearranged or otherwise modified. Instead, any mutative method called on a Seq will return a new Seq. **Seq is lazy** — Seq does as little work as necessary to respond to any method call. For example, the following does not perform any work, because the resulting Seq is never used: var oddSquares = Immutable.Seq.of(1,2,3,4,5,6,7,8) .filter(x => x % 2).map(x => x * x); Once the Seq is used, it performs only the work necessary. In this example, no intermediate arrays are ever created, filter is called three times, and map is only called twice: console.log(oddSquares.get(1)); // 9 Any collection can be converted to a lazy Seq with `.toSeq()`. var seq = Immutable.Map({a:1, b:1, c:1}).toSeq(); Seq allow for the efficient chaining of sequence operations, especially when converting to a different concrete type (such as to a JS object): seq.flip().map(key => key.toUpperCase()).flip().toObject(); // Map { A: 1, B: 1, C: 1 } As well as expressing logic that would otherwise seem memory-limited: Immutable.Range(1, Infinity) .skip(1000) .map(n => -n) .filter(n => n % 2 === 0) .take(2) .reduce((r, n) => r * n, 1); // 1006008 Note: An iterable is always iterated in the same order, however that order may not always be well defined, as is the case for the `Map`. Equality treats Collections as Data ----------------------------------- `Immutable` provides equality which treats immutable data structures as pure data, performing a deep equality check if necessary. ```javascript var map1 = Immutable.Map({a:1, b:1, c:1}); var map2 = Immutable.Map({a:1, b:1, c:1}); assert(map1 !== map2); // two different instances assert(Immutable.is(map1, map2)); // have equivalent values assert(map1.equals(map2)); // alternatively use the equals method ``` `Immutable.is()` uses the same measure of equality as [Object.is][] including if both are immutable and all keys and values are equal using the same measure of equality. [Object.is]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is Batching Mutations ------------------ > If a tree falls in the woods, does it make a sound? > > If a pure function mutates some local data in order to produce an immutable > return value, is that ok? > > — Rich Hickey, Clojure Applying a mutation to create a new immutable object results in some overhead, which can add up to a minor performance penalty. If you need to apply a series of mutations locally before returning, `Immutable` gives you the ability to create a temporary mutable (transient) copy of a collection and apply a batch of mutations in a performant manner by using `withMutations`. In fact, this is exactly how `Immutable` applies complex mutations itself. As an example, building `list2` results in the creation of 1, not 3, new immutable Lists. ```javascript var list1 = Immutable.List.of(1,2,3); var list2 = list1.withMutations(function (list) { list.push(4).push(5).push(6); }); assert(list1.size === 3); assert(list2.size === 6); ``` Note: `immutable` also provides `asMutable` and `asImmutable`, but only encourages their use when `withMutations` will not suffice. Use caution to not return a mutable copy, which could result in undesired behavior. *Important!*: Only a select few methods can be used in `withMutations` including `set`, `push` and `pop`. These methods can be applied directly against a persistent data-structure where other methods like `map`, `filter`, `sort`, and `splice` will always return new immutable data-structures and never mutate a mutable collection. Documentation ------------- [Read the docs](http://facebook.github.io/immutable-js/docs/) and eat your vegetables. Docs are automatically generated from [Immutable.d.ts](https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts). Please contribute! Also, don't miss the [Wiki](https://github.com/facebook/immutable-js/wiki) which contains articles on specific topics. Can't find something? Open an [issue](https://github.com/facebook/immutable-js/issues). Testing ------- If you are using the [Chai Assertion Library](http://chaijs.com/), [Chai Immutable](https://github.com/astorije/chai-immutable) provides a set of assertions to use against `Immutable` collections. Contribution ------------ Use [Github issues](https://github.com/facebook/immutable-js/issues) for requests. We actively welcome pull requests, learn how to [contribute](./CONTRIBUTING.md). Changelog --------- Changes are tracked as [Github releases](https://github.com/facebook/immutable-js/releases). Thanks ------ [Phil Bagwell](https://www.youtube.com/watch?v=K2NYwP90bNs), for his inspiration and research in persistent data structures. [Hugh Jackson](https://github.com/hughfdjackson/), for providing the npm package name. If you're looking for his unsupported package, see [this repository](https://github.com/hughfdjackson/immutable). License ------- `Immutable` is [BSD-licensed](./LICENSE). We also provide an additional [patent grant](./PATENTS)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/immutable/contrib/cursor/README.md","tags":[],"body":"Cursors ------- Cursors allow you to hold a reference to a path in a nested immutable data structure, allowing you to pass smaller sections of a larger nested collection to portions of your application while maintaining a central point aware of changes to the entire data structure: an `onChange` function which is called whenever a cursor or sub-cursor calls `update`. This is particularly useful when used in conjuction with component-based UI libraries like [React](http://facebook.github.io/react/) or to simulate \"state\" throughout an application while maintaining a single flow of logic. ```javascript var Immutable = require('immutable'); var Cursor = require('immutable/contrib/cursor'); var data = Immutable.fromJS({ a: { b: { c: 1 } } }); var cursor = Cursor.from(data, ['a', 'b'], newData => { data = newData; }); // ... elsewhere ... cursor.get('c'); // 1 cursor = cursor.update('c', x => x + 1); cursor.get('c'); // 2 // ... back to data ... data.getIn(['a', 'b', 'c']); // 2 ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/History.md","tags":[],"body":"# 1.8.1 (2016-01-20) * fix bug w/ HostHeaderTransformer and binary data # 1.8.0 (2015-11-04) * pass socket errors up to top level # 1.7.0 (2015-07-22) * add short arg options # 1.6.0 (2015-05-15) * keep sockets alive after connecting * add --open param to CLI # 1.5.0 (2014-10-25) * capture all errors on remote socket and restart the tunnel # 1.4.0 (2014-08-31) * don't emit errors for ETIMEDOUT # 1.2.0 / 2014-04-28 * return `client` from `localtunnel` API instantiation # 1.1.0 / 2014-02-24 * add a host header transform to change the 'Host' header in requests # 1.0.0 / 2014-02-14 * default to localltunnel.me for host * remove exported `connect` method (just export one function that does the same thing) * change localtunnel signature to (port, opt, fn) # 0.2.2 / 2014-01-09"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/README.md","tags":[],"body":"# localtunnel [![Build Status](https://travis-ci.org/localtunnel/localtunnel.svg?branch=master)](https://travis-ci.org/localtunnel/localtunnel) localtunnel exposes your localhost to the world for easy testing and sharing! No need to mess with DNS or deploy just to have others test out your changes. Great for working with browser testing tools like browserling or external api callback services like twilio which require a public url for callbacks. ## installation ## ``` npm install -g localtunnel ``` This will install the localtunnel module globally and add the 'lt' client cli tool to your PATH. ## use ## Assuming your local server is running on port 8000, just use the ```lt``` command to start the tunnel. ``` lt --port 8000 ``` Thats it! It will connect to the tunnel server, setup the tunnel, and tell you what url to use for your testing. This url will remain active for the duration of your session; so feel free to share it with others for happy fun time! You can restart your local server all you want, ```lt``` is smart enough to detect this and reconnect once it is back. ### arguments Below are some common arguments. See `lt --help` for additional arguments * `--subdomain` request a named subdomain on the localtunnel server (default is random characters) * `--local-host` proxy to a hostname other than localhost ## API ## The localtunnel client is also usable through an API (for test integration, automation, etc) ### localtunnel(port [,opts], fn) Creates a new localtunnel to the specified local `port`. `fn` will be called once you have been assigned a public localtunnel url. `opts` can be used to request a specific `subdomain`. ```javascript var localtunnel = require('localtunnel'); var tunnel = localtunnel(port, function(err, tunnel) { if (err) ... // the assigned public url for your tunnel // i.e. https://abcdefgjhij.localtunnel.me tunnel.url; }); tunnel.on('close', function() { // tunnels are closed }); ``` ### opts * `subdomain` A *string* value requesting a specific subdomain on the proxy server. **Note** You may not actually receive this name depending on availablily. * `local_host` Proxy to this hostname instead of `localhost`. This will also cause the `Host` header to be re-written to this value in proxied requests. ### Tunnel The `tunnel` instance returned to your callback emits the following events |event|args|description| |----|----|----| |error|err|fires when an error happens on the tunnel| |close||fires when the tunnel has closed| The `tunnel` instance has the following methods |method|args|description| |----|----|----| |close||close the tunnel| ## other clients ## Clients in other languages *go* [gotunnelme](https://github.com/NoahShen/gotunnelme) ## server ## See defunctzombie/localtunnel-server for details on the server that powers localtunnel. ## License ## MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/debug/History.md","tags":[],"body":"2.2.0 / 2015-05-09 ================== * package: update \"ms\" to v0.7.1 (#202, @dougwilson) * README: add logging to file example (#193, @DanielOchoa) * README: fixed a typo (#191, @amir-s) * browser: expose `storage` (#190, @stephenmathieson) * Makefile: add a `distclean` target (#189, @stephenmathieson) 2.1.3 / 2015-03-13 ================== * Updated stdout/stderr example (#186) * Updated example/stdout.js to match debug current behaviour * Renamed example/stderr.js to stdout.js * Update Readme.md (#184) * replace high intensity foreground color for bold (#182, #183) 2.1.2 / 2015-03-01 ================== * dist: recompile * update \"ms\" to v0.7.0 * package: update \"browserify\" to v9.0.3 * component: fix \"ms.js\" repo location * changed bower package name * updated documentation about using debug in a browser * fix: security error on safari (#167, #168, @yields) 2.1.1 / 2014-12-29 ================== * browser: use `typeof` to check for `console` existence * browser: check for `console.log` truthiness (fix IE 8/9) * browser: add support for Chrome apps * Readme: added Windows usage remarks * Add `bower.json` to properly support bower install 2.1.0 / 2014-10-15 ================== * node: implement `DEBUG_FD` env variable support * package: update \"browserify\" to v6.1.0 * package: add \"license\" field to package.json (#135, @panuhorsmalahti) 2.0.0 / 2014-09-01 ================== * package: update \"browserify\" to v5.11.0 * node: use stderr rather than stdout for logging (#29, @stephenmathieson) 1.0.4 / 2014-07-15 ================== * dist: recompile * example: remove `console.info()` log usage * example: add \"Content-Type\" UTF-8 header to browser example * browser: place %c marker after the space character * browser: reset the \"content\" color via `color: inherit` * browser: add colors support for Firefox >= v31 * debug: prefer an instance `log()` function over the global one (#119) * Readme: update documentation about styled console logs for FF v31 (#116, @wryk) 1.0.3 / 2014-07-09 ================== * Add support for multiple wildcards in namespaces (#122, @seegno) * browser: fix lint 1.0.2 / 2014-06-10 ================== * browser: update color palette (#113, @gscottolson) * common: make console logging function configurable (#108, @timoxley) * node: fix %o colors on old node <= 0.8.x * Makefile: find node path using shell/which (#109, @timoxley) 1.0.1 / 2014-06-06 ================== * browser: use `removeItem()` to clear localStorage * browser, node: don't set DEBUG if namespaces is undefined (#107, @leedm777) * package: add \"contributors\" section * node: fix comment typo * README: list authors 1.0.0 / 2014-06-04 ================== * make ms diff be global, not be scope * debug: ignore empty strings in enable() * node: make DEBUG_COLORS able to disable coloring * *: export the `colors` array * npmignore: don't publish the `dist` dir * Makefile: refactor to use browserify * package: add \"browserify\" as a dev dependency * Readme: add Web Inspector Colors section * node: reset terminal color for the debug content * node: map \"%o\" to `util.inspect()` * browser: map \"%j\" to `JSON.stringify()` * debug: add custom \"formatters\" * debug: use \"ms\" module for humanizing the diff * Readme: add \"bash\" syntax highlighting * browser: add Firebug color support * browser: add colors for WebKit browsers * node: apply log to `console` * rewrite: abstract common logic for Node & browsers * add .jshintrc file 0.8.1 / 2014-04-14 ================== * package: re-add the \"component\" section 0.8.0 / 2014-03-30 ================== * add `enable()` method for nodejs. Closes #27 * change from stderr to stdout * remove unnecessary index.js file 0.7.4 / 2013-11-13 ================== * remove \"browserify\" key from package.json (fixes something in browserify) 0.7.3 / 2013-10-30 ================== * fix: catch localStorage security error when cookies are blocked (Chrome) * add debug(err) support. Closes #46 * add .browser prop to package.json. Closes #42 0.7.2 / 2013-02-06 ================== * fix package.json * fix: Mobile Safari (private mode) is broken with debug * fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript 0.7.1 / 2013-02-05 ================== * add repository URL to package.json * add DEBUG_COLORED to force colored output * add browserify support * fix component. Closes #24 0.7.0 / 2012-05-04 ================== * Added .component to package.json * Added debug.component.js build 0.6.0 / 2012-03-16 ================== * Added support for \"-\" prefix in DEBUG [Vinay Pulim] * Added `.enabled` flag to the node version [TooTallNate] 0.5.0 / 2012-02-02 ================== * Added: humanize diffs. Closes #8 * Added `debug.disable()` to the CS variant * Removed padding. Closes #10 * Fixed: persist client-side variant again. Closes #9 0.4.0 / 2012-02-01 ================== * Added browser variant support for older browsers [TooTallNate] * Added `debug.enable('project:*')` to browser variant [TooTallNate] * Added padding to diff (moved it to the right) 0.3.0 / 2012-01-26 ================== * Added millisecond diff when isatty, otherwise UTC string 0.2.0 / 2012-01-22 ================== * Added wildcard support 0.1.0 / 2011-12-02 ================== * Added: remove colors unless stderr isatty [TooTallNate] 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/debug/Readme.md","tags":[],"body":"# debug tiny node.js debugging utility modelled after node core's debugging technique. ## Installation ```bash $ npm install debug ``` ## Usage With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you're used to work fine. A unique color is selected per-function for visibility. Example _app.js_: ```js var debug = require('debug')('http') , http = require('http') , name = 'My App'; // fake app debug('booting %s', name); http.createServer(function(req, res){ debug(req.method + ' ' + req.url); res.end('hello\\n'); }).listen(3000, function(){ debug('listening'); }); // fake worker of some kind require('./worker'); ``` Example _worker.js_: ```js var debug = require('debug')('worker'); setInterval(function(){ debug('doing some work'); }, 1000); ``` The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png) ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png) #### Windows note On Windows the environment variable is set using the `set` command. ```cmd set DEBUG=*,-not_this ``` Then, run the program to be debugged as usual. ## Millisecond diff When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls. ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png) When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below: ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png) ## Conventions If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\". ## Wildcards The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`. You can also exclude specific debuggers by prefixing them with a \"-\" character. For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\". ## Browser support Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include: ```js window.myDebug = require(\"debug\"); ``` (\"debug\" is a global object in the browser so we give this object a different name.) When your page is open in the browser, type the following in the console: ```js myDebug.enable(\"worker:*\") ``` Refresh the page. Debug output will continue to be sent to the console until it is disabled by typing `myDebug.disable()` in the console. ```js a = debug('worker:a'); b = debug('worker:b'); setInterval(function(){ a('doing some work'); }, 1000); setInterval(function(){ b('doing some work'); }, 1200); ``` #### Web Inspector Colors Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting option. These are WebKit web inspectors, Firefox ([since version 31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/)) and the Firebug plugin for Firefox (any version). Colored output looks something like: ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png) ### stderr vs stdout You can set an alternative logging method per-namespace by overriding the `log` method on a per-namespace or globally: Example _stdout.js_: ```js var debug = require('debug'); var error = debug('app:error'); // by default stderr is used error('goes to stderr!'); var log = debug('app:log'); // set this namespace to log via console.log log.log = console.log.bind(console); // don't forget to bind to console! log('goes to stdout'); error('still goes to stderr!'); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error('now goes to stdout via console.info'); log('still goes to stdout, but via console.info now'); ``` ### Save debug output to a file You can save all debug statements to a file by piping them. Example: ```bash $ DEBUG_FD=3 node your-app.js 3> whatever.log ``` ## Authors - TJ Holowaychuk - Nathan Rajlich ## License (The MIT License) Copyright (c) 2014 TJ Holowaychuk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/debug/node_modules/ms/History.md","tags":[],"body":"0.7.1 / 2015-04-20 ================== * prevent extraordinary long inputs (@evilpacket) * Fixed broken readme link 0.7.0 / 2014-11-24 ================== * add time abbreviations, updated tests and readme for the new units * fix example in the readme. * add LICENSE file 0.6.2 / 2013-12-05 ================== * Adding repository section to package.json to suppress warning from NPM. 0.6.1 / 2013-05-10 ================== * fix singularization [visionmedia] 0.6.0 / 2013-03-15 ================== * fix minutes 0.5.1 / 2013-02-24 ================== * add component namespace 0.5.0 / 2012-11-09 ================== * add short formatting as default and .long option * add .license property to component.json * add version to component.json 0.4.0 / 2012-10-22 ================== * add rounding to fix crazy decimals 0.3.0 / 2012-09-07 ================== * fix `ms()` [visionmedia] 0.2.0 / 2012-09-03 ================== * add component.json [visionmedia] * add days support [visionmedia] * add hours support [visionmedia] * add minutes support [visionmedia] * add seconds support [visionmedia] * add ms string support [visionmedia] * refactor tests to facilitate ms(number) [visionmedia] 0.1.0 / 2012-03-07 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/debug/node_modules/ms/README.md","tags":[],"body":"# ms.js: miliseconds conversion utility ```js ms('2 days') // 172800000 ms('1d') // 86400000 ms('10h') // 36000000 ms('2.5 hrs') // 9000000 ms('2h') // 7200000 ms('1m') // 60000 ms('5s') // 5000 ms('100') // 100 ``` ```js ms(60000) // \"1m\" ms(2 * 60000) // \"2m\" ms(ms('10 hours')) // \"10h\" ``` ```js ms(60000, { long: true }) // \"1 minute\" ms(2 * 60000, { long: true }) // \"2 minutes\" ms(ms('10 hours'), { long: true }) // \"10 hours\" ``` - Node/Browser compatible. Published as [`ms`](https://www.npmjs.org/package/ms) in [NPM](http://nodejs.org/download). - If a number is supplied to `ms`, a string with a unit is returned. - If a string that contains the number is supplied, it returns it as a number (e.g: it returns `100` for `'100'`). - If you pass a string with a number and a valid unit, the number of equivalent ms is returned. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/openurl/README.md","tags":[],"body":"openurl – Node.js module for opening URLs ========================================= openurl is a Node.js module for opening a URL via the operating system. This will usually trigger actions such as: - http URLs: open the default browser - mailto URLs: open the default email client - file URLs: open a window showing the directory (on OS X) Example interaction on the Node.js REPL: > require(\"openurl\").open(\"http://rauschma.de\") > require(\"openurl\").open(\"mailto:john@example.com\") You can generate emails as follows: require(\"openurl\").mailto([\"john@example.com\", \"jane@example.com\"], { subject: \"Hello!\", body: \"This is\\nan automatically sent email!\\n\" }); Install via npm: npm install openurl I’m not yet terribly familiar with implementing npm packages, so any feedback is welcome (especially experience reports on Windows and Linux, which I can’t test on). Related reading: - [Write your shell scripts in JavaScript, via Node.js](http://www.2ality.com/2011/12/nodejs-shell-scripting.html)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/CHANGELOG.md","tags":[],"body":"## Change Log ### v2.65.0 (2015/10/11) - [#1833](https://github.com/request/request/pull/1833) Update aws-sign2 to version 0.6.0 🚀 (@greenkeeperio-bot) - [#1811](https://github.com/request/request/pull/1811) Enable loose cookie parsing in tough-cookie (@Sebmaster) - [#1830](https://github.com/request/request/pull/1830) Bring back tilde ranges for all dependencies (@simov) - [#1821](https://github.com/request/request/pull/1821) Implement support for RFC 2617 MD5-sess algorithm. (@BigDSK) - [#1828](https://github.com/request/request/pull/1828) Updated qs dependency to 5.2.0 (@acroca) - [#1818](https://github.com/request/request/pull/1818) Extract `readResponseBody` method out of `onRequestResponse` (@pvoisin) - [#1819](https://github.com/request/request/pull/1819) Run stringify once (@mgenereu) - [#1814](https://github.com/request/request/pull/1814) Updated har-validator to version 2.0.2 (@greenkeeperio-bot) - [#1807](https://github.com/request/request/pull/1807) Updated tough-cookie to version 2.1.0 (@greenkeeperio-bot) - [#1800](https://github.com/request/request/pull/1800) Add caret ranges for devDependencies, except eslint (@simov) - [#1799](https://github.com/request/request/pull/1799) Updated karma-browserify to version 4.4.0 (@greenkeeperio-bot) - [#1797](https://github.com/request/request/pull/1797) Updated tape to version 4.2.0 (@greenkeeperio-bot) - [#1788](https://github.com/request/request/pull/1788) Pinned all dependencies (@greenkeeperio-bot) ### v2.64.0 (2015/09/25) - [#1787](https://github.com/request/request/pull/1787) npm ignore examples, release.sh and disabled.appveyor.yml (@thisconnect) - [#1775](https://github.com/request/request/pull/1775) Fix typo in README.md (@djchie) - [#1776](https://github.com/request/request/pull/1776) Changed word 'conjuction' to read 'conjunction' in README.md (@ryanwholey) - [#1785](https://github.com/request/request/pull/1785) Revert: Set default application/json content-type when using json option #1772 (@simov) ### v2.63.0 (2015/09/21) - [#1772](https://github.com/request/request/pull/1772) Set default application/json content-type when using json option (@jzaefferer) ### v2.62.0 (2015/09/15) - [#1768](https://github.com/request/request/pull/1768) Add node 4.0 to the list of build targets (@simov) - [#1767](https://github.com/request/request/pull/1767) Query strings now cooperate with unix sockets (@JoshWillik) - [#1750](https://github.com/request/request/pull/1750) Revert doc about installation of tough-cookie added in #884 (@LoicMahieu) - [#1746](https://github.com/request/request/pull/1746) Missed comma in Readme (@vladimirich) - [#1743](https://github.com/request/request/pull/1743) Fix options not being initialized in defaults method (@simov) ### v2.61.0 (2015/08/19) - [#1721](https://github.com/request/request/pull/1721) Minor fix in README.md (@arbaaz) - [#1733](https://github.com/request/request/pull/1733) Avoid useless Buffer transformation (@michelsalib) - [#1726](https://github.com/request/request/pull/1726) Update README.md (@paulomcnally) - [#1715](https://github.com/request/request/pull/1715) Fix forever option in node > 0.10 #1709 (@calibr) - [#1716](https://github.com/request/request/pull/1716) Do not create Buffer from Object in setContentLength(iojs v3.0 issue) (@calibr) - [#1711](https://github.com/request/request/pull/1711) Add ability to detect connect timeouts (@kevinburke) - [#1712](https://github.com/request/request/pull/1712) Set certificate expiration to August 2, 2018 (@kevinburke) - [#1700](https://github.com/request/request/pull/1700) debug() when JSON.parse() on a response body fails (@phillipj) ### v2.60.0 (2015/07/21) - [#1687](https://github.com/request/request/pull/1687) Fix caseless bug - content-type not being set for multipart/form-data (@simov, @garymathews) ### v2.59.0 (2015/07/20) - [#1671](https://github.com/request/request/pull/1671) Add tests and docs for using the agent, agentClass, agentOptions and forever options. Forever option defaults to using http(s).Agent in node 0.12+ (@simov) - [#1679](https://github.com/request/request/pull/1679) Fix - do not remove OAuth param when using OAuth realm (@simov, @jhalickman) - [#1668](https://github.com/request/request/pull/1668) updated dependencies (@deamme) - [#1656](https://github.com/request/request/pull/1656) Fix form method (@simov) - [#1651](https://github.com/request/request/pull/1651) Preserve HEAD method when using followAllRedirects (@simov) - [#1652](https://github.com/request/request/pull/1652) Update `encoding` option documentation in README.md (@daniel347x) - [#1650](https://github.com/request/request/pull/1650) Allow content-type overriding when using the `form` option (@simov) - [#1646](https://github.com/request/request/pull/1646) Clarify the nature of setting `ca` in `agentOptions` (@jeffcharles) ### v2.58.0 (2015/06/16) - [#1638](https://github.com/request/request/pull/1638) Use the `extend` module to deep extend in the defaults method (@simov) - [#1631](https://github.com/request/request/pull/1631) Move tunnel logic into separate module (@simov) - [#1634](https://github.com/request/request/pull/1634) Fix OAuth query transport_method (@simov) - [#1603](https://github.com/request/request/pull/1603) Add codecov (@simov) ### v2.57.0 (2015/05/31) - [#1615](https://github.com/request/request/pull/1615) Replace '.client' with '.socket' as the former was deprecated in 2.2.0. (@ChALkeR) ### v2.56.0 (2015/05/28) - [#1610](https://github.com/request/request/pull/1610) Bump module dependencies (@simov) - [#1600](https://github.com/request/request/pull/1600) Extract the querystring logic into separate module (@simov) - [#1607](https://github.com/request/request/pull/1607) Re-generate certificates (@simov) - [#1599](https://github.com/request/request/pull/1599) Move getProxyFromURI logic below the check for Invaild URI (#1595) (@simov) - [#1598](https://github.com/request/request/pull/1598) Fix the way http verbs are defined in order to please intellisense IDEs (@simov, @flannelJesus) - [#1591](https://github.com/request/request/pull/1591) A few minor fixes: (@simov) - [#1584](https://github.com/request/request/pull/1584) Refactor test-default tests (according to comments in #1430) (@simov) - [#1585](https://github.com/request/request/pull/1585) Fixing documentation regarding TLS options (#1583) (@mainakae) - [#1574](https://github.com/request/request/pull/1574) Refresh the oauth_nonce on redirect (#1573) (@simov) - [#1570](https://github.com/request/request/pull/1570) Discovered tests that weren't properly running (@seanstrom) - [#1569](https://github.com/request/request/pull/1569) Fix pause before response arrives (@kevinoid) - [#1558](https://github.com/request/request/pull/1558) Emit error instead of throw (@simov) - [#1568](https://github.com/request/request/pull/1568) Fix stall when piping gzipped response (@kevinoid) - [#1560](https://github.com/request/request/pull/1560) Update combined-stream (@apechimp) - [#1543](https://github.com/request/request/pull/1543) Initial support for oauth_body_hash on json payloads (@simov, @aesopwolf) - [#1541](https://github.com/request/request/pull/1541) Fix coveralls (@simov) - [#1540](https://github.com/request/request/pull/1540) Fix recursive defaults for convenience methods (@simov) - [#1536](https://github.com/request/request/pull/1536) More eslint style rules (@froatsnook) - [#1533](https://github.com/request/request/pull/1533) Adding dependency status bar to README.md (@YasharF) - [#1539](https://github.com/request/request/pull/1539) ensure the latest version of har-validator is included (@ahmadnassri) - [#1516](https://github.com/request/request/pull/1516) forever+pool test (@devTristan) ### v2.55.0 (2015/04/05) - [#1520](https://github.com/request/request/pull/1520) Refactor defaults (@simov) - [#1525](https://github.com/request/request/pull/1525) Delete request headers with undefined value. (@froatsnook) - [#1521](https://github.com/request/request/pull/1521) Add promise tests (@simov) - [#1518](https://github.com/request/request/pull/1518) Fix defaults (@simov) - [#1515](https://github.com/request/request/pull/1515) Allow static invoking of convenience methods (@simov) - [#1505](https://github.com/request/request/pull/1505) Fix multipart boundary extraction regexp (@simov) - [#1510](https://github.com/request/request/pull/1510) Fix basic auth form data (@simov) ### v2.54.0 (2015/03/24) - [#1501](https://github.com/request/request/pull/1501) HTTP Archive 1.2 support (@ahmadnassri) - [#1486](https://github.com/request/request/pull/1486) Add a test for the forever agent (@akshayp) - [#1500](https://github.com/request/request/pull/1500) Adding handling for no auth method and null bearer (@philberg) - [#1498](https://github.com/request/request/pull/1498) Add table of contents in readme (@simov) - [#1477](https://github.com/request/request/pull/1477) Add support for qs options via qsOptions key (@simov) - [#1496](https://github.com/request/request/pull/1496) Parameters encoded to base 64 should be decoded as UTF-8, not ASCII. (@albanm) - [#1494](https://github.com/request/request/pull/1494) Update eslint (@froatsnook) - [#1474](https://github.com/request/request/pull/1474) Require Colon in Basic Auth (@erykwalder) - [#1481](https://github.com/request/request/pull/1481) Fix baseUrl and redirections. (@burningtree) - [#1469](https://github.com/request/request/pull/1469) Feature/base url (@froatsnook) - [#1459](https://github.com/request/request/pull/1459) Add option to time request/response cycle (including rollup of redirects) (@aaron-em) - [#1468](https://github.com/request/request/pull/1468) Re-enable io.js/node 0.12 build (@simov, @mikeal, @BBB) - [#1442](https://github.com/request/request/pull/1442) Fixed the issue with strictSSL tests on 0.12 & io.js by explicitly setting a cipher that matches the cert. (@BBB, @nicolasmccurdy, @demohi, @simov, @0x4139) - [#1460](https://github.com/request/request/pull/1460) localAddress or proxy config is lost when redirecting (@simov, @0x4139) - [#1453](https://github.com/request/request/pull/1453) Test on Node.js 0.12 and io.js with allowed failures (@nicolasmccurdy, @demohi) - [#1426](https://github.com/request/request/pull/1426) Fixing tests to pass on io.js and node 0.12 (only test-https.js stiff failing) (@mikeal) - [#1446](https://github.com/request/request/pull/1446) Missing HTTP referer header with redirects Fixes #1038 (@simov, @guimonz) - [#1428](https://github.com/request/request/pull/1428) Deprecate Node v0.8.x (@nylen) - [#1436](https://github.com/request/request/pull/1436) Add ability to set a requester without setting default options (@tikotzky) - [#1435](https://github.com/request/request/pull/1435) dry up verb methods (@sethpollack) - [#1423](https://github.com/request/request/pull/1423) Allow fully qualified multipart content-type header (@simov) - [#1430](https://github.com/request/request/pull/1430) Fix recursive requester (@tikotzky) - [#1429](https://github.com/request/request/pull/1429) Throw error when making HEAD request with a body (@tikotzky) - [#1419](https://github.com/request/request/pull/1419) Add note that the project is broken in 0.12.x (@nylen) - [#1413](https://github.com/request/request/pull/1413) Fix basic auth (@simov) - [#1397](https://github.com/request/request/pull/1397) Improve pipe-from-file tests (@nylen) ### v2.53.0 (2015/02/02) - [#1396](https://github.com/request/request/pull/1396) Do not rfc3986 escape JSON bodies (@nylen, @simov) - [#1392](https://github.com/request/request/pull/1392) Improve `timeout` option description (@watson) ### v2.52.0 (2015/02/02) - [#1383](https://github.com/request/request/pull/1383) Add missing HTTPS options that were not being passed to tunnel (@brichard19) (@nylen) - [#1388](https://github.com/request/request/pull/1388) Upgrade mime-types package version (@roderickhsiao) - [#1389](https://github.com/request/request/pull/1389) Revise Setup Tunnel Function (@seanstrom) - [#1374](https://github.com/request/request/pull/1374) Allow explicitly disabling tunneling for proxied https destinations (@nylen) - [#1376](https://github.com/request/request/pull/1376) Use karma-browserify for tests. Add browser test coverage reporter. (@eiriksm) - [#1366](https://github.com/request/request/pull/1366) Refactor OAuth into separate module (@simov) - [#1373](https://github.com/request/request/pull/1373) Rewrite tunnel test to be pure Node.js (@nylen) - [#1371](https://github.com/request/request/pull/1371) Upgrade test reporter (@nylen) - [#1360](https://github.com/request/request/pull/1360) Refactor basic, bearer, digest auth logic into separate class (@simov) - [#1354](https://github.com/request/request/pull/1354) Remove circular dependency from debugging code (@nylen) - [#1351](https://github.com/request/request/pull/1351) Move digest auth into private prototype method (@simov) - [#1352](https://github.com/request/request/pull/1352) Update hawk dependency to ~2.3.0 (@mridgway) - [#1353](https://github.com/request/request/pull/1353) Correct travis-ci badge (@dogancelik) - [#1349](https://github.com/request/request/pull/1349) Make sure we return on errored browser requests. (@eiriksm) - [#1346](https://github.com/request/request/pull/1346) getProxyFromURI Extraction Refactor (@seanstrom) - [#1337](https://github.com/request/request/pull/1337) Standardize test ports on 6767 (@nylen) - [#1341](https://github.com/request/request/pull/1341) Emit FormData error events as Request error events (@nylen, @rwky) - [#1343](https://github.com/request/request/pull/1343) Clean up readme badges, and add Travis and Coveralls badges (@nylen) - [#1345](https://github.com/request/request/pull/1345) Update README.md (@Aaron-Hartwig) - [#1338](https://github.com/request/request/pull/1338) Always wait for server.close() callback in tests (@nylen) - [#1342](https://github.com/request/request/pull/1342) Add mock https server and redo start of browser tests for this purpose. (@eiriksm) - [#1339](https://github.com/request/request/pull/1339) Improve auth docs (@nylen) - [#1335](https://github.com/request/request/pull/1335) Add support for OAuth plaintext signature method (@simov) - [#1332](https://github.com/request/request/pull/1332) Add clean script to remove test-browser.js after the tests run (@seanstrom) - [#1327](https://github.com/request/request/pull/1327) Fix errors generating coverage reports. (@nylen) - [#1330](https://github.com/request/request/pull/1330) Return empty buffer upon empty response body and encoding is set to null (@seanstrom) - [#1326](https://github.com/request/request/pull/1326) Use faster container-based infrastructure on Travis (@nylen) - [#1315](https://github.com/request/request/pull/1315) Implement rfc3986 option (@simov, @nylen, @apoco, @DullReferenceException, @mmalecki, @oliamb, @cliffcrosland, @LewisJEllis, @eiriksm, @poislagarde) - [#1314](https://github.com/request/request/pull/1314) Detect urlencoded form data header via regex (@simov) - [#1317](https://github.com/request/request/pull/1317) Improve OAuth1.0 server side flow example (@simov) ### v2.51.0 (2014/12/10) - [#1310](https://github.com/request/request/pull/1310) Revert changes introduced in https://github.com/request/request/pull/1282 (@simov) ### v2.50.0 (2014/12/09) - [#1308](https://github.com/request/request/pull/1308) Add browser test to keep track of browserify compability. (@eiriksm) - [#1299](https://github.com/request/request/pull/1299) Add optional support for jsonReviver (@poislagarde) - [#1277](https://github.com/request/request/pull/1277) Add Coveralls configuration (@simov) - [#1307](https://github.com/request/request/pull/1307) Upgrade form-data, add back browserify compability. Fixes #455. (@eiriksm) - [#1305](https://github.com/request/request/pull/1305) Fix typo in README.md (@LewisJEllis) - [#1288](https://github.com/request/request/pull/1288) Update README.md to explain custom file use case (@cliffcrosland) ### v2.49.0 (2014/11/28) - [#1295](https://github.com/request/request/pull/1295) fix(proxy): no-proxy false positive (@oliamb) - [#1292](https://github.com/request/request/pull/1292) Upgrade `caseless` to 0.8.1 (@mmalecki) - [#1276](https://github.com/request/request/pull/1276) Set transfer encoding for multipart/related to chunked by default (@simov) - [#1275](https://github.com/request/request/pull/1275) Fix multipart content-type headers detection (@simov) - [#1269](https://github.com/request/request/pull/1269) adds streams example for review (@tbuchok) - [#1238](https://github.com/request/request/pull/1238) Add examples README.md (@simov) ### v2.48.0 (2014/11/12) - [#1263](https://github.com/request/request/pull/1263) Fixed a syntax error / typo in README.md (@xna2) - [#1253](https://github.com/request/request/pull/1253) Add multipart chunked flag (@simov, @nylen) - [#1251](https://github.com/request/request/pull/1251) Clarify that defaults() does not modify global defaults (@nylen) - [#1250](https://github.com/request/request/pull/1250) Improve documentation for pool and maxSockets options (@nylen) - [#1237](https://github.com/request/request/pull/1237) Documenting error handling when using streams (@vmattos) - [#1244](https://github.com/request/request/pull/1244) Finalize changelog command (@nylen) - [#1241](https://github.com/request/request/pull/1241) Fix typo (@alexanderGugel) - [#1223](https://github.com/request/request/pull/1223) Show latest version number instead of \"upcoming\" in changelog (@nylen) - [#1236](https://github.com/request/request/pull/1236) Document how to use custom CA in README (#1229) (@hypesystem) - [#1228](https://github.com/request/request/pull/1228) Support for oauth with RSA-SHA1 signing (@nylen) - [#1216](https://github.com/request/request/pull/1216) Made json and multipart options coexist (@nylen, @simov) - [#1225](https://github.com/request/request/pull/1225) Allow header white/exclusive lists in any case. (@RReverser) ### v2.47.0 (2014/10/26) - [#1222](https://github.com/request/request/pull/1222) Move from mikeal/request to request/request (@nylen) - [#1220](https://github.com/request/request/pull/1220) update qs dependency to 2.3.1 (@FredKSchott) - [#1212](https://github.com/request/request/pull/1212) Improve tests/test-timeout.js (@nylen) - [#1219](https://github.com/request/request/pull/1219) remove old globalAgent workaround for node 0.4 (@request) - [#1214](https://github.com/request/request/pull/1214) Remove cruft left over from optional dependencies (@nylen) - [#1215](https://github.com/request/request/pull/1215) Add proxyHeaderExclusiveList option for proxy-only headers. (@RReverser) - [#1211](https://github.com/request/request/pull/1211) Allow 'Host' header instead of 'host' and remember case across redirects (@nylen) - [#1208](https://github.com/request/request/pull/1208) Improve release script (@nylen) - [#1213](https://github.com/request/request/pull/1213) Support for custom cookie store (@nylen, @mitsuru) - [#1197](https://github.com/request/request/pull/1197) Clean up some code around setting the agent (@FredKSchott) - [#1209](https://github.com/request/request/pull/1209) Improve multipart form append test (@simov) - [#1207](https://github.com/request/request/pull/1207) Update changelog (@nylen) - [#1185](https://github.com/request/request/pull/1185) Stream multipart/related bodies (@simov) ### v2.46.0 (2014/10/23) - [#1198](https://github.com/request/request/pull/1198) doc for TLS/SSL protocol options (@shawnzhu) - [#1200](https://github.com/request/request/pull/1200) Add a Gitter chat badge to README.md (@gitter-badger) - [#1196](https://github.com/request/request/pull/1196) Upgrade taper test reporter to v0.3.0 (@nylen) - [#1199](https://github.com/request/request/pull/1199) Fix lint error: undeclared var i (@nylen) - [#1191](https://github.com/request/request/pull/1191) Move self.proxy decision logic out of init and into a helper (@FredKSchott) - [#1190](https://github.com/request/request/pull/1190) Move _buildRequest() logic back into init (@FredKSchott) - [#1186](https://github.com/request/request/pull/1186) Support Smarter Unix URL Scheme (@FredKSchott) - [#1178](https://github.com/request/request/pull/1178) update form documentation for new usage (@FredKSchott) - [#1180](https://github.com/request/request/pull/1180) Enable no-mixed-requires linting rule (@nylen) - [#1184](https://github.com/request/request/pull/1184) Don't forward authorization header across redirects to different hosts (@nylen) - [#1183](https://github.com/request/request/pull/1183) Correct README about pre and postamble CRLF using multipart and not mult... (@netpoetica) - [#1179](https://github.com/request/request/pull/1179) Lint tests directory (@nylen) - [#1169](https://github.com/request/request/pull/1169) add metadata for form-data file field (@dotcypress) - [#1173](https://github.com/request/request/pull/1173) remove optional dependencies (@seanstrom) - [#1165](https://github.com/request/request/pull/1165) Cleanup event listeners and remove function creation from init (@FredKSchott) - [#1174](https://github.com/request/request/pull/1174) update the request.cookie docs to have a valid cookie example (@seanstrom) - [#1168](https://github.com/request/request/pull/1168) create a detach helper and use detach helper in replace of nextTick (@seanstrom) - [#1171](https://github.com/request/request/pull/1171) in post can send form data and use callback (@MiroRadenovic) - [#1159](https://github.com/request/request/pull/1159) accept charset for x-www-form-urlencoded content-type (@seanstrom) - [#1157](https://github.com/request/request/pull/1157) Update README.md: body with json=true (@Rob--W) - [#1164](https://github.com/request/request/pull/1164) Disable tests/test-timeout.js on Travis (@nylen) - [#1153](https://github.com/request/request/pull/1153) Document how to run a single test (@nylen) - [#1144](https://github.com/request/request/pull/1144) adds documentation for the \"response\" event within the streaming section (@tbuchok) - [#1162](https://github.com/request/request/pull/1162) Update eslintrc file to no longer allow past errors (@FredKSchott) - [#1155](https://github.com/request/request/pull/1155) Support/use self everywhere (@seanstrom) - [#1161](https://github.com/request/request/pull/1161) fix no-use-before-define lint warnings (@emkay) - [#1156](https://github.com/request/request/pull/1156) adding curly brackets to get rid of lint errors (@emkay) - [#1151](https://github.com/request/request/pull/1151) Fix localAddress test on OS X (@nylen) - [#1145](https://github.com/request/request/pull/1145) documentation: fix outdated reference to setCookieSync old name in README (@FredKSchott) - [#1131](https://github.com/request/request/pull/1131) Update pool documentation (@FredKSchott) - [#1143](https://github.com/request/request/pull/1143) Rewrite all tests to use tape (@nylen) - [#1137](https://github.com/request/request/pull/1137) Add ability to specifiy querystring lib in options. (@jgrund) - [#1138](https://github.com/request/request/pull/1138) allow hostname and port in place of host on uri (@cappslock) - [#1134](https://github.com/request/request/pull/1134) Fix multiple redirects and `self.followRedirect` (@blakeembrey) - [#1130](https://github.com/request/request/pull/1130) documentation fix: add note about npm test for contributing (@FredKSchott) - [#1120](https://github.com/request/request/pull/1120) Support/refactor request setup tunnel (@seanstrom) - [#1129](https://github.com/request/request/pull/1129) linting fix: convert double quote strings to use single quotes (@FredKSchott) - [#1124](https://github.com/request/request/pull/1124) linting fix: remove unneccesary semi-colons (@FredKSchott) ### v2.45.0 (2014/10/06) - [#1128](https://github.com/request/request/pull/1128) Add test for setCookie regression (@nylen) - [#1127](https://github.com/request/request/pull/1127) added tests around using objects as values in a query string (@bcoe) - [#1103](https://github.com/request/request/pull/1103) Support/refactor request constructor (@nylen, @seanstrom) - [#1119](https://github.com/request/request/pull/1119) add basic linting to request library (@FredKSchott) - [#1121](https://github.com/request/request/pull/1121) Revert \"Explicitly use sync versions of cookie functions\" (@nylen) - [#1118](https://github.com/request/request/pull/1118) linting fix: Restructure bad empty if statement (@FredKSchott) - [#1117](https://github.com/request/request/pull/1117) Fix a bad check for valid URIs (@FredKSchott) - [#1113](https://github.com/request/request/pull/1113) linting fix: space out operators (@FredKSchott) - [#1116](https://github.com/request/request/pull/1116) Fix typo in `noProxyHost` definition (@FredKSchott) - [#1114](https://github.com/request/request/pull/1114) linting fix: Added a `new` operator that was missing when creating and throwing a new error (@FredKSchott) - [#1096](https://github.com/request/request/pull/1096) No_proxy support (@samcday) - [#1107](https://github.com/request/request/pull/1107) linting-fix: remove unused variables (@FredKSchott) - [#1112](https://github.com/request/request/pull/1112) linting fix: Make return values consistent and more straitforward (@FredKSchott) - [#1111](https://github.com/request/request/pull/1111) linting fix: authPieces was getting redeclared (@FredKSchott) - [#1105](https://github.com/request/request/pull/1105) Use strict mode in request (@FredKSchott) - [#1110](https://github.com/request/request/pull/1110) linting fix: replace lazy '==' with more strict '===' (@FredKSchott) - [#1109](https://github.com/request/request/pull/1109) linting fix: remove function call from if-else conditional statement (@FredKSchott) - [#1102](https://github.com/request/request/pull/1102) Fix to allow setting a `requester` on recursive calls to `request.defaults` (@tikotzky) - [#1095](https://github.com/request/request/pull/1095) Tweaking engines in package.json (@pdehaan) - [#1082](https://github.com/request/request/pull/1082) Forward the socket event from the httpModule request (@seanstrom) - [#972](https://github.com/request/request/pull/972) Clarify gzip handling in the README (@kevinoid) - [#1089](https://github.com/request/request/pull/1089) Mention that encoding defaults to utf8, not Buffer (@stuartpb) - [#1088](https://github.com/request/request/pull/1088) Fix cookie example in README.md and make it more clear (@pipi32167) - [#1027](https://github.com/request/request/pull/1027) Add support for multipart form data in request options. (@crocket) - [#1076](https://github.com/request/request/pull/1076) use Request.abort() to abort the request when the request has timed-out (@seanstrom) - [#1068](https://github.com/request/request/pull/1068) add optional postamble required by .NET multipart requests (@netpoetica) ### v2.43.0 (2014/09/18) - [#1057](https://github.com/request/request/pull/1057) Defaults should not overwrite defined options (@davidwood) - [#1046](https://github.com/request/request/pull/1046) Propagate datastream errors, useful in case gzip fails. (@ZJONSSON, @Janpot) - [#1063](https://github.com/request/request/pull/1063) copy the input headers object #1060 (@finnp) - [#1031](https://github.com/request/request/pull/1031) Explicitly use sync versions of cookie functions (@ZJONSSON) - [#1056](https://github.com/request/request/pull/1056) Fix redirects when passing url.parse(x) as URL to convenience method (@nylen) ### v2.42.0 (2014/09/04) - [#1053](https://github.com/request/request/pull/1053) Fix #1051 Parse auth properly when using non-tunneling proxy (@isaacs) ### v2.41.0 (2014/09/04) - [#1050](https://github.com/request/request/pull/1050) Pass whitelisted headers to tunneling proxy. Organize all tunneling logic. (@isaacs, @Feldhacker) - [#1035](https://github.com/request/request/pull/1035) souped up nodei.co badge (@rvagg) - [#1048](https://github.com/request/request/pull/1048) Aws is now possible over a proxy (@steven-aerts) - [#1039](https://github.com/request/request/pull/1039) extract out helper functions to a helper file (@seanstrom) - [#1021](https://github.com/request/request/pull/1021) Support/refactor indexjs (@seanstrom) - [#1033](https://github.com/request/request/pull/1033) Improve and document debug options (@nylen) - [#1034](https://github.com/request/request/pull/1034) Fix readme headings (@nylen) - [#1030](https://github.com/request/request/pull/1030) Allow recursive request.defaults (@tikotzky) - [#1029](https://github.com/request/request/pull/1029) Fix a couple of typos (@nylen) - [#675](https://github.com/request/request/pull/675) Checking for SSL fault on connection before reading SSL properties (@VRMink) - [#989](https://github.com/request/request/pull/989) Added allowRedirect function. Should return true if redirect is allowed or false otherwise (@doronin) - [#1025](https://github.com/request/request/pull/1025) [fixes #1023] Set self._ended to true once response has ended (@mridgway) - [#1020](https://github.com/request/request/pull/1020) Add back removed debug metadata (@FredKSchott) - [#1008](https://github.com/request/request/pull/1008) Moving to module instead of cutomer buffer concatenation. (@mikeal) - [#770](https://github.com/request/request/pull/770) Added dependency badge for README file; (@timgluz, @mafintosh, @lalitkapoor, @stash, @bobyrizov) - [#1016](https://github.com/request/request/pull/1016) toJSON no longer results in an infinite loop, returns simple objects (@FredKSchott) - [#1018](https://github.com/request/request/pull/1018) Remove pre-0.4.4 HTTPS fix (@mmalecki) - [#1006](https://github.com/request/request/pull/1006) Migrate to caseless, fixes #1001 (@mikeal) - [#995](https://github.com/request/request/pull/995) Fix parsing array of objects (@sjonnet19) - [#999](https://github.com/request/request/pull/999) Fix fallback for browserify for optional modules. (@eiriksm) - [#996](https://github.com/request/request/pull/996) Wrong oauth signature when multiple same param keys exist [updated] (@bengl, @hyjin) ### v2.40.0 (2014/08/06) - [#992](https://github.com/request/request/pull/992) Fix security vulnerability. Update qs (@poeticninja) - [#988](https://github.com/request/request/pull/988) “--” -> “—” (@upisfree) - [#987](https://github.com/request/request/pull/987) Show optional modules as being loaded by the module that reqeusted them (@iarna) ### v2.39.0 (2014/07/24) - [#976](https://github.com/request/request/pull/976) Update README.md (@pvoznenko) ### v2.38.0 (2014/07/22) - [#952](https://github.com/request/request/pull/952) Adding support to client certificate with proxy use case (@ofirshaked) - [#884](https://github.com/request/request/pull/884) Documented tough-cookie installation. (@wbyoung) - [#935](https://github.com/request/request/pull/935) Correct repository url (@fritx) - [#963](https://github.com/request/request/pull/963) Update changelog (@nylen) - [#960](https://github.com/request/request/pull/960) Support gzip with encoding on node pre-v0.9.4 (@kevinoid) - [#953](https://github.com/request/request/pull/953) Add async Content-Length computation when using form-data (@LoicMahieu) - [#844](https://github.com/request/request/pull/844) Add support for HTTP[S]_PROXY environment variables. Fixes #595. (@jvmccarthy) - [#946](https://github.com/request/request/pull/946) defaults: merge headers (@aj0strow) ### v2.37.0 (2014/07/07) - [#957](https://github.com/request/request/pull/957) Silence EventEmitter memory leak warning #311 (@watson) - [#955](https://github.com/request/request/pull/955) check for content-length header before setting it in nextTick (@camilleanne) - [#951](https://github.com/request/request/pull/951) Add support for gzip content decoding (@kevinoid) - [#949](https://github.com/request/request/pull/949) Manually enter querystring in form option (@charlespwd) - [#944](https://github.com/request/request/pull/944) Make request work with browserify (@eiriksm) - [#943](https://github.com/request/request/pull/943) New mime module (@eiriksm) - [#927](https://github.com/request/request/pull/927) Bump version of hawk dep. (@samccone) - [#907](https://github.com/request/request/pull/907) append secureOptions to poolKey (@medovob) ### v2.35.0 (2014/05/17) - [#901](https://github.com/request/request/pull/901) Fixes #555 (@pigulla) - [#897](https://github.com/request/request/pull/897) merge with default options (@vohof) - [#891](https://github.com/request/request/pull/891) fixes 857 - options object is mutated by calling request (@lalitkapoor) - [#869](https://github.com/request/request/pull/869) Pipefilter test (@tgohn) - [#866](https://github.com/request/request/pull/866) Fix typo (@dandv) - [#861](https://github.com/request/request/pull/861) Add support for RFC 6750 Bearer Tokens (@phedny) - [#809](https://github.com/request/request/pull/809) upgrade tunnel-proxy to 0.4.0 (@ksato9700) - [#850](https://github.com/request/request/pull/850) Fix word consistency in readme (@0xNobody) - [#810](https://github.com/request/request/pull/810) add some exposition to mpu example in README.md (@mikermcneil) - [#840](https://github.com/request/request/pull/840) improve error reporting for invalid protocols (@FND) - [#821](https://github.com/request/request/pull/821) added secureOptions back (@nw) - [#815](https://github.com/request/request/pull/815) Create changelog based on pull requests (@lalitkapoor) ### v2.34.0 (2014/02/18) - [#516](https://github.com/request/request/pull/516) UNIX Socket URL Support (@lyuzashi) - [#801](https://github.com/request/request/pull/801) 794 ignore cookie parsing and domain errors (@lalitkapoor) - [#802](https://github.com/request/request/pull/802) Added the Apache license to the package.json. (@keskival) - [#793](https://github.com/request/request/pull/793) Adds content-length calculation when submitting forms using form-data li... (@Juul) - [#785](https://github.com/request/request/pull/785) Provide ability to override content-type when `json` option used (@vvo) - [#781](https://github.com/request/request/pull/781) simpler isReadStream function (@joaojeronimo) ### v2.32.0 (2014/01/16) - [#767](https://github.com/request/request/pull/767) Use tough-cookie CookieJar sync API (@stash) - [#764](https://github.com/request/request/pull/764) Case-insensitive authentication scheme (@bobyrizov) - [#763](https://github.com/request/request/pull/763) Upgrade tough-cookie to 0.10.0 (@stash) - [#744](https://github.com/request/request/pull/744) Use Cookie.parse (@lalitkapoor) - [#757](https://github.com/request/request/pull/757) require aws-sign2 (@mafintosh) ### v2.31.0 (2014/01/08) - [#645](https://github.com/request/request/pull/645) update twitter api url to v1.1 (@mick) - [#746](https://github.com/request/request/pull/746) README: Markdown code highlight (@weakish) - [#745](https://github.com/request/request/pull/745) updating setCookie example to make it clear that the callback is required (@emkay) - [#742](https://github.com/request/request/pull/742) Add note about JSON output body type (@iansltx) - [#741](https://github.com/request/request/pull/741) README example is using old cookie jar api (@emkay) - [#736](https://github.com/request/request/pull/736) Fix callback arguments documentation (@mmalecki) ### v2.30.0 (2013/12/13) - [#732](https://github.com/request/request/pull/732) JSHINT: Creating global 'for' variable. Should be 'for (var ...'. (@Fritz-Lium) - [#730](https://github.com/request/request/pull/730) better HTTP DIGEST support (@dai-shi) - [#728](https://github.com/request/request/pull/728) Fix TypeError when calling request.cookie (@scarletmeow) ### v2.29.0 (2013/12/06) - [#727](https://github.com/request/request/pull/727) fix requester bug (@jchris) ### v2.28.0 (2013/12/04) - [#724](https://github.com/request/request/pull/724) README.md: add custom HTTP Headers example. (@tcort) - [#719](https://github.com/request/request/pull/719) Made a comment gender neutral. (@unsetbit) - [#715](https://github.com/request/request/pull/715) Request.multipart no longer crashes when header 'Content-type' present (@pastaclub) - [#710](https://github.com/request/request/pull/710) Fixing listing in callback part of docs. (@lukasz-zak) - [#696](https://github.com/request/request/pull/696) Edited README.md for formatting and clarity of phrasing (@Zearin) - [#694](https://github.com/request/request/pull/694) Typo in README (@VRMink) - [#690](https://github.com/request/request/pull/690) Handle blank password in basic auth. (@diversario) - [#682](https://github.com/request/request/pull/682) Optional dependencies (@Turbo87) - [#683](https://github.com/request/request/pull/683) Travis CI support (@Turbo87) - [#674](https://github.com/request/request/pull/674) change cookie module,to tough-cookie.please check it . (@sxyizhiren) - [#666](https://github.com/request/request/pull/666) make `ciphers` and `secureProtocol` to work in https request (@richarddong) - [#656](https://github.com/request/request/pull/656) Test case for #304. (@diversario) - [#662](https://github.com/request/request/pull/662) option.tunnel to explicitly disable tunneling (@seanmonstar) - [#659](https://github.com/request/request/pull/659) fix failure when running with NODE_DEBUG=request, and a test for that (@jrgm) - [#630](https://github.com/request/request/pull/630) Send random cnonce for HTTP Digest requests (@wprl) ### v2.27.0 (2013/08/15) - [#619](https://github.com/request/request/pull/619) decouple things a bit (@joaojeronimo) ### v2.26.0 (2013/08/07) - [#613](https://github.com/request/request/pull/613) Fixes #583, moved initialization of self.uri.pathname (@lexander) - [#605](https://github.com/request/request/pull/605) Only include \":\" + pass in Basic Auth if it's defined (fixes #602) (@bendrucker) ### v2.24.0 (2013/07/23) - [#596](https://github.com/request/request/pull/596) Global agent is being used when pool is specified (@Cauldrath) - [#594](https://github.com/request/request/pull/594) Emit complete event when there is no callback (@RomainLK) - [#601](https://github.com/request/request/pull/601) Fixed a small typo (@michalstanko) ### v2.23.0 (2013/07/23) - [#589](https://github.com/request/request/pull/589) Prevent setting headers after they are sent (@geek) - [#587](https://github.com/request/request/pull/587) Global cookie jar disabled by default (@threepointone) ### v2.22.0 (2013/07/05) - [#544](https://github.com/request/request/pull/544) Update http-signature version. (@davidlehn) - [#581](https://github.com/request/request/pull/581) Fix spelling of \"ignoring.\" (@bigeasy) - [#568](https://github.com/request/request/pull/568) use agentOptions to create agent when specified in request (@SamPlacette) - [#564](https://github.com/request/request/pull/564) Fix redirections (@criloz) - [#541](https://github.com/request/request/pull/541) The exported request function doesn't have an auth method (@tschaub) - [#542](https://github.com/request/request/pull/542) Expose Request class (@regality) ### v2.21.0 (2013/04/30) - [#536](https://github.com/request/request/pull/536) Allow explicitly empty user field for basic authentication. (@mikeando) - [#532](https://github.com/request/request/pull/532) fix typo (@fredericosilva) - [#497](https://github.com/request/request/pull/497) Added redirect event (@Cauldrath) - [#503](https://github.com/request/request/pull/503) Fix basic auth for passwords that contain colons (@tonistiigi) - [#521](https://github.com/request/request/pull/521) Improving test-localAddress.js (@noway421) - [#529](https://github.com/request/request/pull/529) dependencies versions bump (@jodaka) ### v2.17.0 (2013/04/22) - [#523](https://github.com/request/request/pull/523) Updating dependencies (@noway421) - [#520](https://github.com/request/request/pull/520) Fixing test-tunnel.js (@noway421) - [#519](https://github.com/request/request/pull/519) Update internal path state on post-creation QS changes (@jblebrun) - [#510](https://github.com/request/request/pull/510) Add HTTP Signature support. (@davidlehn) - [#502](https://github.com/request/request/pull/502) Fix POST (and probably other) requests that are retried after 401 Unauthorized (@nylen) - [#508](https://github.com/request/request/pull/508) Honor the .strictSSL option when using proxies (tunnel-agent) (@jhs) - [#512](https://github.com/request/request/pull/512) Make password optional to support the format: http://username@hostname/ (@pajato1) - [#513](https://github.com/request/request/pull/513) add 'localAddress' support (@yyfrankyy) - [#498](https://github.com/request/request/pull/498) Moving response emit above setHeaders on destination streams (@kenperkins) - [#490](https://github.com/request/request/pull/490) Empty response body (3-rd argument) must be passed to callback as an empty string (@Olegas) - [#479](https://github.com/request/request/pull/479) Changing so if Accept header is explicitly set, sending json does not ov... (@RoryH) - [#475](https://github.com/request/request/pull/475) Use `unescape` from `querystring` (@shimaore) - [#473](https://github.com/request/request/pull/473) V0.10 compat (@isaacs) - [#471](https://github.com/request/request/pull/471) Using querystring library from visionmedia (@kbackowski) - [#461](https://github.com/request/request/pull/461) Strip the UTF8 BOM from a UTF encoded response (@kppullin) - [#460](https://github.com/request/request/pull/460) hawk 0.10.0 (@hueniverse) - [#462](https://github.com/request/request/pull/462) if query params are empty, then request path shouldn't end with a '?' (merges cleanly now) (@jaipandya) - [#456](https://github.com/request/request/pull/456) hawk 0.9.0 (@hueniverse) - [#429](https://github.com/request/request/pull/429) Copy options before adding callback. (@nrn, @nfriedly, @youurayy, @jplock, @kapetan, @landeiro, @othiym23, @mmalecki) - [#454](https://github.com/request/request/pull/454) Destroy the response if present when destroying the request (clean merge) (@mafintosh) - [#310](https://github.com/request/request/pull/310) Twitter Oauth Stuff Out of Date; Now Updated (@joemccann, @isaacs, @mscdex) - [#413](https://github.com/request/request/pull/413) rename googledoodle.png to .jpg (@nfriedly, @youurayy, @jplock, @kapetan, @landeiro, @othiym23, @mmalecki) - [#448](https://github.com/request/request/pull/448) Convenience method for PATCH (@mloar) - [#444](https://github.com/request/request/pull/444) protect against double callbacks on error path (@spollack) - [#433](https://github.com/request/request/pull/433) Added support for HTTPS cert & key (@mmalecki) - [#430](https://github.com/request/request/pull/430) Respect specified {Host,host} headers, not just {host} (@andrewschaaf) - [#415](https://github.com/request/request/pull/415) Fixed a typo. (@jerem) - [#338](https://github.com/request/request/pull/338) Add more auth options, including digest support (@nylen) - [#403](https://github.com/request/request/pull/403) Optimize environment lookup to happen once only (@mmalecki) - [#398](https://github.com/request/request/pull/398) Add more reporting to tests (@mmalecki) - [#388](https://github.com/request/request/pull/388) Ensure \"safe\" toJSON doesn't break EventEmitters (@othiym23) - [#381](https://github.com/request/request/pull/381) Resolving \"Invalid signature. Expected signature base string: \" (@landeiro) - [#380](https://github.com/request/request/pull/380) Fixes missing host header on retried request when using forever agent (@mac-) - [#376](https://github.com/request/request/pull/376) Headers lost on redirect (@kapetan) - [#375](https://github.com/request/request/pull/375) Fix for missing oauth_timestamp parameter (@jplock) - [#374](https://github.com/request/request/pull/374) Correct Host header for proxy tunnel CONNECT (@youurayy) - [#370](https://github.com/request/request/pull/370) Twitter reverse auth uses x_auth_mode not x_auth_type (@drudge) - [#369](https://github.com/request/request/pull/369) Don't remove x_auth_mode for Twitter reverse auth (@drudge) - [#344](https://github.com/request/request/pull/344) Make AWS auth signing find headers correctly (@nlf) - [#363](https://github.com/request/request/pull/363) rfc3986 on base_uri, now passes tests (@jeffmarshall) - [#362](https://github.com/request/request/pull/362) Running `rfc3986` on `base_uri` in `oauth.hmacsign` instead of just `encodeURIComponent` (@jeffmarshall) - [#361](https://github.com/request/request/pull/361) Don't create a Content-Length header if we already have it set (@danjenkins) - [#360](https://github.com/request/request/pull/360) Delete self._form along with everything else on redirect (@jgautier) - [#355](https://github.com/request/request/pull/355) stop sending erroneous headers on redirected requests (@azylman) - [#332](https://github.com/request/request/pull/332) Fix #296 - Only set Content-Type if body exists (@Marsup) - [#343](https://github.com/request/request/pull/343) Allow AWS to work in more situations, added a note in the README on its usage (@nlf) - [#320](https://github.com/request/request/pull/320) request.defaults() doesn't need to wrap jar() (@StuartHarris) - [#322](https://github.com/request/request/pull/322) Fix + test for piped into request bumped into redirect. #321 (@alexindigo) - [#326](https://github.com/request/request/pull/326) Do not try to remove listener from an undefined connection (@strk) - [#318](https://github.com/request/request/pull/318) Pass servername to tunneling secure socket creation (@isaacs) - [#317](https://github.com/request/request/pull/317) Workaround for #313 (@isaacs) - [#293](https://github.com/request/request/pull/293) Allow parser errors to bubble up to request (@mscdex) - [#290](https://github.com/request/request/pull/290) A test for #289 (@isaacs) - [#280](https://github.com/request/request/pull/280) Like in node.js print options if NODE_DEBUG contains the word request (@Filirom1) - [#207](https://github.com/request/request/pull/207) Fix #206 Change HTTP/HTTPS agent when redirecting between protocols (@isaacs) - [#214](https://github.com/request/request/pull/214) documenting additional behavior of json option (@jphaas) - [#272](https://github.com/request/request/pull/272) Boundary begins with CRLF? (@elspoono, @timshadel, @naholyr, @nanodocumet, @TehShrike) - [#284](https://github.com/request/request/pull/284) Remove stray `console.log()` call in multipart generator. (@bcherry) - [#241](https://github.com/request/request/pull/241) Composability updates suggested by issue #239 (@polotek) - [#282](https://github.com/request/request/pull/282) OAuth Authorization header contains non-\"oauth_\" parameters (@jplock) - [#279](https://github.com/request/request/pull/279) fix tests with boundary by injecting boundry from header (@benatkin) - [#273](https://github.com/request/request/pull/273) Pipe back pressure issue (@mafintosh) - [#268](https://github.com/request/request/pull/268) I'm not OCD seriously (@TehShrike) - [#263](https://github.com/request/request/pull/263) Bug in OAuth key generation for sha1 (@nanodocumet) - [#265](https://github.com/request/request/pull/265) uncaughtException when redirected to invalid URI (@naholyr) - [#262](https://github.com/request/request/pull/262) JSON test should check for equality (@timshadel) - [#261](https://github.com/request/request/pull/261) Setting 'pool' to 'false' does NOT disable Agent pooling (@timshadel) - [#249](https://github.com/request/request/pull/249) Fix for the fix of your (closed) issue #89 where self.headers[content-length] is set to 0 for all methods (@sethbridges, @polotek, @zephrax, @jeromegn) - [#255](https://github.com/request/request/pull/255) multipart allow body === '' ( the empty string ) (@Filirom1) - [#260](https://github.com/request/request/pull/260) fixed just another leak of 'i' (@sreuter) - [#246](https://github.com/request/request/pull/246) Fixing the set-cookie header (@jeromegn) - [#243](https://github.com/request/request/pull/243) Dynamic boundary (@zephrax) - [#240](https://github.com/request/request/pull/240) don't error when null is passed for options (@polotek) - [#211](https://github.com/request/request/pull/211) Replace all occurrences of special chars in RFC3986 (@chriso) - [#224](https://github.com/request/request/pull/224) Multipart content-type change (@janjongboom) - [#217](https://github.com/request/request/pull/217) need to use Authorization (titlecase) header with Tumblr OAuth (@visnup) - [#203](https://github.com/request/request/pull/203) Fix cookie and redirect bugs and add auth support for HTTPS tunnel (@milewise) - [#199](https://github.com/request/request/pull/199) Tunnel (@isaacs) - [#198](https://github.com/request/request/pull/198) Bugfix on forever usage of util.inherits (@isaacs) - [#197](https://github.com/request/request/pull/197) Make ForeverAgent work with HTTPS (@isaacs) - [#193](https://github.com/request/request/pull/193) Fixes GH-119 (@goatslacker) - [#188](https://github.com/request/request/pull/188) Add abort support to the returned request (@itay) - [#176](https://github.com/request/request/pull/176) Querystring option (@csainty) - [#182](https://github.com/request/request/pull/182) Fix request.defaults to support (uri, options, callback) api (@twilson63) - [#180](https://github.com/request/request/pull/180) Modified the post, put, head and del shortcuts to support uri optional param (@twilson63) - [#179](https://github.com/request/request/pull/179) fix to add opts in .pipe(stream, opts) (@substack) - [#177](https://github.com/request/request/pull/177) Issue #173 Support uri as first and optional config as second argument (@twilson63) - [#170](https://github.com/request/request/pull/170) can't create a cookie in a wrapped request (defaults) (@fabianonunes) - [#168](https://github.com/request/request/pull/168) Picking off an EasyFix by adding some missing mimetypes. (@serby) - [#161](https://github.com/request/request/pull/161) Fix cookie jar/headers.cookie collision (#125) (@papandreou) - [#162](https://github.com/request/request/pull/162) Fix issue #159 (@dpetukhov) - [#90](https://github.com/request/request/pull/90) add option followAllRedirects to follow post/put redirects (@jroes) - [#148](https://github.com/request/request/pull/148) Retry Agent (@thejh) - [#146](https://github.com/request/request/pull/146) Multipart should respect content-type if previously set (@apeace) - [#144](https://github.com/request/request/pull/144) added \"form\" option to readme (@petejkim) - [#133](https://github.com/request/request/pull/133) Fixed cookies parsing (@afanasy) - [#135](https://github.com/request/request/pull/135) host vs hostname (@iangreenleaf) - [#132](https://github.com/request/request/pull/132) return the body as a Buffer when encoding is set to null (@jahewson) - [#112](https://github.com/request/request/pull/112) Support using a custom http-like module (@jhs) - [#104](https://github.com/request/request/pull/104) Cookie handling contains bugs (@janjongboom) - [#121](https://github.com/request/request/pull/121) Another patch for cookie handling regression (@jhurliman) - [#117](https://github.com/request/request/pull/117) Remove the global `i` (@3rd-Eden) - [#110](https://github.com/request/request/pull/110) Update to Iris Couch URL (@jhs) - [#86](https://github.com/request/request/pull/86) Can't post binary to multipart requests (@kkaefer) - [#105](https://github.com/request/request/pull/105) added test for proxy option. (@dominictarr) - [#102](https://github.com/request/request/pull/102) Implemented cookies - closes issue 82: https://github.com/mikeal/request/issues/82 (@alessioalex) - [#97](https://github.com/request/request/pull/97) Typo in previous pull causes TypeError in non-0.5.11 versions (@isaacs) - [#96](https://github.com/request/request/pull/96) Authless parsed url host support (@isaacs) - [#81](https://github.com/request/request/pull/81) Enhance redirect handling (@danmactough) - [#78](https://github.com/request/request/pull/78) Don't try to do strictSSL for non-ssl connections (@isaacs) - [#76](https://github.com/request/request/pull/76) Bug when a request fails and a timeout is set (@Marsup) - [#70](https://github.com/request/request/pull/70) add test script to package.json (@isaacs, @aheckmann) - [#73](https://github.com/request/request/pull/73) Fix #71 Respect the strictSSL flag (@isaacs) - [#69](https://github.com/request/request/pull/69) Flatten chunked requests properly (@isaacs) - [#67](https://github.com/request/request/pull/67) fixed global variable leaks (@aheckmann) - [#66](https://github.com/request/request/pull/66) Do not overwrite established content-type headers for read stream deliver (@voodootikigod) - [#53](https://github.com/request/request/pull/53) Parse json: Issue #51 (@benatkin) - [#45](https://github.com/request/request/pull/45) Added timeout option (@mbrevoort) - [#35](https://github.com/request/request/pull/35) The \"end\" event isn't emitted for some responses (@voxpelli) - [#31](https://github.com/request/request/pull/31) Error on piping a request to a destination (@tobowers)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/CONTRIBUTING.md","tags":[],"body":"# This is an OPEN Open Source Project ----------------------------------------- ## What? Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project. ## Rules There are a few basic ground-rules for contributors: 1. **No `--force` pushes** or modifying the Git history in any way. 1. **Non-master branches** ought to be used for ongoing work. 1. **External API changes and significant modifications** ought to be subject to an **internal pull-request** to solicit feedback from other contributors. 1. Internal pull-requests to solicit feedback are *encouraged* for any other non-trivial contribution but left to the discretion of the contributor. 1. For significant changes wait a full 24 hours before merging so that active contributors who are distributed throughout the world have a chance to weigh in. 1. Contributors should attempt to adhere to the prevailing code-style. 1. Run `npm test` locally before submitting your PR, to catch any easy to miss style & testing issues. To diagnose test failures, there are two ways to run a single test file: - `node_modules/.bin/taper tests/test-file.js` - run using the default [`taper`](https://github.com/nylen/taper) test reporter. - `node tests/test-file.js` - view the raw [tap](https://testanything.org/) output. ## Releases Declaring formal releases remains the prerogative of the project maintainer. ## Changes to this arrangement This is an experiment and feedback is welcome! This document may also be subject to pull-requests or changes by contributors where you believe you have something valuable to add or change. -----------------------------------------"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/README.md","tags":[],"body":"# Request - Simplified HTTP client [![npm package](https://nodei.co/npm/request.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/request/) [![Build status](https://img.shields.io/travis/request/request.svg?style=flat-square)](https://travis-ci.org/request/request) [![Coverage](https://img.shields.io/codecov/c/github/request/request.svg?style=flat-square)](https://codecov.io/github/request/request?branch=master) [![Coverage](https://img.shields.io/coveralls/request/request.svg?style=flat-square)](https://coveralls.io/r/request/request) [![Dependency Status](https://img.shields.io/david/request/request.svg?style=flat-square)](https://david-dm.org/request/request) [![Gitter](https://img.shields.io/badge/gitter-join_chat-blue.svg?style=flat-square)](https://gitter.im/request/request?utm_source=badge) ## Super simple to use Request is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default. ```js var request = require('request'); request('http://www.google.com', function (error, response, body) { if (!error && response.statusCode == 200) { console.log(body) // Show the HTML for the Google homepage. } }) ``` ## Table of contents - [Streaming](#streaming) - [Forms](#forms) - [HTTP Authentication](#http-authentication) - [Custom HTTP Headers](#custom-http-headers) - [OAuth Signing](#oauth-signing) - [Proxies](#proxies) - [Unix Domain Sockets](#unix-domain-sockets) - [TLS/SSL Protocol](#tlsssl-protocol) - [Support for HAR 1.2](#support-for-har-12) - [**All Available Options**](#requestoptions-callback) Request also offers [convenience methods](#convenience-methods) like `request.defaults` and `request.post`, and there are lots of [usage examples](#examples) and several [debugging techniques](#debugging). --- ## Streaming You can stream any response to a file stream. ```js request('http://google.com/doodle.png').pipe(fs.createWriteStream('doodle.png')) ``` You can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types (in this case `application/json`) and use the proper `content-type` in the PUT request (if the headers don’t already provide one). ```js fs.createReadStream('file.json').pipe(request.put('http://mysite.com/obj.json')) ``` Request can also `pipe` to itself. When doing so, `content-type` and `content-length` are preserved in the PUT headers. ```js request.get('http://google.com/img.png').pipe(request.put('http://mysite.com/img.png')) ``` Request emits a \"response\" event when a response is received. The `response` argument will be an instance of [http.IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage). ```js request .get('http://google.com/img.png') .on('response', function(response) { console.log(response.statusCode) // 200 console.log(response.headers['content-type']) // 'image/png' }) .pipe(request.put('http://mysite.com/img.png')) ``` To easily handle errors when streaming requests, listen to the `error` event before piping: ```js request .get('http://mysite.com/doodle.png') .on('error', function(err) { console.log(err) }) .pipe(fs.createWriteStream('doodle.png')) ``` Now let’s get fancy. ```js http.createServer(function (req, resp) { if (req.url === '/doodle.png') { if (req.method === 'PUT') { req.pipe(request.put('http://mysite.com/doodle.png')) } else if (req.method === 'GET' || req.method === 'HEAD') { request.get('http://mysite.com/doodle.png').pipe(resp) } } }) ``` You can also `pipe()` from `http.ServerRequest` instances, as well as to `http.ServerResponse` instances. The HTTP method, headers, and entity-body data will be sent. Which means that, if you don't really care about security, you can do: ```js http.createServer(function (req, resp) { if (req.url === '/doodle.png') { var x = request('http://mysite.com/doodle.png') req.pipe(x) x.pipe(resp) } }) ``` And since `pipe()` returns the destination stream in ≥ Node 0.5.x you can do one line proxying. :) ```js req.pipe(request('http://mysite.com/doodle.png')).pipe(resp) ``` Also, none of this new functionality conflicts with requests previous features, it just expands them. ```js var r = request.defaults({'proxy':'http://localproxy.com'}) http.createServer(function (req, resp) { if (req.url === '/doodle.png') { r.get('http://google.com/doodle.png').pipe(resp) } }) ``` You can still use intermediate proxies, the requests will still follow HTTP forwards, etc. [back to top](#table-of-contents) --- ## Forms `request` supports `application/x-www-form-urlencoded` and `multipart/form-data` form uploads. For `multipart/related` refer to the `multipart` API. #### application/x-www-form-urlencoded (URL-Encoded Forms) URL-encoded forms are simple. ```js request.post('http://service.com/upload', {form:{key:'value'}}) // or request.post('http://service.com/upload').form({key:'value'}) // or request.post({url:'http://service.com/upload', form: {key:'value'}}, function(err,httpResponse,body){ /* ... */ }) ``` #### multipart/form-data (Multipart Form Uploads) For `multipart/form-data` we use the [form-data](https://github.com/felixge/node-form-data) library by [@felixge](https://github.com/felixge). For the most cases, you can pass your upload form data via the `formData` option. ```js var formData = { // Pass a simple key-value pair my_field: 'my_value', // Pass data via Buffers my_buffer: new Buffer([1, 2, 3]), // Pass data via Streams my_file: fs.createReadStream(__dirname + '/unicycle.jpg'), // Pass multiple values /w an Array attachments: [ fs.createReadStream(__dirname + '/attachment1.jpg'), fs.createReadStream(__dirname + '/attachment2.jpg') ], // Pass optional meta-data with an 'options' object with style: {value: DATA, options: OPTIONS} // Use case: for some types of streams, you'll need to provide \"file\"-related information manually. // See the `form-data` README for more information about options: https://github.com/felixge/node-form-data custom_file: { value: fs.createReadStream('/dev/urandom'), options: { filename: 'topsecret.jpg', contentType: 'image/jpg' } } }; request.post({url:'http://service.com/upload', formData: formData}, function optionalCallback(err, httpResponse, body) { if (err) { return console.error('upload failed:', err); } console.log('Upload successful! Server responded with:', body); }); ``` For advanced cases, you can access the form-data object itself via `r.form()`. This can be modified until the request is fired on the next cycle of the event-loop. (Note that this calling `form()` will clear the currently set form data for that request.) ```js // NOTE: Advanced use-case, for normal use see 'formData' usage above var r = request.post('http://service.com/upload', function optionalCallback(err, httpResponse, body) {...}) var form = r.form(); form.append('my_field', 'my_value'); form.append('my_buffer', new Buffer([1, 2, 3])); form.append('custom_file', fs.createReadStream(__dirname + '/unicycle.jpg'), {filename: 'unicycle.jpg'}); ``` See the [form-data README](https://github.com/felixge/node-form-data) for more information & examples. #### multipart/related Some variations in different HTTP implementations require a newline/CRLF before, after, or both before and after the boundary of a `multipart/related` request (using the multipart option). This has been observed in the .NET WebAPI version 4.0. You can turn on a boundary preambleCRLF or postamble by passing them as `true` to your request options. ```js request({ method: 'PUT', preambleCRLF: true, postambleCRLF: true, uri: 'http://service.com/upload', multipart: [ { 'content-type': 'application/json', body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}}) }, { body: 'I am an attachment' }, { body: fs.createReadStream('image.png') } ], // alternatively pass an object containing additional options multipart: { chunked: false, data: [ { 'content-type': 'application/json', body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}}) }, { body: 'I am an attachment' } ] } }, function (error, response, body) { if (error) { return console.error('upload failed:', error); } console.log('Upload successful! Server responded with:', body); }) ``` [back to top](#table-of-contents) --- ## HTTP Authentication ```js request.get('http://some.server.com/').auth('username', 'password', false); // or request.get('http://some.server.com/', { 'auth': { 'user': 'username', 'pass': 'password', 'sendImmediately': false } }); // or request.get('http://some.server.com/').auth(null, null, true, 'bearerToken'); // or request.get('http://some.server.com/', { 'auth': { 'bearer': 'bearerToken' } }); ``` If passed as an option, `auth` should be a hash containing values: - `user` || `username` - `pass` || `password` - `sendImmediately` (optional) - `bearer` (optional) The method form takes parameters `auth(username, password, sendImmediately, bearer)`. `sendImmediately` defaults to `true`, which causes a basic or bearer authentication header to be sent. If `sendImmediately` is `false`, then `request` will retry with a proper authentication header after receiving a `401` response from the server (which must contain a `WWW-Authenticate` header indicating the required authentication method). Note that you can also specify basic authentication using the URL itself, as detailed in [RFC 1738](http://www.ietf.org/rfc/rfc1738.txt). Simply pass the `user:password` before the host with an `@` sign: ```js var username = 'username', password = 'password', url = 'http://' + username + ':' + password + '@some.server.com'; request({url: url}, function (error, response, body) { // Do more stuff with 'body' here }); ``` Digest authentication is supported, but it only works with `sendImmediately` set to `false`; otherwise `request` will send basic authentication on the initial request, which will probably cause the request to fail. Bearer authentication is supported, and is activated when the `bearer` value is available. The value may be either a `String` or a `Function` returning a `String`. Using a function to supply the bearer token is particularly useful if used in conjunction with `defaults` to allow a single function to supply the last known token at the time of sending a request, or to compute one on the fly. [back to top](#table-of-contents) --- ## Custom HTTP Headers HTTP Headers, such as `User-Agent`, can be set in the `options` object. In the example below, we call the github API to find out the number of stars and forks for the request repository. This requires a custom `User-Agent` header as well as https. ```js var request = require('request'); var options = { url: 'https://api.github.com/repos/request/request', headers: { 'User-Agent': 'request' } }; function callback(error, response, body) { if (!error && response.statusCode == 200) { var info = JSON.parse(body); console.log(info.stargazers_count + \" Stars\"); console.log(info.forks_count + \" Forks\"); } } request(options, callback); ``` [back to top](#table-of-contents) --- ## OAuth Signing [OAuth version 1.0](https://tools.ietf.org/html/rfc5849) is supported. The default signing algorithm is [HMAC-SHA1](https://tools.ietf.org/html/rfc5849#section-3.4.2): ```js // OAuth1.0 - 3-legged server side flow (Twitter example) // step 1 var qs = require('querystring') , oauth = { callback: 'http://mysite.com/callback/' , consumer_key: CONSUMER_KEY , consumer_secret: CONSUMER_SECRET } , url = 'https://api.twitter.com/oauth/request_token' ; request.post({url:url, oauth:oauth}, function (e, r, body) { // Ideally, you would take the body in the response // and construct a URL that a user clicks on (like a sign in button). // The verifier is only available in the response after a user has // verified with twitter that they are authorizing your app. // step 2 var req_data = qs.parse(body) var uri = 'https://api.twitter.com/oauth/authenticate' + '?' + qs.stringify({oauth_token: req_data.oauth_token}) // redirect the user to the authorize uri // step 3 // after the user is redirected back to your server var auth_data = qs.parse(body) , oauth = { consumer_key: CONSUMER_KEY , consumer_secret: CONSUMER_SECRET , token: auth_data.oauth_token , token_secret: req_data.oauth_token_secret , verifier: auth_data.oauth_verifier } , url = 'https://api.twitter.com/oauth/access_token' ; request.post({url:url, oauth:oauth}, function (e, r, body) { // ready to make signed requests on behalf of the user var perm_data = qs.parse(body) , oauth = { consumer_key: CONSUMER_KEY , consumer_secret: CONSUMER_SECRET , token: perm_data.oauth_token , token_secret: perm_data.oauth_token_secret } , url = 'https://api.twitter.com/1.1/users/show.json' , qs = { screen_name: perm_data.screen_name , user_id: perm_data.user_id } ; request.get({url:url, oauth:oauth, qs:qs, json:true}, function (e, r, user) { console.log(user) }) }) }) ``` For [RSA-SHA1 signing](https://tools.ietf.org/html/rfc5849#section-3.4.3), make the following changes to the OAuth options object: * Pass `signature_method : 'RSA-SHA1'` * Instead of `consumer_secret`, specify a `private_key` string in [PEM format](http://how2ssl.com/articles/working_with_pem_files/) For [PLAINTEXT signing](http://oauth.net/core/1.0/#anchor22), make the following changes to the OAuth options object: * Pass `signature_method : 'PLAINTEXT'` To send OAuth parameters via query params or in a post body as described in The [Consumer Request Parameters](http://oauth.net/core/1.0/#consumer_req_param) section of the oauth1 spec: * Pass `transport_method : 'query'` or `transport_method : 'body'` in the OAuth options object. * `transport_method` defaults to `'header'` To use [Request Body Hash](https://oauth.googlecode.com/svn/spec/ext/body_hash/1.0/oauth-bodyhash.html) you can either * Manually generate the body hash and pass it as a string `body_hash: '...'` * Automatically generate the body hash by passing `body_hash: true` [back to top](#table-of-contents) --- ## Proxies If you specify a `proxy` option, then the request (and any subsequent redirects) will be sent via a connection to the proxy server. If your endpoint is an `https` url, and you are using a proxy, then request will send a `CONNECT` request to the proxy server *first*, and then use the supplied connection to connect to the endpoint. That is, first it will make a request like: ``` HTTP/1.1 CONNECT endpoint-server.com:80 Host: proxy-server.com User-Agent: whatever user agent you specify ``` and then the proxy server make a TCP connection to `endpoint-server` on port `80`, and return a response that looks like: ``` HTTP/1.1 200 OK ``` At this point, the connection is left open, and the client is communicating directly with the `endpoint-server.com` machine. See [the wikipedia page on HTTP Tunneling](http://en.wikipedia.org/wiki/HTTP_tunnel) for more information. By default, when proxying `http` traffic, request will simply make a standard proxied `http` request. This is done by making the `url` section of the initial line of the request a fully qualified url to the endpoint. For example, it will make a single request that looks like: ``` HTTP/1.1 GET http://endpoint-server.com/some-url Host: proxy-server.com Other-Headers: all go here request body or whatever ``` Because a pure \"http over http\" tunnel offers no additional security or other features, it is generally simpler to go with a straightforward HTTP proxy in this case. However, if you would like to force a tunneling proxy, you may set the `tunnel` option to `true`. You can also make a standard proxied `http` request by explicitly setting `tunnel : false`, but **note that this will allow the proxy to see the traffic to/from the destination server**. If you are using a tunneling proxy, you may set the `proxyHeaderWhiteList` to share certain headers with the proxy. You can also set the `proxyHeaderExclusiveList` to share certain headers only with the proxy and not with destination host. By default, this set is: ``` accept accept-charset accept-encoding accept-language accept-ranges cache-control content-encoding content-language content-length content-location content-md5 content-range content-type connection date expect max-forwards pragma proxy-authorization referer te transfer-encoding user-agent via ``` Note that, when using a tunneling proxy, the `proxy-authorization` header and any headers from custom `proxyHeaderExclusiveList` are *never* sent to the endpoint server, but only to the proxy server. ### Controlling proxy behaviour using environment variables The following environment variables are respected by `request`: * `HTTP_PROXY` / `http_proxy` * `HTTPS_PROXY` / `https_proxy` * `NO_PROXY` / `no_proxy` When `HTTP_PROXY` / `http_proxy` are set, they will be used to proxy non-SSL requests that do not have an explicit `proxy` configuration option present. Similarly, `HTTPS_PROXY` / `https_proxy` will be respected for SSL requests that do not have an explicit `proxy` configuration option. It is valid to define a proxy in one of the environment variables, but then override it for a specific request, using the `proxy` configuration option. Furthermore, the `proxy` configuration option can be explicitly set to false / null to opt out of proxying altogether for that request. `request` is also aware of the `NO_PROXY`/`no_proxy` environment variables. These variables provide a granular way to opt out of proxying, on a per-host basis. It should contain a comma separated list of hosts to opt out of proxying. It is also possible to opt of proxying when a particular destination port is used. Finally, the variable may be set to `*` to opt out of the implicit proxy configuration of the other environment variables. Here's some examples of valid `no_proxy` values: * `google.com` - don't proxy HTTP/HTTPS requests to Google. * `google.com:443` - don't proxy HTTPS requests to Google, but *do* proxy HTTP requests to Google. * `google.com:443, yahoo.com:80` - don't proxy HTTPS requests to Google, and don't proxy HTTP requests to Yahoo! * `*` - ignore `https_proxy`/`http_proxy` environment variables altogether. [back to top](#table-of-contents) --- ## UNIX Domain Sockets `request` supports making requests to [UNIX Domain Sockets](http://en.wikipedia.org/wiki/Unix_domain_socket). To make one, use the following URL scheme: ```js /* Pattern */ 'http://unix:SOCKET:PATH' /* Example */ request.get('http://unix:/absolute/path/to/unix.socket:/request/path') ``` Note: The `SOCKET` path is assumed to be absolute to the root of the host file system. [back to top](#table-of-contents) --- ## TLS/SSL Protocol TLS/SSL Protocol options, such as `cert`, `key` and `passphrase`, can be set directly in `options` object, in the `agentOptions` property of the `options` object, or even in `https.globalAgent.options`. Keep in mind that, although `agentOptions` allows for a slightly wider range of configurations, the recommended way is via `options` object directly, as using `agentOptions` or `https.globalAgent.options` would not be applied in the same way in proxied environments (as data travels through a TLS connection instead of an http/https agent). ```js var fs = require('fs') , path = require('path') , certFile = path.resolve(__dirname, 'ssl/client.crt') , keyFile = path.resolve(__dirname, 'ssl/client.key') , caFile = path.resolve(__dirname, 'ssl/ca.cert.pem') , request = require('request'); var options = { url: 'https://api.some-server.com/', cert: fs.readFileSync(certFile), key: fs.readFileSync(keyFile), passphrase: 'password', ca: fs.readFileSync(caFile) } }; request.get(options); ``` ### Using `options.agentOptions` In the example below, we call an API requires client side SSL certificate (in PEM format) with passphrase protected private key (in PEM format) and disable the SSLv3 protocol: ```js var fs = require('fs') , path = require('path') , certFile = path.resolve(__dirname, 'ssl/client.crt') , keyFile = path.resolve(__dirname, 'ssl/client.key') , request = require('request'); var options = { url: 'https://api.some-server.com/', agentOptions: { cert: fs.readFileSync(certFile), key: fs.readFileSync(keyFile), // Or use `pfx` property replacing `cert` and `key` when using private key, certificate and CA certs in PFX or PKCS12 format: // pfx: fs.readFileSync(pfxFilePath), passphrase: 'password', securityOptions: 'SSL_OP_NO_SSLv3' } }; request.get(options); ``` It is able to force using SSLv3 only by specifying `secureProtocol`: ```js request.get({ url: 'https://api.some-server.com/', agentOptions: { secureProtocol: 'SSLv3_method' } }); ``` It is possible to accept other certificates than those signed by generally allowed Certificate Authorities (CAs). This can be useful, for example, when using self-signed certificates. To require a different root certificate, you can specify the signing CA by adding the contents of the CA's certificate file to the `agentOptions`. The certificate the domain presents must be signed by the root certificate specified: ```js request.get({ url: 'https://api.some-server.com/', agentOptions: { ca: fs.readFileSync('ca.cert.pem') } }); ``` [back to top](#table-of-contents) --- ## Support for HAR 1.2 The `options.har` property will override the values: `url`, `method`, `qs`, `headers`, `form`, `formData`, `body`, `json`, as well as construct multipart data and read files from disk when `request.postData.params[].fileName` is present without a matching `value`. a validation step will check if the HAR Request format matches the latest spec (v1.2) and will skip parsing if not matching. ```js var request = require('request') request({ // will be ignored method: 'GET', uri: 'http://www.google.com', // HTTP Archive Request Object har: { url: 'http://www.mockbin.com/har', method: 'POST', headers: [ { name: 'content-type', value: 'application/x-www-form-urlencoded' } ], postData: { mimeType: 'application/x-www-form-urlencoded', params: [ { name: 'foo', value: 'bar' }, { name: 'hello', value: 'world' } ] } } }) // a POST request will be sent to http://www.mockbin.com // with body an application/x-www-form-urlencoded body: // foo=bar&hello=world ``` [back to top](#table-of-contents) --- ## request(options, callback) The first argument can be either a `url` or an `options` object. The only required option is `uri`; all others are optional. - `uri` || `url` - fully qualified uri or a parsed url object from `url.parse()` - `baseUrl` - fully qualified uri string used as the base url. Most useful with `request.defaults`, for example when you want to do many requests to the same domain. If `baseUrl` is `https://example.com/api/`, then requesting `/end/point?test=true` will fetch `https://example.com/api/end/point?test=true`. When `baseUrl` is given, `uri` must also be a string. - `method` - http method (default: `\"GET\"`) - `headers` - http headers (default: `{}`) --- - `qs` - object containing querystring values to be appended to the `uri` - `qsParseOptions` - object containing options to pass to the [qs.parse](https://github.com/hapijs/qs#parsing-objects) method. Alternatively pass options to the [querystring.parse](https://nodejs.org/docs/v0.12.0/api/querystring.html#querystring_querystring_parse_str_sep_eq_options) method using this format `{sep:';', eq:':', options:{}}` - `qsStringifyOptions` - object containing options to pass to the [qs.stringify](https://github.com/hapijs/qs#stringifying) method. Alternatively pass options to the [querystring.stringify](https://nodejs.org/docs/v0.12.0/api/querystring.html#querystring_querystring_stringify_obj_sep_eq_options) method using this format `{sep:';', eq:':', options:{}}`. For example, to change the way arrays are converted to query strings using the `qs` module pass the `arrayFormat` option with one of `indices|brackets|repeat` - `useQuerystring` - If true, use `querystring` to stringify and parse querystrings, otherwise use `qs` (default: `false`). Set this option to `true` if you need arrays to be serialized as `foo=bar&foo=baz` instead of the default `foo[0]=bar&foo[1]=baz`. --- - `body` - entity body for PATCH, POST and PUT requests. Must be a `Buffer` or `String`, unless `json` is `true`. If `json` is `true`, then `body` must be a JSON-serializable object. - `form` - when passed an object or a querystring, this sets `body` to a querystring representation of value, and adds `Content-type: application/x-www-form-urlencoded` header. When passed no options, a `FormData` instance is returned (and is piped to request). See \"Forms\" section above. - `formData` - Data to pass for a `multipart/form-data` request. See [Forms](#forms) section above. - `multipart` - array of objects which contain their own headers and `body` attributes. Sends a `multipart/related` request. See [Forms](#forms) section above. - Alternatively you can pass in an object `{chunked: false, data: []}` where `chunked` is used to specify whether the request is sent in [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) In non-chunked requests, data items with body streams are not allowed. - `preambleCRLF` - append a newline/CRLF before the boundary of your `multipart/form-data` request. - `postambleCRLF` - append a newline/CRLF at the end of the boundary of your `multipart/form-data` request. - `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json` header. Additionally, parses the response body as JSON. - `jsonReviver` - a [reviver function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) that will be passed to `JSON.parse()` when parsing a JSON response body. --- - `auth` - A hash containing values `user` || `username`, `pass` || `password`, and `sendImmediately` (optional). See documentation above. - `oauth` - Options for OAuth HMAC-SHA1 signing. See documentation above. - `hawk` - Options for [Hawk signing](https://github.com/hueniverse/hawk). The `credentials` key must contain the necessary signing info, [see hawk docs for details](https://github.com/hueniverse/hawk#usage-example). - `aws` - `object` containing AWS signing information. Should have the properties `key`, `secret`. Also requires the property `bucket`, unless you’re specifying your `bucket` as part of the path, or the request doesn’t use a bucket (i.e. GET Services) - `httpSignature` - Options for the [HTTP Signature Scheme](https://github.com/joyent/node-http-signature/blob/master/http_signing.md) using [Joyent's library](https://github.com/joyent/node-http-signature). The `keyId` and `key` properties must be specified. See the docs for other options. --- - `followRedirect` - follow HTTP 3xx responses as redirects (default: `true`). This property can also be implemented as function which gets `response` object as a single argument and should return `true` if redirects should continue or `false` otherwise. - `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects (default: `false`) - `maxRedirects` - the maximum number of redirects to follow (default: `10`) - `removeRefererHeader` - removes the referer header when a redirect happens (default: `false`). --- - `encoding` - Encoding to be used on `setEncoding` of response data. If `null`, the `body` is returned as a `Buffer`. Anything else **(including the default value of `undefined`)** will be passed as the [encoding](http://nodejs.org/api/buffer.html#buffer_buffer) parameter to `toString()` (meaning this is effectively `utf8` by default). (**Note:** if you expect binary data, you should set `encoding: null`.) - `gzip` - If `true`, add an `Accept-Encoding` header to request compressed content encodings from the server (if not already present) and decode supported content encodings in the response. **Note:** Automatic decoding of the response content is performed on the body data returned through `request` (both through the `request` stream and passed to the callback function) but is not performed on the `response` stream (available from the `response` event) which is the unmodified `http.IncomingMessage` object which may contain compressed data. See example below. - `jar` - If `true`, remember cookies for future use (or define your custom cookie jar; see examples section) --- - `agent` - `http(s).Agent` instance to use - `agentClass` - alternatively specify your agent's class name - `agentOptions` - and pass its options. **Note:** for HTTPS see [tls API doc for TLS/SSL options](http://nodejs.org/api/tls.html#tls_tls_connect_options_callback) and the [documentation above](#using-optionsagentoptions). - `forever` - set to `true` to use the [forever-agent](https://github.com/request/forever-agent) **Note:** Defaults to `http(s).Agent({keepAlive:true})` in node 0.12+ - `pool` - An object describing which agents to use for the request. If this option is omitted the request will use the global agent (as long as your options allow for it). Otherwise, request will search the pool for your custom agent. If no custom agent is found, a new agent will be created and added to the pool. **Note:** `pool` is used only when the `agent` option is not specified. - A `maxSockets` property can also be provided on the `pool` object to set the max number of sockets for all agents created (ex: `pool: {maxSockets: Infinity}`). - Note that if you are sending multiple requests in a loop and creating multiple new `pool` objects, `maxSockets` will not work as intended. To work around this, either use [`request.defaults`](#requestdefaultsoptions) with your pool options or create the pool object with the `maxSockets` property outside of the loop. - `timeout` - Integer containing the number of milliseconds to wait for a server to send response headers (and start the response body) before aborting the request. Note that if the underlying TCP connection cannot be established, the OS-wide TCP connection timeout will overrule the `timeout` option ([the default in Linux can be anywhere from 20-120 seconds][linux-timeout]). [linux-timeout]: http://www.sekuda.com/overriding_the_default_linux_kernel_20_second_tcp_socket_connect_timeout --- - `localAddress` - Local interface to bind for network connections. - `proxy` - An HTTP proxy to be used. Supports proxy Auth with Basic Auth, identical to support for the `url` parameter (by embedding the auth info in the `uri`) - `strictSSL` - If `true`, requires SSL certificates be valid. **Note:** to use your own certificate authority, you need to specify an agent that was created with that CA as an option. - `tunnel` - controls the behavior of [HTTP `CONNECT` tunneling](https://en.wikipedia.org/wiki/HTTP_tunnel#HTTP_CONNECT_tunneling) as follows: - `undefined` (default) - `true` if the destination is `https` or a previous request in the redirect chain used a tunneling proxy, `false` otherwise - `true` - always tunnel to the destination by making a `CONNECT` request to the proxy - `false` - request the destination as a `GET` request. - `proxyHeaderWhiteList` - A whitelist of headers to send to a tunneling proxy. - `proxyHeaderExclusiveList` - A whitelist of headers to send exclusively to a tunneling proxy and not to destination. --- - `time` - If `true`, the request-response cycle (including all redirects) is timed at millisecond resolution, and the result provided on the response's `elapsedTime` property. - `har` - A [HAR 1.2 Request Object](http://www.softwareishard.com/blog/har-12-spec/#request), will be processed from HAR format into options overwriting matching values *(see the [HAR 1.2 section](#support-for-har-1.2) for details)* The callback argument gets 3 arguments: 1. An `error` when applicable (usually from [`http.ClientRequest`](http://nodejs.org/api/http.html#http_class_http_clientrequest) object) 2. An [`http.IncomingMessage`](http://nodejs.org/api/http.html#http_http_incomingmessage) object 3. The third is the `response` body (`String` or `Buffer`, or JSON object if the `json` option is supplied) [back to top](#table-of-contents) --- ## Convenience methods There are also shorthand methods for different HTTP METHODs and some other conveniences. ### request.defaults(options) This method **returns a wrapper** around the normal request API that defaults to whatever options you pass to it. **Note:** `request.defaults()` **does not** modify the global request API; instead, it **returns a wrapper** that has your default settings applied to it. **Note:** You can call `.defaults()` on the wrapper that is returned from `request.defaults` to add/override defaults that were previously defaulted. For example: ```js //requests using baseRequest() will set the 'x-token' header var baseRequest = request.defaults({ headers: {x-token: 'my-token'} }) //requests using specialRequest() will include the 'x-token' header set in //baseRequest and will also include the 'special' header var specialRequest = baseRequest.defaults({ headers: {special: 'special value'} }) ``` ### request.put Same as `request()`, but defaults to `method: \"PUT\"`. ```js request.put(url) ``` ### request.patch Same as `request()`, but defaults to `method: \"PATCH\"`. ```js request.patch(url) ``` ### request.post Same as `request()`, but defaults to `method: \"POST\"`. ```js request.post(url) ``` ### request.head Same as `request()`, but defaults to `method: \"HEAD\"`. ```js request.head(url) ``` ### request.del Same as `request()`, but defaults to `method: \"DELETE\"`. ```js request.del(url) ``` ### request.get Same as `request()` (for uniformity). ```js request.get(url) ``` ### request.cookie Function that creates a new cookie. ```js request.cookie('key1=value1') ``` ### request.jar() Function that creates a new cookie jar. ```js request.jar() ``` [back to top](#table-of-contents) --- ## Debugging There are at least three ways to debug the operation of `request`: 1. Launch the node process like `NODE_DEBUG=request node script.js` (`lib,request,otherlib` works too). 2. Set `require('request').debug = true` at any time (this does the same thing as #1). 3. Use the [request-debug module](https://github.com/nylen/request-debug) to view request and response headers and bodies. [back to top](#table-of-contents) --- ## Timeouts Most requests to external servers should have a timeout attached, in case the server is not responding in a timely manner. Without a timeout, your code may have a socket open/consume resources for minutes or more. There are two main types of timeouts: **connection timeouts** and **read timeouts**. A connect timeout occurs if the timeout is hit while your client is attempting to establish a connection to a remote machine (corresponding to the [connect() call][connect] on the socket). A read timeout occurs any time the server is too slow to send back a part of the response. These two situations have widely different implications for what went wrong with the request, so it's useful to be able to distinguish them. You can detect timeout errors by checking `err.code` for an 'ETIMEDOUT' value. Further, you can detect whether the timeout was a connection timeout by checking if the `err.connect` property is set to `true`. ```js request.get('http://10.255.255.1', {timeout: 1500}, function(err) { console.log(err.code === 'ETIMEDOUT'); // Set to `true` if the timeout was a connection timeout, `false` or // `undefined` otherwise. console.log(err.connect === true); process.exit(0); }); ``` [connect]: http://linux.die.net/man/2/connect ## Examples: ```js var request = require('request') , rand = Math.floor(Math.random()*100000000).toString() ; request( { method: 'PUT' , uri: 'http://mikeal.iriscouch.com/testjs/' + rand , multipart: [ { 'content-type': 'application/json' , body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}}) } , { body: 'I am an attachment' } ] } , function (error, response, body) { if(response.statusCode == 201){ console.log('document saved as: http://mikeal.iriscouch.com/testjs/'+ rand) } else { console.log('error: '+ response.statusCode) console.log(body) } } ) ``` For backwards-compatibility, response compression is not supported by default. To accept gzip-compressed responses, set the `gzip` option to `true`. Note that the body data passed through `request` is automatically decompressed while the response object is unmodified and will contain compressed data if the server sent a compressed response. ```js var request = require('request') request( { method: 'GET' , uri: 'http://www.google.com' , gzip: true } , function (error, response, body) { // body is the decompressed response body console.log('server encoded the data as: ' + (response.headers['content-encoding'] || 'identity')) console.log('the decoded data is: ' + body) } ).on('data', function(data) { // decompressed data as it is received console.log('decoded chunk: ' + data) }) .on('response', function(response) { // unmodified http.IncomingMessage object response.on('data', function(data) { // compressed data as it is received console.log('received ' + data.length + ' bytes of compressed data') }) }) ``` Cookies are disabled by default (else, they would be used in subsequent requests). To enable cookies, set `jar` to `true` (either in `defaults` or `options`). ```js var request = request.defaults({jar: true}) request('http://www.google.com', function () { request('http://images.google.com') }) ``` To use a custom cookie jar (instead of `request`’s global cookie jar), set `jar` to an instance of `request.jar()` (either in `defaults` or `options`) ```js var j = request.jar() var request = request.defaults({jar:j}) request('http://www.google.com', function () { request('http://images.google.com') }) ``` OR ```js var j = request.jar(); var cookie = request.cookie('key1=value1'); var url = 'http://www.google.com'; j.setCookie(cookie, url); request({url: url, jar: j}, function () { request('http://images.google.com') }) ``` To use a custom cookie store (such as a [`FileCookieStore`](https://github.com/mitsuru/tough-cookie-filestore) which supports saving to and restoring from JSON files), pass it as a parameter to `request.jar()`: ```js var FileCookieStore = require('tough-cookie-filestore'); // NOTE - currently the 'cookies.json' file must already exist! var j = request.jar(new FileCookieStore('cookies.json')); request = request.defaults({ jar : j }) request('http://www.google.com', function() { request('http://images.google.com') }) ``` The cookie store must be a [`tough-cookie`](https://github.com/goinstant/tough-cookie) store and it must support synchronous operations; see the [`CookieStore` API docs](https://github.com/goinstant/tough-cookie/#cookiestore-api) for details. To inspect your cookie jar after a request: ```js var j = request.jar() request({url: 'http://www.google.com', jar: j}, function () { var cookie_string = j.getCookieString(url); // \"key1=value1; key2=value2; ...\" var cookies = j.getCookies(url); // [{key: 'key1', value: 'value1', domain: \"www.google.com\", ...}, ...] }) ``` [back to top](#table-of-contents)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/aws-sign2/README.md","tags":[],"body":"aws-sign ======== AWS signing. Originally pulled from LearnBoost/knox, maintained as vendor in request, now a standalone module."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/LICENSE.md","tags":[],"body":"The MIT License (MIT) ===================== Copyright (c) 2014 bl contributors ---------------------------------- *bl contributors listed at * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/README.md","tags":[],"body":"# bl *(BufferList)* [![Build Status](https://travis-ci.org/rvagg/bl.svg?branch=master)](https://travis-ci.org/rvagg/bl) **A Node.js Buffer list collector, reader and streamer thingy.** [![NPM](https://nodei.co/npm/bl.png?downloads=true&downloadRank=true)](https://nodei.co/npm/bl/) [![NPM](https://nodei.co/npm-dl/bl.png?months=6&height=3)](https://nodei.co/npm/bl/) **bl** is a storage object for collections of Node Buffers, exposing them with the main Buffer readable API. Also works as a duplex stream so you can collect buffers from a stream that emits them and emit buffers to a stream that consumes them! The original buffers are kept intact and copies are only done as necessary. Any reads that require the use of a single original buffer will return a slice of that buffer only (which references the same memory as the original buffer). Reads that span buffers perform concatenation as required and return the results transparently. ```js const BufferList = require('bl') var bl = new BufferList() bl.append(new Buffer('abcd')) bl.append(new Buffer('efg')) bl.append('hi') // bl will also accept & convert Strings bl.append(new Buffer('j')) bl.append(new Buffer([ 0x3, 0x4 ])) console.log(bl.length) // 12 console.log(bl.slice(0, 10).toString('ascii')) // 'abcdefghij' console.log(bl.slice(3, 10).toString('ascii')) // 'defghij' console.log(bl.slice(3, 6).toString('ascii')) // 'def' console.log(bl.slice(3, 8).toString('ascii')) // 'defgh' console.log(bl.slice(5, 10).toString('ascii')) // 'fghij' // or just use toString! console.log(bl.toString()) // 'abcdefghij\\u0003\\u0004' console.log(bl.toString('ascii', 3, 8)) // 'defgh' console.log(bl.toString('ascii', 5, 10)) // 'fghij' // other standard Buffer readables console.log(bl.readUInt16BE(10)) // 0x0304 console.log(bl.readUInt16LE(10)) // 0x0403 ``` Give it a callback in the constructor and use it just like **[concat-stream](https://github.com/maxogden/node-concat-stream)**: ```js const bl = require('bl') , fs = require('fs') fs.createReadStream('README.md') .pipe(bl(function (err, data) { // note 'new' isn't strictly required // `data` is a complete Buffer object containing the full data console.log(data.toString()) })) ``` Note that when you use the *callback* method like this, the resulting `data` parameter is a concatenation of all `Buffer` objects in the list. If you want to avoid the overhead of this concatenation (in cases of extreme performance consciousness), then avoid the *callback* method and just listen to `'end'` instead, like a standard Stream. Or to fetch a URL using [hyperquest](https://github.com/substack/hyperquest) (should work with [request](http://github.com/mikeal/request) and even plain Node http too!): ```js const hyperquest = require('hyperquest') , bl = require('bl') , url = 'https://raw.github.com/rvagg/bl/master/README.md' hyperquest(url).pipe(bl(function (err, data) { console.log(data.toString()) })) ``` Or, use it as a readable stream to recompose a list of Buffers to an output source: ```js const BufferList = require('bl') , fs = require('fs') var bl = new BufferList() bl.append(new Buffer('abcd')) bl.append(new Buffer('efg')) bl.append(new Buffer('hi')) bl.append(new Buffer('j')) bl.pipe(fs.createWriteStream('gibberish.txt')) ``` ## API * new BufferList([ callback ]) * bl.length * bl.append(buffer) * bl.get(index) * bl.slice([ start[, end ] ]) * bl.copy(dest, [ destStart, [ srcStart [, srcEnd ] ] ]) * bl.duplicate() * bl.consume(bytes) * bl.toString([encoding, [ start, [ end ]]]) * bl.readDoubleBE(), bl.readDoubleLE(), bl.readFloatBE(), bl.readFloatLE(), bl.readInt32BE(), bl.readInt32LE(), bl.readUInt32BE(), bl.readUInt32LE(), bl.readInt16BE(), bl.readInt16LE(), bl.readUInt16BE(), bl.readUInt16LE(), bl.readInt8(), bl.readUInt8() * Streams -------------------------------------------------------- ### new BufferList([ callback | buffer | buffer array ]) The constructor takes an optional callback, if supplied, the callback will be called with an error argument followed by a reference to the **bl** instance, when `bl.end()` is called (i.e. from a piped stream). This is a convenient method of collecting the entire contents of a stream, particularly when the stream is *chunky*, such as a network stream. Normally, no arguments are required for the constructor, but you can initialise the list by passing in a single `Buffer` object or an array of `Buffer` object. `new` is not strictly required, if you don't instantiate a new object, it will be done automatically for you so you can create a new instance simply with: ```js var bl = require('bl') var myinstance = bl() // equivilant to: var BufferList = require('bl') var myinstance = new BufferList() ``` -------------------------------------------------------- ### bl.length Get the length of the list in bytes. This is the sum of the lengths of all of the buffers contained in the list, minus any initial offset for a semi-consumed buffer at the beginning. Should accurately represent the total number of bytes that can be read from the list. -------------------------------------------------------- ### bl.append(buffer) `append(buffer)` adds an additional buffer or BufferList to the internal list. -------------------------------------------------------- ### bl.get(index) `get()` will return the byte at the specified index. -------------------------------------------------------- ### bl.slice([ start, [ end ] ]) `slice()` returns a new `Buffer` object containing the bytes within the range specified. Both `start` and `end` are optional and will default to the beginning and end of the list respectively. If the requested range spans a single internal buffer then a slice of that buffer will be returned which shares the original memory range of that Buffer. If the range spans multiple buffers then copy operations will likely occur to give you a uniform Buffer. -------------------------------------------------------- ### bl.copy(dest, [ destStart, [ srcStart [, srcEnd ] ] ]) `copy()` copies the content of the list in the `dest` buffer, starting from `destStart` and containing the bytes within the range specified with `srcStart` to `srcEnd`. `destStart`, `start` and `end` are optional and will default to the beginning of the `dest` buffer, and the beginning and end of the list respectively. -------------------------------------------------------- ### bl.duplicate() `duplicate()` performs a **shallow-copy** of the list. The internal Buffers remains the same, so if you change the underlying Buffers, the change will be reflected in both the original and the duplicate. This method is needed if you want to call `consume()` or `pipe()` and still keep the original list.Example: ```js var bl = new BufferList() bl.append('hello') bl.append(' world') bl.append('\\n') bl.duplicate().pipe(process.stdout, { end: false }) console.log(bl.toString()) ``` -------------------------------------------------------- ### bl.consume(bytes) `consume()` will shift bytes *off the start of the list*. The number of bytes consumed don't need to line up with the sizes of the internal Buffers—initial offsets will be calculated accordingly in order to give you a consistent view of the data. -------------------------------------------------------- ### bl.toString([encoding, [ start, [ end ]]]) `toString()` will return a string representation of the buffer. The optional `start` and `end` arguments are passed on to `slice()`, while the `encoding` is passed on to `toString()` of the resulting Buffer. See the [Buffer#toString()](http://nodejs.org/docs/latest/api/buffer.html#buffer_buf_tostring_encoding_start_end) documentation for more information. -------------------------------------------------------- ### bl.readDoubleBE(), bl.readDoubleLE(), bl.readFloatBE(), bl.readFloatLE(), bl.readInt32BE(), bl.readInt32LE(), bl.readUInt32BE(), bl.readUInt32LE(), bl.readInt16BE(), bl.readInt16LE(), bl.readUInt16BE(), bl.readUInt16LE(), bl.readInt8(), bl.readUInt8() All of the standard byte-reading methods of the `Buffer` interface are implemented and will operate across internal Buffer boundaries transparently. See the [Buffer](http://nodejs.org/docs/latest/api/buffer.html) documentation for how these work. -------------------------------------------------------- ### Streams **bl** is a Node **[Duplex Stream](http://nodejs.org/docs/latest/api/stream.html#stream_class_stream_duplex)**, so it can be read from and written to like a standard Node stream. You can also `pipe()` to and from a **bl** instance. -------------------------------------------------------- ## Contributors **bl** is brought to you by the following hackers: * [Rod Vagg](https://github.com/rvagg) * [Matteo Collina](https://github.com/mcollina) * [Jarett Cruger](https://github.com/jcrugzz) ======= ## License & copyright Copyright (c) 2013-2014 bl contributors (listed above). bl is licensed under the MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE.md file for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/node_modules/readable-stream/README.md","tags":[],"body":"# readable-stream ***Node-core v5.8.0 streams for userland*** [![Build Status](https://travis-ci.org/nodejs/readable-stream.svg?branch=master)](https://travis-ci.org/nodejs/readable-stream) [![NPM](https://nodei.co/npm/readable-stream.png?downloads=true&downloadRank=true)](https://nodei.co/npm/readable-stream/) [![NPM](https://nodei.co/npm-dl/readable-stream.png?&months=6&height=3)](https://nodei.co/npm/readable-stream/) [![Sauce Test Status](https://saucelabs.com/browser-matrix/readable-stream.svg)](https://saucelabs.com/u/readable-stream) ```bash npm install --save readable-stream ``` ***Node-core streams for userland*** This package is a mirror of the Streams2 and Streams3 implementations in Node-core, including [documentation](doc/stream.markdown). If you want to guarantee a stable streams base, regardless of what version of Node you, or the users of your libraries are using, use **readable-stream** *only* and avoid the *\"stream\"* module in Node-core, for background see [this blogpost](http://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html). As of version 2.0.0 **readable-stream** uses semantic versioning. # Streams WG Team Members * **Chris Dickinson** ([@chrisdickinson](https://github.com/chrisdickinson)) - Release GPG key: 9554F04D7259F04124DE6B476D5A82AC7E37093B * **Calvin Metcalf** ([@calvinmetcalf](https://github.com/calvinmetcalf)) - Release GPG key: F3EF5F62A87FC27A22E643F714CE4FF5015AA242 * **Rod Vagg** ([@rvagg](https://github.com/rvagg)) - Release GPG key: DD8F2338BAE7501E3DD5AC78C273792F7D83545D * **Sam Newman** ([@sonewman](https://github.com/sonewman)) * **Mathias Buus** ([@mafintosh](https://github.com/mafintosh)) * **Domenic Denicola** ([@domenic](https://github.com/domenic))"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/node_modules/readable-stream/doc/stream.markdown","tags":[],"body":"# Stream Stability: 2 - Stable A stream is an abstract interface implemented by various objects in Node.js. For example a [request to an HTTP server][http-incoming-message] is a stream, as is [`process.stdout`][]. Streams are readable, writable, or both. All streams are instances of [`EventEmitter`][]. You can load the Stream base classes by doing `require('stream')`. There are base classes provided for [Readable][] streams, [Writable][] streams, [Duplex][] streams, and [Transform][] streams. This document is split up into 3 sections: 1. The first section explains the parts of the API that you need to be aware of to use streams in your programs. 2. The second section explains the parts of the API that you need to use if you implement your own custom streams yourself. The API is designed to make this easy for you to do. 3. The third section goes into more depth about how streams work, including some of the internal mechanisms and functions that you should probably not modify unless you definitely know what you are doing. ## API for Stream Consumers Streams can be either [Readable][], [Writable][], or both ([Duplex][]). All streams are EventEmitters, but they also have other custom methods and properties depending on whether they are Readable, Writable, or Duplex. If a stream is both Readable and Writable, then it implements all of the methods and events. So, a [Duplex][] or [Transform][] stream is fully described by this API, though their implementation may be somewhat different. It is not necessary to implement Stream interfaces in order to consume streams in your programs. If you **are** implementing streaming interfaces in your own program, please also refer to [API for Stream Implementors][]. Almost all Node.js programs, no matter how simple, use Streams in some way. Here is an example of using Streams in an Node.js program: ```js const http = require('http'); var server = http.createServer( (req, res) => { // req is an http.IncomingMessage, which is a Readable Stream // res is an http.ServerResponse, which is a Writable Stream var body = ''; // we want to get the data as utf8 strings // If you don't set an encoding, then you'll get Buffer objects req.setEncoding('utf8'); // Readable streams emit 'data' events once a listener is added req.on('data', (chunk) => { body += chunk; }); // the end event tells you that you have entire body req.on('end', () => { try { var data = JSON.parse(body); } catch (er) { // uh oh! bad json! res.statusCode = 400; return res.end(`error: ${er.message}`); } // write back something interesting to the user: res.write(typeof data); res.end(); }); }); server.listen(1337); // $ curl localhost:1337 -d '{}' // object // $ curl localhost:1337 -d '\"foo\"' // string // $ curl localhost:1337 -d 'not json' // error: Unexpected token o ``` ### Class: stream.Duplex Duplex streams are streams that implement both the [Readable][] and [Writable][] interfaces. Examples of Duplex streams include: * [TCP sockets][] * [zlib streams][zlib] * [crypto streams][crypto] ### Class: stream.Readable The Readable stream interface is the abstraction for a *source* of data that you are reading from. In other words, data comes *out* of a Readable stream. A Readable stream will not start emitting data until you indicate that you are ready to receive it. Readable streams have two \"modes\": a **flowing mode** and a **paused mode**. When in flowing mode, data is read from the underlying system and provided to your program as fast as possible. In paused mode, you must explicitly call [`stream.read()`][stream-read] to get chunks of data out. Streams start out in paused mode. **Note**: If no data event handlers are attached, and there are no [`stream.pipe()`][] destinations, and the stream is switched into flowing mode, then data will be lost. You can switch to flowing mode by doing any of the following: * Adding a [`'data'`][] event handler to listen for data. * Calling the [`stream.resume()`][stream-resume] method to explicitly open the flow. * Calling the [`stream.pipe()`][] method to send the data to a [Writable][]. You can switch back to paused mode by doing either of the following: * If there are no pipe destinations, by calling the [`stream.pause()`][stream-pause] method. * If there are pipe destinations, by removing any [`'data'`][] event handlers, and removing all pipe destinations by calling the [`stream.unpipe()`][] method. Note that, for backwards compatibility reasons, removing [`'data'`][] event handlers will **not** automatically pause the stream. Also, if there are piped destinations, then calling [`stream.pause()`][stream-pause] will not guarantee that the stream will *remain* paused once those destinations drain and ask for more data. Examples of readable streams include: * [HTTP responses, on the client][http-incoming-message] * [HTTP requests, on the server][http-incoming-message] * [fs read streams][] * [zlib streams][zlib] * [crypto streams][crypto] * [TCP sockets][] * [child process stdout and stderr][] * [`process.stdin`][] #### Event: 'close' Emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed. The event indicates that no more events will be emitted, and no further computation will occur. Not all streams will emit the `'close'` event. #### Event: 'data' * `chunk` {Buffer|String} The chunk of data. Attaching a `'data'` event listener to a stream that has not been explicitly paused will switch the stream into flowing mode. Data will then be passed as soon as it is available. If you just want to get all the data out of the stream as fast as possible, this is the best way to do so. ```js var readable = getReadableStreamSomehow(); readable.on('data', (chunk) => { console.log('got %d bytes of data', chunk.length); }); ``` #### Event: 'end' This event fires when there will be no more data to read. Note that the `'end'` event **will not fire** unless the data is completely consumed. This can be done by switching into flowing mode, or by calling [`stream.read()`][stream-read] repeatedly until you get to the end. ```js var readable = getReadableStreamSomehow(); readable.on('data', (chunk) => { console.log('got %d bytes of data', chunk.length); }); readable.on('end', () => { console.log('there will be no more data.'); }); ``` #### Event: 'error' * {Error Object} Emitted if there was an error receiving data. #### Event: 'readable' When a chunk of data can be read from the stream, it will emit a `'readable'` event. In some cases, listening for a `'readable'` event will cause some data to be read into the internal buffer from the underlying system, if it hadn't already. ```javascript var readable = getReadableStreamSomehow(); readable.on('readable', () => { // there is some data to read now }); ``` Once the internal buffer is drained, a `'readable'` event will fire again when more data is available. The `'readable'` event is not emitted in the \"flowing\" mode with the sole exception of the last one, on end-of-stream. The `'readable'` event indicates that the stream has new information: either new data is available or the end of the stream has been reached. In the former case, [`stream.read()`][stream-read] will return that data. In the latter case, [`stream.read()`][stream-read] will return null. For instance, in the following example, `foo.txt` is an empty file: ```js const fs = require('fs'); var rr = fs.createReadStream('foo.txt'); rr.on('readable', () => { console.log('readable:', rr.read()); }); rr.on('end', () => { console.log('end'); }); ``` The output of running this script is: ``` $ node test.js readable: null end ``` #### readable.isPaused() * Return: {Boolean} This method returns whether or not the `readable` has been **explicitly** paused by client code (using [`stream.pause()`][stream-pause] without a corresponding [`stream.resume()`][stream-resume]). ```js var readable = new stream.Readable readable.isPaused() // === false readable.pause() readable.isPaused() // === true readable.resume() readable.isPaused() // === false ``` #### readable.pause() * Return: `this` This method will cause a stream in flowing mode to stop emitting [`'data'`][] events, switching out of flowing mode. Any data that becomes available will remain in the internal buffer. ```js var readable = getReadableStreamSomehow(); readable.on('data', (chunk) => { console.log('got %d bytes of data', chunk.length); readable.pause(); console.log('there will be no more data for 1 second'); setTimeout(() => { console.log('now data will start flowing again'); readable.resume(); }, 1000); }); ``` #### readable.pipe(destination[, options]) * `destination` {stream.Writable} The destination for writing data * `options` {Object} Pipe options * `end` {Boolean} End the writer when the reader ends. Default = `true` This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream. Multiple destinations can be piped to safely. ```js var readable = getReadableStreamSomehow(); var writable = fs.createWriteStream('file.txt'); // All the data from readable goes into 'file.txt' readable.pipe(writable); ``` This function returns the destination stream, so you can set up pipe chains like so: ```js var r = fs.createReadStream('file.txt'); var z = zlib.createGzip(); var w = fs.createWriteStream('file.txt.gz'); r.pipe(z).pipe(w); ``` For example, emulating the Unix `cat` command: ```js process.stdin.pipe(process.stdout); ``` By default [`stream.end()`][stream-end] is called on the destination when the source stream emits [`'end'`][], so that `destination` is no longer writable. Pass `{ end: false }` as `options` to keep the destination stream open. This keeps `writer` open so that \"Goodbye\" can be written at the end. ```js reader.pipe(writer, { end: false }); reader.on('end', () => { writer.end('Goodbye\\n'); }); ``` Note that [`process.stderr`][] and [`process.stdout`][] are never closed until the process exits, regardless of the specified options. #### readable.read([size]) * `size` {Number} Optional argument to specify how much data to read. * Return {String|Buffer|Null} The `read()` method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return `null`. If you pass in a `size` argument, then it will return that many bytes. If `size` bytes are not available, then it will return `null`, unless we've ended, in which case it will return the data remaining in the buffer. If you do not specify a `size` argument, then it will return all the data in the internal buffer. This method should only be called in paused mode. In flowing mode, this method is called automatically until the internal buffer is drained. ```js var readable = getReadableStreamSomehow(); readable.on('readable', () => { var chunk; while (null !== (chunk = readable.read())) { console.log('got %d bytes of data', chunk.length); } }); ``` If this method returns a data chunk, then it will also trigger the emission of a [`'data'`][] event. Note that calling [`stream.read([size])`][stream-read] after the [`'end'`][] event has been triggered will return `null`. No runtime error will be raised. #### readable.resume() * Return: `this` This method will cause the readable stream to resume emitting [`'data'`][] events. This method will switch the stream into flowing mode. If you do *not* want to consume the data from a stream, but you *do* want to get to its [`'end'`][] event, you can call [`stream.resume()`][stream-resume] to open the flow of data. ```js var readable = getReadableStreamSomehow(); readable.resume(); readable.on('end', () => { console.log('got to the end, but did not read anything'); }); ``` #### readable.setEncoding(encoding) * `encoding` {String} The encoding to use. * Return: `this` Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects. For example, if you do `readable.setEncoding('utf8')`, then the output data will be interpreted as UTF-8 data, and returned as strings. If you do `readable.setEncoding('hex')`, then the data will be encoded in hexadecimal string format. This properly handles multi-byte characters that would otherwise be potentially mangled if you simply pulled the Buffers directly and called [`buf.toString(encoding)`][] on them. If you want to read the data as strings, always use this method. Also you can disable any encoding at all with `readable.setEncoding(null)`. This approach is very useful if you deal with binary data or with large multi-byte strings spread out over multiple chunks. ```js var readable = getReadableStreamSomehow(); readable.setEncoding('utf8'); readable.on('data', (chunk) => { assert.equal(typeof chunk, 'string'); console.log('got %d characters of string data', chunk.length); }); ``` #### readable.unpipe([destination]) * `destination` {stream.Writable} Optional specific stream to unpipe This method will remove the hooks set up for a previous [`stream.pipe()`][] call. If the destination is not specified, then all pipes are removed. If the destination is specified, but no pipe is set up for it, then this is a no-op. ```js var readable = getReadableStreamSomehow(); var writable = fs.createWriteStream('file.txt'); // All the data from readable goes into 'file.txt', // but only for the first second readable.pipe(writable); setTimeout(() => { console.log('stop writing to file.txt'); readable.unpipe(writable); console.log('manually close the file stream'); writable.end(); }, 1000); ``` #### readable.unshift(chunk) * `chunk` {Buffer|String} Chunk of data to unshift onto the read queue This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party. Note that `stream.unshift(chunk)` cannot be called after the [`'end'`][] event has been triggered; a runtime error will be raised. If you find that you must often call `stream.unshift(chunk)` in your programs, consider implementing a [Transform][] stream instead. (See [API for Stream Implementors][].) ```js // Pull off a header delimited by \\n\\n // use unshift() if we get too much // Call the callback with (error, header, stream) const StringDecoder = require('string_decoder').StringDecoder; function parseHeader(stream, callback) { stream.on('error', callback); stream.on('readable', onReadable); var decoder = new StringDecoder('utf8'); var header = ''; function onReadable() { var chunk; while (null !== (chunk = stream.read())) { var str = decoder.write(chunk); if (str.match(/\\n\\n/)) { // found the header boundary var split = str.split(/\\n\\n/); header += split.shift(); var remaining = split.join('\\n\\n'); var buf = new Buffer(remaining, 'utf8'); if (buf.length) stream.unshift(buf); stream.removeListener('error', callback); stream.removeListener('readable', onReadable); // now the body of the message can be read from the stream. callback(null, header, stream); } else { // still reading the header. header += str; } } } } ``` Note that, unlike [`stream.push(chunk)`][stream-push], `stream.unshift(chunk)` will not end the reading process by resetting the internal reading state of the stream. This can cause unexpected results if `unshift()` is called during a read (i.e. from within a [`stream._read()`][stream-_read] implementation on a custom stream). Following the call to `unshift()` with an immediate [`stream.push('')`][stream-push] will reset the reading state appropriately, however it is best to simply avoid calling `unshift()` while in the process of performing a read. #### readable.wrap(stream) * `stream` {Stream} An \"old style\" readable stream Versions of Node.js prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See [Compatibility][] for more information.) If you are using an older Node.js library that emits [`'data'`][] events and has a [`stream.pause()`][stream-pause] method that is advisory only, then you can use the `wrap()` method to create a [Readable][] stream that uses the old stream as its data source. You will very rarely ever need to call this function, but it exists as a convenience for interacting with old Node.js programs and libraries. For example: ```js const OldReader = require('./old-api-module.js').OldReader; const Readable = require('stream').Readable; const oreader = new OldReader; const myReader = new Readable().wrap(oreader); myReader.on('readable', () => { myReader.read(); // etc. }); ``` ### Class: stream.Transform Transform streams are [Duplex][] streams where the output is in some way computed from the input. They implement both the [Readable][] and [Writable][] interfaces. Examples of Transform streams include: * [zlib streams][zlib] * [crypto streams][crypto] ### Class: stream.Writable The Writable stream interface is an abstraction for a *destination* that you are writing data *to*. Examples of writable streams include: * [HTTP requests, on the client][] * [HTTP responses, on the server][] * [fs write streams][] * [zlib streams][zlib] * [crypto streams][crypto] * [TCP sockets][] * [child process stdin][] * [`process.stdout`][], [`process.stderr`][] #### Event: 'drain' If a [`stream.write(chunk)`][stream-write] call returns `false`, then the `'drain'` event will indicate when it is appropriate to begin writing more data to the stream. ```js // Write the data to the supplied writable stream one million times. // Be attentive to back-pressure. function writeOneMillionTimes(writer, data, encoding, callback) { var i = 1000000; write(); function write() { var ok = true; do { i -= 1; if (i === 0) { // last time! writer.write(data, encoding, callback); } else { // see if we should continue, or wait // don't pass the callback, because we're not done yet. ok = writer.write(data, encoding); } } while (i > 0 && ok); if (i > 0) { // had to stop early! // write some more once it drains writer.once('drain', write); } } } ``` #### Event: 'error' * {Error} Emitted if there was an error when writing or piping data. #### Event: 'finish' When the [`stream.end()`][stream-end] method has been called, and all data has been flushed to the underlying system, this event is emitted. ```javascript var writer = getWritableStreamSomehow(); for (var i = 0; i { console.error('all writes are now complete.'); }); ``` #### Event: 'pipe' * `src` {stream.Readable} source stream that is piping to this writable This is emitted whenever the [`stream.pipe()`][] method is called on a readable stream, adding this writable to its set of destinations. ```js var writer = getWritableStreamSomehow(); var reader = getReadableStreamSomehow(); writer.on('pipe', (src) => { console.error('something is piping into the writer'); assert.equal(src, reader); }); reader.pipe(writer); ``` #### Event: 'unpipe' * `src` {[Readable][] Stream} The source stream that [unpiped][`stream.unpipe()`] this writable This is emitted whenever the [`stream.unpipe()`][] method is called on a readable stream, removing this writable from its set of destinations. ```js var writer = getWritableStreamSomehow(); var reader = getReadableStreamSomehow(); writer.on('unpipe', (src) => { console.error('something has stopped piping into the writer'); assert.equal(src, reader); }); reader.pipe(writer); reader.unpipe(writer); ``` #### writable.cork() Forces buffering of all writes. Buffered data will be flushed either at [`stream.uncork()`][] or at [`stream.end()`][stream-end] call. #### writable.end([chunk][, encoding][, callback]) * `chunk` {String|Buffer} Optional data to write * `encoding` {String} The encoding, if `chunk` is a String * `callback` {Function} Optional callback for when the stream is finished Call this method when no more data will be written to the stream. If supplied, the callback is attached as a listener on the [`'finish'`][] event. Calling [`stream.write()`][stream-write] after calling [`stream.end()`][stream-end] will raise an error. ```js // write 'hello, ' and then end with 'world!' var file = fs.createWriteStream('example.txt'); file.write('hello, '); file.end('world!'); // writing more now is not allowed! ``` #### writable.setDefaultEncoding(encoding) * `encoding` {String} The new default encoding Sets the default encoding for a writable stream. #### writable.uncork() Flush all data, buffered since [`stream.cork()`][] call. #### writable.write(chunk[, encoding][, callback]) * `chunk` {String|Buffer} The data to write * `encoding` {String} The encoding, if `chunk` is a String * `callback` {Function} Callback for when this chunk of data is flushed * Returns: {Boolean} `true` if the data was handled completely. This method writes some data to the underlying system, and calls the supplied callback once the data has been fully handled. The return value indicates if you should continue writing right now. If the data had to be buffered internally, then it will return `false`. Otherwise, it will return `true`. This return value is strictly advisory. You MAY continue to write, even if it returns `false`. However, writes will be buffered in memory, so it is best not to do this excessively. Instead, wait for the [`'drain'`][] event before writing more data. ## API for Stream Implementors To implement any sort of stream, the pattern is the same: 1. Extend the appropriate parent class in your own subclass. (The [`util.inherits()`][] method is particularly helpful for this.) 2. Call the appropriate parent class constructor in your constructor, to be sure that the internal mechanisms are set up properly. 3. Implement one or more specific methods, as detailed below. The class to extend and the method(s) to implement depend on the sort of stream class you are writing: Use-case Class Method(s) to implement Reading only [Readable](#stream_class_stream_readable_1) [_read][stream-_read] Writing only [Writable](#stream_class_stream_writable_1) [_write][stream-_write], [_writev][stream-_writev] Reading and writing [Duplex](#stream_class_stream_duplex_1) [_read][stream-_read], [_write][stream-_write], [_writev][stream-_writev] Operate on written data, then read the result [Transform](#stream_class_stream_transform_1) [_transform][stream-_transform], [_flush][stream-_flush] In your implementation code, it is very important to never call the methods described in [API for Stream Consumers][]. Otherwise, you can potentially cause adverse side effects in programs that consume your streaming interfaces. ### Class: stream.Duplex A \"duplex\" stream is one that is both Readable and Writable, such as a TCP socket connection. Note that `stream.Duplex` is an abstract class designed to be extended with an underlying implementation of the [`stream._read(size)`][stream-_read] and [`stream._write(chunk, encoding, callback)`][stream-_write] methods as you would with a Readable or Writable stream class. Since JavaScript doesn't have multiple prototypal inheritance, this class prototypally inherits from Readable, and then parasitically from Writable. It is thus up to the user to implement both the low-level [`stream._read(n)`][stream-_read] method as well as the low-level [`stream._write(chunk, encoding, callback)`][stream-_write] method on extension duplex classes. #### new stream.Duplex(options) * `options` {Object} Passed to both Writable and Readable constructors. Also has the following fields: * `allowHalfOpen` {Boolean} Default = `true`. If set to `false`, then the stream will automatically end the readable side when the writable side ends and vice versa. * `readableObjectMode` {Boolean} Default = `false`. Sets `objectMode` for readable side of the stream. Has no effect if `objectMode` is `true`. * `writableObjectMode` {Boolean} Default = `false`. Sets `objectMode` for writable side of the stream. Has no effect if `objectMode` is `true`. In classes that extend the Duplex class, make sure to call the constructor so that the buffering settings can be properly initialized. ### Class: stream.PassThrough This is a trivial implementation of a [Transform][] stream that simply passes the input bytes across to the output. Its purpose is mainly for examples and testing, but there are occasionally use cases where it can come in handy as a building block for novel sorts of streams. ### Class: stream.Readable `stream.Readable` is an abstract class designed to be extended with an underlying implementation of the [`stream._read(size)`][stream-_read] method. Please see [API for Stream Consumers][] for how to consume streams in your programs. What follows is an explanation of how to implement Readable streams in your programs. #### new stream.Readable([options]) * `options` {Object} * `highWaterMark` {Number} The maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource. Default = `16384` (16kb), or `16` for `objectMode` streams * `encoding` {String} If specified, then buffers will be decoded to strings using the specified encoding. Default = `null` * `objectMode` {Boolean} Whether this stream should behave as a stream of objects. Meaning that [`stream.read(n)`][stream-read] returns a single value instead of a Buffer of size n. Default = `false` * `read` {Function} Implementation for the [`stream._read()`][stream-_read] method. In classes that extend the Readable class, make sure to call the Readable constructor so that the buffering settings can be properly initialized. #### readable.\\_read(size) * `size` {Number} Number of bytes to read asynchronously Note: **Implement this method, but do NOT call it directly.** This method is prefixed with an underscore because it is internal to the class that defines it and should only be called by the internal Readable class methods. All Readable stream implementations must provide a \\_read method to fetch data from the underlying resource. When `_read()` is called, if data is available from the resource, the `_read()` implementation should start pushing that data into the read queue by calling [`this.push(dataChunk)`][stream-push]. `_read()` should continue reading from the resource and pushing data until push returns `false`, at which point it should stop reading from the resource. Only when `_read()` is called again after it has stopped should it start reading more data from the resource and pushing that data onto the queue. Note: once the `_read()` method is called, it will not be called again until the [`stream.push()`][stream-push] method is called. The `size` argument is advisory. Implementations where a \"read\" is a single call that returns data can use this to know how much data to fetch. Implementations where that is not relevant, such as TCP or TLS, may ignore this argument, and simply provide data whenever it becomes available. There is no need, for example to \"wait\" until `size` bytes are available before calling [`stream.push(chunk)`][stream-push]. #### readable.push(chunk[, encoding]) * `chunk` {Buffer|Null|String} Chunk of data to push into the read queue * `encoding` {String} Encoding of String chunks. Must be a valid Buffer encoding, such as `'utf8'` or `'ascii'` * return {Boolean} Whether or not more pushes should be performed Note: **This method should be called by Readable implementors, NOT by consumers of Readable streams.** If a value other than null is passed, The `push()` method adds a chunk of data into the queue for subsequent stream processors to consume. If `null` is passed, it signals the end of the stream (EOF), after which no more data can be written. The data added with `push()` can be pulled out by calling the [`stream.read()`][stream-read] method when the [`'readable'`][] event fires. This API is designed to be as flexible as possible. For example, you may be wrapping a lower-level source which has some sort of pause/resume mechanism, and a data callback. In those cases, you could wrap the low-level source object by doing something like this: ```js // source is an object with readStop() and readStart() methods, // and an `ondata` member that gets called when it has data, and // an `onend` member that gets called when the data is over. util.inherits(SourceWrapper, Readable); function SourceWrapper(options) { Readable.call(this, options); this._source = getLowlevelSourceObject(); // Every time there's data, we push it into the internal buffer. this._source.ondata = (chunk) => { // if push() returns false, then we need to stop reading from source if (!this.push(chunk)) this._source.readStop(); }; // When the source ends, we push the EOF-signaling `null` chunk this._source.onend = () => { this.push(null); }; } // _read will be called when the stream wants to pull more data in // the advisory size argument is ignored in this case. SourceWrapper.prototype._read = function(size) { this._source.readStart(); }; ``` #### Example: A Counting Stream This is a basic example of a Readable stream. It emits the numerals from 1 to 1,000,000 in ascending order, and then ends. ```js const Readable = require('stream').Readable; const util = require('util'); util.inherits(Counter, Readable); function Counter(opt) { Readable.call(this, opt); this._max = 1000000; this._index = 1; } Counter.prototype._read = function() { var i = this._index++; if (i > this._max) this.push(null); else { var str = '' + i; var buf = new Buffer(str, 'ascii'); this.push(buf); } }; ``` #### Example: SimpleProtocol v1 (Sub-optimal) This is similar to the `parseHeader` function described [here](#stream_readable_unshift_chunk), but implemented as a custom stream. Also, note that this implementation does not convert the incoming data to a string. However, this would be better implemented as a [Transform][] stream. See [SimpleProtocol v2][] for a better implementation. ```js // A parser for a simple data protocol. // The \"header\" is a JSON object, followed by 2 \\n characters, and // then a message body. // // NOTE: This can be done more simply as a Transform stream! // Using Readable directly for this is sub-optimal. See the // alternative example below under the Transform section. const Readable = require('stream').Readable; const util = require('util'); util.inherits(SimpleProtocol, Readable); function SimpleProtocol(source, options) { if (!(this instanceof SimpleProtocol)) return new SimpleProtocol(source, options); Readable.call(this, options); this._inBody = false; this._sawFirstCr = false; // source is a readable stream, such as a socket or file this._source = source; var self = this; source.on('end', () => { self.push(null); }); // give it a kick whenever the source is readable // read(0) will not consume any bytes source.on('readable', () => { self.read(0); }); this._rawHeader = []; this.header = null; } SimpleProtocol.prototype._read = function(n) { if (!this._inBody) { var chunk = this._source.read(); // if the source doesn't have data, we don't have data yet. if (chunk === null) return this.push(''); // check if the chunk has a \\n\\n var split = -1; for (var i = 0; i { // we add an 'end' method, but never consume the data socket.on('end', () => { // It will never get here. socket.end('I got your message (but didnt read it)\\n'); }); }).listen(1337); ``` In versions of Node.js prior to v0.10, the incoming message data would be simply discarded. However, in Node.js v0.10 and beyond, the socket will remain paused forever. The workaround in this situation is to call the [`stream.resume()`][stream-resume] method to start the flow of data: ```js // Workaround net.createServer((socket) => { socket.on('end', () => { socket.end('I got your message (but didnt read it)\\n'); }); // start the flow of data, discarding it. socket.resume(); }).listen(1337); ``` In addition to new Readable streams switching into flowing mode, pre-v0.10 style streams can be wrapped in a Readable class using the [`stream.wrap()`][] method. ### Object Mode Normally, Streams operate on Strings and Buffers exclusively. Streams that are in **object mode** can emit generic JavaScript values other than Buffers and Strings. A Readable stream in object mode will always return a single item from a call to [`stream.read(size)`][stream-read], regardless of what the size argument is. A Writable stream in object mode will always ignore the `encoding` argument to [`stream.write(data, encoding)`][stream-write]. The special value `null` still retains its special value for object mode streams. That is, for object mode readable streams, `null` as a return value from [`stream.read()`][stream-read] indicates that there is no more data, and [`stream.push(null)`][stream-push] will signal the end of stream data (`EOF`). No streams in Node.js core are object mode streams. This pattern is only used by userland streaming libraries. You should set `objectMode` in your stream child class constructor on the options object. Setting `objectMode` mid-stream is not safe. For Duplex streams `objectMode` can be set exclusively for readable or writable side with `readableObjectMode` and `writableObjectMode` respectively. These options can be used to implement parsers and serializers with Transform streams. ```js const util = require('util'); const StringDecoder = require('string_decoder').StringDecoder; const Transform = require('stream').Transform; util.inherits(JSONParseStream, Transform); // Gets \\n-delimited JSON string data, and emits the parsed objects function JSONParseStream() { if (!(this instanceof JSONParseStream)) return new JSONParseStream(); Transform.call(this, { readableObjectMode : true }); this._buffer = ''; this._decoder = new StringDecoder('utf8'); } JSONParseStream.prototype._transform = function(chunk, encoding, cb) { this._buffer += this._decoder.write(chunk); // split on newlines var lines = this._buffer.split(/\\r?\\n/); // keep the last partial line buffered this._buffer = lines.pop(); for (var l = 0; l < lines.length; l++) { var line = lines[l]; try { var obj = JSON.parse(line); } catch (er) { this.emit('error', er); return; } // push the parsed object out to the readable consumer this.push(obj); } cb(); }; JSONParseStream.prototype._flush = function(cb) { // Just handle any leftover var rem = this._buffer.trim(); if (rem) { try { var obj = JSON.parse(rem); } catch (er) { this.emit('error', er); return; } // push the parsed object out to the readable consumer this.push(obj); } cb(); }; ``` ### `stream.read(0)` There are some cases where you want to trigger a refresh of the underlying readable stream mechanisms, without actually consuming any data. In that case, you can call `stream.read(0)`, which will always return null. If the internal read buffer is below the `highWaterMark`, and the stream is not currently reading, then calling `stream.read(0)` will trigger a low-level [`stream._read()`][stream-_read] call. There is almost never a need to do this. However, you will see some cases in Node.js's internals where this is done, particularly in the Readable stream class internals. ### `stream.push('')` Pushing a zero-byte string or Buffer (when not in [Object mode][]) has an interesting side effect. Because it *is* a call to [`stream.push()`][stream-push], it will end the `reading` process. However, it does *not* add any data to the readable buffer, so there's nothing for a user to consume. Very rarely, there are cases where you have no data to provide now, but the consumer of your stream (or, perhaps, another bit of your own code) will know when to check again, by calling [`stream.read(0)`][stream-read]. In those cases, you *may* call `stream.push('')`. So far, the only use case for this functionality is in the [`tls.CryptoStream`][] class, which is deprecated in Node.js/io.js v1.0. If you find that you have to use `stream.push('')`, please consider another approach, because it almost certainly indicates that something is horribly wrong. [`'data'`]: #stream_event_data [`'drain'`]: #stream_event_drain [`'end'`]: #stream_event_end [`'finish'`]: #stream_event_finish [`'readable'`]: #stream_event_readable [`buf.toString(encoding)`]: https://nodejs.org/docs/v5.8.0/api/buffer.html#buffer_buf_tostring_encoding_start_end [`EventEmitter`]: https://nodejs.org/docs/v5.8.0/api/events.html#events_class_eventemitter [`process.stderr`]: https://nodejs.org/docs/v5.8.0/api/process.html#process_process_stderr [`process.stdin`]: https://nodejs.org/docs/v5.8.0/api/process.html#process_process_stdin [`process.stdout`]: https://nodejs.org/docs/v5.8.0/api/process.html#process_process_stdout [`stream.cork()`]: #stream_writable_cork [`stream.pipe()`]: #stream_readable_pipe_destination_options [`stream.uncork()`]: #stream_writable_uncork [`stream.unpipe()`]: #stream_readable_unpipe_destination [`stream.wrap()`]: #stream_readable_wrap_stream [`tls.CryptoStream`]: https://nodejs.org/docs/v5.8.0/api/tls.html#tls_class_cryptostream [`util.inherits()`]: https://nodejs.org/docs/v5.8.0/api/util.html#util_util_inherits_constructor_superconstructor [API for Stream Consumers]: #stream_api_for_stream_consumers [API for Stream Implementors]: #stream_api_for_stream_implementors [child process stdin]: https://nodejs.org/docs/v5.8.0/api/child_process.html#child_process_child_stdin [child process stdout and stderr]: https://nodejs.org/docs/v5.8.0/api/child_process.html#child_process_child_stdout [Compatibility]: #stream_compatibility_with_older_node_js_versions [crypto]: crypto.html [Duplex]: #stream_class_stream_duplex [fs read streams]: https://nodejs.org/docs/v5.8.0/api/fs.html#fs_class_fs_readstream [fs write streams]: https://nodejs.org/docs/v5.8.0/api/fs.html#fs_class_fs_writestream [HTTP requests, on the client]: https://nodejs.org/docs/v5.8.0/api/http.html#http_class_http_clientrequest [HTTP responses, on the server]: https://nodejs.org/docs/v5.8.0/api/http.html#http_class_http_serverresponse [http-incoming-message]: https://nodejs.org/docs/v5.8.0/api/http.html#http_class_http_incomingmessage [Object mode]: #stream_object_mode [Readable]: #stream_class_stream_readable [SimpleProtocol v2]: #stream_example_simpleprotocol_parser_v2 [stream-_flush]: #stream_transform_flush_callback [stream-_read]: #stream_readable_read_size_1 [stream-_transform]: #stream_transform_transform_chunk_encoding_callback [stream-_write]: #stream_writable_write_chunk_encoding_callback_1 [stream-_writev]: #stream_writable_writev_chunks_callback [stream-end]: #stream_writable_end_chunk_encoding_callback [stream-pause]: #stream_readable_pause [stream-push]: #stream_readable_push_chunk_encoding [stream-read]: #stream_readable_read_size [stream-resume]: #stream_readable_resume [stream-write]: #stream_writable_write_chunk_encoding_callback [TCP sockets]: https://nodejs.org/docs/v5.8.0/api/net.html#net_class_net_socket [Transform]: #stream_class_stream_transform [Writable]: #stream_class_stream_writable [zlib]: zlib.html"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md","tags":[],"body":"# streams WG Meeting 2015-01-30 ## Links * **Google Hangouts Video**: http://www.youtube.com/watch?v=I9nDOSGfwZg * **GitHub Issue**: https://github.com/iojs/readable-stream/issues/106 * **Original Minutes Google Doc**: https://docs.google.com/document/d/17aTgLnjMXIrfjgNaTUnHQO7m3xgzHR2VXBTmi03Qii4/ ## Agenda Extracted from https://github.com/iojs/readable-stream/labels/wg-agenda prior to meeting. * adopt a charter [#105](https://github.com/iojs/readable-stream/issues/105) * release and versioning strategy [#101](https://github.com/iojs/readable-stream/issues/101) * simpler stream creation [#102](https://github.com/iojs/readable-stream/issues/102) * proposal: deprecate implicit flowing of streams [#99](https://github.com/iojs/readable-stream/issues/99) ## Minutes ### adopt a charter * group: +1's all around ### What versioning scheme should be adopted? * group: +1’s 3.0.0 * domenic+group: pulling in patches from other sources where appropriate * mikeal: version independently, suggesting versions for io.js * mikeal+domenic: work with TC to notify in advance of changes simpler stream creation ### streamline creation of streams * sam: streamline creation of streams * domenic: nice simple solution posted but, we lose the opportunity to change the model may not be backwards incompatible (double check keys) **action item:** domenic will check ### remove implicit flowing of streams on(‘data’) * add isFlowing / isPaused * mikeal: worrying that we’re documenting polyfill methods – confuses users * domenic: more reflective API is probably good, with warning labels for users * new section for mad scientists (reflective stream access) * calvin: name the “third state” * mikeal: maybe borrow the name from whatwg? * domenic: we’re missing the “third state” * consensus: kind of difficult to name the third state * mikeal: figure out differences in states / compat * mathias: always flow on data – eliminates third state * explore what it breaks **action items:** * ask isaac for ability to list packages by what public io.js APIs they use (esp. Stream) * ask rod/build for infrastructure * **chris**: explore the “flow on data” approach * add isPaused/isFlowing * add new docs section * move isPaused to that section"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/core-util-is/README.md","tags":[],"body":"# core-util-is The `util.is*` functions introduced in Node v0.12."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/inherits/README.md","tags":[],"body":"Browser-friendly inheritance fully compatible with standard node.js [inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor). This package exports standard `inherits` from node.js `util` module in node environment, but also provides alternative browser-friendly implementation through [browser field](https://gist.github.com/shtylman/4339901). Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of `util`. It also has a shim for old browsers with no `Object.create` support. While keeping you sure you are using standard `inherits` implementation in node.js environment, it allows bundlers such as [browserify](https://github.com/substack/node-browserify) to not include full `util` package to your client code if all you need is just `inherits` function. It worth, because browser shim for `util` package is large and `inherits` is often the single function you need from it. It's recommended to use this package instead of `require('util').inherits` for any code that has chances to be used not only in node.js but in browser too. ## usage ```js var inherits = require('inherits'); // then use exactly as the standard one ``` ## note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js `inherits`. If you are using version ~1.0 and planning to switch to ~2.0, be careful: * new version uses `super_` instead of `super` for referencing superclass * new version overwrites current prototype while old one preserves any existing fields on it"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. [![build status](https://secure.travis-ci.org/juliangruber/isarray.svg)](http://travis-ci.org/juliangruber/isarray) [![downloads](https://img.shields.io/npm/dm/isarray.svg)](https://www.npmjs.org/package/isarray) [![browser support](https://ci.testling.com/juliangruber/isarray.png) ](https://ci.testling.com/juliangruber/isarray) ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/process-nextick-args/license.md","tags":[],"body":"# Copyright (c) 2015 Calvin Metcalf Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. **THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/process-nextick-args/readme.md","tags":[],"body":"process-nextick-args ===== [![Build Status](https://travis-ci.org/calvinmetcalf/process-nextick-args.svg?branch=master)](https://travis-ci.org/calvinmetcalf/process-nextick-args) ```bash npm install --save process-nextick-args ``` Always be able to pass arguments to process.nextTick, no matter the platform ```js var nextTick = require('process-nextick-args'); nextTick(function (a, b, c) { console.log(a, b, c); }, 'step', 3, 'profit'); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/string_decoder/README.md","tags":[],"body":"**string_decoder.js** (`require('string_decoder')`) from Node.js core Copyright Joyent, Inc. and other Node contributors. See LICENCE file for details. Version numbers match the versions found in Node core, e.g. 0.10.24 matches Node 0.10.24, likewise 0.11.10 matches Node 0.11.10. **Prefer the stable version over the unstable.** The *build/* directory contains a build script that will scrape the source from the [joyent/node](https://github.com/joyent/node) repo given a specific Node version."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/util-deprecate/History.md","tags":[],"body":"1.0.2 / 2015-10-07 ================== * use try/catch when checking `localStorage` (#3, @kumavis) 1.0.1 / 2014-11-25 ================== * browser: use `console.warn()` for deprecation calls * browser: more jsdocs 1.0.0 / 2014-04-30 ================== * initial commit"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/util-deprecate/README.md","tags":[],"body":"util-deprecate ============== ### The Node.js `util.deprecate()` function with browser support In Node.js, this module simply re-exports the `util.deprecate()` function. In the web browser (i.e. via browserify), a browser-specific implementation of the `util.deprecate()` function is used. ## API A `deprecate()` function is the only thing exposed by this module. ``` javascript // setup: exports.foo = deprecate(foo, 'foo() is deprecated, use bar() instead'); // users see: foo(); // foo() is deprecated, use bar() instead foo(); foo(); ``` ## License (The MIT License) Copyright (c) 2014 Nathan Rajlich Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/caseless/README.md","tags":[],"body":"## Caseless -- wrap an object to set and get property with caseless semantics but also preserve caseing. This library is incredibly useful when working with HTTP headers. It allows you to get/set/check for headers in a caseless manner while also preserving the caseing of headers the first time they are set. ## Usage ```javascript var headers = {} , c = caseless(headers) ; c.set('a-Header', 'asdf') c.get('a-header') === 'asdf' ``` ## has(key) Has takes a name and if it finds a matching header will return that header name with the preserved caseing it was set with. ```javascript c.has('a-header') === 'a-Header' ``` ## set(key, value[, clobber=true]) Set is fairly straight forward except that if the header exists and clobber is disabled it will add `','+value` to the existing header. ```javascript c.set('a-Header', 'fdas') c.set('a-HEADER', 'more', false) c.get('a-header') === 'fdsa,more' ``` ## swap(key) Swaps the casing of a header with the new one that is passed in. ```javascript var headers = {} , c = caseless(headers) ; c.set('a-Header', 'fdas') c.swap('a-HEADER') c.has('a-header') === 'a-HEADER' headers === {'a-HEADER': 'fdas'} ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/combined-stream/Readme.md","tags":[],"body":"# combined-stream A stream that emits multiple other streams one after another. **NB** Currently `combined-stream` works with streams vesrion 1 only. There is ongoing effort to switch this library to streams version 2. Any help is welcome. :) Meanwhile you can explore other libraries that provide streams2 support with more or less compatability with `combined-stream`. - [combined-stream2](https://www.npmjs.com/package/combined-stream2): A drop-in streams2-compatible replacement for the combined-stream module. - [multistream](https://www.npmjs.com/package/multistream): A stream that emits multiple other streams one after another. ## Installation ``` bash npm install combined-stream ``` ## Usage Here is a simple example that shows how you can use combined-stream to combine two files into one: ``` javascript var CombinedStream = require('combined-stream'); var fs = require('fs'); var combinedStream = CombinedStream.create(); combinedStream.append(fs.createReadStream('file1.txt')); combinedStream.append(fs.createReadStream('file2.txt')); combinedStream.pipe(fs.createWriteStream('combined.txt')); ``` While the example above works great, it will pause all source streams until they are needed. If you don't want that to happen, you can set `pauseStreams` to `false`: ``` javascript var CombinedStream = require('combined-stream'); var fs = require('fs'); var combinedStream = CombinedStream.create({pauseStreams: false}); combinedStream.append(fs.createReadStream('file1.txt')); combinedStream.append(fs.createReadStream('file2.txt')); combinedStream.pipe(fs.createWriteStream('combined.txt')); ``` However, what if you don't have all the source streams yet, or you don't want to allocate the resources (file descriptors, memory, etc.) for them right away? Well, in that case you can simply provide a callback that supplies the stream by calling a `next()` function: ``` javascript var CombinedStream = require('combined-stream'); var fs = require('fs'); var combinedStream = CombinedStream.create(); combinedStream.append(function(next) { next(fs.createReadStream('file1.txt')); }); combinedStream.append(function(next) { next(fs.createReadStream('file2.txt')); }); combinedStream.pipe(fs.createWriteStream('combined.txt')); ``` ## API ### CombinedStream.create([options]) Returns a new combined stream object. Available options are: * `maxDataSize` * `pauseStreams` The effect of those options is described below. ### combinedStream.pauseStreams = `true` Whether to apply back pressure to the underlaying streams. If set to `false`, the underlaying streams will never be paused. If set to `true`, the underlaying streams will be paused right after being appended, as well as when `delayedStream.pipe()` wants to throttle. ### combinedStream.maxDataSize = `2 * 1024 * 1024` The maximum amount of bytes (or characters) to buffer for all source streams. If this value is exceeded, `combinedStream` emits an `'error'` event. ### combinedStream.dataSize = `0` The amount of bytes (or characters) currently buffered by `combinedStream`. ### combinedStream.append(stream) Appends the given `stream` to the combinedStream object. If `pauseStreams` is set to `true, this stream will also be paused right away. `streams` can also be a function that takes one parameter called `next`. `next` is a function that must be invoked in order to provide the `next` stream, see example above. Regardless of how the `stream` is appended, combined-stream always attaches an `'error'` listener to it, so you don't have to do that manually. Special case: `stream` can also be a String or Buffer. ### combinedStream.write(data) You should not call this, `combinedStream` takes care of piping the appended streams into itself for you. ### combinedStream.resume() Causes `combinedStream` to start drain the streams it manages. The function is idempotent, and also emits a `'resume'` event each time which usually goes to the stream that is currently being drained. ### combinedStream.pause(); If `combinedStream.pauseStreams` is set to `false`, this does nothing. Otherwise a `'pause'` event is emitted, this goes to the stream that is currently being drained, so you can use it to apply back pressure. ### combinedStream.end(); Sets `combinedStream.writable` to false, emits an `'end'` event, and removes all streams from the queue. ### combinedStream.destroy(); Same as `combinedStream.end()`, except it emits a `'close'` event instead of `'end'`. ## License combined-stream is licensed under the MIT license."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Readme.md","tags":[],"body":"# delayed-stream Buffers events from a stream until you are ready to handle them. ## Installation ``` bash npm install delayed-stream ``` ## Usage The following example shows how to write a http echo server that delays its response by 1000 ms. ``` javascript var DelayedStream = require('delayed-stream'); var http = require('http'); http.createServer(function(req, res) { var delayed = DelayedStream.create(req); setTimeout(function() { res.writeHead(200); delayed.pipe(res); }, 1000); }); ``` If you are not using `Stream#pipe`, you can also manually release the buffered events by calling `delayedStream.resume()`: ``` javascript var delayed = DelayedStream.create(req); setTimeout(function() { // Emit all buffered events and resume underlaying source delayed.resume(); }, 1000); ``` ## Implementation In order to use this meta stream properly, here are a few things you should know about the implementation. ### Event Buffering / Proxying All events of the `source` stream are hijacked by overwriting the `source.emit` method. Until node implements a catch-all event listener, this is the only way. However, delayed-stream still continues to emit all events it captures on the `source`, regardless of whether you have released the delayed stream yet or not. Upon creation, delayed-stream captures all `source` events and stores them in an internal event buffer. Once `delayedStream.release()` is called, all buffered events are emitted on the `delayedStream`, and the event buffer is cleared. After that, delayed-stream merely acts as a proxy for the underlaying source. ### Error handling Error events on `source` are buffered / proxied just like any other events. However, `delayedStream.create` attaches a no-op `'error'` listener to the `source`. This way you only have to handle errors on the `delayedStream` object, rather than in two places. ### Buffer limits delayed-stream provides a `maxDataSize` property that can be used to limit the amount of data being buffered. In order to protect you from bad `source` streams that don't react to `source.pause()`, this feature is enabled by default. ## API ### DelayedStream.create(source, [options]) Returns a new `delayedStream`. Available options are: * `pauseStream` * `maxDataSize` The description for those properties can be found below. ### delayedStream.source The `source` stream managed by this object. This is useful if you are passing your `delayedStream` around, and you still want to access properties on the `source` object. ### delayedStream.pauseStream = true Whether to pause the underlaying `source` when calling `DelayedStream.create()`. Modifying this property afterwards has no effect. ### delayedStream.maxDataSize = 1024 * 1024 The amount of data to buffer before emitting an `error`. If the underlaying source is emitting `Buffer` objects, the `maxDataSize` refers to bytes. If the underlaying source is emitting JavaScript strings, the size refers to characters. If you know what you are doing, you can set this property to `Infinity` to disable this feature. You can also modify this property during runtime. ### delayedStream.dataSize = 0 The amount of data buffered so far. ### delayedStream.readable An ECMA5 getter that returns the value of `source.readable`. ### delayedStream.resume() If the `delayedStream` has not been released so far, `delayedStream.release()` is called. In either case, `source.resume()` is called. ### delayedStream.pause() Calls `source.pause()`. ### delayedStream.pipe(dest) Calls `delayedStream.resume()` and then proxies the arguments to `source.pipe`. ### delayedStream.release() Emits and clears all events that have been buffered up so far. This does not resume the underlaying source, use `delayedStream.resume()` instead. ## License delayed-stream is licensed under the MIT license."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/extend/CHANGELOG.md","tags":[],"body":"3.0.0 / 2015-07-01 ================== * [Possible breaking change] Use global \"strict\" directive (#32) * [Tests] `int` is an ES3 reserved word * [Tests] Test up to `io.js` `v2.3` * [Tests] Add `npm run eslint` * [Dev Deps] Update `covert`, `jscs` 2.0.1 / 2015-04-25 ================== * Use an inline `isArray` check, for ES3 browsers. (#27) * Some old browsers fail when an identifier is `toString` * Test latest `node` and `io.js` versions on `travis-ci`; speed up builds * Add license info to package.json (#25) * Update `tape`, `jscs` * Adding a CHANGELOG 2.0.0 / 2014-10-01 ================== * Increase code coverage to 100%; run code coverage as part of tests * Add `npm run lint`; Run linter as part of tests * Remove nodeType and setInterval checks in isPlainObject * Updating `tape`, `jscs`, `covert` * General style and README cleanup 1.3.0 / 2014-06-20 ================== * Add component.json for browser support (#18) * Use SVG for badges in README (#16) * Updating `tape`, `covert` * Updating travis-ci to work with multiple node versions * Fix `deep === false` bug (returning target as {}) (#14) * Fixing constructor checks in isPlainObject * Adding additional test coverage * Adding `npm run coverage` * Add LICENSE (#13) * Adding a warning about `false`, per #11 * General style and whitespace cleanup 1.2.1 / 2013-09-14 ================== * Fixing hasOwnProperty bugs that would only have shown up in specific browsers. Fixes #8 * Updating `tape` 1.2.0 / 2013-09-02 ================== * Updating the README: add badges * Adding a missing variable reference. * Using `tape` instead of `buster` for tests; add more tests (#7) * Adding node 0.10 to Travis CI (#6) * Enabling \"npm test\" and cleaning up package.json (#5) * Add Travis CI. 1.1.3 / 2012-12-06 ================== * Added unit tests. * Ensure extend function is named. (Looks nicer in a stack trace.) * README cleanup. 1.1.1 / 2012-11-07 ================== * README cleanup. * Added installation instructions. * Added a missing semicolon 1.0.0 / 2012-04-08 ================== * Initial commit"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/extend/README.md","tags":[],"body":"[![Build Status][travis-svg]][travis-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] # extend() for Node.js [![Version Badge][npm-version-png]][npm-url] `node-extend` is a port of the classic extend() method from jQuery. It behaves as you expect. It is simple, tried and true. ## Installation This package is available on [npm][npm-url] as: `extend` ``` sh npm install extend ``` ## Usage **Syntax:** extend **(** [`deep`], `target`, `object1`, [`objectN`] **)** *Extend one object with one or more others, returning the modified object.* Keep in mind that the target object will be modified, and will be returned from extend(). If a boolean true is specified as the first argument, extend performs a deep copy, recursively copying any objects it finds. Otherwise, the copy will share structure with the original object(s). Undefined properties are not copied. However, properties inherited from the object's prototype will be copied over. Warning: passing `false` as the first argument is not supported. ### Arguments * `deep` *Boolean* (optional) If set, the merge becomes recursive (i.e. deep copy). * `target` *Object* The object to extend. * `object1` *Object* The object that will be merged into the first. * `objectN` *Object* (Optional) More objects to merge into the first. ## License `node-extend` is licensed under the [MIT License][mit-license-url]. ## Acknowledgements All credit to the jQuery authors for perfecting this amazing utility. Ported to Node.js by [Stefan Thomas][github-justmoon] with contributions by [Jonathan Buchanan][github-insin] and [Jordan Harband][github-ljharb]. [travis-svg]: https://travis-ci.org/justmoon/node-extend.svg [travis-url]: https://travis-ci.org/justmoon/node-extend [npm-url]: https://npmjs.org/package/extend [mit-license-url]: http://opensource.org/licenses/MIT [github-justmoon]: https://github.com/justmoon [github-insin]: https://github.com/insin [github-ljharb]: https://github.com/ljharb [npm-version-png]: http://vb.teelaun.ch/justmoon/node-extend.svg [deps-svg]: https://david-dm.org/justmoon/node-extend.svg [deps-url]: https://david-dm.org/justmoon/node-extend [dev-deps-svg]: https://david-dm.org/justmoon/node-extend/dev-status.svg [dev-deps-url]: https://david-dm.org/justmoon/node-extend#info=devDependencies"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/forever-agent/README.md","tags":[],"body":"forever-agent ============= HTTP Agent that keeps socket connections alive between keep-alive requests. Formerly part of mikeal/request, now a standalone module."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/form-data/README.md","tags":[],"body":"# Form-Data [![NPM Module](https://img.shields.io/npm/v/form-data.svg)](https://www.npmjs.com/package/form-data) [![Join the chat at https://gitter.im/form-data/form-data](http://form-data.github.io/images/gitterbadge.svg)](https://gitter.im/form-data/form-data) A library to create readable ```\"multipart/form-data\"``` streams. Can be used to submit forms and file uploads to other web applications. The API of this library is inspired by the [XMLHttpRequest-2 FormData Interface][xhr2-fd]. [xhr2-fd]: http://dev.w3.org/2006/webapi/XMLHttpRequest-2/Overview.html#the-formdata-interface [streams2-thing]: http://nodejs.org/api/stream.html#stream_compatibility_with_older_node_versions [![Linux Build](https://img.shields.io/travis/form-data/form-data/master.svg?label=linux:0.10-5.x)](https://travis-ci.org/form-data/form-data) [![Windows Build](https://img.shields.io/appveyor/ci/alexindigo/form-data/master.svg?label=windows:0.10-5.x)](https://ci.appveyor.com/project/alexindigo/form-data) [![Coverage Status](https://img.shields.io/coveralls/form-data/form-data/master.svg?label=code+coverage)](https://coveralls.io/github/form-data/form-data?branch=master) [![Dependency Status](https://img.shields.io/david/form-data/form-data.svg)](https://david-dm.org/form-data/form-data) [![Codacy Badge](https://img.shields.io/codacy/43ece80331c246179695e41f81eeffe2.svg)](https://www.codacy.com/app/form-data/form-data) [![bitHound Overall Score](https://www.bithound.io/github/form-data/form-data/badges/score.svg)](https://www.bithound.io/github/form-data/form-data) ## Install ``` npm install form-data ``` ## Usage In this example we are constructing a form with 3 fields that contain a string, a buffer and a file stream. ``` javascript var FormData = require('form-data'); var fs = require('fs'); var form = new FormData(); form.append('my_field', 'my value'); form.append('my_buffer', new Buffer(10)); form.append('my_file', fs.createReadStream('/foo/bar.jpg')); ``` Also you can use http-response stream: ``` javascript var FormData = require('form-data'); var http = require('http'); var form = new FormData(); http.request('http://nodejs.org/images/logo.png', function(response) { form.append('my_field', 'my value'); form.append('my_buffer', new Buffer(10)); form.append('my_logo', response); }); ``` Or @mikeal's [request](https://github.com/request/request) stream: ``` javascript var FormData = require('form-data'); var request = require('request'); var form = new FormData(); form.append('my_field', 'my value'); form.append('my_buffer', new Buffer(10)); form.append('my_logo', request('http://nodejs.org/images/logo.png')); ``` In order to submit this form to a web application, call ```submit(url, [callback])``` method: ``` javascript form.submit('http://example.org/', function(err, res) { // res – response object (http.IncomingMessage) // res.resume(); }); ``` For more advanced request manipulations ```submit()``` method returns ```http.ClientRequest``` object, or you can choose from one of the alternative submission methods. ### Alternative submission methods You can use node's http client interface: ``` javascript var http = require('http'); var request = http.request({ method: 'post', host: 'example.org', path: '/upload', headers: form.getHeaders() }); form.pipe(request); request.on('response', function(res) { console.log(res.statusCode); }); ``` Or if you would prefer the `'Content-Length'` header to be set for you: ``` javascript form.submit('example.org/upload', function(err, res) { console.log(res.statusCode); }); ``` To use custom headers and pre-known length in parts: ``` javascript var CRLF = '\\r\\n'; var form = new FormData(); var options = { header: CRLF + '--' + form.getBoundary() + CRLF + 'X-Custom-Header: 123' + CRLF + CRLF, knownLength: 1 }; form.append('my_buffer', buffer, options); form.submit('http://example.com/', function(err, res) { if (err) throw err; console.log('Done'); }); ``` Form-Data can recognize and fetch all the required information from common types of streams (```fs.readStream```, ```http.response``` and ```mikeal's request```), for some other types of streams you'd need to provide \"file\"-related information manually: ``` javascript someModule.stream(function(err, stdout, stderr) { if (err) throw err; var form = new FormData(); form.append('file', stdout, { filename: 'unicycle.jpg', contentType: 'image/jpg', knownLength: 19806 }); form.submit('http://example.com/', function(err, res) { if (err) throw err; console.log('Done'); }); }); ``` For edge cases, like POST request to URL with query string or to pass HTTP auth credentials, object can be passed to `form.submit()` as first parameter: ``` javascript form.submit({ host: 'example.com', path: '/probably.php?extra=params', auth: 'username:password' }, function(err, res) { console.log(res.statusCode); }); ``` In case you need to also send custom HTTP headers with the POST request, you can use the `headers` key in first parameter of `form.submit()`: ``` javascript form.submit({ host: 'example.com', path: '/surelynot.php', headers: {'x-test-header': 'test-header-value'} }, function(err, res) { console.log(res.statusCode); }); ``` ### Integration with other libraries #### Request Form submission using [request](https://github.com/request/request): ```javascript var formData = { my_field: 'my_value', my_file: fs.createReadStream(__dirname + '/unicycle.jpg'), }; request.post({url:'http://service.com/upload', formData: formData}, function(err, httpResponse, body) { if (err) { return console.error('upload failed:', err); } console.log('Upload successful! Server responded with:', body); }); ``` For more details see [request readme](https://github.com/request/request#multipartform-data-multipart-form-uploads). #### node-fetch You can also submit a form using [node-fetch](https://github.com/bitinn/node-fetch): ```javascript var form = new FormData(); form.append('a', 1); fetch('http://example.com', { method: 'POST', body: form }) .then(function(res) { return res.json(); }).then(function(json) { console.log(json); }); ``` ## Notes - ```getLengthSync()``` method DOESN'T calculate length for streams, use ```knownLength``` options as workaround. - If it feels like FormData hangs after submit and you're on ```node-0.10```, please check [Compatibility with Older Node Versions][streams2-thing] ## License Form-Data is licensed under the MIT license."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/form-data/node_modules/async/CHANGELOG.md","tags":[],"body":"# v1.5.2 - Allow using `\"consructor\"` as an argument in `memoize` (#998) - Give a better error messsage when `auto` dependency checking fails (#994) - Various doc updates (#936, #956, #979, #1002) # v1.5.1 - Fix issue with `pause` in `queue` with concurrency enabled (#946) - `while` and `until` now pass the final result to callback (#963) - `auto` will properly handle concurrency when there is no callback (#966) - `auto` will now properly stop execution when an error occurs (#988, #993) - Various doc fixes (#971, #980) # v1.5.0 - Added `transform`, analogous to [`_.transform`](http://lodash.com/docs#transform) (#892) - `map` now returns an object when an object is passed in, rather than array with non-numeric keys. `map` will begin always returning an array with numeric indexes in the next major release. (#873) - `auto` now accepts an optional `concurrency` argument to limit the number of running tasks (#637) - Added `queue#workersList()`, to retrieve the list of currently running tasks. (#891) - Various code simplifications (#896, #904) - Various doc fixes :scroll: (#890, #894, #903, #905, #912) # v1.4.2 - Ensure coverage files don't get published on npm (#879) # v1.4.1 - Add in overlooked `detectLimit` method (#866) - Removed unnecessary files from npm releases (#861) - Removed usage of a reserved word to prevent :boom: in older environments (#870) # v1.4.0 - `asyncify` now supports promises (#840) - Added `Limit` versions of `filter` and `reject` (#836) - Add `Limit` versions of `detect`, `some` and `every` (#828, #829) - `some`, `every` and `detect` now short circuit early (#828, #829) - Improve detection of the global object (#804), enabling use in WebWorkers - `whilst` now called with arguments from iterator (#823) - `during` now gets called with arguments from iterator (#824) - Code simplifications and optimizations aplenty ([diff](https://github.com/caolan/async/compare/v1.3.0...v1.4.0)) # v1.3.0 New Features: - Added `constant` - Added `asyncify`/`wrapSync` for making sync functions work with callbacks. (#671, #806) - Added `during` and `doDuring`, which are like `whilst` with an async truth test. (#800) - `retry` now accepts an `interval` parameter to specify a delay between retries. (#793) - `async` should work better in Web Workers due to better `root` detection (#804) - Callbacks are now optional in `whilst`, `doWhilst`, `until`, and `doUntil` (#642) - Various internal updates (#786, #801, #802, #803) - Various doc fixes (#790, #794) Bug Fixes: - `cargo` now exposes the `payload` size, and `cargo.payload` can be changed on the fly after the `cargo` is created. (#740, #744, #783) # v1.2.1 Bug Fix: - Small regression with synchronous iterator behavior in `eachSeries` with a 1-element array. Before 1.1.0, `eachSeries`'s callback was called on the same tick, which this patch restores. In 2.0.0, it will be called on the next tick. (#782) # v1.2.0 New Features: - Added `timesLimit` (#743) - `concurrency` can be changed after initialization in `queue` by setting `q.concurrency`. The new concurrency will be reflected the next time a task is processed. (#747, #772) Bug Fixes: - Fixed a regression in `each` and family with empty arrays that have additional properties. (#775, #777) # v1.1.1 Bug Fix: - Small regression with synchronous iterator behavior in `eachSeries` with a 1-element array. Before 1.1.0, `eachSeries`'s callback was called on the same tick, which this patch restores. In 2.0.0, it will be called on the next tick. (#782) # v1.1.0 New Features: - `cargo` now supports all of the same methods and event callbacks as `queue`. - Added `ensureAsync` - A wrapper that ensures an async function calls its callback on a later tick. (#769) - Optimized `map`, `eachOf`, and `waterfall` families of functions - Passing a `null` or `undefined` array to `map`, `each`, `parallel` and families will be treated as an empty array (#667). - The callback is now optional for the composed results of `compose` and `seq`. (#618) - Reduced file size by 4kb, (minified version by 1kb) - Added code coverage through `nyc` and `coveralls` (#768) Bug Fixes: - `forever` will no longer stack overflow with a synchronous iterator (#622) - `eachLimit` and other limit functions will stop iterating once an error occurs (#754) - Always pass `null` in callbacks when there is no error (#439) - Ensure proper conditions when calling `drain()` after pushing an empty data set to a queue (#668) - `each` and family will properly handle an empty array (#578) - `eachSeries` and family will finish if the underlying array is modified during execution (#557) - `queue` will throw if a non-function is passed to `q.push()` (#593) - Doc fixes (#629, #766) # v1.0.0 No known breaking changes, we are simply complying with semver from here on out. Changes: - Start using a changelog! - Add `forEachOf` for iterating over Objects (or to iterate Arrays with indexes available) (#168 #704 #321) - Detect deadlocks in `auto` (#663) - Better support for require.js (#527) - Throw if queue created with concurrency `0` (#714) - Fix unneeded iteration in `queue.resume()` (#758) - Guard against timer mocking overriding `setImmediate` (#609 #611) - Miscellaneous doc fixes (#542 #596 #615 #628 #631 #690 #729) - Use single noop function internally (#546) - Optimize internal `_each`, `_map` and `_keys` functions."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/form-data/node_modules/async/README.md","tags":[],"body":"# Async.js [![Build Status via Travis CI](https://travis-ci.org/caolan/async.svg?branch=master)](https://travis-ci.org/caolan/async) [![NPM version](http://img.shields.io/npm/v/async.svg)](https://www.npmjs.org/package/async) [![Coverage Status](https://coveralls.io/repos/caolan/async/badge.svg?branch=master)](https://coveralls.io/r/caolan/async?branch=master) [![Join the chat at https://gitter.im/caolan/async](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/caolan/async?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript. Although originally designed for use with [Node.js](http://nodejs.org) and installable via `npm install async`, it can also be used directly in the browser. Async is also installable via: - [bower](http://bower.io/): `bower install async` - [component](https://github.com/component/component): `component install caolan/async` - [jam](http://jamjs.org/): `jam install async` - [spm](http://spmjs.io/): `spm install async` Async provides around 20 functions that include the usual 'functional' suspects (`map`, `reduce`, `filter`, `each`…) as well as some common patterns for asynchronous control flow (`parallel`, `series`, `waterfall`…). All these functions assume you follow the Node.js convention of providing a single callback as the last argument of your `async` function. ## Quick Examples ```javascript async.map(['file1','file2','file3'], fs.stat, function(err, results){ // results is now an array of stats for each file }); async.filter(['file1','file2','file3'], fs.exists, function(results){ // results now equals an array of the existing files }); async.parallel([ function(){ ... }, function(){ ... } ], callback); async.series([ function(){ ... }, function(){ ... } ]); ``` There are many more functions available so take a look at the docs below for a full list. This module aims to be comprehensive, so if you feel anything is missing please create a GitHub issue for it. ## Common Pitfalls [(StackOverflow)](http://stackoverflow.com/questions/tagged/async.js) ### Synchronous iteration functions If you get an error like `RangeError: Maximum call stack size exceeded.` or other stack overflow issues when using async, you are likely using a synchronous iterator. By *synchronous* we mean a function that calls its callback on the same tick in the javascript event loop, without doing any I/O or using any timers. Calling many callbacks iteratively will quickly overflow the stack. If you run into this issue, just defer your callback with `async.setImmediate` to start a new call stack on the next tick of the event loop. This can also arise by accident if you callback early in certain cases: ```js async.eachSeries(hugeArray, function iterator(item, callback) { if (inCache(item)) { callback(null, cache[item]); // if many items are cached, you'll overflow } else { doSomeIO(item, callback); } }, function done() { //... }); ``` Just change it to: ```js async.eachSeries(hugeArray, function iterator(item, callback) { if (inCache(item)) { async.setImmediate(function () { callback(null, cache[item]); }); } else { doSomeIO(item, callback); //... ``` Async guards against synchronous functions in some, but not all, cases. If you are still running into stack overflows, you can defer as suggested above, or wrap functions with [`async.ensureAsync`](#ensureAsync) Functions that are asynchronous by their nature do not have this problem and don't need the extra callback deferral. If JavaScript's event loop is still a bit nebulous, check out [this article](http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/) or [this talk](http://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html) for more detailed information about how it works. ### Multiple callbacks Make sure to always `return` when calling a callback early, otherwise you will cause multiple callbacks and unpredictable behavior in many cases. ```js async.waterfall([ function (callback) { getSomething(options, function (err, result) { if (err) { callback(new Error(\"failed getting something:\" + err.message)); // we should return here } // since we did not return, this callback still will be called and // `processData` will be called twice callback(null, result); }); }, processData ], done) ``` It is always good practice to `return callback(err, result)` whenever a callback call is not the last statement of a function. ### Binding a context to an iterator This section is really about `bind`, not about `async`. If you are wondering how to make `async` execute your iterators in a given context, or are confused as to why a method of another library isn't working as an iterator, study this example: ```js // Here is a simple object with an (unnecessarily roundabout) squaring method var AsyncSquaringLibrary = { squareExponent: 2, square: function(number, callback){ var result = Math.pow(number, this.squareExponent); setTimeout(function(){ callback(null, result); }, 200); } }; async.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){ // result is [NaN, NaN, NaN] // This fails because the `this.squareExponent` expression in the square // function is not evaluated in the context of AsyncSquaringLibrary, and is // therefore undefined. }); async.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){ // result is [1, 4, 9] // With the help of bind we can attach a context to the iterator before // passing it to async. Now the square function will be executed in its // 'home' AsyncSquaringLibrary context and the value of `this.squareExponent` // will be as expected. }); ``` ## Download The source is available for download from [GitHub](https://github.com/caolan/async/blob/master/lib/async.js). Alternatively, you can install using Node Package Manager (`npm`): npm install async As well as using Bower: bower install async __Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed ## In the Browser So far it's been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage: ```html ``` ## Documentation Some functions are also available in the following forms: * `Series` - the same as `` but runs only a single async operation at a time * `Limit` - the same as `` but runs a maximum of `limit` async operations at a time ### Collections * [`each`](#each), `eachSeries`, `eachLimit` * [`forEachOf`](#forEachOf), `forEachOfSeries`, `forEachOfLimit` * [`map`](#map), `mapSeries`, `mapLimit` * [`filter`](#filter), `filterSeries`, `filterLimit` * [`reject`](#reject), `rejectSeries`, `rejectLimit` * [`reduce`](#reduce), [`reduceRight`](#reduceRight) * [`detect`](#detect), `detectSeries`, `detectLimit` * [`sortBy`](#sortBy) * [`some`](#some), `someLimit` * [`every`](#every), `everyLimit` * [`concat`](#concat), `concatSeries` ### Control Flow * [`series`](#seriestasks-callback) * [`parallel`](#parallel), `parallelLimit` * [`whilst`](#whilst), [`doWhilst`](#doWhilst) * [`until`](#until), [`doUntil`](#doUntil) * [`during`](#during), [`doDuring`](#doDuring) * [`forever`](#forever) * [`waterfall`](#waterfall) * [`compose`](#compose) * [`seq`](#seq) * [`applyEach`](#applyEach), `applyEachSeries` * [`queue`](#queue), [`priorityQueue`](#priorityQueue) * [`cargo`](#cargo) * [`auto`](#auto) * [`retry`](#retry) * [`iterator`](#iterator) * [`times`](#times), `timesSeries`, `timesLimit` ### Utils * [`apply`](#apply) * [`nextTick`](#nextTick) * [`memoize`](#memoize) * [`unmemoize`](#unmemoize) * [`ensureAsync`](#ensureAsync) * [`constant`](#constant) * [`asyncify`](#asyncify) * [`wrapSync`](#wrapSync) * [`log`](#log) * [`dir`](#dir) * [`noConflict`](#noConflict) ## Collections ### each(arr, iterator, [callback]) Applies the function `iterator` to each item in `arr`, in parallel. The `iterator` is called with an item from the list, and a callback for when it has finished. If the `iterator` passes an error to its `callback`, the main `callback` (for the `each` function) is immediately called with the error. Note, that since this function applies `iterator` to each item in parallel, there is no guarantee that the iterator functions will complete in order. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A function to apply to each item in `arr`. The iterator is passed a `callback(err)` which must be called once it has completed. If no error has occurred, the `callback` should be run without arguments or with an explicit `null` argument. The array index is not passed to the iterator. If you need the index, use [`forEachOf`](#forEachOf). * `callback(err)` - *Optional* A callback which is called when all `iterator` functions have finished, or an error occurs. __Examples__ ```js // assuming openFiles is an array of file names and saveFile is a function // to save the modified contents of that file: async.each(openFiles, saveFile, function(err){ // if any of the saves produced an error, err would equal that error }); ``` ```js // assuming openFiles is an array of file names async.each(openFiles, function(file, callback) { // Perform operation on file here. console.log('Processing file ' + file); if( file.length > 32 ) { console.log('This file name is too long'); callback('File name too long'); } else { // Do work to process file here console.log('File processed'); callback(); } }, function(err){ // if any of the file processing produced an error, err would equal that error if( err ) { // One of the iterations produced an error. // All processing will now stop. console.log('A file failed to process'); } else { console.log('All files have been processed successfully'); } }); ``` __Related__ * eachSeries(arr, iterator, [callback]) * eachLimit(arr, limit, iterator, [callback]) --------------------------------------- ### forEachOf(obj, iterator, [callback]) Like `each`, except that it iterates over objects, and passes the key as the second argument to the iterator. __Arguments__ * `obj` - An object or array to iterate over. * `iterator(item, key, callback)` - A function to apply to each item in `obj`. The `key` is the item's key, or index in the case of an array. The iterator is passed a `callback(err)` which must be called once it has completed. If no error has occurred, the callback should be run without arguments or with an explicit `null` argument. * `callback(err)` - *Optional* A callback which is called when all `iterator` functions have finished, or an error occurs. __Example__ ```js var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"}; var configs = {}; async.forEachOf(obj, function (value, key, callback) { fs.readFile(__dirname + value, \"utf8\", function (err, data) { if (err) return callback(err); try { configs[key] = JSON.parse(data); } catch (e) { return callback(e); } callback(); }) }, function (err) { if (err) console.error(err.message); // configs is now a map of JSON data doSomethingWith(configs); }) ``` __Related__ * forEachOfSeries(obj, iterator, [callback]) * forEachOfLimit(obj, limit, iterator, [callback]) --------------------------------------- ### map(arr, iterator, [callback]) Produces a new array of values by mapping each value in `arr` through the `iterator` function. The `iterator` is called with an item from `arr` and a callback for when it has finished processing. Each of these callback takes 2 arguments: an `error`, and the transformed item from `arr`. If `iterator` passes an error to its callback, the main `callback` (for the `map` function) is immediately called with the error. Note, that since this function applies the `iterator` to each item in parallel, there is no guarantee that the `iterator` functions will complete in order. However, the results array will be in the same order as the original `arr`. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A function to apply to each item in `arr`. The iterator is passed a `callback(err, transformed)` which must be called once it has completed with an error (which can be `null`) and a transformed item. * `callback(err, results)` - *Optional* A callback which is called when all `iterator` functions have finished, or an error occurs. Results is an array of the transformed items from the `arr`. __Example__ ```js async.map(['file1','file2','file3'], fs.stat, function(err, results){ // results is now an array of stats for each file }); ``` __Related__ * mapSeries(arr, iterator, [callback]) * mapLimit(arr, limit, iterator, [callback]) --------------------------------------- ### filter(arr, iterator, [callback]) __Alias:__ `select` Returns a new array of all the values in `arr` which pass an async truth test. _The callback for each `iterator` call only accepts a single argument of `true` or `false`; it does not accept an error argument first!_ This is in-line with the way node libraries work with truth tests like `fs.exists`. This operation is performed in parallel, but the results array will be in the same order as the original. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A truth test to apply to each item in `arr`. The `iterator` is passed a `callback(truthValue)`, which must be called with a boolean argument once it has completed. * `callback(results)` - *Optional* A callback which is called after all the `iterator` functions have finished. __Example__ ```js async.filter(['file1','file2','file3'], fs.exists, function(results){ // results now equals an array of the existing files }); ``` __Related__ * filterSeries(arr, iterator, [callback]) * filterLimit(arr, limit, iterator, [callback]) --------------------------------------- ### reject(arr, iterator, [callback]) The opposite of [`filter`](#filter). Removes values that pass an `async` truth test. __Related__ * rejectSeries(arr, iterator, [callback]) * rejectLimit(arr, limit, iterator, [callback]) --------------------------------------- ### reduce(arr, memo, iterator, [callback]) __Aliases:__ `inject`, `foldl` Reduces `arr` into a single value using an async `iterator` to return each successive step. `memo` is the initial state of the reduction. This function only operates in series. For performance reasons, it may make sense to split a call to this function into a parallel map, and then use the normal `Array.prototype.reduce` on the results. This function is for situations where each step in the reduction needs to be async; if you can get the data before reducing it, then it's probably a good idea to do so. __Arguments__ * `arr` - An array to iterate over. * `memo` - The initial state of the reduction. * `iterator(memo, item, callback)` - A function applied to each item in the array to produce the next step in the reduction. The `iterator` is passed a `callback(err, reduction)` which accepts an optional error as its first argument, and the state of the reduction as the second. If an error is passed to the callback, the reduction is stopped and the main `callback` is immediately called with the error. * `callback(err, result)` - *Optional* A callback which is called after all the `iterator` functions have finished. Result is the reduced value. __Example__ ```js async.reduce([1,2,3], 0, function(memo, item, callback){ // pointless async: process.nextTick(function(){ callback(null, memo + item) }); }, function(err, result){ // result is now equal to the last value of memo, which is 6 }); ``` --------------------------------------- ### reduceRight(arr, memo, iterator, [callback]) __Alias:__ `foldr` Same as [`reduce`](#reduce), only operates on `arr` in reverse order. --------------------------------------- ### detect(arr, iterator, [callback]) Returns the first value in `arr` that passes an async truth test. The `iterator` is applied in parallel, meaning the first iterator to return `true` will fire the detect `callback` with that result. That means the result might not be the first item in the original `arr` (in terms of order) that passes the test. If order within the original `arr` is important, then look at [`detectSeries`](#detectSeries). __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A truth test to apply to each item in `arr`. The iterator is passed a `callback(truthValue)` which must be called with a boolean argument once it has completed. **Note: this callback does not take an error as its first argument.** * `callback(result)` - *Optional* A callback which is called as soon as any iterator returns `true`, or after all the `iterator` functions have finished. Result will be the first item in the array that passes the truth test (iterator) or the value `undefined` if none passed. **Note: this callback does not take an error as its first argument.** __Example__ ```js async.detect(['file1','file2','file3'], fs.exists, function(result){ // result now equals the first file in the list that exists }); ``` __Related__ * detectSeries(arr, iterator, [callback]) * detectLimit(arr, limit, iterator, [callback]) --------------------------------------- ### sortBy(arr, iterator, [callback]) Sorts a list by the results of running each `arr` value through an async `iterator`. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A function to apply to each item in `arr`. The iterator is passed a `callback(err, sortValue)` which must be called once it has completed with an error (which can be `null`) and a value to use as the sort criteria. * `callback(err, results)` - *Optional* A callback which is called after all the `iterator` functions have finished, or an error occurs. Results is the items from the original `arr` sorted by the values returned by the `iterator` calls. __Example__ ```js async.sortBy(['file1','file2','file3'], function(file, callback){ fs.stat(file, function(err, stats){ callback(err, stats.mtime); }); }, function(err, results){ // results is now the original array of files sorted by // modified date }); ``` __Sort Order__ By modifying the callback parameter the sorting order can be influenced: ```js //ascending order async.sortBy([1,9,3,5], function(x, callback){ callback(null, x); }, function(err,result){ //result callback } ); //descending order async.sortBy([1,9,3,5], function(x, callback){ callback(null, x*-1); // ### some(arr, iterator, [callback]) __Alias:__ `any` Returns `true` if at least one element in the `arr` satisfies an async test. _The callback for each iterator call only accepts a single argument of `true` or `false`; it does not accept an error argument first!_ This is in-line with the way node libraries work with truth tests like `fs.exists`. Once any iterator call returns `true`, the main `callback` is immediately called. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A truth test to apply to each item in the array in parallel. The iterator is passed a `callback(truthValue)`` which must be called with a boolean argument once it has completed. * `callback(result)` - *Optional* A callback which is called as soon as any iterator returns `true`, or after all the iterator functions have finished. Result will be either `true` or `false` depending on the values of the async tests. **Note: the callbacks do not take an error as their first argument.** __Example__ ```js async.some(['file1','file2','file3'], fs.exists, function(result){ // if result is true then at least one of the files exists }); ``` __Related__ * someLimit(arr, limit, iterator, callback) --------------------------------------- ### every(arr, iterator, [callback]) __Alias:__ `all` Returns `true` if every element in `arr` satisfies an async test. _The callback for each `iterator` call only accepts a single argument of `true` or `false`; it does not accept an error argument first!_ This is in-line with the way node libraries work with truth tests like `fs.exists`. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A truth test to apply to each item in the array in parallel. The iterator is passed a `callback(truthValue)` which must be called with a boolean argument once it has completed. * `callback(result)` - *Optional* A callback which is called as soon as any iterator returns `false`, or after all the iterator functions have finished. Result will be either `true` or `false` depending on the values of the async tests. **Note: the callbacks do not take an error as their first argument.** __Example__ ```js async.every(['file1','file2','file3'], fs.exists, function(result){ // if result is true then every file exists }); ``` __Related__ * everyLimit(arr, limit, iterator, callback) --------------------------------------- ### concat(arr, iterator, [callback]) Applies `iterator` to each item in `arr`, concatenating the results. Returns the concatenated list. The `iterator`s are called in parallel, and the results are concatenated as they return. There is no guarantee that the results array will be returned in the original order of `arr` passed to the `iterator` function. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A function to apply to each item in `arr`. The iterator is passed a `callback(err, results)` which must be called once it has completed with an error (which can be `null`) and an array of results. * `callback(err, results)` - *Optional* A callback which is called after all the `iterator` functions have finished, or an error occurs. Results is an array containing the concatenated results of the `iterator` function. __Example__ ```js async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){ // files is now a list of filenames that exist in the 3 directories }); ``` __Related__ * concatSeries(arr, iterator, [callback]) ## Control Flow ### series(tasks, [callback]) Run the functions in the `tasks` array in series, each one running once the previous function has completed. If any functions in the series pass an error to its callback, no more functions are run, and `callback` is immediately called with the value of the error. Otherwise, `callback` receives an array of results when `tasks` have completed. It is also possible to use an object instead of an array. Each property will be run as a function, and the results will be passed to the final `callback` as an object instead of an array. This can be a more readable way of handling results from [`series`](#series). **Note** that while many implementations preserve the order of object properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6) explicitly states that > The mechanics and order of enumerating the properties is not specified. So if you rely on the order in which your series of functions are executed, and want this to work on all platforms, consider using an array. __Arguments__ * `tasks` - An array or object containing functions to run, each function is passed a `callback(err, result)` it must call on completion with an error `err` (which can be `null`) and an optional `result` value. * `callback(err, results)` - An optional callback to run once all the functions have completed. This function gets a results array (or object) containing all the result arguments passed to the `task` callbacks. __Example__ ```js async.series([ function(callback){ // do some stuff ... callback(null, 'one'); }, function(callback){ // do some more stuff ... callback(null, 'two'); } ], // optional callback function(err, results){ // results is now equal to ['one', 'two'] }); // an example using an object instead of an array async.series({ one: function(callback){ setTimeout(function(){ callback(null, 1); }, 200); }, two: function(callback){ setTimeout(function(){ callback(null, 2); }, 100); } }, function(err, results) { // results is now equal to: {one: 1, two: 2} }); ``` --------------------------------------- ### parallel(tasks, [callback]) Run the `tasks` array of functions in parallel, without waiting until the previous function has completed. If any of the functions pass an error to its callback, the main `callback` is immediately called with the value of the error. Once the `tasks` have completed, the results are passed to the final `callback` as an array. **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about parallel execution of code. If your tasks do not use any timers or perform any I/O, they will actually be executed in series. Any synchronous setup sections for each task will happen one after the other. JavaScript remains single-threaded. It is also possible to use an object instead of an array. Each property will be run as a function and the results will be passed to the final `callback` as an object instead of an array. This can be a more readable way of handling results from [`parallel`](#parallel). __Arguments__ * `tasks` - An array or object containing functions to run. Each function is passed a `callback(err, result)` which it must call on completion with an error `err` (which can be `null`) and an optional `result` value. * `callback(err, results)` - An optional callback to run once all the functions have completed successfully. This function gets a results array (or object) containing all the result arguments passed to the task callbacks. __Example__ ```js async.parallel([ function(callback){ setTimeout(function(){ callback(null, 'one'); }, 200); }, function(callback){ setTimeout(function(){ callback(null, 'two'); }, 100); } ], // optional callback function(err, results){ // the results array will equal ['one','two'] even though // the second function had a shorter timeout. }); // an example using an object instead of an array async.parallel({ one: function(callback){ setTimeout(function(){ callback(null, 1); }, 200); }, two: function(callback){ setTimeout(function(){ callback(null, 2); }, 100); } }, function(err, results) { // results is now equals to: {one: 1, two: 2} }); ``` __Related__ * parallelLimit(tasks, limit, [callback]) --------------------------------------- ### whilst(test, fn, callback) Repeatedly call `fn`, while `test` returns `true`. Calls `callback` when stopped, or an error occurs. __Arguments__ * `test()` - synchronous truth test to perform before each execution of `fn`. * `fn(callback)` - A function which is called each time `test` passes. The function is passed a `callback(err)`, which must be called once it has completed with an optional `err` argument. * `callback(err, [results])` - A callback which is called after the test function has failed and repeated execution of `fn` has stopped. `callback` will be passed an error and any arguments passed to the final `fn`'s callback. __Example__ ```js var count = 0; async.whilst( function () { return count ### doWhilst(fn, test, callback) The post-check version of [`whilst`](#whilst). To reflect the difference in the order of operations, the arguments `test` and `fn` are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript. --------------------------------------- ### until(test, fn, callback) Repeatedly call `fn` until `test` returns `true`. Calls `callback` when stopped, or an error occurs. `callback` will be passed an error and any arguments passed to the final `fn`'s callback. The inverse of [`whilst`](#whilst). --------------------------------------- ### doUntil(fn, test, callback) Like [`doWhilst`](#doWhilst), except the `test` is inverted. Note the argument ordering differs from `until`. --------------------------------------- ### during(test, fn, callback) Like [`whilst`](#whilst), except the `test` is an asynchronous function that is passed a callback in the form of `function (err, truth)`. If error is passed to `test` or `fn`, the main callback is immediately called with the value of the error. __Example__ ```js var count = 0; async.during( function (callback) { return callback(null, count ### doDuring(fn, test, callback) The post-check version of [`during`](#during). To reflect the difference in the order of operations, the arguments `test` and `fn` are switched. Also a version of [`doWhilst`](#doWhilst) with asynchronous `test` function. --------------------------------------- ### forever(fn, [errback]) Calls the asynchronous function `fn` with a callback parameter that allows it to call itself again, in series, indefinitely. If an error is passed to the callback then `errback` is called with the error, and execution stops, otherwise it will never be called. ```js async.forever( function(next) { // next is suitable for passing to things that need a callback(err [, whatever]); // it will result in this function being called again. }, function(err) { // if next is called with a value in its first parameter, it will appear // in here as 'err', and execution will stop. } ); ``` --------------------------------------- ### waterfall(tasks, [callback]) Runs the `tasks` array of functions in series, each passing their results to the next in the array. However, if any of the `tasks` pass an error to their own callback, the next function is not executed, and the main `callback` is immediately called with the error. __Arguments__ * `tasks` - An array of functions to run, each function is passed a `callback(err, result1, result2, ...)` it must call on completion. The first argument is an error (which can be `null`) and any further arguments will be passed as arguments in order to the next task. * `callback(err, [results])` - An optional callback to run once all the functions have completed. This will be passed the results of the last task's callback. __Example__ ```js async.waterfall([ function(callback) { callback(null, 'one', 'two'); }, function(arg1, arg2, callback) { // arg1 now equals 'one' and arg2 now equals 'two' callback(null, 'three'); }, function(arg1, callback) { // arg1 now equals 'three' callback(null, 'done'); } ], function (err, result) { // result now equals 'done' }); ``` Or, with named functions: ```js async.waterfall([ myFirstFunction, mySecondFunction, myLastFunction, ], function (err, result) { // result now equals 'done' }); function myFirstFunction(callback) { callback(null, 'one', 'two'); } function mySecondFunction(arg1, arg2, callback) { // arg1 now equals 'one' and arg2 now equals 'two' callback(null, 'three'); } function myLastFunction(arg1, callback) { // arg1 now equals 'three' callback(null, 'done'); } ``` Or, if you need to pass any argument to the first function: ```js async.waterfall([ async.apply(myFirstFunction, 'zero'), mySecondFunction, myLastFunction, ], function (err, result) { // result now equals 'done' }); function myFirstFunction(arg1, callback) { // arg1 now equals 'zero' callback(null, 'one', 'two'); } function mySecondFunction(arg1, arg2, callback) { // arg1 now equals 'one' and arg2 now equals 'two' callback(null, 'three'); } function myLastFunction(arg1, callback) { // arg1 now equals 'three' callback(null, 'done'); } ``` --------------------------------------- ### compose(fn1, fn2...) Creates a function which is a composition of the passed asynchronous functions. Each function consumes the return value of the function that follows. Composing functions `f()`, `g()`, and `h()` would produce the result of `f(g(h()))`, only this version uses callbacks to obtain the return values. Each function is executed with the `this` binding of the composed function. __Arguments__ * `functions...` - the asynchronous functions to compose __Example__ ```js function add1(n, callback) { setTimeout(function () { callback(null, n + 1); }, 10); } function mul3(n, callback) { setTimeout(function () { callback(null, n * 3); }, 10); } var add1mul3 = async.compose(mul3, add1); add1mul3(4, function (err, result) { // result now equals 15 }); ``` --------------------------------------- ### seq(fn1, fn2...) Version of the compose function that is more natural to read. Each function consumes the return value of the previous function. It is the equivalent of [`compose`](#compose) with the arguments reversed. Each function is executed with the `this` binding of the composed function. __Arguments__ * `functions...` - the asynchronous functions to compose __Example__ ```js // Requires lodash (or underscore), express3 and dresende's orm2. // Part of an app, that fetches cats of the logged user. // This example uses `seq` function to avoid overnesting and error // handling clutter. app.get('/cats', function(request, response) { var User = request.models.User; async.seq( _.bind(User.get, User), // 'User.get' has signature (id, callback(err, data)) function(user, fn) { user.getCats(fn); // 'getCats' has signature (callback(err, data)) } )(req.session.user_id, function (err, cats) { if (err) { console.error(err); response.json({ status: 'error', message: err.message }); } else { response.json({ status: 'ok', message: 'Cats found', data: cats }); } }); }); ``` --------------------------------------- ### applyEach(fns, args..., callback) Applies the provided arguments to each function in the array, calling `callback` after all functions have completed. If you only provide the first argument, then it will return a function which lets you pass in the arguments as if it were a single function call. __Arguments__ * `fns` - the asynchronous functions to all call with the same arguments * `args...` - any number of separate arguments to pass to the function * `callback` - the final argument should be the callback, called when all functions have completed processing __Example__ ```js async.applyEach([enableSearch, updateSchema], 'bucket', callback); // partial application example: async.each( buckets, async.applyEach([enableSearch, updateSchema]), callback ); ``` __Related__ * applyEachSeries(tasks, args..., [callback]) --------------------------------------- ### queue(worker, [concurrency]) Creates a `queue` object with the specified `concurrency`. Tasks added to the `queue` are processed in parallel (up to the `concurrency` limit). If all `worker`s are in progress, the task is queued until one becomes available. Once a `worker` completes a `task`, that `task`'s callback is called. __Arguments__ * `worker(task, callback)` - An asynchronous function for processing a queued task, which must call its `callback(err)` argument when finished, with an optional `error` as an argument. If you want to handle errors from an individual task, pass a callback to `q.push()`. * `concurrency` - An `integer` for determining how many `worker` functions should be run in parallel. If omitted, the concurrency defaults to `1`. If the concurrency is `0`, an error is thrown. __Queue objects__ The `queue` object returned by this function has the following properties and methods: * `length()` - a function returning the number of items waiting to be processed. * `started` - a function returning whether or not any items have been pushed and processed by the queue * `running()` - a function returning the number of items currently being processed. * `workersList()` - a function returning the array of items currently being processed. * `idle()` - a function returning false if there are items waiting or being processed, or true if not. * `concurrency` - an integer for determining how many `worker` functions should be run in parallel. This property can be changed after a `queue` is created to alter the concurrency on-the-fly. * `push(task, [callback])` - add a new task to the `queue`. Calls `callback` once the `worker` has finished processing the task. Instead of a single task, a `tasks` array can be submitted. The respective callback is used for every task in the list. * `unshift(task, [callback])` - add a new task to the front of the `queue`. * `saturated` - a callback that is called when the `queue` length hits the `concurrency` limit, and further tasks will be queued. * `empty` - a callback that is called when the last item from the `queue` is given to a `worker`. * `drain` - a callback that is called when the last item from the `queue` has returned from the `worker`. * `paused` - a boolean for determining whether the queue is in a paused state * `pause()` - a function that pauses the processing of tasks until `resume()` is called. * `resume()` - a function that resumes the processing of queued tasks when the queue is paused. * `kill()` - a function that removes the `drain` callback and empties remaining tasks from the queue forcing it to go idle. __Example__ ```js // create a queue object with concurrency 2 var q = async.queue(function (task, callback) { console.log('hello ' + task.name); callback(); }, 2); // assign a callback q.drain = function() { console.log('all items have been processed'); } // add some items to the queue q.push({name: 'foo'}, function (err) { console.log('finished processing foo'); }); q.push({name: 'bar'}, function (err) { console.log('finished processing bar'); }); // add some items to the queue (batch-wise) q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) { console.log('finished processing item'); }); // add some items to the front of the queue q.unshift({name: 'bar'}, function (err) { console.log('finished processing bar'); }); ``` --------------------------------------- ### priorityQueue(worker, concurrency) The same as [`queue`](#queue) only tasks are assigned a priority and completed in ascending priority order. There are two differences between `queue` and `priorityQueue` objects: * `push(task, priority, [callback])` - `priority` should be a number. If an array of `tasks` is given, all tasks will be assigned the same priority. * The `unshift` method was removed. --------------------------------------- ### cargo(worker, [payload]) Creates a `cargo` object with the specified payload. Tasks added to the cargo will be processed altogether (up to the `payload` limit). If the `worker` is in progress, the task is queued until it becomes available. Once the `worker` has completed some tasks, each callback of those tasks is called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966) for how `cargo` and `queue` work. While [queue](#queue) passes only one task to one of a group of workers at a time, cargo passes an array of tasks to a single worker, repeating when the worker is finished. __Arguments__ * `worker(tasks, callback)` - An asynchronous function for processing an array of queued tasks, which must call its `callback(err)` argument when finished, with an optional `err` argument. * `payload` - An optional `integer` for determining how many tasks should be processed per round; if omitted, the default is unlimited. __Cargo objects__ The `cargo` object returned by this function has the following properties and methods: * `length()` - A function returning the number of items waiting to be processed. * `payload` - An `integer` for determining how many tasks should be process per round. This property can be changed after a `cargo` is created to alter the payload on-the-fly. * `push(task, [callback])` - Adds `task` to the `queue`. The callback is called once the `worker` has finished processing the task. Instead of a single task, an array of `tasks` can be submitted. The respective callback is used for every task in the list. * `saturated` - A callback that is called when the `queue.length()` hits the concurrency and further tasks will be queued. * `empty` - A callback that is called when the last item from the `queue` is given to a `worker`. * `drain` - A callback that is called when the last item from the `queue` has returned from the `worker`. * `idle()`, `pause()`, `resume()`, `kill()` - cargo inherits all of the same methods and event calbacks as [`queue`](#queue) __Example__ ```js // create a cargo object with payload 2 var cargo = async.cargo(function (tasks, callback) { for(var i=0; i ### auto(tasks, [concurrency], [callback]) Determines the best order for running the functions in `tasks`, based on their requirements. Each function can optionally depend on other functions being completed first, and each function is run as soon as its requirements are satisfied. If any of the functions pass an error to their callback, the `auto` sequence will stop. Further tasks will not execute (so any other functions depending on it will not run), and the main `callback` is immediately called with the error. Functions also receive an object containing the results of functions which have completed so far. Note, all functions are called with a `results` object as a second argument, so it is unsafe to pass functions in the `tasks` object which cannot handle the extra argument. For example, this snippet of code: ```js async.auto({ readData: async.apply(fs.readFile, 'data.txt', 'utf-8') }, callback); ``` will have the effect of calling `readFile` with the results object as the last argument, which will fail: ```js fs.readFile('data.txt', 'utf-8', cb, {}); ``` Instead, wrap the call to `readFile` in a function which does not forward the `results` object: ```js async.auto({ readData: function(cb, results){ fs.readFile('data.txt', 'utf-8', cb); } }, callback); ``` __Arguments__ * `tasks` - An object. Each of its properties is either a function or an array of requirements, with the function itself the last item in the array. The object's key of a property serves as the name of the task defined by that property, i.e. can be used when specifying requirements for other tasks. The function receives two arguments: (1) a `callback(err, result)` which must be called when finished, passing an `error` (which can be `null`) and the result of the function's execution, and (2) a `results` object, containing the results of the previously executed functions. * `concurrency` - An optional `integer` for determining the maximum number of tasks that can be run in parallel. By default, as many as possible. * `callback(err, results)` - An optional callback which is called when all the tasks have been completed. It receives the `err` argument if any `tasks` pass an error to their callback. Results are always returned; however, if an error occurs, no further `tasks` will be performed, and the results object will only contain partial results. __Example__ ```js async.auto({ get_data: function(callback){ console.log('in get_data'); // async code to get some data callback(null, 'data', 'converted to array'); }, make_folder: function(callback){ console.log('in make_folder'); // async code to create a directory to store a file in // this is run at the same time as getting the data callback(null, 'folder'); }, write_file: ['get_data', 'make_folder', function(callback, results){ console.log('in write_file', JSON.stringify(results)); // once there is some data and the directory exists, // write the data to a file in the directory callback(null, 'filename'); }], email_link: ['write_file', function(callback, results){ console.log('in email_link', JSON.stringify(results)); // once the file is written let's email a link to it... // results.write_file contains the filename returned by write_file. callback(null, {'file':results.write_file, 'email':'user@example.com'}); }] }, function(err, results) { console.log('err = ', err); console.log('results = ', results); }); ``` This is a fairly trivial example, but to do this using the basic parallel and series functions would look like this: ```js async.parallel([ function(callback){ console.log('in get_data'); // async code to get some data callback(null, 'data', 'converted to array'); }, function(callback){ console.log('in make_folder'); // async code to create a directory to store a file in // this is run at the same time as getting the data callback(null, 'folder'); } ], function(err, results){ async.series([ function(callback){ console.log('in write_file', JSON.stringify(results)); // once there is some data and the directory exists, // write the data to a file in the directory results.push('filename'); callback(null); }, function(callback){ console.log('in email_link', JSON.stringify(results)); // once the file is written let's email a link to it... callback(null, {'file':results.pop(), 'email':'user@example.com'}); } ]); }); ``` For a complicated series of `async` tasks, using the [`auto`](#auto) function makes adding new tasks much easier (and the code more readable). --------------------------------------- ### retry([opts = {times: 5, interval: 0}| 5], task, [callback]) Attempts to get a successful response from `task` no more than `times` times before returning an error. If the task is successful, the `callback` will be passed the result of the successful task. If all attempts fail, the callback will be passed the error and result (if any) of the final attempt. __Arguments__ * `opts` - Can be either an object with `times` and `interval` or a number. * `times` - The number of attempts to make before giving up. The default is `5`. * `interval` - The time to wait between retries, in milliseconds. The default is `0`. * If `opts` is a number, the number specifies the number of times to retry, with the default interval of `0`. * `task(callback, results)` - A function which receives two arguments: (1) a `callback(err, result)` which must be called when finished, passing `err` (which can be `null`) and the `result` of the function's execution, and (2) a `results` object, containing the results of the previously executed functions (if nested inside another control flow). * `callback(err, results)` - An optional callback which is called when the task has succeeded, or after the final failed attempt. It receives the `err` and `result` arguments of the last attempt at completing the `task`. The [`retry`](#retry) function can be used as a stand-alone control flow by passing a callback, as shown below: ```js // try calling apiMethod 3 times async.retry(3, apiMethod, function(err, result) { // do something with the result }); ``` ```js // try calling apiMethod 3 times, waiting 200 ms between each retry async.retry({times: 3, interval: 200}, apiMethod, function(err, result) { // do something with the result }); ``` ```js // try calling apiMethod the default 5 times no delay between each retry async.retry(apiMethod, function(err, result) { // do something with the result }); ``` It can also be embedded within other control flow functions to retry individual methods that are not as reliable, like this: ```js async.auto({ users: api.getUsers.bind(api), payments: async.retry(3, api.getPayments.bind(api)) }, function(err, results) { // do something with the results }); ``` --------------------------------------- ### iterator(tasks) Creates an iterator function which calls the next function in the `tasks` array, returning a continuation to call the next one after that. It's also possible to “peek” at the next iterator with `iterator.next()`. This function is used internally by the `async` module, but can be useful when you want to manually control the flow of functions in series. __Arguments__ * `tasks` - An array of functions to run. __Example__ ```js var iterator = async.iterator([ function(){ sys.p('one'); }, function(){ sys.p('two'); }, function(){ sys.p('three'); } ]); node> var iterator2 = iterator(); 'one' node> var iterator3 = iterator2(); 'two' node> iterator3(); 'three' node> var nextfn = iterator2.next(); node> nextfn(); 'three' ``` --------------------------------------- ### apply(function, arguments..) Creates a continuation function with some arguments already applied. Useful as a shorthand when combined with other control flow functions. Any arguments passed to the returned function are added to the arguments originally passed to apply. __Arguments__ * `function` - The function you want to eventually apply all arguments to. * `arguments...` - Any number of arguments to automatically apply when the continuation is called. __Example__ ```js // using apply async.parallel([ async.apply(fs.writeFile, 'testfile1', 'test1'), async.apply(fs.writeFile, 'testfile2', 'test2'), ]); // the same process without using apply async.parallel([ function(callback){ fs.writeFile('testfile1', 'test1', callback); }, function(callback){ fs.writeFile('testfile2', 'test2', callback); } ]); ``` It's possible to pass any number of additional arguments when calling the continuation: ```js node> var fn = async.apply(sys.puts, 'one'); node> fn('two', 'three'); one two three ``` --------------------------------------- ### nextTick(callback), setImmediate(callback) Calls `callback` on a later loop around the event loop. In Node.js this just calls `process.nextTick`; in the browser it falls back to `setImmediate(callback)` if available, otherwise `setTimeout(callback, 0)`, which means other higher priority events may precede the execution of `callback`. This is used internally for browser-compatibility purposes. __Arguments__ * `callback` - The function to call on a later loop around the event loop. __Example__ ```js var call_order = []; async.nextTick(function(){ call_order.push('two'); // call_order now equals ['one','two'] }); call_order.push('one') ``` ### times(n, iterator, [callback]) Calls the `iterator` function `n` times, and accumulates results in the same manner you would use with [`map`](#map). __Arguments__ * `n` - The number of times to run the function. * `iterator` - The function to call `n` times. * `callback` - see [`map`](#map) __Example__ ```js // Pretend this is some complicated async factory var createUser = function(id, callback) { callback(null, { id: 'user' + id }) } // generate 5 users async.times(5, function(n, next){ createUser(n, function(err, user) { next(err, user) }) }, function(err, users) { // we should now have 5 users }); ``` __Related__ * timesSeries(n, iterator, [callback]) * timesLimit(n, limit, iterator, [callback]) ## Utils ### memoize(fn, [hasher]) Caches the results of an `async` function. When creating a hash to store function results against, the callback is omitted from the hash and an optional hash function can be used. If no hash function is specified, the first argument is used as a hash key, which may work reasonably if it is a string or a data type that converts to a distinct string. Note that objects and arrays will not behave reasonably. Neither will cases where the other arguments are significant. In such cases, specify your own hash function. The cache of results is exposed as the `memo` property of the function returned by `memoize`. __Arguments__ * `fn` - The function to proxy and cache results from. * `hasher` - An optional function for generating a custom hash for storing results. It has all the arguments applied to it apart from the callback, and must be synchronous. __Example__ ```js var slow_fn = function (name, callback) { // do something callback(null, result); }; var fn = async.memoize(slow_fn); // fn can now be used as if it were slow_fn fn('some name', function () { // callback }); ``` ### unmemoize(fn) Undoes a [`memoize`](#memoize)d function, reverting it to the original, unmemoized form. Handy for testing. __Arguments__ * `fn` - the memoized function --------------------------------------- ### ensureAsync(fn) Wrap an async function and ensure it calls its callback on a later tick of the event loop. If the function already calls its callback on a next tick, no extra deferral is added. This is useful for preventing stack overflows (`RangeError: Maximum call stack size exceeded`) and generally keeping [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony) contained. __Arguments__ * `fn` - an async function, one that expects a node-style callback as its last argument Returns a wrapped function with the exact same call signature as the function passed in. __Example__ ```js function sometimesAsync(arg, callback) { if (cache[arg]) { return callback(null, cache[arg]); // this would be synchronous!! } else { doSomeIO(arg, callback); // this IO would be asynchronous } } // this has a risk of stack overflows if many results are cached in a row async.mapSeries(args, sometimesAsync, done); // this will defer sometimesAsync's callback if necessary, // preventing stack overflows async.mapSeries(args, async.ensureAsync(sometimesAsync), done); ``` --------------------------------------- ### constant(values...) Returns a function that when called, calls-back with the values provided. Useful as the first function in a `waterfall`, or for plugging values in to `auto`. __Example__ ```js async.waterfall([ async.constant(42), function (value, next) { // value === 42 }, //... ], callback); async.waterfall([ async.constant(filename, \"utf8\"), fs.readFile, function (fileData, next) { //... } //... ], callback); async.auto({ hostname: async.constant(\"https://server.net/\"), port: findFreePort, launchServer: [\"hostname\", \"port\", function (cb, options) { startServer(options, cb); }], //... }, callback); ``` --------------------------------------- ### asyncify(func) __Alias:__ `wrapSync` Take a sync function and make it async, passing its return value to a callback. This is useful for plugging sync functions into a waterfall, series, or other async functions. Any arguments passed to the generated function will be passed to the wrapped function (except for the final callback argument). Errors thrown will be passed to the callback. __Example__ ```js async.waterfall([ async.apply(fs.readFile, filename, \"utf8\"), async.asyncify(JSON.parse), function (data, next) { // data is the result of parsing the text. // If there was a parsing error, it would have been caught. } ], callback) ``` If the function passed to `asyncify` returns a Promise, that promises's resolved/rejected state will be used to call the callback, rather than simply the synchronous return value. Example: ```js async.waterfall([ async.apply(fs.readFile, filename, \"utf8\"), async.asyncify(function (contents) { return db.model.create(contents); }), function (model, next) { // `model` is the instantiated model object. // If there was an error, this function would be skipped. } ], callback) ``` This also means you can asyncify ES2016 `async` functions. ```js var q = async.queue(async.asyncify(async function (file) { var intermediateStep = await processFile(file); return await somePromise(intermediateStep) })); q.push(files); ``` --------------------------------------- ### log(function, arguments) Logs the result of an `async` function to the `console`. Only works in Node.js or in browsers that support `console.log` and `console.error` (such as FF and Chrome). If multiple arguments are returned from the async function, `console.log` is called on each argument in order. __Arguments__ * `function` - The function you want to eventually apply all arguments to. * `arguments...` - Any number of arguments to apply to the function. __Example__ ```js var hello = function(name, callback){ setTimeout(function(){ callback(null, 'hello ' + name); }, 1000); }; ``` ```js node> async.log(hello, 'world'); 'hello world' ``` --------------------------------------- ### dir(function, arguments) Logs the result of an `async` function to the `console` using `console.dir` to display the properties of the resulting object. Only works in Node.js or in browsers that support `console.dir` and `console.error` (such as FF and Chrome). If multiple arguments are returned from the async function, `console.dir` is called on each argument in order. __Arguments__ * `function` - The function you want to eventually apply all arguments to. * `arguments...` - Any number of arguments to apply to the function. __Example__ ```js var hello = function(name, callback){ setTimeout(function(){ callback(null, {hello: name}); }, 1000); }; ``` ```js node> async.dir(hello, 'world'); {hello: 'world'} ``` --------------------------------------- ### noConflict() Changes the value of `async` back to its original value, returning a reference to the `async` object."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/README.md","tags":[],"body":"# HAR Validator [![version][npm-version]][npm-url] [![License][npm-license]][license-url] Extremely fast HTTP Archive ([HAR](http://www.softwareishard.com/blog/har-12-spec/)) validator using JSON Schema. [![Build Status][travis-image]][travis-url] [![Downloads][npm-downloads]][npm-url] [![Code Climate][codeclimate-quality]][codeclimate-url] [![Coverage Status][codeclimate-coverage]][codeclimate-url] [![Dependencies][david-image]][david-url] ## Install ```shell # to use in cli npm install --global har-validator # to use as a module npm install --save har-validator ``` ## Usage ``` Usage: har-validator [options] Options: -h, --help output usage information -V, --version output the version number -s, --schema [name] validate schema name (log, request, response, etc ...) ``` ###### Example ```shell har-validator har.json har-validator --schema request request.json ``` ## API **Note**: as of [`v2.0.0`](https://github.com/ahmadnassri/har-validator/releases/tag/v2.0.0) this module defaults to Promise based API. *For backward comptability with `v1.x` an [async/callback API](#callback-api) is provided* ### Validate(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a full [HAR](http://www.softwareishard.com/blog/har-12-spec/) object ```js validate(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.log(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [log](http://www.softwareishard.com/blog/har-12-spec/#log) object ```js validate.log(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.cache(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [cache](http://www.softwareishard.com/blog/har-12-spec/#cache) object ```js validate.cache(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.cacheEntry(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [\"beforeRequest\" or \"afterRequest\"](http://www.softwareishard.com/blog/har-12-spec/#cache) objects ```js validate.cacheEntry(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.content(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [content](http://www.softwareishard.com/blog/har-12-spec/#content) object ```js validate.content(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.cookie(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [cookie](http://www.softwareishard.com/blog/har-12-spec/#cookies) object ```js validate.cookie(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.creator(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [creator](http://www.softwareishard.com/blog/har-12-spec/#creator) object ```js validate.creator(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.entry(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* an [entry](http://www.softwareishard.com/blog/har-12-spec/#entries) object ```js validate.entry(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.log(data) alias of [`Validate(data)`](#validate-data-callback-) ### Validate.page(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [page](http://www.softwareishard.com/blog/har-12-spec/#pages) object ```js validate.page(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.pageTimings(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [pageTimings](http://www.softwareishard.com/blog/har-12-spec/#pageTimings) object ```js validate.pageTimings(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.postData(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [postData](http://www.softwareishard.com/blog/har-12-spec/#postData) object ```js validate.postData(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.record(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [record](http://www.softwareishard.com/blog/har-12-spec/#headers) object ```js validate.record(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.request(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [request](http://www.softwareishard.com/blog/har-12-spec/#request) object ```js validate.request(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.response(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [response](http://www.softwareishard.com/blog/har-12-spec/#response) object ```js validate.cacheEntry(data) .then(data => console.log('horray!')) .catch(console.error) ``` ### Validate.timings(data) > Returns a promise that resolves to the valid object. - **data**: `Object` *(Required)* a [timings](http://www.softwareishard.com/blog/har-12-spec/#timings) object ```js validate.timings(data) .then(data => console.log('horray!')) .catch(console.error) ``` ---- ## Callback API ### Validate(data [, callback]) > Returns `true` or `false`. ```js var HAR = require('./har.json'); var validate = require('har-validator/lib/async'); validate(HAR, function (e, valid) { if (e) console.log(e.errors) if (valid) console.log('horray!'); }); ``` The async API provides exactly the same methods as the [Promise API](#promise-api) ---- ## Support Donations are welcome to help support the continuous development of this project. [![Gratipay][gratipay-image]][gratipay-url] [![PayPal][paypal-image]][paypal-url] [![Flattr][flattr-image]][flattr-url] [![Bitcoin][bitcoin-image]][bitcoin-url] ## License [ISC License](LICENSE) © [Ahmad Nassri](https://www.ahmadnassri.com/) [license-url]: https://github.com/ahmadnassri/har-validator/blob/master/LICENSE [travis-url]: https://travis-ci.org/ahmadnassri/har-validator [travis-image]: https://img.shields.io/travis/ahmadnassri/har-validator.svg?style=flat-square [npm-url]: https://www.npmjs.com/package/har-validator [npm-license]: https://img.shields.io/npm/l/har-validator.svg?style=flat-square [npm-version]: https://img.shields.io/npm/v/har-validator.svg?style=flat-square [npm-downloads]: https://img.shields.io/npm/dm/har-validator.svg?style=flat-square [codeclimate-url]: https://codeclimate.com/github/ahmadnassri/har-validator [codeclimate-quality]: https://img.shields.io/codeclimate/github/ahmadnassri/har-validator.svg?style=flat-square [codeclimate-coverage]: https://img.shields.io/codeclimate/coverage/github/ahmadnassri/har-validator.svg?style=flat-square [david-url]: https://david-dm.org/ahmadnassri/har-validator [david-image]: https://img.shields.io/david/ahmadnassri/har-validator.svg?style=flat-square [gratipay-url]: https://www.gratipay.com/ahmadnassri/ [gratipay-image]: https://img.shields.io/gratipay/ahmadnassri.svg?style=flat-square [paypal-url]: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=UJ2B2BTK9VLRS&on0=project&os0=har-validator [paypal-image]: http://img.shields.io/badge/paypal-donate-green.svg?style=flat-square [flattr-url]: https://flattr.com/submit/auto?user_id=ahmadnassri&url=https://github.com/ahmadnassri/har-validator&title=har-validator&language=&tags=github&category=software [flattr-image]: http://img.shields.io/badge/flattr-donate-green.svg?style=flat-square [bitcoin-image]: http://img.shields.io/badge/bitcoin-1Nb46sZRVG3or7pNaDjthcGJpWhvoPpCxy-green.svg?style=flat-square [bitcoin-url]: https://www.coinbase.com/checkouts/ae383ae6bb931a2fa5ad11cec115191e?name=har-validator"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/chalk/node_modules/ansi-styles/readme.md","tags":[],"body":"# ansi-styles [![Build Status](https://travis-ci.org/chalk/ansi-styles.svg?branch=master)](https://travis-ci.org/chalk/ansi-styles) > [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors_and_Styles) for styling strings in the terminal You probably want the higher-level [chalk](https://github.com/chalk/chalk) module for styling your strings. ![](screenshot.png) ## Install ``` $ npm install --save ansi-styles ``` ## Usage ```js var ansi = require('ansi-styles'); console.log(ansi.green.open + 'Hello world!' + ansi.green.close); ``` ## API Each style has an `open` and `close` property. ## Styles ### Modifiers - `reset` - `bold` - `dim` - `italic` *(not widely supported)* - `underline` - `inverse` - `hidden` - `strikethrough` *(not widely supported)* ### Colors - `black` - `red` - `green` - `yellow` - `blue` - `magenta` - `cyan` - `white` - `gray` ### Background colors - `bgBlack` - `bgRed` - `bgGreen` - `bgYellow` - `bgBlue` - `bgMagenta` - `bgCyan` - `bgWhite` ## Advanced usage By default you get a map of styles, but the styles are also available as groups. They are non-enumerable so they don't show up unless you access them explicitly. This makes it easier to expose only a subset in a higher-level module. - `ansi.modifiers` - `ansi.colors` - `ansi.bgColors` ###### Example ```js console.log(ansi.colors.green.open); ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/chalk/node_modules/escape-string-regexp/readme.md","tags":[],"body":"# escape-string-regexp [![Build Status](https://travis-ci.org/sindresorhus/escape-string-regexp.svg?branch=master)](https://travis-ci.org/sindresorhus/escape-string-regexp) > Escape RegExp special characters ## Install ``` $ npm install --save escape-string-regexp ``` ## Usage ```js const escapeStringRegexp = require('escape-string-regexp'); const escapedString = escapeStringRegexp('how much $ for a unicorn?'); //=> 'how much \\$ for a unicorn\\?' new RegExp(escapedString); ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/chalk/node_modules/has-ansi/node_modules/ansi-regex/readme.md","tags":[],"body":"# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex) > Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save ansi-regex ``` ## Usage ```js var ansiRegex = require('ansi-regex'); ansiRegex().test('\\u001b[4mcake\\u001b[0m'); //=> true ansiRegex().test('cake'); //=> false '\\u001b[4mcake\\u001b[0m'.match(ansiRegex()); //=> ['\\u001b[4m', '\\u001b[0m'] ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/chalk/node_modules/has-ansi/readme.md","tags":[],"body":"# has-ansi [![Build Status](https://travis-ci.org/sindresorhus/has-ansi.svg?branch=master)](https://travis-ci.org/sindresorhus/has-ansi) > Check if a string has [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save has-ansi ``` ## Usage ```js var hasAnsi = require('has-ansi'); hasAnsi('\\u001b[4mcake\\u001b[0m'); //=> true hasAnsi('cake'); //=> false ``` ## Related - [has-ansi-cli](https://github.com/sindresorhus/has-ansi-cli) - CLI for this module - [strip-ansi](https://github.com/sindresorhus/strip-ansi) - Strip ANSI escape codes - [ansi-regex](https://github.com/sindresorhus/ansi-regex) - Regular expression for matching ANSI escape codes - [chalk](https://github.com/sindresorhus/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/chalk/node_modules/strip-ansi/node_modules/ansi-regex/readme.md","tags":[],"body":"# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex) > Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save ansi-regex ``` ## Usage ```js var ansiRegex = require('ansi-regex'); ansiRegex().test('\\u001b[4mcake\\u001b[0m'); //=> true ansiRegex().test('cake'); //=> false '\\u001b[4mcake\\u001b[0m'.match(ansiRegex()); //=> ['\\u001b[4m', '\\u001b[0m'] ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/chalk/node_modules/strip-ansi/readme.md","tags":[],"body":"# strip-ansi [![Build Status](https://travis-ci.org/chalk/strip-ansi.svg?branch=master)](https://travis-ci.org/chalk/strip-ansi) > Strip [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save strip-ansi ``` ## Usage ```js var stripAnsi = require('strip-ansi'); stripAnsi('\\u001b[4mcake\\u001b[0m'); //=> 'cake' ``` ## Related - [strip-ansi-cli](https://github.com/chalk/strip-ansi-cli) - CLI for this module - [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes - [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/chalk/node_modules/supports-color/readme.md","tags":[],"body":"# supports-color [![Build Status](https://travis-ci.org/chalk/supports-color.svg?branch=master)](https://travis-ci.org/chalk/supports-color) > Detect whether a terminal supports color ## Install ``` $ npm install --save supports-color ``` ## Usage ```js var supportsColor = require('supports-color'); if (supportsColor) { console.log('Terminal supports color'); } ``` It obeys the `--color` and `--no-color` CLI flags. For situations where using `--color` is not possible, add an environment variable `FORCE_COLOR` with any value to force color. Trumps `--no-color`. ## Related - [supports-color-cli](https://github.com/chalk/supports-color-cli) - CLI for this module - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/chalk/readme.md","tags":[],"body":"> Terminal string styling done right [![Build Status](https://travis-ci.org/chalk/chalk.svg?branch=master)](https://travis-ci.org/chalk/chalk) [![Coverage Status](https://coveralls.io/repos/chalk/chalk/badge.svg?branch=master)](https://coveralls.io/r/chalk/chalk?branch=master) [![](http://img.shields.io/badge/unicorn-approved-ff69b4.svg)](https://www.youtube.com/watch?v=9auOCbH5Ns4) [colors.js](https://github.com/Marak/colors.js) used to be the most popular string styling module, but it has serious deficiencies like extending `String.prototype` which causes all kinds of [problems](https://github.com/yeoman/yo/issues/68). Although there are other ones, they either do too much or not enough. **Chalk is a clean and focused alternative.** ![](https://github.com/chalk/ansi-styles/raw/master/screenshot.png) ## Why - Highly performant - Doesn't extend `String.prototype` - Expressive API - Ability to nest styles - Clean and focused - Auto-detects color support - Actively maintained - [Used by ~4500 modules](https://www.npmjs.com/browse/depended/chalk) as of July 15, 2015 ## Install ``` $ npm install --save chalk ``` ## Usage Chalk comes with an easy to use composable API where you just chain and nest the styles you want. ```js var chalk = require('chalk'); // style a string chalk.blue('Hello world!'); // combine styled and normal strings chalk.blue('Hello') + 'World' + chalk.red('!'); // compose multiple styles using the chainable API chalk.blue.bgRed.bold('Hello world!'); // pass in multiple arguments chalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz'); // nest styles chalk.red('Hello', chalk.underline.bgBlue('world') + '!'); // nest styles of the same type even (color, underline, background) chalk.green( 'I am a green line ' + chalk.blue.underline.bold('with a blue substring') + ' that becomes green again!' ); ``` Easily define your own themes. ```js var chalk = require('chalk'); var error = chalk.bold.red; console.log(error('Error!')); ``` Take advantage of console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data). ```js var name = 'Sindre'; console.log(chalk.green('Hello %s'), name); //=> Hello Sindre ``` ## API ### chalk.`[....](string, [string...])` Example: `chalk.red.bold.underline('Hello', 'world');` Chain [styles](#styles) and call the last one as a method with a string argument. Order doesn't matter, and later styles take precedent in case of a conflict. This simply means that `Chalk.red.yellow.green` is equivalent to `Chalk.green`. Multiple arguments will be separated by space. ### chalk.enabled Color support is automatically detected, but you can override it by setting the `enabled` property. You should however only do this in your own code as it applies globally to all chalk consumers. If you need to change this in a reusable module create a new instance: ```js var ctx = new chalk.constructor({enabled: false}); ``` ### chalk.supportsColor Detect whether the terminal [supports color](https://github.com/chalk/supports-color). Used internally and handled for you, but exposed for convenience. Can be overridden by the user with the flags `--color` and `--no-color`. For situations where using `--color` is not possible, add an environment variable `FORCE_COLOR` with any value to force color. Trumps `--no-color`. ### chalk.styles Exposes the styles as [ANSI escape codes](https://github.com/chalk/ansi-styles). Generally not useful, but you might need just the `.open` or `.close` escape code if you're mixing externally styled strings with your own. ```js var chalk = require('chalk'); console.log(chalk.styles.red); //=> {open: '\\u001b[31m', close: '\\u001b[39m'} console.log(chalk.styles.red.open + 'Hello' + chalk.styles.red.close); ``` ### chalk.hasColor(string) Check whether a string [has color](https://github.com/chalk/has-ansi). ### chalk.stripColor(string) [Strip color](https://github.com/chalk/strip-ansi) from a string. Can be useful in combination with `.supportsColor` to strip color on externally styled text when it's not supported. Example: ```js var chalk = require('chalk'); var styledString = getText(); if (!chalk.supportsColor) { styledString = chalk.stripColor(styledString); } ``` ## Styles ### Modifiers - `reset` - `bold` - `dim` - `italic` *(not widely supported)* - `underline` - `inverse` - `hidden` - `strikethrough` *(not widely supported)* ### Colors - `black` - `red` - `green` - `yellow` - `blue` *(on Windows the bright version is used as normal blue is illegible)* - `magenta` - `cyan` - `white` - `gray` ### Background colors - `bgBlack` - `bgRed` - `bgGreen` - `bgYellow` - `bgBlue` - `bgMagenta` - `bgCyan` - `bgWhite` ## 256-colors Chalk does not support anything other than the base eight colors, which guarantees it will work on all terminals and systems. Some terminals, specifically `xterm` compliant ones, will support the full range of 8-bit colors. For this the lower level [ansi-256-colors](https://github.com/jbnicolai/ansi-256-colors) package can be used. ## Windows If you're on Windows, do yourself a favor and use [`cmder`](http://bliker.github.io/cmder/) instead of `cmd.exe`. ## Related - [chalk-cli](https://github.com/chalk/chalk-cli) - CLI for this module - [ansi-styles](https://github.com/chalk/ansi-styles/) - ANSI escape codes for styling strings in the terminal - [supports-color](https://github.com/chalk/supports-color/) - Detect whether a terminal supports color - [strip-ansi](https://github.com/chalk/strip-ansi) - Strip ANSI escape codes - [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes - [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes - [wrap-ansi](https://github.com/chalk/wrap-ansi) - Wordwrap a string with ANSI escape codes ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/commander/History.md","tags":[],"body":"2.9.0 / 2015-10-13 ================== * Add option `isDefault` to set default subcommand #415 @Qix- * Add callback to allow filtering or post-processing of help text #434 @djulien * Fix `undefined` text in help information close #414 #416 @zhiyelee 2.8.1 / 2015-04-22 ================== * Back out `support multiline description` Close #396 #397 2.8.0 / 2015-04-07 ================== * Add `process.execArg` support, execution args like `--harmony` will be passed to sub-commands #387 @DigitalIO @zhiyelee * Fix bug in Git-style sub-commands #372 @zhiyelee * Allow commands to be hidden from help #383 @tonylukasavage * When git-style sub-commands are in use, yet none are called, display help #382 @claylo * Add ability to specify arguments syntax for top-level command #258 @rrthomas * Support multiline descriptions #208 @zxqfox 2.7.1 / 2015-03-11 ================== * Revert #347 (fix collisions when option and first arg have same name) which causes a bug in #367. 2.7.0 / 2015-03-09 ================== * Fix git-style bug when installed globally. Close #335 #349 @zhiyelee * Fix collisions when option and first arg have same name. Close #346 #347 @tonylukasavage * Add support for camelCase on `opts()`. Close #353 @nkzawa * Add node.js 0.12 and io.js to travis.yml * Allow RegEx options. #337 @palanik * Fixes exit code when sub-command failing. Close #260 #332 @pirelenito * git-style `bin` files in $PATH make sense. Close #196 #327 @zhiyelee 2.6.0 / 2014-12-30 ================== * added `Command#allowUnknownOption` method. Close #138 #318 @doozr @zhiyelee * Add application description to the help msg. Close #112 @dalssoft 2.5.1 / 2014-12-15 ================== * fixed two bugs incurred by variadic arguments. Close #291 @Quentin01 #302 @zhiyelee 2.5.0 / 2014-10-24 ================== * add support for variadic arguments. Closes #277 @whitlockjc 2.4.0 / 2014-10-17 ================== * fixed a bug on executing the coercion function of subcommands option. Closes #270 * added `Command.prototype.name` to retrieve command name. Closes #264 #266 @tonylukasavage * added `Command.prototype.opts` to retrieve all the options as a simple object of key-value pairs. Closes #262 @tonylukasavage * fixed a bug on subcommand name. Closes #248 @jonathandelgado * fixed function normalize doesn’t honor option terminator. Closes #216 @abbr 2.3.0 / 2014-07-16 ================== * add command alias'. Closes PR #210 * fix: Typos. Closes #99 * fix: Unused fs module. Closes #217 2.2.0 / 2014-03-29 ================== * add passing of previous option value * fix: support subcommands on windows. Closes #142 * Now the defaultValue passed as the second argument of the coercion function. 2.1.0 / 2013-11-21 ================== * add: allow cflag style option params, unit test, fixes #174 2.0.0 / 2013-07-18 ================== * remove input methods (.prompt, .confirm, etc) 1.3.2 / 2013-07-18 ================== * add support for sub-commands to co-exist with the original command 1.3.1 / 2013-07-18 ================== * add quick .runningCommand hack so you can opt-out of other logic when running a sub command 1.3.0 / 2013-07-09 ================== * add EACCES error handling * fix sub-command --help 1.2.0 / 2013-06-13 ================== * allow \"-\" hyphen as an option argument * support for RegExp coercion 1.1.1 / 2012-11-20 ================== * add more sub-command padding * fix .usage() when args are present. Closes #106 1.1.0 / 2012-11-16 ================== * add git-style executable subcommand support. Closes #94 1.0.5 / 2012-10-09 ================== * fix `--name` clobbering. Closes #92 * fix examples/help. Closes #89 1.0.4 / 2012-09-03 ================== * add `outputHelp()` method. 1.0.3 / 2012-08-30 ================== * remove invalid .version() defaulting 1.0.2 / 2012-08-24 ================== * add `--foo=bar` support [arv] * fix password on node 0.8.8. Make backward compatible with 0.6 [focusaurus] 1.0.1 / 2012-08-03 ================== * fix issue #56 * fix tty.setRawMode(mode) was moved to tty.ReadStream#setRawMode() (i.e. process.stdin.setRawMode()) 1.0.0 / 2012-07-05 ================== * add support for optional option descriptions * add defaulting of `.version()` to package.json's version 0.6.1 / 2012-06-01 ================== * Added: append (yes or no) on confirmation * Added: allow node.js v0.7.x 0.6.0 / 2012-04-10 ================== * Added `.prompt(obj, callback)` support. Closes #49 * Added default support to .choose(). Closes #41 * Fixed the choice example 0.5.1 / 2011-12-20 ================== * Fixed `password()` for recent nodes. Closes #36 0.5.0 / 2011-12-04 ================== * Added sub-command option support [itay] 0.4.3 / 2011-12-04 ================== * Fixed custom help ordering. Closes #32 0.4.2 / 2011-11-24 ================== * Added travis support * Fixed: line-buffered input automatically trimmed. Closes #31 0.4.1 / 2011-11-18 ================== * Removed listening for \"close\" on --help 0.4.0 / 2011-11-15 ================== * Added support for `--`. Closes #24 0.3.3 / 2011-11-14 ================== * Fixed: wait for close event when writing help info [Jerry Hamlet] 0.3.2 / 2011-11-01 ================== * Fixed long flag definitions with values [felixge] 0.3.1 / 2011-10-31 ================== * Changed `--version` short flag to `-V` from `-v` * Changed `.version()` so it's configurable [felixge] 0.3.0 / 2011-10-31 ================== * Added support for long flags only. Closes #18 0.2.1 / 2011-10-24 ================== * \"node\": \">= 0.4.x < 0.7.0\". Closes #20 0.2.0 / 2011-09-26 ================== * Allow for defaults that are not just boolean. Default peassignment only occurs for --no-*, optional, and required arguments. [Jim Isaacs] 0.1.0 / 2011-08-24 ================== * Added support for custom `--help` output 0.0.5 / 2011-08-18 ================== * Changed: when the user enters nothing prompt for password again * Fixed issue with passwords beginning with numbers [NuckChorris] 0.0.4 / 2011-08-15 ================== * Fixed `Commander#args` 0.0.3 / 2011-08-15 ================== * Added default option value support 0.0.2 / 2011-08-15 ================== * Added mask support to `Command#password(str[, mask], fn)` * Added `Command#password(str, fn)` 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/commander/Readme.md","tags":[],"body":"# Commander.js [![Build Status](https://api.travis-ci.org/tj/commander.js.svg)](http://travis-ci.org/tj/commander.js) [![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander) [![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://www.npmjs.org/package/commander) [![Join the chat at https://gitter.im/tj/commander.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/tj/commander.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/tj/commander). [API documentation](http://tj.github.com/commander.js/) ## Installation $ npm install commander ## Option parsing Options with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options. ```js #!/usr/bin/env node /** * Module dependencies. */ var program = require('commander'); program .version('0.0.1') .option('-p, --peppers', 'Add peppers') .option('-P, --pineapple', 'Add pineapple') .option('-b, --bbq-sauce', 'Add bbq sauce') .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble') .parse(process.argv); console.log('you ordered a pizza with:'); if (program.peppers) console.log(' - peppers'); if (program.pineapple) console.log(' - pineapple'); if (program.bbqSauce) console.log(' - bbq'); console.log(' - %s cheese', program.cheese); ``` Short flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. ## Coercion ```js function range(val) { return val.split('..').map(Number); } function list(val) { return val.split(','); } function collect(val, memo) { memo.push(val); return memo; } function increaseVerbosity(v, total) { return total + 1; } program .version('0.0.1') .usage('[options] ') .option('-i, --integer ', 'An integer argument', parseInt) .option('-f, --float ', 'A float argument', parseFloat) .option('-r, --range ..', 'A range', range) .option('-l, --list ', 'A list', list) .option('-o, --optional [value]', 'An optional value') .option('-c, --collect [value]', 'A repeatable value', collect, []) .option('-v, --verbose', 'A value that can be increased', increaseVerbosity, 0) .parse(process.argv); console.log(' int: %j', program.integer); console.log(' float: %j', program.float); console.log(' optional: %j', program.optional); program.range = program.range || []; console.log(' range: %j..%j', program.range[0], program.range[1]); console.log(' list: %j', program.list); console.log(' collect: %j', program.collect); console.log(' verbosity: %j', program.verbose); console.log(' args: %j', program.args); ``` ## Regular Expression ```js program .version('0.0.1') .option('-s --size ', 'Pizza size', /^(large|medium|small)$/i, 'medium') .option('-d --drink [drink]', 'Drink', /^(coke|pepsi|izze)$/i) .parse(process.argv); console.log(' size: %j', program.size); console.log(' drink: %j', program.drink); ``` ## Variadic arguments The last argument of a command can be variadic, and only the last argument. To make an argument variadic you have to append `...` to the argument name. Here is an example: ```js #!/usr/bin/env node /** * Module dependencies. */ var program = require('commander'); program .version('0.0.1') .command('rmdir [otherDirs...]') .action(function (dir, otherDirs) { console.log('rmdir %s', dir); if (otherDirs) { otherDirs.forEach(function (oDir) { console.log('rmdir %s', oDir); }); } }); program.parse(process.argv); ``` An `Array` is used for the value of a variadic argument. This applies to `program.args` as well as the argument passed to your action as demonstrated above. ## Specify the argument syntax ```js #!/usr/bin/env node var program = require('../'); program .version('0.0.1') .arguments(' [env]') .action(function (cmd, env) { cmdValue = cmd; envValue = env; }); program.parse(process.argv); if (typeof cmdValue === 'undefined') { console.error('no command given!'); process.exit(1); } console.log('command:', cmdValue); console.log('environment:', envValue || \"no environment given\"); ``` ## Git-style sub-commands ```js // file: ./examples/pm var program = require('..'); program .version('0.0.1') .command('install [name]', 'install one or more packages') .command('search [query]', 'search with optional query') .command('list', 'list packages installed', {isDefault: true}) .parse(process.argv); ``` When `.command()` is invoked with a description argument, no `.action(callback)` should be called to handle sub-commands, otherwise there will be an error. This tells commander that you're going to use separate executables for sub-commands, much like `git(1)` and other popular tools. The commander will try to search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-command`, like `pm-install`, `pm-search`. Options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the option from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified. If the program is designed to be installed globally, make sure the executables have proper modes, like `755`. ### `--harmony` You can enable `--harmony` option in two ways: * Use `#! /usr/bin/env node --harmony` in the sub-commands scripts. Note some os version don’t support this pattern. * Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning sub-command process. ## Automated --help The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free: ``` $ ./examples/pizza --help Usage: pizza [options] An application for pizzas ordering Options: -h, --help output usage information -V, --version output the version number -p, --peppers Add peppers -P, --pineapple Add pineapple -b, --bbq Add bbq sauce -c, --cheese Add the specified type of cheese [marble] -C, --no-cheese You do not want any cheese ``` ## Custom help You can display arbitrary `-h, --help` information by listening for \"--help\". Commander will automatically exit once you are done so that the remainder of your program does not execute causing undesired behaviours, for example in the following executable \"stuff\" will not output when `--help` is used. ```js #!/usr/bin/env node /** * Module dependencies. */ var program = require('commander'); program .version('0.0.1') .option('-f, --foo', 'enable some foo') .option('-b, --bar', 'enable some bar') .option('-B, --baz', 'enable some baz'); // must be before .parse() since // node's emit() is immediate program.on('--help', function(){ console.log(' Examples:'); console.log(''); console.log(' $ custom-help --help'); console.log(' $ custom-help -h'); console.log(''); }); program.parse(process.argv); console.log('stuff'); ``` Yields the following help output when `node script-name.js -h` or `node script-name.js --help` are run: ``` Usage: custom-help [options] Options: -h, --help output usage information -V, --version output the version number -f, --foo enable some foo -b, --bar enable some bar -B, --baz enable some baz Examples: $ custom-help --help $ custom-help -h ``` ## .outputHelp(cb) Output help information without exiting. Optional callback cb allows post-processing of help text before it is displayed. If you want to display help by default (e.g. if no command was provided), you can use something like: ```js var program = require('commander'); var colors = require('colors'); program .version('0.0.1') .command('getstream [url]', 'get stream URL') .parse(process.argv); if (!process.argv.slice(2).length) { program.outputHelp(make_red); } function make_red(txt) { return colors.red(txt); //display the help text in red on the console } ``` ## .help(cb) Output help information and exit immediately. Optional callback cb allows post-processing of help text before it is displayed. ## Examples ```js var program = require('commander'); program .version('0.0.1') .option('-C, --chdir ', 'change the working directory') .option('-c, --config ', 'set config path. defaults to ./deploy.conf') .option('-T, --no-tests', 'ignore test hook') program .command('setup [env]') .description('run setup commands for all envs') .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\") .action(function(env, options){ var mode = options.setup_mode || \"normal\"; env = env || 'all'; console.log('setup for %s env(s) with %s mode', env, mode); }); program .command('exec ') .alias('ex') .description('execute the given remote cmd') .option(\"-e, --exec_mode \", \"Which exec mode to use\") .action(function(cmd, options){ console.log('exec \"%s\" using %s mode', cmd, options.exec_mode); }).on('--help', function() { console.log(' Examples:'); console.log(); console.log(' $ deploy exec sequential'); console.log(' $ deploy exec async'); console.log(); }); program .command('*') .action(function(env){ console.log('deploying \"%s\"', env); }); program.parse(process.argv); ``` More Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/commander/node_modules/graceful-readlink/README.md","tags":[],"body":"# graceful-readlink [![NPM Version](http://img.shields.io/npm/v/graceful-readlink.svg?style=flat)](https://www.npmjs.org/package/graceful-readlink) [![NPM Downloads](https://img.shields.io/npm/dm/graceful-readlink.svg?style=flat)](https://www.npmjs.org/package/graceful-readlink) ## Usage ```js var readlinkSync = require('graceful-readlink').readlinkSync; console.log(readlinkSync(f)); // output // the file pointed to when `f` is a symbolic link // the `f` itself when `f` is not a symbolic link ``` ## Licence MIT License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/README.md","tags":[],"body":"# is-my-json-valid A [JSONSchema](http://json-schema.org/) validator that uses code generation to be extremely fast ``` npm install is-my-json-valid ``` It passes the entire JSONSchema v4 test suite except for `remoteRefs` and `maxLength`/`minLength` when using unicode surrogate pairs. [![build status](http://img.shields.io/travis/mafintosh/is-my-json-valid.svg?style=flat)](http://travis-ci.org/mafintosh/is-my-json-valid) ## Usage Simply pass a schema to compile it ``` js var validator = require('is-my-json-valid') var validate = validator({ required: true, type: 'object', properties: { hello: { required: true, type: 'string' } } }) console.log('should be valid', validate({hello: 'world'})) console.log('should not be valid', validate({})) // get the last list of errors by checking validate.errors // the following will print [{field: 'data.hello', message: 'is required'}] console.log(validate.errors) ``` You can also pass the schema as a string ``` js var validate = validator('{\"type\": ... }') ``` Optionally you can use the require submodule to load a schema from `__dirname` ``` js var validator = require('is-my-json-valid/require') var validate = validator('my-schema.json') ``` ## Custom formats is-my-json-valid supports the formats specified in JSON schema v4 (such as date-time). If you want to add your own custom formats pass them as the formats options to the validator ``` js var validate = validator({ type: 'string', required: true, format: 'only-a' }, { formats: { 'only-a': /^a+$/ } }) console.log(validate('aa')) // true console.log(validate('ab')) // false ``` ## External schemas You can pass in external schemas that you reference using the `$ref` attribute as the `schemas` option ``` js var ext = { required: true, type: 'string' } var schema = { $ref: '#ext' // references another schema called ext } // pass the external schemas as an option var validate = validator(schema, {schemas: {ext: ext}}) validate('hello') // returns true validate(42) // return false ``` ## Filtering away additional properties is-my-json-valid supports filtering away properties not in the schema ``` js var filter = validator.filter({ required: true, type: 'object', properties: { hello: {type: 'string', required: true} }, additionalProperties: false }) var doc = {hello: 'world', notInSchema: true} console.log(filter(doc)) // {hello: 'world'} ``` ## Verbose mode outputs the value on errors is-my-json-valid outputs the value causing an error when verbose is set to true ``` js var validate = validator({ required: true, type: 'object', properties: { hello: { required: true, type: 'string' } } }, { verbose: true }) validate({hello: 100}); console.log(validate.errors) // {field: 'data.hello', message: 'is the wrong type', value: 100, type: 'string'} ``` ## Greedy mode tries to validate as much as possible By default is-my-json-valid bails on first validation error but when greedy is set to true it tries to validate as much as possible: ``` js var validate = validator({ type: 'object', properties: { x: { type: 'number' } }, required: ['x', 'y'] }, { greedy: true }); validate({x: 'string'}); console.log(validate.errors) // [{field: 'data.y', message: 'is required'}, // {field: 'data.x', message: 'is the wrong type'}] ``` ## Performance is-my-json-valid uses code generation to turn your JSON schema into basic javascript code that is easily optimizeable by v8. At the time of writing, is-my-json-valid is the __fastest validator__ when running * [json-schema-benchmark](https://github.com/Muscula/json-schema-benchmark) * [cosmicreals.com benchmark](http://cosmicrealms.com/blog/2014/08/29/benchmark-of-node-dot-js-json-validation-modules-part-3/) * [jsck benchmark](https://github.com/pandastrike/jsck/issues/72#issuecomment-70992684) * [themis benchmark](https://cdn.rawgit.com/playlyfe/themis/master/benchmark/results.html) * [z-schema benchmark](https://rawgit.com/zaggino/z-schema/master/benchmark/results.html) If you know any other relevant benchmarks open a PR and I'll add them. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/generate-function/README.md","tags":[],"body":"# generate-function Module that helps you write generated functions in Node ``` npm install generate-function ``` [![build status](http://img.shields.io/travis/mafintosh/generate-function.svg?style=flat)](http://travis-ci.org/mafintosh/generate-function) ## Disclamer Writing code that generates code is hard. You should only use this if you really, really, really need this for performance reasons (like schema validators / parsers etc). ## Usage ``` js var genfun = require('generate-function') var addNumber = function(val) { var fn = genfun() ('function add(n) {') ('return n + %d', val) // supports format strings to insert values ('}') return fn.toFunction() // will compile the function } var add2 = addNumber(2) console.log('1+2=', add2(1)) console.log(add2.toString()) // prints the generated function ``` If you need to close over variables in your generated function pass them to `toFunction(scope)` ``` js var multiply = function(a, b) { return a * b } var addAndMultiplyNumber = function(val) { var fn = genfun() ('function(n) {') ('if (typeof n !== \"number\") {') // ending a line with { will indent the source ('throw new Error(\"argument should be a number\")') ('}') ('var result = multiply(%d, n+%d)', val, val) ('return result') ('}') // use fn.toString() if you want to see the generated source return fn.toFunction({ multiply: multiply }) } var addAndMultiply2 = addAndMultiplyNumber(2) console.log('(3 + 2) * 2 =', addAndMultiply2(3)) ``` ## Related See [generate-object-property](https://github.com/mafintosh/generate-object-property) if you need to safely generate code that can be used to reference an object property ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/generate-object-property/README.md","tags":[],"body":"# generate-object-property Generate safe JS code that can used to reference a object property npm install generate-object-property [![build status](http://img.shields.io/travis/mafintosh/generate-object-property.svg?style=flat)](http://travis-ci.org/mafintosh/generate-object-property) ## Usage ``` js var gen = require('generate-object-property'); console.log(gen('a','b')); // prints a.b console.log(gen('a', 'foo-bar')); // prints a[\"foo-bar\"] ``` ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/generate-object-property/node_modules/is-property/README.md","tags":[],"body":"is-property =========== Tests if a property of a JavaScript object can be accessed using the dot (.) notation or if it must be enclosed in brackets, (ie use x[\" ... \"]) Example ------- ```javascript var isProperty = require(\"is-property\") console.log(isProperty(\"foo\")) //Prints true console.log(isProperty(\"0\")) //Prints false ``` Install ------- npm install is-property ### `require(\"is-property\")(str)` Checks if str is a property * `str` is a string which we will test if it is a property or not **Returns** true or false depending if str is a property ## Credits (c) 2013 Mikola Lysenko. MIT License"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/jsonpointer/README.md","tags":[],"body":"# JSON Pointer for nodejs This is an implementation of [JSON Pointer](http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-08). ## Usage var jsonpointer = require(\"jsonpointer\"); var obj = { foo: 1, bar: { baz: 2}, qux: [3, 4, 5]}; var one = jsonpointer.get(obj, \"/foo\"); var two = jsonpointer.get(obj, \"/bar/baz\"); var three = jsonpointer.get(obj, \"/qux/0\"); var four = jsonpointer.get(obj, \"/qux/1\"); var five = jsonpointer.get(obj, \"/qux/2\"); var notfound = jsonpointer.get(obj, \"/quo\"); // returns null jsonpointer.set(obj, \"/foo\", 6); // obj.foo = 6; ## Testing $ node test.js All tests pass. $ [![Build Status](https://travis-ci.org/janl/node-jsonpointer.png?branch=master)](https://travis-ci.org/janl/node-jsonpointer) ## Author (c) 2011 Jan Lehnardt ## License MIT License."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/node_modules/xtend/README.md","tags":[],"body":"# xtend [![browser support][3]][4] [![locked](http://badges.github.io/stability-badges/dist/locked.svg)](http://github.com/badges/stability-badges) Extend like a boss xtend is a basic utility library which allows you to extend an object by appending all of the properties from each object in a list. When there are identical properties, the right-most property takes precedence. ## Examples ```js var extend = require(\"xtend\") // extend returns a new object. Does not mutate arguments var combination = extend({ a: \"a\", b: 'c' }, { b: \"b\" }) // { a: \"a\", b: \"b\" } ``` ## Stability status: Locked ## MIT Licenced [3]: http://ci.testling.com/Raynos/xtend.png [4]: http://ci.testling.com/Raynos/xtend"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/pinkie-promise/node_modules/pinkie/readme.md","tags":[],"body":"> Itty bitty little widdle twinkie pinkie [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation [![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie) [![Coverage Status](https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&service=github)](https://coveralls.io/github/floatdrop/pinkie?branch=master) There are [tons of Promise implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone) out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in Node.js land (it should be browserify-able though). ## Install ``` $ npm install --save pinkie ``` ## Usage ```js var fs = require('fs'); var Promise = require('pinkie'); new Promise(function (resolve, reject) { fs.readFile('foo.json', 'utf8', function (err, data) { if (err) { reject(err); return; } resolve(data); }); }); //=> Promise ``` ### API `pinkie` exports bare [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation and polyfills [Node.js rejection events](https://nodejs.org/api/process.html#process_event_unhandledrejection). In case you forgot: #### new Promise(executor) Returns new instance of `Promise`. ##### executor *Required* Type: `function` Function with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. #### pinkie.all(promises) Returns a promise that resolves when all of the promises in the `promises` Array argument have resolved. #### pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise. #### pinkie.reject(reason) Returns a Promise object that is rejected with the given `reason`. #### pinkie.resolve(value) Returns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`. ## Related - [pinkie-promise](https://github.com/floatdrop/pinkie-promise) - Returns the native Promise or this module ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/har-validator/node_modules/pinkie-promise/readme.md","tags":[],"body":"# pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise) > [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) ponyfill Module exports global Promise object (if available) or [`pinkie`](http://github.com/floatdrop/pinkie) Promise polyfill. ## Install ``` $ npm install --save pinkie-promise ``` ## Usage ```js var Promise = require('pinkie-promise'); new Promise(function (resolve) { resolve('unicorns'); }); //=> Promise { 'unicorns' } ``` ## Related - [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/README.md","tags":[],"body":"![hawk Logo](https://raw.github.com/hueniverse/hawk/master/images/hawk.png) **Hawk** is an HTTP authentication scheme using a message authentication code (MAC) algorithm to provide partial HTTP request cryptographic verification. For more complex use cases such as access delegation, see [Oz](https://github.com/hueniverse/oz). Current version: **3.x** Note: 3.x and 2.x are the same exact protocol as 1.1. The version increments reflect changes in the node API. [![Build Status](https://secure.travis-ci.org/hueniverse/hawk.png)](http://travis-ci.org/hueniverse/hawk) # Table of Content - [**Introduction**](#introduction) - [Replay Protection](#replay-protection) - [Usage Example](#usage-example) - [Protocol Example](#protocol-example) - [Payload Validation](#payload-validation) - [Response Payload Validation](#response-payload-validation) - [Browser Support and Considerations](#browser-support-and-considerations) - [**Single URI Authorization**](#single-uri-authorization) - [Usage Example](#bewit-usage-example) - [**Security Considerations**](#security-considerations) - [MAC Keys Transmission](#mac-keys-transmission) - [Confidentiality of Requests](#confidentiality-of-requests) - [Spoofing by Counterfeit Servers](#spoofing-by-counterfeit-servers) - [Plaintext Storage of Credentials](#plaintext-storage-of-credentials) - [Entropy of Keys](#entropy-of-keys) - [Coverage Limitations](#coverage-limitations) - [Future Time Manipulation](#future-time-manipulation) - [Client Clock Poisoning](#client-clock-poisoning) - [Bewit Limitations](#bewit-limitations) - [Host Header Forgery](#host-header-forgery) - [**Frequently Asked Questions**](#frequently-asked-questions) - [**Implementations**](#implementations) - [**Acknowledgements**](#acknowledgements) # Introduction **Hawk** is an HTTP authentication scheme providing mechanisms for making authenticated HTTP requests with partial cryptographic verification of the request and response, covering the HTTP method, request URI, host, and optionally the request payload. Similar to the HTTP [Digest access authentication schemes](http://www.ietf.org/rfc/rfc2617.txt), **Hawk** uses a set of client credentials which include an identifier (e.g. username) and key (e.g. password). Likewise, just as with the Digest scheme, the key is never included in authenticated requests. Instead, it is used to calculate a request MAC value which is included in its place. However, **Hawk** has several differences from Digest. In particular, while both use a nonce to limit the possibility of replay attacks, in **Hawk** the client generates the nonce and uses it in combination with a timestamp, leading to less \"chattiness\" (interaction with the server). Also unlike Digest, this scheme is not intended to protect the key itself (the password in Digest) because the client and server must both have access to the key material in the clear. The primary design goals of this scheme are to: * simplify and improve HTTP authentication for services that are unwilling or unable to deploy TLS for all resources, * secure credentials against leakage (e.g., when the client uses some form of dynamic configuration to determine where to send an authenticated request), and * avoid the exposure of credentials sent to a malicious server over an unauthenticated secure channel due to client failure to validate the server's identity as part of its TLS handshake. In addition, **Hawk** supports a method for granting third-parties temporary access to individual resources using a query parameter called _bewit_ (in falconry, a leather strap used to attach a tracking device to the leg of a hawk). The **Hawk** scheme requires the establishment of a shared symmetric key between the client and the server, which is beyond the scope of this module. Typically, the shared credentials are established via an initial TLS-protected phase or derived from some other shared confidential information available to both the client and the server. ## Replay Protection Without replay protection, an attacker can use a compromised (but otherwise valid and authenticated) request more than once, gaining access to a protected resource. To mitigate this, clients include both a nonce and a timestamp when making requests. This gives the server enough information to prevent replay attacks. The nonce is generated by the client, and is a string unique across all requests with the same timestamp and key identifier combination. The timestamp enables the server to restrict the validity period of the credentials where requests occuring afterwards are rejected. It also removes the need for the server to retain an unbounded number of nonce values for future checks. By default, **Hawk** uses a time window of 1 minute to allow for time skew between the client and server (which in practice translates to a maximum of 2 minutes as the skew can be positive or negative). Using a timestamp requires the client's clock to be in sync with the server's clock. **Hawk** requires both the client clock and the server clock to use NTP to ensure synchronization. However, given the limitations of some client types (e.g. browsers) to deploy NTP, the server provides the client with its current time (in seconds precision) in response to a bad timestamp. There is no expectation that the client will adjust its system clock to match the server (in fact, this would be a potential attack vector). Instead, the client only uses the server's time to calculate an offset used only for communications with that particular server. The protocol rewards clients with synchronized clocks by reducing the number of round trips required to authenticate the first request. ## Usage Example Server code: ```javascript var Http = require('http'); var Hawk = require('hawk'); // Credentials lookup function var credentialsFunc = function (id, callback) { var credentials = { key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn', algorithm: 'sha256', user: 'Steve' }; return callback(null, credentials); }; // Create HTTP server var handler = function (req, res) { // Authenticate incoming request Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials, artifacts) { // Prepare response var payload = (!err ? 'Hello ' + credentials.user + ' ' + artifacts.ext : 'Shoosh!'); var headers = { 'Content-Type': 'text/plain' }; // Generate Server-Authorization response header var header = Hawk.server.header(credentials, artifacts, { payload: payload, contentType: headers['Content-Type'] }); headers['Server-Authorization'] = header; // Send the response back res.writeHead(!err ? 200 : 401, headers); res.end(payload); }); }; // Start server Http.createServer(handler).listen(8000, 'example.com'); ``` Client code: ```javascript var Request = require('request'); var Hawk = require('hawk'); // Client credentials var credentials = { id: 'dh37fgj492je', key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn', algorithm: 'sha256' } // Request options var requestOptions = { uri: 'http://example.com:8000/resource/1?b=1&a=2', method: 'GET', headers: {} }; // Generate Authorization request header var header = Hawk.client.header('http://example.com:8000/resource/1?b=1&a=2', 'GET', { credentials: credentials, ext: 'some-app-data' }); requestOptions.headers.Authorization = header.field; // Send authenticated request Request(requestOptions, function (error, response, body) { // Authenticate the server's response var isValid = Hawk.client.authenticate(response, credentials, header.artifacts, { payload: body }); // Output results console.log(response.statusCode + ': ' + body + (isValid ? ' (valid)' : ' (invalid)')); }); ``` **Hawk** utilized the [**SNTP**](https://github.com/hueniverse/sntp) module for time sync management. By default, the local machine time is used. To automatically retrieve and synchronice the clock within the application, use the SNTP 'start()' method. ```javascript Hawk.sntp.start(); ``` ## Protocol Example The client attempts to access a protected resource without authentication, sending the following HTTP request to the resource server: ``` GET /resource/1?b=1&a=2 HTTP/1.1 Host: example.com:8000 ``` The resource server returns an authentication challenge. ``` HTTP/1.1 401 Unauthorized WWW-Authenticate: Hawk ``` The client has previously obtained a set of **Hawk** credentials for accessing resources on the \"http://example.com/\" server. The **Hawk** credentials issued to the client include the following attributes: * Key identifier: dh37fgj492je * Key: werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn * Algorithm: sha256 The client generates the authentication header by calculating a timestamp (e.g. the number of seconds since January 1, 1970 00:00:00 GMT), generating a nonce, and constructing the normalized request string (each value followed by a newline character): ``` hawk.1.header 1353832234 j4h3g2 GET /resource/1?b=1&a=2 example.com 8000 some-app-ext-data ``` The request MAC is calculated using HMAC with the specified hash algorithm \"sha256\" and the key over the normalized request string. The result is base64-encoded to produce the request MAC: ``` 6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE= ``` The client includes the **Hawk** key identifier, timestamp, nonce, application specific data, and request MAC with the request using the HTTP `Authorization` request header field: ``` GET /resource/1?b=1&a=2 HTTP/1.1 Host: example.com:8000 Authorization: Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", ext=\"some-app-ext-data\", mac=\"6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=\" ``` The server validates the request by calculating the request MAC again based on the request received and verifies the validity and scope of the **Hawk** credentials. If valid, the server responds with the requested resource. ### Payload Validation **Hawk** provides optional payload validation. When generating the authentication header, the client calculates a payload hash using the specified hash algorithm. The hash is calculated over the concatenated value of (each followed by a newline character): * `hawk.1.payload` * the content-type in lowercase, without any parameters (e.g. `application/json`) * the request payload prior to any content encoding (the exact representation requirements should be specified by the server for payloads other than simple single-part ascii to ensure interoperability) For example: * Payload: `Thank you for flying Hawk` * Content Type: `text/plain` * Hash (sha256): `Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=` Results in the following input to the payload hash function (newline terminated values): ``` hawk.1.payload text/plain Thank you for flying Hawk ``` Which produces the following hash value: ``` Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY= ``` The client constructs the normalized request string (newline terminated values): ``` hawk.1.header 1353832234 j4h3g2 POST /resource/1?a=1&b=2 example.com 8000 Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY= some-app-ext-data ``` Then calculates the request MAC and includes the **Hawk** key identifier, timestamp, nonce, payload hash, application specific data, and request MAC, with the request using the HTTP `Authorization` request header field: ``` POST /resource/1?a=1&b=2 HTTP/1.1 Host: example.com:8000 Authorization: Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", hash=\"Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=\", ext=\"some-app-ext-data\", mac=\"aSe1DERmZuRl3pI36/9BdZmnErTw3sNzOOAUlfeKjVw=\" ``` It is up to the server if and when it validates the payload for any given request, based solely on it's security policy and the nature of the data included. If the payload is available at the time of authentication, the server uses the hash value provided by the client to construct the normalized string and validates the MAC. If the MAC is valid, the server calculates the payload hash and compares the value with the provided payload hash in the header. In many cases, checking the MAC first is faster than calculating the payload hash. However, if the payload is not available at authentication time (e.g. too large to fit in memory, streamed elsewhere, or processed at a different stage in the application), the server may choose to defer payload validation for later by retaining the hash value provided by the client after validating the MAC. It is important to note that MAC validation does not mean the hash value provided by the client is valid, only that the value included in the header was not modified. Without calculating the payload hash on the server and comparing it to the value provided by the client, the payload may be modified by an attacker. ## Response Payload Validation **Hawk** provides partial response payload validation. The server includes the `Server-Authorization` response header which enables the client to authenticate the response and ensure it is talking to the right server. **Hawk** defines the HTTP `Server-Authorization` header as a response header using the exact same syntax as the `Authorization` request header field. The header is contructed using the same process as the client's request header. The server uses the same credentials and other artifacts provided by the client to constructs the normalized request string. The `ext` and `hash` values are replaced with new values based on the server response. The rest as identical to those used by the client. The result MAC digest is included with the optional `hash` and `ext` values: ``` Server-Authorization: Hawk mac=\"XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=\", hash=\"f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=\", ext=\"response-specific\" ``` ## Browser Support and Considerations A browser script is provided for including using a `` tag in [lib/browser.js](/lib/browser.js). It's also a [component](http://component.io/hueniverse/hawk). **Hawk** relies on the _Server-Authorization_ and _WWW-Authenticate_ headers in its response to communicate with the client. Therefore, in case of CORS requests, it is important to consider sending _Access-Control-Expose-Headers_ with the value _\"WWW-Authenticate, Server-Authorization\"_ on each response from your server. As explained in the [specifications](http://www.w3.org/TR/cors/#access-control-expose-headers-response-header), it will indicate that these headers can safely be accessed by the client (using getResponseHeader() on the XmlHttpRequest object). Otherwise you will be met with a [\"simple response header\"](http://www.w3.org/TR/cors/#simple-response-header) which excludes these fields and would prevent the Hawk client from authenticating the requests.You can read more about the why and how in this [article](http://www.html5rocks.com/en/tutorials/cors/#toc-adding-cors-support-to-the-server) # Single URI Authorization There are cases in which limited and short-term access to a protected resource is granted to a third party which does not have access to the shared credentials. For example, displaying a protected image on a web page accessed by anyone. **Hawk** provides limited support for such URIs in the form of a _bewit_ - a URI query parameter appended to the request URI which contains the necessary credentials to authenticate the request. Because of the significant security risks involved in issuing such access, bewit usage is purposely limited only to GET requests and for a finite period of time. Both the client and server can issue bewit credentials, however, the server should not use the same credentials as the client to maintain clear traceability as to who issued which credentials. In order to simplify implementation, bewit credentials do not support single-use policy and can be replayed multiple times within the granted access timeframe. ## Bewit Usage Example Server code: ```javascript var Http = require('http'); var Hawk = require('hawk'); // Credentials lookup function var credentialsFunc = function (id, callback) { var credentials = { key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn', algorithm: 'sha256' }; return callback(null, credentials); }; // Create HTTP server var handler = function (req, res) { Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes) { res.writeHead(!err ? 200 : 401, { 'Content-Type': 'text/plain' }); res.end(!err ? 'Access granted' : 'Shoosh!'); }); }; Http.createServer(handler).listen(8000, 'example.com'); ``` Bewit code generation: ```javascript var Request = require('request'); var Hawk = require('hawk'); // Client credentials var credentials = { id: 'dh37fgj492je', key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn', algorithm: 'sha256' } // Generate bewit var duration = 60 * 5; // 5 Minutes var bewit = Hawk.uri.getBewit('http://example.com:8080/resource/1?b=1&a=2', { credentials: credentials, ttlSec: duration, ext: 'some-app-data' }); var uri = 'http://example.com:8000/resource/1?b=1&a=2' + '&bewit=' + bewit; ``` # Security Considerations The greatest sources of security risks are usually found not in **Hawk** but in the policies and procedures surrounding its use. Implementers are strongly encouraged to assess how this module addresses their security requirements. This section includes an incomplete list of security considerations that must be reviewed and understood before deploying **Hawk** on the server. Many of the protections provided in **Hawk** depends on whether and how they are used. ### MAC Keys Transmission **Hawk** does not provide any mechanism for obtaining or transmitting the set of shared credentials required. Any mechanism used to obtain **Hawk** credentials must ensure that these transmissions are protected using transport-layer mechanisms such as TLS. ### Confidentiality of Requests While **Hawk** provides a mechanism for verifying the integrity of HTTP requests, it provides no guarantee of request confidentiality. Unless other precautions are taken, eavesdroppers will have full access to the request content. Servers should carefully consider the types of data likely to be sent as part of such requests, and employ transport-layer security mechanisms to protect sensitive resources. ### Spoofing by Counterfeit Servers **Hawk** provides limited verification of the server authenticity. When receiving a response back from the server, the server may choose to include a response `Server-Authorization` header which the client can use to verify the response. However, it is up to the server to determine when such measure is included, to up to the client to enforce that policy. A hostile party could take advantage of this by intercepting the client's requests and returning misleading or otherwise incorrect responses. Service providers should consider such attacks when developing services using this protocol, and should require transport-layer security for any requests where the authenticity of the resource server or of server responses is an issue. ### Plaintext Storage of Credentials The **Hawk** key functions the same way passwords do in traditional authentication systems. In order to compute the request MAC, the server must have access to the key in plaintext form. This is in contrast, for example, to modern operating systems, which store only a one-way hash of user credentials. If an attacker were to gain access to these keys - or worse, to the server's database of all such keys - he or she would be able to perform any action on behalf of any resource owner. Accordingly, it is critical that servers protect these keys from unauthorized access. ### Entropy of Keys Unless a transport-layer security protocol is used, eavesdroppers will have full access to authenticated requests and request MAC values, and will thus be able to mount offline brute-force attacks to recover the key used. Servers should be careful to assign keys which are long enough, and random enough, to resist such attacks for at least the length of time that the **Hawk** credentials are valid. For example, if the credentials are valid for two weeks, servers should ensure that it is not possible to mount a brute force attack that recovers the key in less than two weeks. Of course, servers are urged to err on the side of caution, and use the longest key reasonable. It is equally important that the pseudo-random number generator (PRNG) used to generate these keys be of sufficiently high quality. Many PRNG implementations generate number sequences that may appear to be random, but which nevertheless exhibit patterns or other weaknesses which make cryptanalysis or brute force attacks easier. Implementers should be careful to use cryptographically secure PRNGs to avoid these problems. ### Coverage Limitations The request MAC only covers the HTTP `Host` header and optionally the `Content-Type` header. It does not cover any other headers which can often affect how the request body is interpreted by the server. If the server behavior is influenced by the presence or value of such headers, an attacker can manipulate the request headers without being detected. Implementers should use the `ext` feature to pass application-specific information via the `Authorization` header which is protected by the request MAC. The response authentication, when performed, only covers the response payload, content-type, and the request information provided by the client in it's request (method, resource, timestamp, nonce, etc.). It does not cover the HTTP status code or any other response header field (e.g. Location) which can affect the client's behaviour. ### Future Time Manipulation The protocol relies on a clock sync between the client and server. To accomplish this, the server informs the client of its current time when an invalid timestamp is received. If an attacker is able to manipulate this information and cause the client to use an incorrect time, it would be able to cause the client to generate authenticated requests using time in the future. Such requests will fail when sent by the client, and will not likely leave a trace on the server (given the common implementation of nonce, if at all enforced). The attacker will then be able to replay the request at the correct time without detection. The client must only use the time information provided by the server if: * it was delivered over a TLS connection and the server identity has been verified, or * the `tsm` MAC digest calculated using the same client credentials over the timestamp has been verified. ### Client Clock Poisoning When receiving a request with a bad timestamp, the server provides the client with its current time. The client must never use the time received from the server to adjust its own clock, and must only use it to calculate an offset for communicating with that particular server. ### Bewit Limitations Special care must be taken when issuing bewit credentials to third parties. Bewit credentials are valid until expiration and cannot be revoked or limited without using other means. Whatever resource they grant access to will be completely exposed to anyone with access to the bewit credentials which act as bearer credentials for that particular resource. While bewit usage is limited to GET requests only and therefore cannot be used to perform transactions or change server state, it can still be used to expose private and sensitive information. ### Host Header Forgery Hawk validates the incoming request MAC against the incoming HTTP Host header. However, unless the optional `host` and `port` options are used with `server.authenticate()`, a malicous client can mint new host names pointing to the server's IP address and use that to craft an attack by sending a valid request that's meant for another hostname than the one used by the server. Server implementors must manually verify that the host header received matches their expectation (or use the options mentioned above). # Frequently Asked Questions ### Where is the protocol specification? If you are looking for some prose explaining how all this works, **this is it**. **Hawk** is being developed as an open source project instead of a standard. In other words, the [code](/hueniverse/hawk/tree/master/lib) is the specification. Not sure about something? Open an issue! ### Is it done? As of version 0.10.0, **Hawk** is feature-complete. However, until this module reaches version 1.0.0 it is considered experimental and is likely to change. This also means your feedback and contribution are very welcome. Feel free to open issues with questions and suggestions. ### Where can I find **Hawk** implementations in other languages? **Hawk**'s only reference implementation is provided in JavaScript as a node.js module. However, it has been ported to other languages. The full list is maintained [here](https://github.com/hueniverse/hawk/issues?labels=port&state=closed). Please add an issue if you are working on another port. A cross-platform test-suite is in the works. ### Why isn't the algorithm part of the challenge or dynamically negotiated? The algorithm used is closely related to the key issued as different algorithms require different key sizes (and other requirements). While some keys can be used for multiple algorithm, the protocol is designed to closely bind the key and algorithm together as part of the issued credentials. ### Why is Host and Content-Type the only headers covered by the request MAC? It is really hard to include other headers. Headers can be changed by proxies and other intermediaries and there is no well-established way to normalize them. Many platforms change the case of header field names and values. The only straight-forward solution is to include the headers in some blob (say, base64 encoded JSON) and include that with the request, an approach taken by JWT and other such formats. However, that design violates the HTTP header boundaries, repeats information, and introduces other security issues because firewalls will not be aware of these \"hidden\" headers. In addition, any information repeated must be compared to the duplicated information in the header and therefore only moves the problem elsewhere. ### Why not just use HTTP Digest? Digest requires pre-negotiation to establish a nonce. This means you can't just make a request - you must first send a protocol handshake to the server. This pattern has become unacceptable for most web services, especially mobile where extra round-trip are costly. ### Why bother with all this nonce and timestamp business? **Hawk** is an attempt to find a reasonable, practical compromise between security and usability. OAuth 1.0 got timestamp and nonces halfway right but failed when it came to scalability and consistent developer experience. **Hawk** addresses it by requiring the client to sync its clock, but provides it with tools to accomplish it. In general, replay protection is a matter of application-specific threat model. It is less of an issue on a TLS-protected system where the clients are implemented using best practices and are under the control of the server. Instead of dropping replay protection, **Hawk** offers a required time window and an optional nonce verification. Together, it provides developers with the ability to decide how to enforce their security policy without impacting the client's implementation. ### What are `app` and `dlg` in the authorization header and normalized mac string? The original motivation for **Hawk** was to replace the OAuth 1.0 use cases. This included both a simple client-server mode which this module is specifically designed for, and a delegated access mode which is being developed separately in [Oz](https://github.com/hueniverse/oz). In addition to the **Hawk** use cases, Oz requires another attribute: the application id `app`. This provides binding between the credentials and the application in a way that prevents an attacker from tricking an application to use credentials issued to someone else. It also has an optional 'delegated-by' attribute `dlg` which is the application id of the application the credentials were directly issued to. The goal of these two additions is to allow Oz to utilize **Hawk** directly, but with the additional security of delegated credentials. ### What is the purpose of the static strings used in each normalized MAC input? When calculating a hash or MAC, a static prefix (tag) is added. The prefix is used to prevent MAC values from being used or reused for a purpose other than what they were created for (i.e. prevents switching MAC values between a request, response, and a bewit use cases). It also protects against exploits created after a potential change in how the protocol creates the normalized string. For example, if a future version would switch the order of nonce and timestamp, it can create an exploit opportunity for cases where the nonce is similar in format to a timestamp. ### Does **Hawk** have anything to do with OAuth? Short answer: no. **Hawk** was originally proposed as the OAuth MAC Token specification. However, the OAuth working group in its consistent incompetence failed to produce a final, usable solution to address one of the most popular use cases of OAuth 1.0 - using it to authenticate simple client-server transactions (i.e. two-legged). As you can guess, the OAuth working group is still hard at work to produce more garbage. **Hawk** provides a simple HTTP authentication scheme for making client-server requests. It does not address the OAuth use case of delegating access to a third party. If you are looking for an OAuth alternative, check out [Oz](https://github.com/hueniverse/oz). # Implementations - [Logibit Hawk in F#/.Net](https://github.com/logibit/logibit.hawk/) - [Tent Hawk in Ruby](https://github.com/tent/hawk-ruby) - [Wealdtech in Java](https://github.com/wealdtech/hawk) - [Kumar's Mohawk in Python](https://github.com/kumar303/mohawk/) # Acknowledgements **Hawk** is a derivative work of the [HTTP MAC Authentication Scheme](http://tools.ietf.org/html/draft-hammer-oauth-v2-mac-token-05) proposal co-authored by Ben Adida, Adam Barth, and Eran Hammer, which in turn was based on the OAuth 1.0 community specification. Special thanks to Ben Laurie for his always insightful feedback and advice. The **Hawk** logo was created by [Chris Carrasco](http://chriscarrasco.com)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/node_modules/boom/CONTRIBUTING.md","tags":[],"body":"Please view our [hapijs contributing guide](https://github.com/hapijs/hapi/blob/master/CONTRIBUTING.md)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/node_modules/boom/README.md","tags":[],"body":"![boom Logo](https://raw.github.com/hapijs/boom/master/images/boom.png) HTTP-friendly error objects [![Build Status](https://secure.travis-ci.org/hapijs/boom.png)](http://travis-ci.org/hapijs/boom) [![Current Version](https://img.shields.io/npm/v/boom.svg)](https://www.npmjs.com/package/boom) Lead Maintainer: [Adam Bretz](https://github.com/arb) **boom** provides a set of utilities for returning HTTP errors. Each utility returns a `Boom` error response object (instance of `Error`) which includes the following properties: - `isBoom` - if `true`, indicates this is a `Boom` object instance. - `isServer` - convenience bool indicating status code >= 500. - `message` - the error message. - `output` - the formatted response. Can be directly manipulated after object construction to return a custom error response. Allowed root keys: - `statusCode` - the HTTP status code (typically 4xx or 5xx). - `headers` - an object containing any HTTP headers where each key is a header name and value is the header content. - `payload` - the formatted object used as the response payload (stringified). Can be directly manipulated but any changes will be lost if `reformat()` is called. Any content allowed and by default includes the following content: - `statusCode` - the HTTP status code, derived from `error.output.statusCode`. - `error` - the HTTP status message (e.g. 'Bad Request', 'Internal Server Error') derived from `statusCode`. - `message` - the error message derived from `error.message`. - inherited `Error` properties. The `Boom` object also supports the following method: - `reformat()` - rebuilds `error.output` using the other object properties. ## Overview - Helper methods - [`wrap(error, [statusCode], [message])`](#wraperror-statuscode-message) - [`create(statusCode, [message], [data])`](#createstatuscode-message-data) - HTTP 4xx Errors - 400: [`Boom.badRequest([message], [data])`](#boombadrequestmessage-data) - 401: [`Boom.unauthorized([message], [scheme], [attributes])`](#boomunauthorizedmessage-scheme-attributes) - 403: [`Boom.forbidden([message], [data])`](#boomforbiddenmessage-data) - 404: [`Boom.notFound([message], [data])`](#boomnotfoundmessage-data) - 405: [`Boom.methodNotAllowed([message], [data])`](#boommethodnotallowedmessage-data) - 406: [`Boom.notAcceptable([message], [data])`](#boomnotacceptablemessage-data) - 407: [`Boom.proxyAuthRequired([message], [data])`](#boomproxyauthrequiredmessage-data) - 408: [`Boom.clientTimeout([message], [data])`](#boomclienttimeoutmessage-data) - 409: [`Boom.conflict([message], [data])`](#boomconflictmessage-data) - 410: [`Boom.resourceGone([message], [data])`](#boomresourcegonemessage-data) - 411: [`Boom.lengthRequired([message], [data])`](#boomlengthrequiredmessage-data) - 412: [`Boom.preconditionFailed([message], [data])`](#boompreconditionfailedmessage-data) - 413: [`Boom.entityTooLarge([message], [data])`](#boomentitytoolargemessage-data) - 414: [`Boom.uriTooLong([message], [data])`](#boomuritoolongmessage-data) - 415: [`Boom.unsupportedMediaType([message], [data])`](#boomunsupportedmediatypemessage-data) - 416: [`Boom.rangeNotSatisfiable([message], [data])`](#boomrangenotsatisfiablemessage-data) - 417: [`Boom.expectationFailed([message], [data])`](#boomexpectationfailedmessage-data) - 422: [`Boom.badData([message], [data])`](#boombaddatamessage-data) - 428: [`Boom.preconditionRequired([message], [data])`](#boompreconditionrequiredmessage-data) - 429: [`Boom.tooManyRequests([message], [data])`](#boomtoomanyrequestsmessage-data) - HTTP 5xx Errors - 500: [`Boom.badImplementation([message], [data])`](#boombadimplementationmessage-data) - 501: [`Boom.notImplemented([message], [data])`](#boomnotimplementedmessage-data) - 502: [`Boom.badGateway([message], [data])`](#boombadgatewaymessage-data) - 503: [`Boom.serverTimeout([message], [data])`](#boomservertimeoutmessage-data) - 504: [`Boom.gatewayTimeout([message], [data])`](#boomgatewaytimeoutmessage-data) - [FAQ](#faq) ## Helper Methods ### `wrap(error, [statusCode], [message])` Decorates an error with the **boom** properties where: - `error` - the error object to wrap. If `error` is already a **boom** object, returns back the same object. - `statusCode` - optional HTTP status code. Defaults to `500`. - `message` - optional message string. If the error already has a message, it adds the message as a prefix. Defaults to no message. ```js var error = new Error('Unexpected input'); Boom.wrap(error, 400); ``` ### `create(statusCode, [message], [data])` Generates an `Error` object with the **boom** decorations where: - `statusCode` - an HTTP error code number. Must be greater or equal 400. - `message` - optional message string. - `data` - additional error data set to `error.data` property. ```js var error = Boom.create(400, 'Bad request', { timestamp: Date.now() }); ``` ## HTTP 4xx Errors ### `Boom.badRequest([message], [data])` Returns a 400 Bad Request error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.badRequest('invalid query'); ``` Generates the following response payload: ```json { \"statusCode\": 400, \"error\": \"Bad Request\", \"message\": \"invalid query\" } ``` ### `Boom.unauthorized([message], [scheme], [attributes])` Returns a 401 Unauthorized error where: - `message` - optional message. - `scheme` can be one of the following: - an authentication scheme name - an array of string values. These values will be separated by ', ' and set to the 'WWW-Authenticate' header. - `attributes` - an object of values to use while setting the 'WWW-Authenticate' header. This value is only used when `schema` is a string, otherwise it is ignored. Every key/value pair will be included in the 'WWW-Authenticate' in the format of 'key=\"value\"' as well as in the response payload under the `attributes` key. `null` and `undefined` will be replaced with an empty string. If `attributes` is set, `message` will be used as the 'error' segment of the 'WWW-Authenticate' header. If `message` is unset, the 'error' segment of the header will not be present and `isMissing` will be true on the error object. If either `scheme` or `attributes` are set, the resultant `Boom` object will have the 'WWW-Authenticate' header set for the response. ```js Boom.unauthorized('invalid password'); ``` Generates the following response: ```json \"payload\": { \"statusCode\": 401, \"error\": \"Unauthorized\", \"message\": \"invalid password\" }, \"headers\" {} ``` ```js Boom.unauthorized('invalid password', 'sample'); ``` Generates the following response: ```json \"payload\": { \"statusCode\": 401, \"error\": \"Unauthorized\", \"message\": \"invalid password\", \"attributes\": { \"error\": \"invalid password\" } }, \"headers\" { \"WWW-Authenticate\": \"sample error=\\\"invalid password\\\"\" } ``` ```js Boom.unauthorized('invalid password', 'sample', { ttl: 0, cache: null, foo: 'bar' }); ``` Generates the following response: ```json \"payload\": { \"statusCode\": 401, \"error\": \"Unauthorized\", \"message\": \"invalid password\", \"attributes\": { \"error\": \"invalid password\", \"ttl\": 0, \"cache\": \"\", \"foo\": \"bar\" } }, \"headers\" { \"WWW-Authenticate\": \"sample ttl=\\\"0\\\", cache=\\\"\\\", foo=\\\"bar\\\", error=\\\"invalid password\\\"\" } ``` ### `Boom.forbidden([message], [data])` Returns a 403 Forbidden error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.forbidden('try again some time'); ``` Generates the following response payload: ```json { \"statusCode\": 403, \"error\": \"Forbidden\", \"message\": \"try again some time\" } ``` ### `Boom.notFound([message], [data])` Returns a 404 Not Found error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.notFound('missing'); ``` Generates the following response payload: ```json { \"statusCode\": 404, \"error\": \"Not Found\", \"message\": \"missing\" } ``` ### `Boom.methodNotAllowed([message], [data])` Returns a 405 Method Not Allowed error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.methodNotAllowed('that method is not allowed'); ``` Generates the following response payload: ```json { \"statusCode\": 405, \"error\": \"Method Not Allowed\", \"message\": \"that method is not allowed\" } ``` ### `Boom.notAcceptable([message], [data])` Returns a 406 Not Acceptable error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.notAcceptable('unacceptable'); ``` Generates the following response payload: ```json { \"statusCode\": 406, \"error\": \"Not Acceptable\", \"message\": \"unacceptable\" } ``` ### `Boom.proxyAuthRequired([message], [data])` Returns a 407 Proxy Authentication Required error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.proxyAuthRequired('auth missing'); ``` Generates the following response payload: ```json { \"statusCode\": 407, \"error\": \"Proxy Authentication Required\", \"message\": \"auth missing\" } ``` ### `Boom.clientTimeout([message], [data])` Returns a 408 Request Time-out error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.clientTimeout('timed out'); ``` Generates the following response payload: ```json { \"statusCode\": 408, \"error\": \"Request Time-out\", \"message\": \"timed out\" } ``` ### `Boom.conflict([message], [data])` Returns a 409 Conflict error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.conflict('there was a conflict'); ``` Generates the following response payload: ```json { \"statusCode\": 409, \"error\": \"Conflict\", \"message\": \"there was a conflict\" } ``` ### `Boom.resourceGone([message], [data])` Returns a 410 Gone error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.resourceGone('it is gone'); ``` Generates the following response payload: ```json { \"statusCode\": 410, \"error\": \"Gone\", \"message\": \"it is gone\" } ``` ### `Boom.lengthRequired([message], [data])` Returns a 411 Length Required error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.lengthRequired('length needed'); ``` Generates the following response payload: ```json { \"statusCode\": 411, \"error\": \"Length Required\", \"message\": \"length needed\" } ``` ### `Boom.preconditionFailed([message], [data])` Returns a 412 Precondition Failed error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.preconditionFailed(); ``` Generates the following response payload: ```json { \"statusCode\": 412, \"error\": \"Precondition Failed\" } ``` ### `Boom.entityTooLarge([message], [data])` Returns a 413 Request Entity Too Large error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.entityTooLarge('too big'); ``` Generates the following response payload: ```json { \"statusCode\": 413, \"error\": \"Request Entity Too Large\", \"message\": \"too big\" } ``` ### `Boom.uriTooLong([message], [data])` Returns a 414 Request-URI Too Large error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.uriTooLong('uri is too long'); ``` Generates the following response payload: ```json { \"statusCode\": 414, \"error\": \"Request-URI Too Large\", \"message\": \"uri is too long\" } ``` ### `Boom.unsupportedMediaType([message], [data])` Returns a 415 Unsupported Media Type error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.unsupportedMediaType('that media is not supported'); ``` Generates the following response payload: ```json { \"statusCode\": 415, \"error\": \"Unsupported Media Type\", \"message\": \"that media is not supported\" } ``` ### `Boom.rangeNotSatisfiable([message], [data])` Returns a 416 Requested Range Not Satisfiable error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.rangeNotSatisfiable(); ``` Generates the following response payload: ```json { \"statusCode\": 416, \"error\": \"Requested Range Not Satisfiable\" } ``` ### `Boom.expectationFailed([message], [data])` Returns a 417 Expectation Failed error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.expectationFailed('expected this to work'); ``` Generates the following response payload: ```json { \"statusCode\": 417, \"error\": \"Expectation Failed\", \"message\": \"expected this to work\" } ``` ### `Boom.badData([message], [data])` Returns a 422 Unprocessable Entity error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.badData('your data is bad and you should feel bad'); ``` Generates the following response payload: ```json { \"statusCode\": 422, \"error\": \"Unprocessable Entity\", \"message\": \"your data is bad and you should feel bad\" } ``` ### `Boom.preconditionRequired([message], [data])` Returns a 428 Precondition Required error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.preconditionRequired('you must supply an If-Match header'); ``` Generates the following response payload: ```json { \"statusCode\": 428, \"error\": \"Precondition Required\", \"message\": \"you must supply an If-Match header\" } ``` ### `Boom.tooManyRequests([message], [data])` Returns a 429 Too Many Requests error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.tooManyRequests('you have exceeded your request limit'); ``` Generates the following response payload: ```json { \"statusCode\": 429, \"error\": \"Too Many Requests\", \"message\": \"you have exceeded your request limit\" } ``` ## HTTP 5xx Errors All 500 errors hide your message from the end user. Your message is recorded in the server log. ### `Boom.badImplementation([message], [data])` Returns a 500 Internal Server Error error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.badImplementation('terrible implementation'); ``` Generates the following response payload: ```json { \"statusCode\": 500, \"error\": \"Internal Server Error\", \"message\": \"An internal server error occurred\" } ``` ### `Boom.notImplemented([message], [data])` Returns a 501 Not Implemented error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.notImplemented('method not implemented'); ``` Generates the following response payload: ```json { \"statusCode\": 501, \"error\": \"Not Implemented\", \"message\": \"method not implemented\" } ``` ### `Boom.badGateway([message], [data])` Returns a 502 Bad Gateway error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.badGateway('that is a bad gateway'); ``` Generates the following response payload: ```json { \"statusCode\": 502, \"error\": \"Bad Gateway\", \"message\": \"that is a bad gateway\" } ``` ### `Boom.serverTimeout([message], [data])` Returns a 503 Service Unavailable error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.serverTimeout('unavailable'); ``` Generates the following response payload: ```json { \"statusCode\": 503, \"error\": \"Service Unavailable\", \"message\": \"unavailable\" } ``` ### `Boom.gatewayTimeout([message], [data])` Returns a 504 Gateway Time-out error where: - `message` - optional message. - `data` - optional additional error data. ```js Boom.gatewayTimeout(); ``` Generates the following response payload: ```json { \"statusCode\": 504, \"error\": \"Gateway Time-out\" } ``` ## F.A.Q. ###### How do I include extra information in my responses? `output.payload` is missing `data`, what gives? There is a reason the values passed back in the response payloads are pretty locked down. It's mostly for security and to not leak any important information back to the client. This means you will need to put in a little more effort to include extra information about your custom error. Check out the [\"Error transformation\"](https://github.com/hapijs/hapi/blob/master/API.md#error-transformation) section in the hapi documentation."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/node_modules/cryptiles/README.md","tags":[],"body":"cryptiles ========= General purpose crypto utilities [![Build Status](https://secure.travis-ci.org/hapijs/cryptiles.png)](http://travis-ci.org/hapijs/cryptiles) Lead Maintainer - [C J Silverio](https://github.com/ceejbot) ## Methods ### `randomString( size)` Returns a cryptographically strong pseudo-random data string. Takes a size argument for the length of the string. ### `fixedTimeComparison( a, b)` Compare two strings using fixed time algorithm (to prevent time-based analysis of MAC digest match). Returns `true` if the strings match, `false` if they differ."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/node_modules/hoek/CONTRIBUTING.md","tags":[],"body":"Please view our [hapijs contributing guide](https://github.com/hapijs/hapi/blob/master/CONTRIBUTING.md)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/node_modules/hoek/README.md","tags":[],"body":"![hoek Logo](https://raw.github.com/hapijs/hoek/master/images/hoek.png) Utility methods for the hapi ecosystem. This module is not intended to solve every problem for everyone, but rather as a central place to store hapi-specific methods. If you're looking for a general purpose utility module, check out [lodash](https://github.com/lodash/lodash) or [underscore](https://github.com/jashkenas/underscore). [![Build Status](https://secure.travis-ci.org/hapijs/hoek.svg)](http://travis-ci.org/hapijs/hoek) Lead Maintainer: [Nathan LaFreniere](https://github.com/nlf) # Table of Contents * [Introduction](#introduction \"Introduction\") * [Object](#object \"Object\") * [clone](#cloneobj \"clone\") * [cloneWithShallow](#clonewithshallowobj-keys \"cloneWithShallow\") * [merge](#mergetarget-source-isnulloverride-ismergearrays \"merge\") * [applyToDefaults](#applytodefaultsdefaults-options-isnulloverride \"applyToDefaults\") * [applyToDefaultsWithShallow](#applytodefaultswithshallowdefaults-options-keys \"applyToDefaultsWithShallow\") * [deepEqual](#deepequala-b \"deepEqual\") * [unique](#uniquearray-key \"unique\") * [mapToObject](#maptoobjectarray-key \"mapToObject\") * [intersect](#intersectarray1-array2 \"intersect\") * [contain](#containref-values-options \"contain\") * [flatten](#flattenarray-target \"flatten\") * [reach](#reachobj-chain-options \"reach\") * [reachTemplate](#reachtemplateobj-template-options \"reachTemplate\") * [transform](#transformobj-transform-options \"transform\") * [shallow](#shallowobj \"shallow\") * [stringify](#stringifyobj \"stringify\") * [Timer](#timer \"Timer\") * [Bench](#bench \"Bench\") * [Binary Encoding/Decoding](#binary-encodingdecoding \"Binary Encoding/Decoding\") * [base64urlEncode](#base64urlencodevalue \"binary64urlEncode\") * [base64urlDecode](#base64urldecodevalue \"binary64urlDecode\") * [Escaping Characters](#escaping-characters \"Escaping Characters\") * [escapeHtml](#escapehtmlstring \"escapeHtml\") * [escapeHeaderAttribute](#escapeheaderattributeattribute \"escapeHeaderAttribute\") * [escapeRegex](#escaperegexstring \"escapeRegex\") * [Errors](#errors \"Errors\") * [assert](#assertcondition-message \"assert\") * [abort](#abortmessage \"abort\") * [displayStack](#displaystackslice \"displayStack\") * [callStack](#callstackslice \"callStack\") * [Function](#function \"Function\") * [nextTick](#nexttickfn \"nextTick\") * [once](#oncefn \"once\") * [ignore](#ignore \"ignore\") * [Miscellaneous](#miscellaneous \"Miscellaneous\") * [uniqueFilename](#uniquefilenamepath-extension \"uniqueFilename\") * [isAbsolutePath](#isabsolutepathpath-platform \"isAbsolutePath\") * [isInteger](#isintegervalue \"isInteger\") # Introduction The *Hoek* library contains some common functions used within the hapi ecosystem. It comes with useful methods for Arrays (clone, merge, applyToDefaults), Objects (removeKeys, copy), Asserting and more. For example, to use Hoek to set configuration with default options: ```javascript var Hoek = require('hoek'); var default = {url : \"www.github.com\", port : \"8000\", debug : true}; var config = Hoek.applyToDefaults(default, {port : \"3000\", admin : true}); // In this case, config would be { url: 'www.github.com', port: '3000', debug: true, admin: true } ``` Under each of the sections (such as Array), there are subsections which correspond to Hoek methods. Each subsection will explain how to use the corresponding method. In each js excerpt below, the `var Hoek = require('hoek');` is omitted for brevity. ## Object Hoek provides several helpful methods for objects and arrays. ### clone(obj) This method is used to clone an object or an array. A *deep copy* is made (duplicates everything, including values that are objects, as well as non-enumerable properties). ```javascript var nestedObj = { w: /^something$/ig, x: { a: [1, 2, 3], b: 123456, c: new Date() }, y: 'y', z: new Date() }; var copy = Hoek.clone(nestedObj); copy.x.b = 100; console.log(copy.y); // results in 'y' console.log(nestedObj.x.b); // results in 123456 console.log(copy.x.b); // results in 100 ``` ### cloneWithShallow(obj, keys) keys is an array of key names to shallow copy This method is also used to clone an object or array, however any keys listed in the `keys` array are shallow copied while those not listed are deep copied. ```javascript var nestedObj = { w: /^something$/ig, x: { a: [1, 2, 3], b: 123456, c: new Date() }, y: 'y', z: new Date() }; var copy = Hoek.cloneWithShallow(nestedObj, ['x']); copy.x.b = 100; console.log(copy.y); // results in 'y' console.log(nestedObj.x.b); // results in 100 console.log(copy.x.b); // results in 100 ``` ### merge(target, source, isNullOverride, isMergeArrays) isNullOverride, isMergeArrays default to true Merge all the properties of source into target, source wins in conflict, and by default null and undefined from source are applied. Merge is destructive where the target is modified. For non destructive merge, use `applyToDefaults`. ```javascript var target = {a: 1, b : 2}; var source = {a: 0, c: 5}; var source2 = {a: null, c: 5}; Hoek.merge(target, source); // results in {a: 0, b: 2, c: 5} Hoek.merge(target, source2); // results in {a: null, b: 2, c: 5} Hoek.merge(target, source2, false); // results in {a: 1, b: 2, c: 5} var targetArray = [1, 2, 3]; var sourceArray = [4, 5]; Hoek.merge(targetArray, sourceArray); // results in [1, 2, 3, 4, 5] Hoek.merge(targetArray, sourceArray, true, false); // results in [4, 5] ``` ### applyToDefaults(defaults, options, isNullOverride) isNullOverride defaults to false Apply options to a copy of the defaults ```javascript var defaults = { host: \"localhost\", port: 8000 }; var options = { port: 8080 }; var config = Hoek.applyToDefaults(defaults, options); // results in { host: \"localhost\", port: 8080 } ``` Apply options with a null value to a copy of the defaults ```javascript var defaults = { host: \"localhost\", port: 8000 }; var options = { host: null, port: 8080 }; var config = Hoek.applyToDefaults(defaults, options, true); // results in { host: null, port: 8080 } ``` ### applyToDefaultsWithShallow(defaults, options, keys) keys is an array of key names to shallow copy Apply options to a copy of the defaults. Keys specified in the last parameter are shallow copied from options instead of merged. ```javascript var defaults = { server: { host: \"localhost\", port: 8000 }, name: 'example' }; var options = { server: { port: 8080 } }; var config = Hoek.applyToDefaultsWithShallow(defaults, options, ['server']); // results in { server: { port: 8080 }, name: 'example' } ``` ### deepEqual(b, a, [options]) Performs a deep comparison of the two values including support for circular dependencies, prototype, and properties. To skip prototype comparisons, use `options.prototype = false` ```javascript Hoek.deepEqual({ a: [1, 2], b: 'string', c: { d: true } }, { a: [1, 2], b: 'string', c: { d: true } }); //results in true Hoek.deepEqual(Object.create(null), {}, { prototype: false }); //results in true Hoek.deepEqual(Object.create(null), {}); //results in false ``` ### unique(array, key) Remove duplicate items from Array ```javascript var array = [1, 2, 2, 3, 3, 4, 5, 6]; var newArray = Hoek.unique(array); // results in [1,2,3,4,5,6] array = [{id: 1}, {id: 1}, {id: 2}]; newArray = Hoek.unique(array, \"id\"); // results in [{id: 1}, {id: 2}] ``` ### mapToObject(array, key) Convert an Array into an Object ```javascript var array = [1,2,3]; var newObject = Hoek.mapToObject(array); // results in [{\"1\": true}, {\"2\": true}, {\"3\": true}] array = [{id: 1}, {id: 2}]; newObject = Hoek.mapToObject(array, \"id\"); // results in [{\"id\": 1}, {\"id\": 2}] ``` ### intersect(array1, array2) Find the common unique items in two arrays ```javascript var array1 = [1, 2, 3]; var array2 = [1, 4, 5]; var newArray = Hoek.intersect(array1, array2); // results in [1] ``` ### contain(ref, values, [options]) Tests if the reference value contains the provided values where: - `ref` - the reference string, array, or object. - `values` - a single or array of values to find within the `ref` value. If `ref` is an object, `values` can be a key name, an array of key names, or an object with key-value pairs to compare. - `options` - an optional object with the following optional settings: - `deep` - if `true`, performed a deep comparison of the values. - `once` - if `true`, allows only one occurrence of each value. - `only` - if `true`, does not allow values not explicitly listed. - `part` - if `true`, allows partial match of the values (at least one must always match). Note: comparing a string to overlapping values will result in failed comparison (e.g. `contain('abc', ['ab', 'bc'])`). Also, if an object key's value does not match the provided value, `false` is returned even when `part` is specified. ```javascript Hoek.contain('aaa', 'a', { only: true }); // true Hoek.contain([{ a: 1 }], [{ a: 1 }], { deep: true }); // true Hoek.contain([1, 2, 2], [1, 2], { once: true }); // false Hoek.contain({ a: 1, b: 2, c: 3 }, { a: 1, d: 4 }, { part: true }); // true ``` ### flatten(array, [target]) Flatten an array ```javascript var array = [1, [2, 3]]; var flattenedArray = Hoek.flatten(array); // results in [1, 2, 3] array = [1, [2, 3]]; target = [4, [5]]; flattenedArray = Hoek.flatten(array, target); // results in [4, [5], 1, 2, 3] ``` ### reach(obj, chain, [options]) Converts an object key chain string to reference - `options` - optional settings - `separator` - string to split chain path on, defaults to '.' - `default` - value to return if the path or value is not present, default is `undefined` - `strict` - if `true`, will throw an error on missing member, default is `false` - `functions` - if `true` allow traversing functions for properties. `false` will throw an error if a function is part of the chain. A chain including negative numbers will work like negative indices on an array. If chain is `null`, `undefined` or `false`, the object itself will be returned. ```javascript var chain = 'a.b.c'; var obj = {a : {b : { c : 1}}}; Hoek.reach(obj, chain); // returns 1 var chain = 'a.b.-1'; var obj = {a : {b : [2,3,6]}}; Hoek.reach(obj, chain); // returns 6 ``` ### reachTemplate(obj, template, [options]) Replaces string parameters (`{name}`) with their corresponding object key values by applying the (`reach()`)[#reachobj-chain-options] method where: - `obj` - the context object used for key lookup. - `template` - a string containing `{}` parameters. - `options` - optional (`reach()`)[#reachobj-chain-options] options. ```javascript var chain = 'a.b.c'; var obj = {a : {b : { c : 1}}}; Hoek.reachTemplate(obj, '1+{a.b.c}=2'); // returns '1+1=2' ``` ### transform(obj, transform, [options]) Transforms an existing object into a new one based on the supplied `obj` and `transform` map. `options` are the same as the `reach` options. The first argument can also be an array of objects. In that case the method will return an array of transformed objects. ```javascript var source = { address: { one: '123 main street', two: 'PO Box 1234' }, title: 'Warehouse', state: 'CA' }; var result = Hoek.transform(source, { 'person.address.lineOne': 'address.one', 'person.address.lineTwo': 'address.two', 'title': 'title', 'person.address.region': 'state' }); // Results in // { // person: { // address: { // lineOne: '123 main street', // lineTwo: 'PO Box 1234', // region: 'CA' // } // }, // title: 'Warehouse' // } ``` ### shallow(obj) Performs a shallow copy by copying the references of all the top level children where: - `obj` - the object to be copied. ```javascript var shallow = Hoek.shallow({ a: { b: 1 } }); ``` ### stringify(obj) Converts an object to string using the built-in `JSON.stringify()` method with the difference that any errors are caught and reported back in the form of the returned string. Used as a shortcut for displaying information to the console (e.g. in error message) without the need to worry about invalid conversion. ```javascript var a = {}; a.b = a; Hoek.stringify(a); // Returns '[Cannot display object: Converting circular structure to JSON]' ``` # Timer A Timer object. Initializing a new timer object sets the ts to the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC. ```javascript var timerObj = new Hoek.Timer(); console.log(\"Time is now: \" + timerObj.ts); console.log(\"Elapsed time from initialization: \" + timerObj.elapsed() + 'milliseconds'); ``` # Bench Same as Timer with the exception that `ts` stores the internal node clock which is not related to `Date.now()` and cannot be used to display human-readable timestamps. More accurate for benchmarking or internal timers. # Binary Encoding/Decoding ### base64urlEncode(value) Encodes value in Base64 or URL encoding ### base64urlDecode(value) Decodes data in Base64 or URL encoding. # Escaping Characters Hoek provides convenient methods for escaping html characters. The escaped characters are as followed: ```javascript internals.htmlEscaped = { '&': '&', '': '>', '\"': '\"', \"'\": ''', '`': '`' }; ``` ### escapeHtml(string) ```javascript var string = ' hey '; var escapedString = Hoek.escapeHtml(string); // returns hey ``` ### escapeHeaderAttribute(attribute) Escape attribute value for use in HTTP header ```javascript var a = Hoek.escapeHeaderAttribute('I said \"go w\\\\o me\"'); //returns I said \\\"go w\\\\o me\\\" ``` ### escapeRegex(string) Escape string for Regex construction ```javascript var a = Hoek.escapeRegex('4^f$s.4*5+-_?%=#!:@|~\\\\/`\"(>)[\\)\\[<\\]d\\{\\}s\\, ``` # Errors ### assert(condition, message) ```javascript var a = 1, b = 2; Hoek.assert(a === b, 'a should equal b'); // Throws 'a should equal b' ``` Note that you may also pass an already created Error object as the second parameter, and `assert` will throw that object. ```javascript var a = 1, b = 2; Hoek.assert(a === b, new Error('a should equal b')); // Throws the given error object ``` ### abort(message) First checks if `process.env.NODE_ENV === 'test'`, and if so, throws error message. Otherwise, displays most recent stack and then exits process. ### displayStack(slice) Displays the trace stack ```javascript var stack = Hoek.displayStack(); console.log(stack); // returns something like: [ 'null (/Users/user/Desktop/hoek/test.js:4:18)', 'Module._compile (module.js:449:26)', 'Module._extensions..js (module.js:467:10)', 'Module.load (module.js:356:32)', 'Module._load (module.js:312:12)', 'Module.runMain (module.js:492:10)', 'startup.processNextTick.process._tickCallback (node.js:244:9)' ] ``` ### callStack(slice) Returns a trace stack array. ```javascript var stack = Hoek.callStack(); console.log(stack); // returns something like: [ [ '/Users/user/Desktop/hoek/test.js', 4, 18, null, false ], [ 'module.js', 449, 26, 'Module._compile', false ], [ 'module.js', 467, 10, 'Module._extensions..js', false ], [ 'module.js', 356, 32, 'Module.load', false ], [ 'module.js', 312, 12, 'Module._load', false ], [ 'module.js', 492, 10, 'Module.runMain', false ], [ 'node.js', 244, 9, 'startup.processNextTick.process._tickCallback', false ] ] ``` ## Function ### nextTick(fn) Returns a new function that wraps `fn` in `process.nextTick`. ```javascript var myFn = function () { console.log('Do this later'); }; var nextFn = Hoek.nextTick(myFn); nextFn(); console.log('Do this first'); // Results in: // // Do this first // Do this later ``` ### once(fn) Returns a new function that can be run multiple times, but makes sure `fn` is only run once. ```javascript var myFn = function () { console.log('Ran myFn'); }; var onceFn = Hoek.once(myFn); onceFn(); // results in \"Ran myFn\" onceFn(); // results in undefined ``` ### ignore A simple no-op function. It does nothing at all. ## Miscellaneous ### uniqueFilename(path, extension) `path` to prepend with the randomly generated file name. `extension` is the optional file extension, defaults to `''`. Returns a randomly generated file name at the specified `path`. The result is a fully resolved path to a file. ```javascript var result = Hoek.uniqueFilename('./test/modules', 'txt'); // results in \"full/path/test/modules/{random}.txt\" ``` ### isAbsolutePath(path, [platform]) Determines whether `path` is an absolute path. Returns `true` or `false`. - `path` - A file path to test for whether it is absolute or not. - `platform` - An optional parameter used for specifying the platform. Defaults to `process.platform`. ### isInteger(value) Check `value` to see if it is an integer. Returns true/false. ```javascript var result = Hoek.isInteger('23') ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/node_modules/sntp/README.md","tags":[],"body":"# sntp An SNTP v4 client (RFC4330) for node. Simpy connects to the NTP or SNTP server requested and returns the server time along with the roundtrip duration and clock offset. To adjust the local time to the NTP time, add the returned `t` offset to the local time. [![Build Status](https://secure.travis-ci.org/hueniverse/sntp.png)](http://travis-ci.org/hueniverse/sntp) # Usage ```javascript var Sntp = require('sntp'); // All options are optional var options = { host: 'nist1-sj.ustiming.org', // Defaults to pool.ntp.org port: 123, // Defaults to 123 (NTP) resolveReference: true, // Default to false (not resolving) timeout: 1000 // Defaults to zero (no timeout) }; // Request server time Sntp.time(options, function (err, time) { if (err) { console.log('Failed: ' + err.message); process.exit(1); } console.log('Local clock is off by: ' + time.t + ' milliseconds'); process.exit(0); }); ``` If an application needs to maintain continuous time synchronization, the module provides a stateful method for querying the current offset only when the last one is too old (defaults to daily). ```javascript // Request offset once Sntp.offset(function (err, offset) { console.log(offset); // New (served fresh) // Request offset again Sntp.offset(function (err, offset) { console.log(offset); // Identical (served from cache) }); }); ``` To set a background offset refresh, start the interval and use the provided now() method. If for any reason the client fails to obtain an up-to-date offset, the current system clock is used. ```javascript var before = Sntp.now(); // System time without offset Sntp.start(function () { var now = Sntp.now(); // With offset Sntp.stop(); }); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/http-signature/README.md","tags":[],"body":"# node-http-signature node-http-signature is a node.js library that has client and server components for Joyent's [HTTP Signature Scheme](http_signing.md). ## Usage Note the example below signs a request with the same key/cert used to start an HTTP server. This is almost certainly not what you actually want, but is just used to illustrate the API calls; you will need to provide your own key management in addition to this library. ### Client ```js var fs = require('fs'); var https = require('https'); var httpSignature = require('http-signature'); var key = fs.readFileSync('./key.pem', 'ascii'); var options = { host: 'localhost', port: 8443, path: '/', method: 'GET', headers: {} }; // Adds a 'Date' header in, signs it, and adds the // 'Authorization' header in. var req = https.request(options, function(res) { console.log(res.statusCode); }); httpSignature.sign(req, { key: key, keyId: './cert.pem' }); req.end(); ``` ### Server ```js var fs = require('fs'); var https = require('https'); var httpSignature = require('http-signature'); var options = { key: fs.readFileSync('./key.pem'), cert: fs.readFileSync('./cert.pem') }; https.createServer(options, function (req, res) { var rc = 200; var parsed = httpSignature.parseRequest(req); var pub = fs.readFileSync(parsed.keyId, 'ascii'); if (!httpSignature.verifySignature(parsed, pub)) rc = 401; res.writeHead(rc); res.end(); }).listen(8443); ``` ## Installation npm install http-signature ## License MIT. ## Bugs See ."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/http-signature/http_signing.md","tags":[],"body":"# Abstract This document describes a way to add origin authentication, message integrity, and replay resistance to HTTP REST requests. It is intended to be used over the HTTPS protocol. # Copyright Notice Copyright (c) 2011 Joyent, Inc. and the persons identified as document authors. All rights reserved. Code Components extracted from this document must include MIT License text. # Introduction This protocol is intended to provide a standard way for clients to sign HTTP requests. RFC2617 (HTTP Authentication) defines Basic and Digest authentication mechanisms, and RFC5246 (TLS 1.2) defines client-auth, both of which are widely employed on the Internet today. However, it is common place that the burdens of PKI prevent web service operators from deploying that methodology, and so many fall back to Basic authentication, which has poor security characteristics. Additionally, OAuth provides a fully-specified alternative for authorization of web service requests, but is not (always) ideal for machine to machine communication, as the key acquisition steps (generally) imply a fixed infrastructure that may not make sense to a service provider (e.g., symmetric keys). Several web service providers have invented their own schemes for signing HTTP requests, but to date, none have been placed in the public domain as a standard. This document serves that purpose. There are no techniques in this proposal that are novel beyond previous art, however, this aims to be a simple mechanism for signing these requests. # Signature Authentication Scheme The \"signature\" authentication scheme is based on the model that the client must authenticate itself with a digital signature produced by either a private asymmetric key (e.g., RSA) or a shared symmetric key (e.g., HMAC). The scheme is parameterized enough such that it is not bound to any particular key type or signing algorithm. However, it does explicitly assume that clients can send an HTTP `Date` header. ## Authorization Header The client is expected to send an Authorization header (as defined in RFC 2617) with the following parameterization: credentials := \"Signature\" params params := 1#(keyId | algorithm | [headers] | [ext] | signature) digitalSignature := plain-string keyId := \"keyId\" \"=\" plain-string algorithm := \"algorithm\" \"=\" plain-string headers := \"headers\" \"=\" 1#headers-value ext := \"ext\" \"=\" plain-string signature := \"signature\" \"=\" plain-string headers-value := plain-string plain-string = 1*( %x20-21 / %x23-5B / %x5D-7E ) ### Signature Parameters #### keyId REQUIRED. The `keyId` field is an opaque string that the server can use to look up the component they need to validate the signature. It could be an SSH key fingerprint, an LDAP DN, etc. Management of keys and assignment of `keyId` is out of scope for this document. #### algorithm REQUIRED. The `algorithm` parameter is used if the client and server agree on a non-standard digital signature algorithm. The full list of supported signature mechanisms is listed below. #### headers OPTIONAL. The `headers` parameter is used to specify the list of HTTP headers used to sign the request. If specified, it should be a quoted list of HTTP header names, separated by a single space character. By default, only one HTTP header is signed, which is the `Date` header. Note that the list MUST be specified in the order the values are concatenated together during signing. To include the HTTP request line in the signature calculation, use the special `request-line` value. While this is overloading the definition of `headers` in HTTP linguism, the request-line is defined in RFC 2616, and as the outlier from headers in useful signature calculation, it is deemed simpler to simply use `request-line` than to add a separate parameter for it. #### extensions OPTIONAL. The `extensions` parameter is used to include additional information which is covered by the request. The content and format of the string is out of scope for this document, and expected to be specified by implementors. #### signature REQUIRED. The `signature` parameter is a `Base64` encoded digital signature generated by the client. The client uses the `algorithm` and `headers` request parameters to form a canonicalized `signing string`. This `signing string` is then signed with the key associated with `keyId` and the algorithm corresponding to `algorithm`. The `signature` parameter is then set to the `Base64` encoding of the signature. ### Signing String Composition In order to generate the string that is signed with a key, the client MUST take the values of each HTTP header specified by `headers` in the order they appear. 1. If the header name is not `request-line` then append the lowercased header name followed with an ASCII colon `:` and an ASCII space ` `. 2. If the header name is `request-line` then append the HTTP request line, otherwise append the header value. 3. If value is not the last value then append an ASCII newline `\\n`. The string MUST NOT include a trailing ASCII newline. # Example Requests All requests refer to the following request (body omitted): POST /foo HTTP/1.1 Host: example.org Date: Tue, 07 Jun 2011 20:51:35 GMT Content-Type: application/json Content-MD5: h0auK8hnYJKmHTLhKtMTkQ== Content-Length: 123 The \"rsa-key-1\" keyId refers to a private key known to the client and a public key known to the server. The \"hmac-key-1\" keyId refers to key known to the client and server. ## Default parameterization The authorization header and signature would be generated as: Authorization: Signature keyId=\"rsa-key-1\",algorithm=\"rsa-sha256\",signature=\"Base64(RSA-SHA256(signing string))\" The client would compose the signing string as: date: Tue, 07 Jun 2011 20:51:35 GMT ## Header List The authorization header and signature would be generated as: Authorization: Signature keyId=\"rsa-key-1\",algorithm=\"rsa-sha256\",headers=\"request-line date content-type content-md5\",signature=\"Base64(RSA-SHA256(signing string))\" The client would compose the signing string as (`+ \"\\n\"` inserted for readability): POST /foo HTTP/1.1 + \"\\n\" date: Tue, 07 Jun 2011 20:51:35 GMT + \"\\n\" content-type: application/json + \"\\n\" content-md5: h0auK8hnYJKmHTLhKtMTkQ== ## Algorithm The authorization header and signature would be generated as: Authorization: Signature keyId=\"hmac-key-1\",algorithm=\"hmac-sha1\",signature=\"Base64(HMAC-SHA1(signing string))\" The client would compose the signing string as: date: Tue, 07 Jun 2011 20:51:35 GMT # Signing Algorithms Currently supported algorithm names are: * rsa-sha1 * rsa-sha256 * rsa-sha512 * dsa-sha1 * hmac-sha1 * hmac-sha256 * hmac-sha512 # Security Considerations ## Default Parameters Note the default parameterization of the `Signature` scheme is only safe if all requests are carried over a secure transport (i.e., TLS). Sending the default scheme over a non-secure transport will leave the request vulnerable to spoofing, tampering, replay/repudiation, and integrity violations (if using the STRIDE threat-modeling methodology). ## Insecure Transports If sending the request over plain HTTP, service providers SHOULD require clients to sign ALL HTTP headers, and the `request-line`. Additionally, service providers SHOULD require `Content-MD5` calculations to be performed to ensure against any tampering from clients. ## Nonces Nonces are out of scope for this document simply because many service providers fail to implement them correctly, or do not adopt security specifications because of the infrastructure complexity. Given the `header` parameterization, a service provider is fully enabled to add nonce semantics into this scheme by using something like an `x-request-nonce` header, and ensuring it is signed with the `Date` header. ## Clock Skew As the default scheme is to sign the `Date` header, service providers SHOULD protect against logged replay attacks by enforcing a clock skew. The server SHOULD be synchronized with NTP, and the recommendation in this specification is to allow 300s of clock skew (in either direction). ## Required Headers to Sign It is out of scope for this document to dictate what headers a service provider will want to enforce, but service providers SHOULD at minimum include the `Date` header. # References ## Normative References * [RFC2616] Hypertext Transfer Protocol -- HTTP/1.1 * [RFC2617] HTTP Authentication: Basic and Digest Access Authentication * [RFC5246] The Transport Layer Security (TLS) Protocol Version 1.2 ## Informative References Name: Mark Cavage (editor) Company: Joyent, Inc. Email: mark.cavage@joyent.com URI: http://www.joyent.com # Appendix A - Test Values The following test data uses the RSA (2048b) keys, which we will refer to as `keyId=Test` in the following samples: -----BEGIN PUBLIC KEY----- MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCFENGw33yGihy92pDjZQhl0C3 6rPJj+CvfSC8+q28hxA161QFNUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6 Z4UMR7EOcpfdUE9Hf3m/hs+FUR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJw oYi+1hqp1fIekaxsyQIDAQAB -----END PUBLIC KEY----- -----BEGIN RSA PRIVATE KEY----- MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u 412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7 kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI 7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA== -----END RSA PRIVATE KEY----- And all examples use this request: POST /foo?param=value&pet=dog HTTP/1.1 Host: example.com Date: Thu, 05 Jan 2012 21:31:40 GMT Content-Type: application/json Content-MD5: Sd/dVLAcvNLSq16eXua5uQ== Content-Length: 18 {\"hello\": \"world\"} ### Default The string to sign would be: date: Thu, 05 Jan 2012 21:31:40 GMT The Authorization header would be: Authorization: Signature keyId=\"Test\",algorithm=\"rsa-sha256\",signature=\"ATp0r26dbMIxOopqw0OfABDT7CKMIoENumuruOtarj8n/97Q3htHFYpH8yOSQk3Z5zh8UxUym6FYTb5+A0Nz3NRsXJibnYi7brE/4tx5But9kkFGzG+xpUmimN4c3TMN7OFH//+r8hBf7BT9/GmHDUVZT2JzWGLZES2xDOUuMtA=\" ### All Headers Parameterized to include all headers, the string to sign would be (`+ \"\\n\"` inserted for readability): POST /foo?param=value&pet=dog HTTP/1.1 + \"\\n\" host: example.com + \"\\n\" date: Thu, 05 Jan 2012 21:31:40 GMT + \"\\n\" content-type: application/json + \"\\n\" content-md5: Sd/dVLAcvNLSq16eXua5uQ== + \"\\n\" content-length: 18 The Authorization header would be: Authorization: Signature keyId=\"Test\",algorithm=\"rsa-sha256\",headers=\"request-line host date content-type content-md5 content-length\",signature=\"H/AaTDkJvLELy4i1RujnKlS6dm8QWiJvEpn9cKRMi49kKF+mohZ15z1r+mF+XiKS5kOOscyS83olfBtsVhYjPg2Ei3/D9D4Mvb7bFm9IaLJgYTFFuQCghrKQQFPiqJN320emjHxFowpIm1BkstnEU7lktH/XdXVBo8a6Uteiztw=\""},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/http-signature/node_modules/asn1/README.md","tags":[],"body":"node-asn1 is a library for encoding and decoding ASN.1 datatypes in pure JS. Currently BER encoding is supported; at some point I'll likely have to do DER. ## Usage Mostly, if you're *actually* needing to read and write ASN.1, you probably don't need this readme to explain what and why. If you have no idea what ASN.1 is, see this: ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc The source is pretty much self-explanatory, and has read/write methods for the common types out there. ### Decoding The following reads an ASN.1 sequence with a boolean. var Ber = require('asn1').Ber; var reader = new Ber.Reader(new Buffer([0x30, 0x03, 0x01, 0x01, 0xff])); reader.readSequence(); console.log('Sequence len: ' + reader.length); if (reader.peek() === Ber.Boolean) console.log(reader.readBoolean()); ### Encoding The following generates the same payload as above. var Ber = require('asn1').Ber; var writer = new Ber.Writer(); writer.startSequence(); writer.writeBoolean(true); writer.endSequence(); console.log(writer.buffer); ## Installation npm install asn1 ## License MIT. ## Bugs See ."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/http-signature/node_modules/assert-plus/README.md","tags":[],"body":"# node-assert-plus This library is a super small wrapper over node's assert module that has two things: (1) the ability to disable assertions with the environment variable NODE_NDEBUG, and (2) some API wrappers for argument testing. Like `assert.string(myArg, 'myArg')`. As a simple example, most of my code looks like this: var assert = require('assert-plus'); function fooAccount(options, callback) { assert.object(options, 'options'); assert.number(options.id, 'options.id); assert.bool(options.isManager, 'options.isManager'); assert.string(options.name, 'options.name'); assert.arrayOfString(options.email, 'options.email'); assert.func(callback, 'callback'); // Do stuff callback(null, {}); } # API All methods that *aren't* part of node's core assert API are simply assumed to take an argument, and then a string 'name' that's not a message; `AssertionError` will be thrown if the assertion fails with a message like: AssertionError: foo (string) is required at test (/home/mark/work/foo/foo.js:3:9) at Object. (/home/mark/work/foo/foo.js:15:1) at Module._compile (module.js:446:26) at Object..js (module.js:464:10) at Module.load (module.js:353:31) at Function._load (module.js:311:12) at Array.0 (module.js:484:10) at EventEmitter._tickCallback (node.js:190:38) from: function test(foo) { assert.string(foo, 'foo'); } There you go. You can check that arrays are of a homogenous type with `Arrayof$Type`: function test(foo) { assert.arrayOfString(foo, 'foo'); } You can assert IFF an argument is not `undefined` (i.e., an optional arg): assert.optionalString(foo, 'foo'); Lastly, you can opt-out of assertion checking altogether by setting the environment variable `NODE_NDEBUG=1`. This is pseudo-useful if you have lots of assertions, and don't want to pay `typeof ()` taxes to v8 in production. The complete list of APIs is: * assert.bool * assert.buffer * assert.func * assert.number * assert.object * assert.string * assert.arrayOfBool * assert.arrayOfFunc * assert.arrayOfNumber * assert.arrayOfObject * assert.arrayOfString * assert.optionalBool * assert.optionalBuffer * assert.optionalFunc * assert.optionalNumber * assert.optionalObject * assert.optionalString * assert.optionalArrayOfBool * assert.optionalArrayOfFunc * assert.optionalArrayOfNumber * assert.optionalArrayOfObject * assert.optionalArrayOfString * assert.AssertionError * assert.fail * assert.ok * assert.equal * assert.notEqual * assert.deepEqual * assert.notDeepEqual * assert.strictEqual * assert.notStrictEqual * assert.throws * assert.doesNotThrow * assert.ifError # Installation npm install assert-plus ## License The MIT License (MIT) Copyright (c) 2012 Mark Cavage Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ## Bugs See ."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/isstream/LICENSE.md","tags":[],"body":"The MIT License (MIT) ===================== Copyright (c) 2015 Rod Vagg --------------------------- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/isstream/README.md","tags":[],"body":"# isStream [![Build Status](https://secure.travis-ci.org/rvagg/isstream.png)](http://travis-ci.org/rvagg/isstream) **Test if an object is a `Stream`** [![NPM](https://nodei.co/npm/isstream.svg)](https://nodei.co/npm/isstream/) The missing `Stream.isStream(obj)`: determine if an object is standard Node.js `Stream`. Works for Node-core `Stream` objects (for 0.8, 0.10, 0.11, and in theory, older and newer versions) and all versions of **[readable-stream](https://github.com/isaacs/readable-stream)**. ## Usage: ```js var isStream = require('isstream') var Stream = require('stream') isStream(new Stream()) // true isStream({}) // false isStream(new Stream.Readable()) // true isStream(new Stream.Writable()) // true isStream(new Stream.Duplex()) // true isStream(new Stream.Transform()) // true isStream(new Stream.PassThrough()) // true ``` ## But wait! There's more! You can also test for `isReadable(obj)`, `isWritable(obj)` and `isDuplex(obj)` to test for implementations of Streams2 (and Streams3) base classes. ```js var isReadable = require('isstream').isReadable var isWritable = require('isstream').isWritable var isDuplex = require('isstream').isDuplex var Stream = require('stream') isReadable(new Stream()) // false isWritable(new Stream()) // false isDuplex(new Stream()) // false isReadable(new Stream.Readable()) // true isReadable(new Stream.Writable()) // false isReadable(new Stream.Duplex()) // true isReadable(new Stream.Transform()) // true isReadable(new Stream.PassThrough()) // true isWritable(new Stream.Readable()) // false isWritable(new Stream.Writable()) // true isWritable(new Stream.Duplex()) // true isWritable(new Stream.Transform()) // true isWritable(new Stream.PassThrough()) // true isDuplex(new Stream.Readable()) // false isDuplex(new Stream.Writable()) // false isDuplex(new Stream.Duplex()) // true isDuplex(new Stream.Transform()) // true isDuplex(new Stream.PassThrough()) // true ``` *Reminder: when implementing your own streams, please [use **readable-stream** rather than core streams](http://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html).* ## License **isStream** is Copyright (c) 2015 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licenced under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE.md file for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/json-stringify-safe/CHANGELOG.md","tags":[],"body":"## Unreleased - Fixes stringify to only take ancestors into account when checking circularity. It previously assumed every visited object was circular which led to [false positives][issue9]. Uses the tiny serializer I wrote for [Must.js][must] a year and a half ago. - Fixes calling the `replacer` function in the proper context (`thisArg`). - Fixes calling the `cycleReplacer` function in the proper context (`thisArg`). - Speeds serializing by a factor of Big-O(h-my-god-it-linearly-searched-every-object) it had ever seen. Searching only the ancestors for a circular references speeds up things considerably. [must]: https://github.com/moll/js-must [issue9]: https://github.com/isaacs/json-stringify-safe/issues/9"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/json-stringify-safe/README.md","tags":[],"body":"# json-stringify-safe Like JSON.stringify, but doesn't throw on circular references. ## Usage Takes the same arguments as `JSON.stringify`. ```javascript var stringify = require('json-stringify-safe'); var circularObj = {}; circularObj.circularRef = circularObj; circularObj.list = [ circularObj, circularObj ]; console.log(stringify(circularObj, null, 2)); ``` Output: ```json { \"circularRef\": \"[Circular]\", \"list\": [ \"[Circular]\", \"[Circular]\" ] } ``` ## Details ``` stringify(obj, serializer, indent, decycler) ``` The first three arguments are the same as to JSON.stringify. The last is an argument that's only used when the object has been seen already. The default `decycler` function returns the string `'[Circular]'`. If, for example, you pass in `function(k,v){}` (return nothing) then it will prune cycles. If you pass in `function(k,v){ return {foo: 'bar'}}`, then cyclical objects will always be represented as `{\"foo\":\"bar\"}` in the result. ``` stringify.getSerialize(serializer, decycler) ``` Returns a serializer that can be used elsewhere. This is the actual function that's passed to JSON.stringify. **Note** that the function returned from `getSerialize` is stateful for now, so do **not** use it more than once."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/mime-types/HISTORY.md","tags":[],"body":"2.1.11 / 2016-05-01 =================== * deps: mime-db@~1.23.0 - Add new mime types 2.1.10 / 2016-02-15 =================== * deps: mime-db@~1.22.0 - Add new mime types - Fix extension of `application/dash+xml` - Update primary extension for `audio/mp4` 2.1.9 / 2016-01-06 ================== * deps: mime-db@~1.21.0 - Add new mime types 2.1.8 / 2015-11-30 ================== * deps: mime-db@~1.20.0 - Add new mime types 2.1.7 / 2015-09-20 ================== * deps: mime-db@~1.19.0 - Add new mime types 2.1.6 / 2015-09-03 ================== * deps: mime-db@~1.18.0 - Add new mime types 2.1.5 / 2015-08-20 ================== * deps: mime-db@~1.17.0 - Add new mime types 2.1.4 / 2015-07-30 ================== * deps: mime-db@~1.16.0 - Add new mime types 2.1.3 / 2015-07-13 ================== * deps: mime-db@~1.15.0 - Add new mime types 2.1.2 / 2015-06-25 ================== * deps: mime-db@~1.14.0 - Add new mime types 2.1.1 / 2015-06-08 ================== * perf: fix deopt during mapping 2.1.0 / 2015-06-07 ================== * Fix incorrectly treating extension-less file name as extension - i.e. `'path/to/json'` will no longer return `application/json` * Fix `.charset(type)` to accept parameters * Fix `.charset(type)` to match case-insensitive * Improve generation of extension to MIME mapping * Refactor internals for readability and no argument reassignment * Prefer `application/*` MIME types from the same source * Prefer any type over `application/octet-stream` * deps: mime-db@~1.13.0 - Add nginx as a source - Add new mime types 2.0.14 / 2015-06-06 =================== * deps: mime-db@~1.12.0 - Add new mime types 2.0.13 / 2015-05-31 =================== * deps: mime-db@~1.11.0 - Add new mime types 2.0.12 / 2015-05-19 =================== * deps: mime-db@~1.10.0 - Add new mime types 2.0.11 / 2015-05-05 =================== * deps: mime-db@~1.9.1 - Add new mime types 2.0.10 / 2015-03-13 =================== * deps: mime-db@~1.8.0 - Add new mime types 2.0.9 / 2015-02-09 ================== * deps: mime-db@~1.7.0 - Add new mime types - Community extensions ownership transferred from `node-mime` 2.0.8 / 2015-01-29 ================== * deps: mime-db@~1.6.0 - Add new mime types 2.0.7 / 2014-12-30 ================== * deps: mime-db@~1.5.0 - Add new mime types - Fix various invalid MIME type entries 2.0.6 / 2014-12-30 ================== * deps: mime-db@~1.4.0 - Add new mime types - Fix various invalid MIME type entries - Remove example template MIME types 2.0.5 / 2014-12-29 ================== * deps: mime-db@~1.3.1 - Fix missing extensions 2.0.4 / 2014-12-10 ================== * deps: mime-db@~1.3.0 - Add new mime types 2.0.3 / 2014-11-09 ================== * deps: mime-db@~1.2.0 - Add new mime types 2.0.2 / 2014-09-28 ================== * deps: mime-db@~1.1.0 - Add new mime types - Add additional compressible - Update charsets 2.0.1 / 2014-09-07 ================== * Support Node.js 0.6 2.0.0 / 2014-09-02 ================== * Use `mime-db` * Remove `.define()` 1.0.2 / 2014-08-04 ================== * Set charset=utf-8 for `text/javascript` 1.0.1 / 2014-06-24 ================== * Add `text/jsx` type 1.0.0 / 2014-05-12 ================== * Return `false` for unknown types * Set charset=utf-8 for `application/json` 0.1.0 / 2014-05-02 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/mime-types/README.md","tags":[],"body":"# mime-types [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] The ultimate javascript content-type utility. Similar to [node-mime](https://github.com/broofa/node-mime), except: - __No fallbacks.__ Instead of naively returning the first available type, `mime-types` simply returns `false`, so do `var type = mime.lookup('unrecognized') || 'application/octet-stream'`. - No `new Mime()` business, so you could do `var lookup = require('mime-types').lookup`. - Additional mime types are added such as jade and stylus via [mime-db](https://github.com/jshttp/mime-db) - No `.define()` functionality Otherwise, the API is compatible. ## Install ```sh $ npm install mime-types ``` ## Adding Types All mime types are based on [mime-db](https://github.com/jshttp/mime-db), so open a PR there if you'd like to add mime types. ## API ```js var mime = require('mime-types') ``` All functions return `false` if input is invalid or not found. ### mime.lookup(path) Lookup the content-type associated with a file. ```js mime.lookup('json') // 'application/json' mime.lookup('.md') // 'text/x-markdown' mime.lookup('file.html') // 'text/html' mime.lookup('folder/file.js') // 'application/javascript' mime.lookup('folder/.htaccess') // false mime.lookup('cats') // false ``` ### mime.contentType(type) Create a full content-type header given a content-type or extension. ```js mime.contentType('markdown') // 'text/x-markdown; charset=utf-8' mime.contentType('file.json') // 'application/json; charset=utf-8' // from a full path mime.contentType(path.extname('/path/to/file.json')) // 'application/json; charset=utf-8' ``` ### mime.extension(type) Get the default extension for a content-type. ```js mime.extension('application/octet-stream') // 'bin' ``` ### mime.charset(type) Lookup the implied default charset of a content-type. ```js mime.charset('text/x-markdown') // 'UTF-8' ``` ### var type = mime.types[extension] A map of content-types by extension. ### [extensions...] = mime.extensions[type] A map of extensions by content-type. ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/mime-types.svg [npm-url]: https://npmjs.org/package/mime-types [node-version-image]: https://img.shields.io/node/v/mime-types.svg [node-version-url]: https://nodejs.org/en/download/ [travis-image]: https://img.shields.io/travis/jshttp/mime-types/master.svg [travis-url]: https://travis-ci.org/jshttp/mime-types [coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-types/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/mime-types [downloads-image]: https://img.shields.io/npm/dm/mime-types.svg [downloads-url]: https://npmjs.org/package/mime-types"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/mime-types/node_modules/mime-db/HISTORY.md","tags":[],"body":"1.23.0 / 2016-05-01 =================== * Add `application/efi` * Add `application/vnd.3gpp.sms+xml` * Add `application/vnd.3lightssoftware.imagescal` * Add `application/vnd.coreos.ignition+json` * Add `application/vnd.desmume.movie` * Add `application/vnd.onepager` * Add `application/vnd.vel+json` * Add `text/prs.prop.logic` * Add `video/encaprtp` * Add `video/h265` * Add `video/iso.segment` * Add `video/raptorfec` * Add `video/rtploopback` * Add `video/vnd.radgamettools.bink` * Add `video/vnd.radgamettools.smacker` * Add `video/vp8` * Add extension `.3gpp` to `audio/3gpp` 1.22.0 / 2016-02-15 =================== * Add `application/ppsp-tracker+json` * Add `application/problem+json` * Add `application/problem+xml` * Add `application/vnd.hdt` * Add `application/vnd.ms-printschematicket+xml` * Add `model/vnd.rosette.annotated-data-model` * Add `text/slim` * Add extension `.rng` to `application/xml` * Fix extension of `application/dash+xml` to be `.mpd` * Update primary extension to `.m4a` for `audio/mp4` 1.21.0 / 2016-01-06 =================== * Add `application/emergencycalldata.comment+xml` * Add `application/emergencycalldata.deviceinfo+xml` * Add `application/emergencycalldata.providerinfo+xml` * Add `application/emergencycalldata.serviceinfo+xml` * Add `application/emergencycalldata.subscriberinfo+xml` * Add `application/vnd.filmit.zfc` * Add `application/vnd.google-apps.document` * Add `application/vnd.google-apps.presentation` * Add `application/vnd.google-apps.spreadsheet` * Add `application/vnd.mapbox-vector-tile` * Add `application/vnd.ms-printdevicecapabilities+xml` * Add `application/vnd.ms-windows.devicepairing` * Add `application/vnd.ms-windows.nwprinting.oob` * Add `application/vnd.tml` * Add `audio/evs` 1.20.0 / 2015-11-10 =================== * Add `application/cdni` * Add `application/csvm+json` * Add `application/rfc+xml` * Add `application/vnd.3gpp.access-transfer-events+xml` * Add `application/vnd.3gpp.srvcc-ext+xml` * Add `application/vnd.ms-windows.wsd.oob` * Add `application/vnd.oxli.countgraph` * Add `application/vnd.pagerduty+json` * Add `text/x-suse-ymp` 1.19.0 / 2015-09-17 =================== * Add `application/vnd.3gpp-prose-pc3ch+xml` * Add `application/vnd.3gpp.srvcc-info+xml` * Add `application/vnd.apple.pkpass` * Add `application/vnd.drive+json` 1.18.0 / 2015-09-03 =================== * Add `application/pkcs12` * Add `application/vnd.3gpp-prose+xml` * Add `application/vnd.3gpp.mid-call+xml` * Add `application/vnd.3gpp.state-and-event-info+xml` * Add `application/vnd.anki` * Add `application/vnd.firemonkeys.cloudcell` * Add `application/vnd.openblox.game+xml` * Add `application/vnd.openblox.game-binary` 1.17.0 / 2015-08-13 =================== * Add `application/x-msdos-program` * Add `audio/g711-0` * Add `image/vnd.mozilla.apng` * Add extension `.exe` to `application/x-msdos-program` 1.16.0 / 2015-07-29 =================== * Add `application/vnd.uri-map` 1.15.0 / 2015-07-13 =================== * Add `application/x-httpd-php` 1.14.0 / 2015-06-25 =================== * Add `application/scim+json` * Add `application/vnd.3gpp.ussd+xml` * Add `application/vnd.biopax.rdf+xml` * Add `text/x-processing` 1.13.0 / 2015-06-07 =================== * Add nginx as a source * Add `application/x-cocoa` * Add `application/x-java-archive-diff` * Add `application/x-makeself` * Add `application/x-perl` * Add `application/x-pilot` * Add `application/x-redhat-package-manager` * Add `application/x-sea` * Add `audio/x-m4a` * Add `audio/x-realaudio` * Add `image/x-jng` * Add `text/mathml` 1.12.0 / 2015-06-05 =================== * Add `application/bdoc` * Add `application/vnd.hyperdrive+json` * Add `application/x-bdoc` * Add extension `.rtf` to `text/rtf` 1.11.0 / 2015-05-31 =================== * Add `audio/wav` * Add `audio/wave` * Add extension `.litcoffee` to `text/coffeescript` * Add extension `.sfd-hdstx` to `application/vnd.hydrostatix.sof-data` * Add extension `.n-gage` to `application/vnd.nokia.n-gage.symbian.install` 1.10.0 / 2015-05-19 =================== * Add `application/vnd.balsamiq.bmpr` * Add `application/vnd.microsoft.portable-executable` * Add `application/x-ns-proxy-autoconfig` 1.9.1 / 2015-04-19 ================== * Remove `.json` extension from `application/manifest+json` - This is causing bugs downstream 1.9.0 / 2015-04-19 ================== * Add `application/manifest+json` * Add `application/vnd.micro+json` * Add `image/vnd.zbrush.pcx` * Add `image/x-ms-bmp` 1.8.0 / 2015-03-13 ================== * Add `application/vnd.citationstyles.style+xml` * Add `application/vnd.fastcopy-disk-image` * Add `application/vnd.gov.sk.xmldatacontainer+xml` * Add extension `.jsonld` to `application/ld+json` 1.7.0 / 2015-02-08 ================== * Add `application/vnd.gerber` * Add `application/vnd.msa-disk-image` 1.6.1 / 2015-02-05 ================== * Community extensions ownership transferred from `node-mime` 1.6.0 / 2015-01-29 ================== * Add `application/jose` * Add `application/jose+json` * Add `application/json-seq` * Add `application/jwk+json` * Add `application/jwk-set+json` * Add `application/jwt` * Add `application/rdap+json` * Add `application/vnd.gov.sk.e-form+xml` * Add `application/vnd.ims.imsccv1p3` 1.5.0 / 2014-12-30 ================== * Add `application/vnd.oracle.resource+json` * Fix various invalid MIME type entries - `application/mbox+xml` - `application/oscp-response` - `application/vwg-multiplexed` - `audio/g721` 1.4.0 / 2014-12-21 ================== * Add `application/vnd.ims.imsccv1p2` * Fix various invalid MIME type entries - `application/vnd-acucobol` - `application/vnd-curl` - `application/vnd-dart` - `application/vnd-dxr` - `application/vnd-fdf` - `application/vnd-mif` - `application/vnd-sema` - `application/vnd-wap-wmlc` - `application/vnd.adobe.flash-movie` - `application/vnd.dece-zip` - `application/vnd.dvb_service` - `application/vnd.micrografx-igx` - `application/vnd.sealed-doc` - `application/vnd.sealed-eml` - `application/vnd.sealed-mht` - `application/vnd.sealed-ppt` - `application/vnd.sealed-tiff` - `application/vnd.sealed-xls` - `application/vnd.sealedmedia.softseal-html` - `application/vnd.sealedmedia.softseal-pdf` - `application/vnd.wap-slc` - `application/vnd.wap-wbxml` - `audio/vnd.sealedmedia.softseal-mpeg` - `image/vnd-djvu` - `image/vnd-svf` - `image/vnd-wap-wbmp` - `image/vnd.sealed-png` - `image/vnd.sealedmedia.softseal-gif` - `image/vnd.sealedmedia.softseal-jpg` - `model/vnd-dwf` - `model/vnd.parasolid.transmit-binary` - `model/vnd.parasolid.transmit-text` - `text/vnd-a` - `text/vnd-curl` - `text/vnd.wap-wml` * Remove example template MIME types - `application/example` - `audio/example` - `image/example` - `message/example` - `model/example` - `multipart/example` - `text/example` - `video/example` 1.3.1 / 2014-12-16 ================== * Fix missing extensions - `application/json5` - `text/hjson` 1.3.0 / 2014-12-07 ================== * Add `application/a2l` * Add `application/aml` * Add `application/atfx` * Add `application/atxml` * Add `application/cdfx+xml` * Add `application/dii` * Add `application/json5` * Add `application/lxf` * Add `application/mf4` * Add `application/vnd.apache.thrift.compact` * Add `application/vnd.apache.thrift.json` * Add `application/vnd.coffeescript` * Add `application/vnd.enphase.envoy` * Add `application/vnd.ims.imsccv1p1` * Add `text/csv-schema` * Add `text/hjson` * Add `text/markdown` * Add `text/yaml` 1.2.0 / 2014-11-09 ================== * Add `application/cea` * Add `application/dit` * Add `application/vnd.gov.sk.e-form+zip` * Add `application/vnd.tmd.mediaflex.api+xml` * Type `application/epub+zip` is now IANA-registered 1.1.2 / 2014-10-23 ================== * Rebuild database for `application/x-www-form-urlencoded` change 1.1.1 / 2014-10-20 ================== * Mark `application/x-www-form-urlencoded` as compressible. 1.1.0 / 2014-09-28 ================== * Add `application/font-woff2` 1.0.3 / 2014-09-25 ================== * Fix engine requirement in package 1.0.2 / 2014-09-25 ================== * Add `application/coap-group+json` * Add `application/dcd` * Add `application/vnd.apache.thrift.binary` * Add `image/vnd.tencent.tap` * Mark all JSON-derived types as compressible * Update `text/vtt` data 1.0.1 / 2014-08-30 ================== * Fix extension ordering 1.0.0 / 2014-08-30 ================== * Add `application/atf` * Add `application/merge-patch+json` * Add `multipart/x-mixed-replace` * Add `source: 'apache'` metadata * Add `source: 'iana'` metadata * Remove badly-assumed charset data"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/mime-types/node_modules/mime-db/README.md","tags":[],"body":"# mime-db [![NPM Version][npm-version-image]][npm-url] [![NPM Downloads][npm-downloads-image]][npm-url] [![Node.js Version][node-image]][node-url] [![Build Status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url] This is a database of all mime types. It consists of a single, public JSON file and does not include any logic, allowing it to remain as un-opinionated as possible with an API. It aggregates data from the following sources: - http://www.iana.org/assignments/media-types/media-types.xhtml - http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types - http://hg.nginx.org/nginx/raw-file/default/conf/mime.types ## Installation ```bash npm install mime-db ``` ### Database Download If you're crazy enough to use this in the browser, you can just grab the JSON file using [RawGit](https://rawgit.com/). It is recommended to replace `master` with [a release tag](https://github.com/jshttp/mime-db/tags) as the JSON format may change in the future. ``` https://cdn.rawgit.com/jshttp/mime-db/master/db.json ``` ## Usage ```js var db = require('mime-db'); // grab data on .js files var data = db['application/javascript']; ``` ## Data Structure The JSON file is a map lookup for lowercased mime types. Each mime type has the following properties: - `.source` - where the mime type is defined. If not set, it's probably a custom media type. - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types) - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml) - `nginx` - [nginx media types](http://hg.nginx.org/nginx/raw-file/default/conf/mime.types) - `.extensions[]` - known extensions associated with this mime type. - `.compressible` - whether a file of this type can be gzipped. - `.charset` - the default charset associated with this type, if any. If unknown, every property could be `undefined`. ## Contributing To edit the database, only make PRs against `src/custom.json` or `src/custom-suffix.json`. To update the build, run `npm run build`. ## Adding Custom Media Types The best way to get new media types included in this library is to register them with the IANA. The community registration procedure is outlined in [RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types registered with the IANA are automatically pulled into this library. [npm-version-image]: https://img.shields.io/npm/v/mime-db.svg [npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg [npm-url]: https://npmjs.org/package/mime-db [travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg [travis-url]: https://travis-ci.org/jshttp/mime-db [coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master [node-image]: https://img.shields.io/node/v/mime-db.svg [node-url]: http://nodejs.org/download/"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/node-uuid/LICENSE.md","tags":[],"body":"The MIT License (MIT) Copyright (c) 2010-2012 Robert Kieffer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/node-uuid/README.md","tags":[],"body":"# node-uuid Simple, fast generation of [RFC4122](http://www.ietf.org/rfc/rfc4122.txt) UUIDS. Features: * Generate RFC4122 version 1 or version 4 UUIDs * Runs in node.js and all browsers. * Registered as a [ComponentJS](https://github.com/component/component) [component](https://github.com/component/component/wiki/Components) ('broofa/node-uuid'). * Cryptographically strong random # generation * `crypto.randomBytes(n)` in node.js * `window.crypto.getRandomValues(ta)` in [supported browsers](https://developer.mozilla.org/en-US/docs/Web/API/RandomSource/getRandomValues#Browser_Compatibility) * 1.1K minified and gzip'ed (Want something smaller? Check this [crazy shit](https://gist.github.com/982883) out! ) * [Annotated source code](http://broofa.github.com/node-uuid/docs/uuid.html) * Comes with a Command Line Interface for generating uuids on the command line ## Getting Started Install it in your browser: ```html ``` Or in node.js: ``` npm install node-uuid ``` ```javascript var uuid = require('node-uuid'); ``` Then create some ids ... ```javascript // Generate a v1 (time-based) id uuid.v1(); // -> '6c84fb90-12c4-11e1-840d-7b25c5ee775a' // Generate a v4 (random) id uuid.v4(); // -> '110ec58a-a0f2-4ac4-8393-c866d813b8d1' ``` ## API ### uuid.v1([`options` [, `buffer` [, `offset`]]]) Generate and return a RFC4122 v1 (timestamp-based) UUID. * `options` - (Object) Optional uuid state to apply. Properties may include: * `node` - (Array) Node id as Array of 6 bytes (per 4.1.6). Default: Randomly generated ID. See note 1. * `clockseq` - (Number between 0 - 0x3fff) RFC clock sequence. Default: An internally maintained clockseq is used. * `msecs` - (Number | Date) Time in milliseconds since unix Epoch. Default: The current time is used. * `nsecs` - (Number between 0-9999) additional time, in 100-nanosecond units. Ignored if `msecs` is unspecified. Default: internal uuid counter is used, as per 4.2.1.2. * `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written. * `offset` - (Number) Starting index in `buffer` at which to begin writing. Returns `buffer`, if specified, otherwise the string form of the UUID Notes: 1. The randomly generated node id is only guaranteed to stay constant for the lifetime of the current JS runtime. (Future versions of this module may use persistent storage mechanisms to extend this guarantee.) Example: Generate string UUID with fully-specified options ```javascript uuid.v1({ node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab], clockseq: 0x1234, msecs: new Date('2011-11-01').getTime(), nsecs: 5678 }); // -> \"710b962e-041c-11e1-9234-0123456789ab\" ``` Example: In-place generation of two binary IDs ```javascript // Generate two ids in an array var arr = new Array(32); // -> [] uuid.v1(null, arr, 0); // -> [02 a2 ce 90 14 32 11 e1 85 58 0b 48 8e 4f c1 15] uuid.v1(null, arr, 16); // -> [02 a2 ce 90 14 32 11 e1 85 58 0b 48 8e 4f c1 15 02 a3 1c b0 14 32 11 e1 85 58 0b 48 8e 4f c1 15] // Optionally use uuid.unparse() to get stringify the ids uuid.unparse(buffer); // -> '02a2ce90-1432-11e1-8558-0b488e4fc115' uuid.unparse(buffer, 16) // -> '02a31cb0-1432-11e1-8558-0b488e4fc115' ``` ### uuid.v4([`options` [, `buffer` [, `offset`]]]) Generate and return a RFC4122 v4 UUID. * `options` - (Object) Optional uuid state to apply. Properties may include: * `random` - (Number[16]) Array of 16 numbers (0-255) to use in place of randomly generated values * `rng` - (Function) Random # generator to use. Set to one of the built-in generators - `uuid.mathRNG` (all platforms), `uuid.nodeRNG` (node.js only), `uuid.whatwgRNG` (WebKit only) - or a custom function that returns an array[16] of byte values. * `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written. * `offset` - (Number) Starting index in `buffer` at which to begin writing. Returns `buffer`, if specified, otherwise the string form of the UUID Example: Generate string UUID with fully-specified options ```javascript uuid.v4({ random: [ 0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea, 0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36 ] }); // -> \"109156be-c4fb-41ea-b1b4-efe1671c5836\" ``` Example: Generate two IDs in a single buffer ```javascript var buffer = new Array(32); // (or 'new Buffer' in node.js) uuid.v4(null, buffer, 0); uuid.v4(null, buffer, 16); ``` ### uuid.parse(id[, buffer[, offset]]) ### uuid.unparse(buffer[, offset]) Parse and unparse UUIDs * `id` - (String) UUID(-like) string * `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written. Default: A new Array or Buffer is used * `offset` - (Number) Starting index in `buffer` at which to begin writing. Default: 0 Example parsing and unparsing a UUID string ```javascript var bytes = uuid.parse('797ff043-11eb-11e1-80d6-510998755d10'); // -> var string = uuid.unparse(bytes); // -> '797ff043-11eb-11e1-80d6-510998755d10' ``` ### uuid.noConflict() (Browsers only) Set `uuid` property back to it's previous value. Returns the node-uuid object. Example: ```javascript var myUuid = uuid.noConflict(); myUuid.v1(); // -> '6c84fb90-12c4-11e1-840d-7b25c5ee775a' ``` ## Deprecated APIs Support for the following v1.2 APIs is available in v1.3, but is deprecated and will be removed in the next major version. ### uuid([format [, buffer [, offset]]]) uuid() has become uuid.v4(), and the `format` argument is now implicit in the `buffer` argument. (i.e. if you specify a buffer, the format is assumed to be binary). ### uuid.BufferClass The class of container created when generating binary uuid data if no buffer argument is specified. This is expected to go away, with no replacement API. ## Command Line Interface To use the executable, it's probably best to install this library globally. `npm install -g node-uuid` Usage: ``` USAGE: uuid [version] [options] options: --help Display this message and exit ``` `version` must be an RFC4122 version that is supported by this library, which is currently version 1 and version 4 (denoted by \"v1\" and \"v4\", respectively). `version` defaults to version 4 when not supplied. ### Examples ``` > uuid 3a91f950-dec8-4688-ba14-5b7bbfc7a563 ``` ``` > uuid v1 9d0b43e0-7696-11e3-964b-250efa37a98e ``` ``` > uuid v4 6790ac7c-24ac-4f98-8464-42f6d98a53ae ``` ## Testing In node.js ``` npm test ``` In Browser ``` open test/test.html ``` ### Benchmarking Requires node.js ``` npm install uuid uuid-js node benchmark/benchmark.js ``` For a more complete discussion of node-uuid performance, please see the `benchmark/README.md` file, and the [benchmark wiki](https://github.com/broofa/node-uuid/wiki/Benchmark) For browser performance [checkout the JSPerf tests](http://jsperf.com/node-uuid-performance). ## Release notes ### 1.4.6 * Properly detect node crypto and whatwg crypto * Workaround phantomjs/browserify bug * Explicit check for `window` rather implicit this-global * Issue warning if Math.random() is being used * \"use strict\"; * A few jshint / stylistic updates (=== and such) ### 1.4.0 * Improved module context detection * Removed public RNG functions ### 1.3.2 * Improve tests and handling of v1() options (Issue #24) * Expose RNG option to allow for perf testing with different generators ### 1.3.0 * Support for version 1 ids, thanks to [@ctavan](https://github.com/ctavan)! * Support for node.js crypto API * De-emphasizing performance in favor of a) cryptographic quality PRNGs where available and b) more manageable code"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/node-uuid/benchmark/README.md","tags":[],"body":"# node-uuid Benchmarks ### Results To see the results of our benchmarks visit https://github.com/broofa/node-uuid/wiki/Benchmark ### Run them yourself node-uuid comes with some benchmarks to measure performance of generating UUIDs. These can be run using node.js. node-uuid is being benchmarked against some other uuid modules, that are available through npm namely `uuid` and `uuid-js`. To prepare and run the benchmark issue; ``` npm install uuid uuid-js node benchmark/benchmark.js ``` You'll see an output like this one: ``` # v4 nodeuuid.v4(): 854700 uuids/second nodeuuid.v4('binary'): 788643 uuids/second nodeuuid.v4('binary', buffer): 1336898 uuids/second uuid(): 479386 uuids/second uuid('binary'): 582072 uuids/second uuidjs.create(4): 312304 uuids/second # v1 nodeuuid.v1(): 938086 uuids/second nodeuuid.v1('binary'): 683060 uuids/second nodeuuid.v1('binary', buffer): 1644736 uuids/second uuidjs.create(1): 190621 uuids/second ``` * The `uuid()` entries are for Nikhil Marathe's [uuid module](https://bitbucket.org/nikhilm/uuidjs) which is a wrapper around the native libuuid library. * The `uuidjs()` entries are for Patrick Negri's [uuid-js module](https://github.com/pnegri/uuid-js) which is a pure javascript implementation based on [UUID.js](https://github.com/LiosK/UUID.js) by LiosK. If you want to get more reliable results you can run the benchmark multiple times and write the output into a log file: ``` for i in {0..9}; do node benchmark/benchmark.js >> benchmark/bench_0.4.12.log; done; ``` If you're interested in how performance varies between different node versions, you can issue the above command multiple times. You can then use the shell script `bench.sh` provided in this directory to calculate the averages over all benchmark runs and draw a nice plot: ``` (cd benchmark/ && ./bench.sh) ``` This assumes you have [gnuplot](http://www.gnuplot.info/) and [ImageMagick](http://www.imagemagick.org/) installed. You'll find a nice `bench.png` graph in the `benchmark/` directory then."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/node-uuid/test/test.html","tags":[],"body":""},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/oauth-sign/README.md","tags":[],"body":"oauth-sign ========== OAuth 1 signing. Formerly a vendor lib in mikeal/request, now a standalone module."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/qs/CHANGELOG.md","tags":[],"body":"## [**5.1.0**](https://github.com/hapijs/qs/issues?milestone=29&state=open) - [**#117**](https://github.com/hapijs/qs/issues/117) make URI encoding stringified results optional - [**#106**](https://github.com/hapijs/qs/issues/106) Add flag `skipNulls` to optionally skip null values in stringify ## [**5.0.0**](https://github.com/hapijs/qs/issues?milestone=28&state=closed) - [**#114**](https://github.com/hapijs/qs/issues/114) default allowDots to false - [**#100**](https://github.com/hapijs/qs/issues/100) include dist to npm ## [**4.0.0**](https://github.com/hapijs/qs/issues?milestone=26&state=closed) - [**#98**](https://github.com/hapijs/qs/issues/98) make returning plain objects and allowing prototype overwriting properties optional ## [**3.1.0**](https://github.com/hapijs/qs/issues?milestone=24&state=closed) - [**#89**](https://github.com/hapijs/qs/issues/89) Add option to disable \"Transform dot notation to bracket notation\" ## [**3.0.0**](https://github.com/hapijs/qs/issues?milestone=23&state=closed) - [**#80**](https://github.com/hapijs/qs/issues/80) qs.parse silently drops properties - [**#77**](https://github.com/hapijs/qs/issues/77) Perf boost - [**#60**](https://github.com/hapijs/qs/issues/60) Add explicit option to disable array parsing - [**#74**](https://github.com/hapijs/qs/issues/74) Bad parse when turning array into object - [**#81**](https://github.com/hapijs/qs/issues/81) Add a `filter` option - [**#68**](https://github.com/hapijs/qs/issues/68) Fixed issue with recursion and passing strings into objects. - [**#66**](https://github.com/hapijs/qs/issues/66) Add mixed array and object dot notation support Closes: #47 - [**#76**](https://github.com/hapijs/qs/issues/76) RFC 3986 - [**#85**](https://github.com/hapijs/qs/issues/85) No equal sign - [**#84**](https://github.com/hapijs/qs/issues/84) update license attribute ## [**2.4.1**](https://github.com/hapijs/qs/issues?milestone=20&state=closed) - [**#73**](https://github.com/hapijs/qs/issues/73) Property 'hasOwnProperty' of object # is not a function ## [**2.4.0**](https://github.com/hapijs/qs/issues?milestone=19&state=closed) - [**#70**](https://github.com/hapijs/qs/issues/70) Add arrayFormat option ## [**2.3.3**](https://github.com/hapijs/qs/issues?milestone=18&state=closed) - [**#59**](https://github.com/hapijs/qs/issues/59) make sure array indexes are >= 0, closes #57 - [**#58**](https://github.com/hapijs/qs/issues/58) make qs usable for browser loader ## [**2.3.2**](https://github.com/hapijs/qs/issues?milestone=17&state=closed) - [**#55**](https://github.com/hapijs/qs/issues/55) allow merging a string into an object ## [**2.3.1**](https://github.com/hapijs/qs/issues?milestone=16&state=closed) - [**#52**](https://github.com/hapijs/qs/issues/52) Return \"undefined\" and \"false\" instead of throwing \"TypeError\". ## [**2.3.0**](https://github.com/hapijs/qs/issues?milestone=15&state=closed) - [**#50**](https://github.com/hapijs/qs/issues/50) add option to omit array indices, closes #46 ## [**2.2.5**](https://github.com/hapijs/qs/issues?milestone=14&state=closed) - [**#39**](https://github.com/hapijs/qs/issues/39) Is there an alternative to Buffer.isBuffer? - [**#49**](https://github.com/hapijs/qs/issues/49) refactor utils.merge, fixes #45 - [**#41**](https://github.com/hapijs/qs/issues/41) avoid browserifying Buffer, for #39 ## [**2.2.4**](https://github.com/hapijs/qs/issues?milestone=13&state=closed) - [**#38**](https://github.com/hapijs/qs/issues/38) how to handle object keys beginning with a number ## [**2.2.3**](https://github.com/hapijs/qs/issues?milestone=12&state=closed) - [**#37**](https://github.com/hapijs/qs/issues/37) parser discards first empty value in array - [**#36**](https://github.com/hapijs/qs/issues/36) Update to lab 4.x ## [**2.2.2**](https://github.com/hapijs/qs/issues?milestone=11&state=closed) - [**#33**](https://github.com/hapijs/qs/issues/33) Error when plain object in a value - [**#34**](https://github.com/hapijs/qs/issues/34) use Object.prototype.hasOwnProperty.call instead of obj.hasOwnProperty - [**#24**](https://github.com/hapijs/qs/issues/24) Changelog? Semver? ## [**2.2.1**](https://github.com/hapijs/qs/issues?milestone=10&state=closed) - [**#32**](https://github.com/hapijs/qs/issues/32) account for circular references properly, closes #31 - [**#31**](https://github.com/hapijs/qs/issues/31) qs.parse stackoverflow on circular objects ## [**2.2.0**](https://github.com/hapijs/qs/issues?milestone=9&state=closed) - [**#26**](https://github.com/hapijs/qs/issues/26) Don't use Buffer global if it's not present - [**#30**](https://github.com/hapijs/qs/issues/30) Bug when merging non-object values into arrays - [**#29**](https://github.com/hapijs/qs/issues/29) Don't call Utils.clone at the top of Utils.merge - [**#23**](https://github.com/hapijs/qs/issues/23) Ability to not limit parameters? ## [**2.1.0**](https://github.com/hapijs/qs/issues?milestone=8&state=closed) - [**#22**](https://github.com/hapijs/qs/issues/22) Enable using a RegExp as delimiter ## [**2.0.0**](https://github.com/hapijs/qs/issues?milestone=7&state=closed) - [**#18**](https://github.com/hapijs/qs/issues/18) Why is there arrayLimit? - [**#20**](https://github.com/hapijs/qs/issues/20) Configurable parametersLimit - [**#21**](https://github.com/hapijs/qs/issues/21) make all limits optional, for #18, for #20 ## [**1.2.2**](https://github.com/hapijs/qs/issues?milestone=6&state=closed) - [**#19**](https://github.com/hapijs/qs/issues/19) Don't overwrite null values ## [**1.2.1**](https://github.com/hapijs/qs/issues?milestone=5&state=closed) - [**#16**](https://github.com/hapijs/qs/issues/16) ignore non-string delimiters - [**#15**](https://github.com/hapijs/qs/issues/15) Close code block ## [**1.2.0**](https://github.com/hapijs/qs/issues?milestone=4&state=closed) - [**#12**](https://github.com/hapijs/qs/issues/12) Add optional delim argument - [**#13**](https://github.com/hapijs/qs/issues/13) fix #11: flattened keys in array are now correctly parsed ## [**1.1.0**](https://github.com/hapijs/qs/issues?milestone=3&state=closed) - [**#7**](https://github.com/hapijs/qs/issues/7) Empty values of a POST array disappear after being submitted - [**#9**](https://github.com/hapijs/qs/issues/9) Should not omit equals signs (=) when value is null - [**#6**](https://github.com/hapijs/qs/issues/6) Minor grammar fix in README ## [**1.0.2**](https://github.com/hapijs/qs/issues?milestone=2&state=closed) - [**#5**](https://github.com/hapijs/qs/issues/5) array holes incorrectly copied into object on large index"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/qs/CONTRIBUTING.md","tags":[],"body":"Please view our [hapijs contributing guide](https://github.com/hapijs/hapi/blob/master/CONTRIBUTING.md)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/qs/README.md","tags":[],"body":"# qs A querystring parsing and stringifying library with some added security. [![Build Status](https://secure.travis-ci.org/hapijs/qs.svg)](http://travis-ci.org/hapijs/qs) Lead Maintainer: [Nathan LaFreniere](https://github.com/nlf) The **qs** module was originally created and maintained by [TJ Holowaychuk](https://github.com/visionmedia/node-querystring). ## Usage ```javascript var Qs = require('qs'); var obj = Qs.parse('a=c'); // { a: 'c' } var str = Qs.stringify(obj); // 'a=c' ``` ### Parsing Objects ```javascript Qs.parse(string, [options]); ``` **qs** allows you to create nested objects within your query strings, by surrounding the name of sub-keys with square brackets `[]`. For example, the string `'foo[bar]=baz'` converts to: ```javascript { foo: { bar: 'baz' } } ``` When using the `plainObjects` option the parsed value is returned as a plain object, created via `Object.create(null)` and as such you should be aware that prototype methods will not exist on it and a user may set those names to whatever value they like: ```javascript Qs.parse('a.hasOwnProperty=b', { plainObjects: true }); // { a: { hasOwnProperty: 'b' } } ``` By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use `plainObjects` as mentioned above, or set `allowPrototypes` to `true` which will allow user input to overwrite those properties. *WARNING* It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option. ```javascript Qs.parse('a.hasOwnProperty=b', { allowPrototypes: true }); // { a: { hasOwnProperty: 'b' } } ``` URI encoded strings work too: ```javascript Qs.parse('a%5Bb%5D=c'); // { a: { b: 'c' } } ``` You can also nest your objects, like `'foo[bar][baz]=foobarbaz'`: ```javascript { foo: { bar: { baz: 'foobarbaz' } } } ``` By default, when nesting objects **qs** will only parse up to 5 children deep. This means if you attempt to parse a string like `'a[b][c][d][e][f][g][h][i]=j'` your resulting object will be: ```javascript { a: { b: { c: { d: { e: { f: { '[g][h][i]': 'j' } } } } } } } ``` This depth can be overridden by passing a `depth` option to `Qs.parse(string, [options])`: ```javascript Qs.parse('a[b][c][d][e][f][g][h][i]=j', { depth: 1 }); // { a: { b: { '[c][d][e][f][g][h][i]': 'j' } } } ``` The depth limit helps mitigate abuse when **qs** is used to parse user input, and it is recommended to keep it a reasonably small number. For similar reasons, by default **qs** will only parse up to 1000 parameters. This can be overridden by passing a `parameterLimit` option: ```javascript Qs.parse('a=b&c=d', { parameterLimit: 1 }); // { a: 'b' } ``` An optional delimiter can also be passed: ```javascript Qs.parse('a=b;c=d', { delimiter: ';' }); // { a: 'b', c: 'd' } ``` Delimiters can be a regular expression too: ```javascript Qs.parse('a=b;c=d,e=f', { delimiter: /[;,]/ }); // { a: 'b', c: 'd', e: 'f' } ``` Option `allowDots` can be used to enable dot notation: ```javascript Qs.parse('a.b=c', { allowDots: true }); // { a: { b: 'c' } } ``` ### Parsing Arrays **qs** can also parse arrays using a similar `[]` notation: ```javascript Qs.parse('a[]=b&a[]=c'); // { a: ['b', 'c'] } ``` You may specify an index as well: ```javascript Qs.parse('a[1]=c&a[0]=b'); // { a: ['b', 'c'] } ``` Note that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number to create an array. When creating arrays with specific indices, **qs** will compact a sparse array to only the existing values preserving their order: ```javascript Qs.parse('a[1]=b&a[15]=c'); // { a: ['b', 'c'] } ``` Note that an empty string is also a value, and will be preserved: ```javascript Qs.parse('a[]=&a[]=b'); // { a: ['', 'b'] } Qs.parse('a[0]=b&a[1]=&a[2]=c'); // { a: ['b', '', 'c'] } ``` **qs** will also limit specifying indices in an array to a maximum index of `20`. Any array members with an index of greater than `20` will instead be converted to an object with the index as the key: ```javascript Qs.parse('a[100]=b'); // { a: { '100': 'b' } } ``` This limit can be overridden by passing an `arrayLimit` option: ```javascript Qs.parse('a[1]=b', { arrayLimit: 0 }); // { a: { '1': 'b' } } ``` To disable array parsing entirely, set `parseArrays` to `false`. ```javascript Qs.parse('a[]=b', { parseArrays: false }); // { a: { '0': 'b' } } ``` If you mix notations, **qs** will merge the two items into an object: ```javascript Qs.parse('a[0]=b&a[b]=c'); // { a: { '0': 'b', b: 'c' } } ``` You can also create arrays of objects: ```javascript Qs.parse('a[][b]=c'); // { a: [{ b: 'c' }] } ``` ### Stringifying ```javascript Qs.stringify(object, [options]); ``` When stringifying, **qs** by default URI encodes output. Objects are stringified as you would expect: ```javascript Qs.stringify({ a: 'b' }); // 'a=b' Qs.stringify({ a: { b: 'c' } }); // 'a%5Bb%5D=c' ``` This encoding can be disabled by setting the `encode` option to `false`: ```javascript Qs.stringify({ a: { b: 'c' } }, { encode: false }); // 'a[b]=c' ``` Examples beyond this point will be shown as though the output is not URI encoded for clarity. Please note that the return values in these cases *will* be URI encoded during real usage. When arrays are stringified, by default they are given explicit indices: ```javascript Qs.stringify({ a: ['b', 'c', 'd'] }); // 'a[0]=b&a[1]=c&a[2]=d' ``` You may override this by setting the `indices` option to `false`: ```javascript Qs.stringify({ a: ['b', 'c', 'd'] }, { indices: false }); // 'a=b&a=c&a=d' ``` You may use the `arrayFormat` option to specify the format of the output array ```javascript Qs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'indices' }) // 'a[0]=b&a[1]=c' Qs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'brackets' }) // 'a[]=b&a[]=c' Qs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'repeat' }) // 'a=b&a=c' ``` Empty strings and null values will omit the value, but the equals sign (=) remains in place: ```javascript Qs.stringify({ a: '' }); // 'a=' ``` Properties that are set to `undefined` will be omitted entirely: ```javascript Qs.stringify({ a: null, b: undefined }); // 'a=' ``` The delimiter may be overridden with stringify as well: ```javascript Qs.stringify({ a: 'b', c: 'd' }, { delimiter: ';' }); // 'a=b;c=d' ``` Finally, you can use the `filter` option to restrict which keys will be included in the stringified output. If you pass a function, it will be called for each key to obtain the replacement value. Otherwise, if you pass an array, it will be used to select properties and array indices for stringification: ```javascript function filterFunc(prefix, value) { if (prefix == 'b') { // Return an `undefined` value to omit a property. return; } if (prefix == 'e[f]') { return value.getTime(); } if (prefix == 'e[g][0]') { return value * 2; } return value; } Qs.stringify({ a: 'b', c: 'd', e: { f: new Date(123), g: [2] } }, { filter: filterFunc }) // 'a=b&c=d&e[f]=123&e[g][0]=4' Qs.stringify({ a: 'b', c: 'd', e: 'f' }, { filter: ['a', 'e'] }) // 'a=b&e=f' Qs.stringify({ a: ['b', 'c', 'd'], e: 'f' }, { filter: ['a', 0, 2] }) // 'a[0]=b&a[2]=d' ``` ### Handling of `null` values By default, `null` values are treated like empty strings: ```javascript Qs.stringify({ a: null, b: '' }); // 'a=&b=' ``` Parsing does not distinguish between parameters with and without equal signs. Both are converted to empty strings. ```javascript Qs.parse('a&b=') // { a: '', b: '' } ``` To distinguish between `null` values and empty strings use the `strictNullHandling` flag. In the result string the `null` values have no `=` sign: ```javascript Qs.stringify({ a: null, b: '' }, { strictNullHandling: true }); // 'a&b=' ``` To parse values without `=` back to `null` use the `strictNullHandling` flag: ```javascript Qs.parse('a&b=', { strictNullHandling: true }); // { a: null, b: '' } ``` To completely skip rendering keys with `null` values, use the `skipNulls` flag: ```javascript qs.stringify({ a: 'b', c: null}, { skipNulls: true }) // 'a=b' ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/stringstream/README.md","tags":[],"body":"# Decode streams into strings The Right Way(tm) ```javascript var fs = require('fs') var zlib = require('zlib') var strs = require('stringstream') var utf8Stream = fs.createReadStream('massiveLogFile.gz') .pipe(zlib.createGunzip()) .pipe(strs('utf8')) ``` No need to deal with `setEncoding()` weirdness, just compose streams like they were supposed to be! Handles input and output encoding: ```javascript // Stream from utf8 to hex to base64... Why not, ay. var hex64Stream = fs.createReadStream('myFile') .pipe(strs('utf8', 'hex')) .pipe(strs('hex', 'base64')) ``` Also deals with `base64` output correctly by aligning each emitted data chunk so that there are no dangling `=` characters: ```javascript var stream = fs.createReadStream('myFile').pipe(strs('base64')) var base64Str = '' stream.on('data', function(data) { base64Str += data }) stream.on('end', function() { console.log('My base64 encoded file is: ' + base64Str) // Wouldn't work with setEncoding() console.log('Original file is: ' + new Buffer(base64Str, 'base64')) }) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/tough-cookie/README.md","tags":[],"body":"[RFC6265](https://tools.ietf.org/html/rfc6265) Cookies and CookieJar for Node.js [![Build Status](https://travis-ci.org/SalesforceEng/tough-cookie.png?branch=master)](https://travis-ci.org/SalesforceEng/tough-cookie) [![NPM Stats](https://nodei.co/npm/tough-cookie.png?downloads=true&stars=true)](https://npmjs.org/package/tough-cookie) ![NPM Downloads](https://nodei.co/npm-dl/tough-cookie.png?months=9) # Synopsis ``` javascript var tough = require('tough-cookie'); var Cookie = tough.Cookie; var cookie = Cookie.parse(header); cookie.value = 'somethingdifferent'; header = cookie.toString(); var cookiejar = new tough.CookieJar(); cookiejar.setCookie(cookie, 'http://currentdomain.example.com/path', cb); // ... cookiejar.getCookies('http://example.com/otherpath',function(err,cookies) { res.headers['cookie'] = cookies.join('; '); }); ``` # Installation It's _so_ easy! `npm install tough-cookie` Why the name? NPM modules `cookie`, `cookies` and `cookiejar` were already taken. # API ## tough Functions on the module you get from `require('tough-cookie')`. All can be used as pure functions and don't need to be \"bound\". **Note**: prior to 1.0.x, several of these functions took a `strict` parameter. This has since been removed from the API as it was no longer necessary. ### `parseDate(string)` Parse a cookie date string into a `Date`. Parses according to RFC6265 Section 5.1.1, not `Date.parse()`. ### `formatDate(date)` Format a Date into a RFC1123 string (the RFC6265-recommended format). ### `canonicalDomain(str)` Transforms a domain-name into a canonical domain-name. The canonical domain-name is a trimmed, lowercased, stripped-of-leading-dot and optionally punycode-encoded domain-name (Section 5.1.2 of RFC6265). For the most part, this function is idempotent (can be run again on its output without ill effects). ### `domainMatch(str,domStr[,canonicalize=true])` Answers \"does this real domain match the domain in a cookie?\". The `str` is the \"current\" domain-name and the `domStr` is the \"cookie\" domain-name. Matches according to RFC6265 Section 5.1.3, but it helps to think of it as a \"suffix match\". The `canonicalize` parameter will run the other two paramters through `canonicalDomain` or not. ### `defaultPath(path)` Given a current request/response path, gives the Path apropriate for storing in a cookie. This is basically the \"directory\" of a \"file\" in the path, but is specified by Section 5.1.4 of the RFC. The `path` parameter MUST be _only_ the pathname part of a URI (i.e. excludes the hostname, query, fragment, etc.). This is the `.pathname` property of node's `uri.parse()` output. ### `pathMatch(reqPath,cookiePath)` Answers \"does the request-path path-match a given cookie-path?\" as per RFC6265 Section 5.1.4. Returns a boolean. This is essentially a prefix-match where `cookiePath` is a prefix of `reqPath`. ### `parse(cookieString[, options])` alias for `Cookie.parse(cookieString[, options])` ### `fromJSON(string)` alias for `Cookie.fromJSON(string)` ### `getPublicSuffix(hostname)` Returns the public suffix of this hostname. The public suffix is the shortest domain-name upon which a cookie can be set. Returns `null` if the hostname cannot have cookies set for it. For example: `www.example.com` and `www.subdomain.example.com` both have public suffix `example.com`. For further information, see http://publicsuffix.org/. This module derives its list from that site. ### `cookieCompare(a,b)` For use with `.sort()`, sorts a list of cookies into the recommended order given in the RFC (Section 5.4 step 2). The sort algorithm is, in order of precedence: * Longest `.path` * oldest `.creation` (which has a 1ms precision, same as `Date`) * lowest `.creationIndex` (to get beyond the 1ms precision) ``` javascript var cookies = [ /* unsorted array of Cookie objects */ ]; cookies = cookies.sort(cookieCompare); ``` **Note**: Since JavaScript's `Date` is limited to a 1ms precision, cookies within the same milisecond are entirely possible. This is especially true when using the `now` option to `.setCookie()`. The `.creationIndex` property is a per-process global counter, assigned during construction with `new Cookie()`. This preserves the spirit of the RFC sorting: older cookies go first. This works great for `MemoryCookieStore`, since `Set-Cookie` headers are parsed in order, but may not be so great for distributed systems. Sophisticated `Store`s may wish to set this to some other _logical clock_ such that if cookies A and B are created in the same millisecond, but cookie A is created before cookie B, then `A.creationIndex < B.creationIndex`. If you want to alter the global counter, which you probably _shouldn't_ do, it's stored in `Cookie.cookiesCreated`. ### `permuteDomain(domain)` Generates a list of all possible domains that `domainMatch()` the parameter. May be handy for implementing cookie stores. ### `permutePath(path)` Generates a list of all possible paths that `pathMatch()` the parameter. May be handy for implementing cookie stores. ## Cookie Exported via `tough.Cookie`. ### `Cookie.parse(cookieString[, options])` Parses a single Cookie or Set-Cookie HTTP header into a `Cookie` object. Returns `undefined` if the string can't be parsed. The options parameter is not required and currently has only one property: * _loose_ - boolean - if `true` enable parsing of key-less cookies like `=abc` and `=`, which are not RFC-compliant. If options is not an object, it is ignored, which means you can use `Array#map` with it. Here's how to process the Set-Cookie header(s) on a node HTTP/HTTPS response: ``` javascript if (res.headers['set-cookie'] instanceof Array) cookies = res.headers['set-cookie'].map(Cookie.parse); else cookies = [Cookie.parse(res.headers['set-cookie'])]; ``` ### Properties Cookie object properties: * _key_ - string - the name or key of the cookie (default \"\") * _value_ - string - the value of the cookie (default \"\") * _expires_ - `Date` - if set, the `Expires=` attribute of the cookie (defaults to the string `\"Infinity\"`). See `setExpires()` * _maxAge_ - seconds - if set, the `Max-Age=` attribute _in seconds_ of the cookie. May also be set to strings `\"Infinity\"` and `\"-Infinity\"` for non-expiry and immediate-expiry, respectively. See `setMaxAge()` * _domain_ - string - the `Domain=` attribute of the cookie * _path_ - string - the `Path=` of the cookie * _secure_ - boolean - the `Secure` cookie flag * _httpOnly_ - boolean - the `HttpOnly` cookie flag * _extensions_ - `Array` - any unrecognized cookie attributes as strings (even if equal-signs inside) * _creation_ - `Date` - when this cookie was constructed * _creationIndex_ - number - set at construction, used to provide greater sort precision (please see `cookieCompare(a,b)` for a full explanation) After a cookie has been passed through `CookieJar.setCookie()` it will have the following additional attributes: * _hostOnly_ - boolean - is this a host-only cookie (i.e. no Domain field was set, but was instead implied) * _pathIsDefault_ - boolean - if true, there was no Path field on the cookie and `defaultPath()` was used to derive one. * _creation_ - `Date` - **modified** from construction to when the cookie was added to the jar * _lastAccessed_ - `Date` - last time the cookie got accessed. Will affect cookie cleaning once implemented. Using `cookiejar.getCookies(...)` will update this attribute. ### `Cookie([{properties}])` Receives an options object that can contain any of the above Cookie properties, uses the default for unspecified properties. ### `.toString()` encode to a Set-Cookie header value. The Expires cookie field is set using `formatDate()`, but is omitted entirely if `.expires` is `Infinity`. ### `.cookieString()` encode to a Cookie header value (i.e. the `.key` and `.value` properties joined with '='). ### `.setExpires(String)` sets the expiry based on a date-string passed through `parseDate()`. If parseDate returns `null` (i.e. can't parse this date string), `.expires` is set to `\"Infinity\"` (a string) is set. ### `.setMaxAge(number)` sets the maxAge in seconds. Coerces `-Infinity` to `\"-Infinity\"` and `Infinity` to `\"Infinity\"` so it JSON serializes correctly. ### `.expiryTime([now=Date.now()])` ### `.expiryDate([now=Date.now()])` expiryTime() Computes the absolute unix-epoch milliseconds that this cookie expires. expiryDate() works similarly, except it returns a `Date` object. Note that in both cases the `now` parameter should be milliseconds. Max-Age takes precedence over Expires (as per the RFC). The `.creation` attribute -- or, by default, the `now` paramter -- is used to offset the `.maxAge` attribute. If Expires (`.expires`) is set, that's returned. Otherwise, `expiryTime()` returns `Infinity` and `expiryDate()` returns a `Date` object for \"Tue, 19 Jan 2038 03:14:07 GMT\" (latest date that can be expressed by a 32-bit `time_t`; the common limit for most user-agents). ### `.TTL([now=Date.now()])` compute the TTL relative to `now` (milliseconds). The same precedence rules as for `expiryTime`/`expiryDate` apply. The \"number\" `Infinity` is returned for cookies without an explicit expiry and `0` is returned if the cookie is expired. Otherwise a time-to-live in milliseconds is returned. ### `.canonicalizedDoman()` ### `.cdomain()` return the canonicalized `.domain` field. This is lower-cased and punycode (RFC3490) encoded if the domain has any non-ASCII characters. ### `.toJSON()` For convenience in using `JSON.serialize(cookie)`. Returns a plain-old `Object` that can be JSON-serialized. Any `Date` properties (i.e., `.expires`, `.creation`, and `.lastAccessed`) are exported in ISO format (`.toISOString()`). **NOTE**: Custom `Cookie` properties will be discarded. In tough-cookie 1.x, since there was no `.toJSON` method explicitly defined, all enumerable properties were captured. If you want a property to be serialized, add the property name to the `Cookie.serializableProperties` Array. ### `Cookie.fromJSON(strOrObj)` Does the reverse of `cookie.toJSON()`. If passed a string, will `JSON.parse()` that first. Any `Date` properties (i.e., `.expires`, `.creation`, and `.lastAccessed`) are parsed via `Date.parse()`, not the tough-cookie `parseDate`, since it's JavaScript/JSON-y timestamps being handled at this layer. Returns `null` upon JSON parsing error. ### `.clone()` Does a deep clone of this cookie, exactly implemented as `Cookie.fromJSON(cookie.toJSON())`. ### `.validate()` Status: *IN PROGRESS*. Works for a few things, but is by no means comprehensive. validates cookie attributes for semantic correctness. Useful for \"lint\" checking any Set-Cookie headers you generate. For now, it returns a boolean, but eventually could return a reason string -- you can future-proof with this construct: ``` javascript if (cookie.validate() === true) { // it's tasty } else { // yuck! } ``` ## CookieJar Exported via `tough.CookieJar`. ### `CookieJar([store],[options])` Simply use `new CookieJar()`. If you'd like to use a custom store, pass that to the constructor otherwise a `MemoryCookieStore` will be created and used. The `options` object can be omitted and can have the following properties: * _rejectPublicSuffixes_ - boolean - default `true` - reject cookies with domains like \"com\" and \"co.uk\" * _looseMode_ - boolean - default `false` - accept malformed cookies like `bar` and `=bar`, which have an implied empty name. This is not in the standard, but is used sometimes on the web and is accepted by (most) browsers. Since eventually this module would like to support database/remote/etc. CookieJars, continuation passing style is used for CookieJar methods. ### `.setCookie(cookieOrString, currentUrl, [{options},] cb(err,cookie))` Attempt to set the cookie in the cookie jar. If the operation fails, an error will be given to the callback `cb`, otherwise the cookie is passed through. The cookie will have updated `.creation`, `.lastAccessed` and `.hostOnly` properties. The `options` object can be omitted and can have the following properties: * _http_ - boolean - default `true` - indicates if this is an HTTP or non-HTTP API. Affects HttpOnly cookies. * _secure_ - boolean - autodetect from url - indicates if this is a \"Secure\" API. If the currentUrl starts with `https:` or `wss:` then this is defaulted to `true`, otherwise `false`. * _now_ - Date - default `new Date()` - what to use for the creation/access time of cookies * _ignoreError_ - boolean - default `false` - silently ignore things like parse errors and invalid domains. `Store` errors aren't ignored by this option. As per the RFC, the `.hostOnly` property is set if there was no \"Domain=\" parameter in the cookie string (or `.domain` was null on the Cookie object). The `.domain` property is set to the fully-qualified hostname of `currentUrl` in this case. Matching this cookie requires an exact hostname match (not a `domainMatch` as per usual). ### `.setCookieSync(cookieOrString, currentUrl, [{options}])` Synchronous version of `setCookie`; only works with synchronous stores (e.g. the default `MemoryCookieStore`). ### `.getCookies(currentUrl, [{options},] cb(err,cookies))` Retrieve the list of cookies that can be sent in a Cookie header for the current url. If an error is encountered, that's passed as `err` to the callback, otherwise an `Array` of `Cookie` objects is passed. The array is sorted with `cookieCompare()` unless the `{sort:false}` option is given. The `options` object can be omitted and can have the following properties: * _http_ - boolean - default `true` - indicates if this is an HTTP or non-HTTP API. Affects HttpOnly cookies. * _secure_ - boolean - autodetect from url - indicates if this is a \"Secure\" API. If the currentUrl starts with `https:` or `wss:` then this is defaulted to `true`, otherwise `false`. * _now_ - Date - default `new Date()` - what to use for the creation/access time of cookies * _expire_ - boolean - default `true` - perform expiry-time checking of cookies and asynchronously remove expired cookies from the store. Using `false` will return expired cookies and **not** remove them from the store (which is useful for replaying Set-Cookie headers, potentially). * _allPaths_ - boolean - default `false` - if `true`, do not scope cookies by path. The default uses RFC-compliant path scoping. **Note**: may not be supported by the underlying store (the default `MemoryCookieStore` supports it). The `.lastAccessed` property of the returned cookies will have been updated. ### `.getCookiesSync(currentUrl, [{options}])` Synchronous version of `getCookies`; only works with synchronous stores (e.g. the default `MemoryCookieStore`). ### `.getCookieString(...)` Accepts the same options as `.getCookies()` but passes a string suitable for a Cookie header rather than an array to the callback. Simply maps the `Cookie` array via `.cookieString()`. ### `.getCookieStringSync(...)` Synchronous version of `getCookieString`; only works with synchronous stores (e.g. the default `MemoryCookieStore`). ### `.getSetCookieStrings(...)` Returns an array of strings suitable for **Set-Cookie** headers. Accepts the same options as `.getCookies()`. Simply maps the cookie array via `.toString()`. ### `.getSetCookieStringsSync(...)` Synchronous version of `getSetCookieStrings`; only works with synchronous stores (e.g. the default `MemoryCookieStore`). ### `.serialize(cb(err,serializedObject))` Serialize the Jar if the underlying store supports `.getAllCookies`. **NOTE**: Custom `Cookie` properties will be discarded. If you want a property to be serialized, add the property name to the `Cookie.serializableProperties` Array. See [Serialization Format]. ### `.serializeSync()` Sync version of .serialize ### `.toJSON()` Alias of .serializeSync() for the convenience of `JSON.stringify(cookiejar)`. ### `CookieJar.deserialize(serialized, [store], cb(err,object))` A new Jar is created and the serialized Cookies are added to the underlying store. Each `Cookie` is added via `store.putCookie` in the order in which they appear in the serialization. The `store` argument is optional, but should be an instance of `Store`. By default, a new instance of `MemoryCookieStore` is created. As a convenience, if `serialized` is a string, it is passed through `JSON.parse` first. If that throws an error, this is passed to the callback. ### `CookieJar.deserializeSync(serialized, [store])` Sync version of `.deserialize`. _Note_ that the `store` must be synchronous for this to work. ### `CookieJar.fromJSON(string)` Alias of `.deserializeSync` to provide consistency with `Cookie.fromJSON()`. ### `.clone([store,]cb(err,newJar))` Produces a deep clone of this jar. Modifications to the original won't affect the clone, and vice versa. The `store` argument is optional, but should be an instance of `Store`. By default, a new instance of `MemoryCookieStore` is created. Transferring between store types is supported so long as the source implements `.getAllCookies()` and the destination implements `.putCookie()`. ### `.cloneSync([store])` Synchronous version of `.clone`, returning a new `CookieJar` instance. The `store` argument is optional, but must be a _synchronous_ `Store` instance if specified. If not passed, a new instance of `MemoryCookieStore` is used. The _source_ and _destination_ must both be synchronous `Store`s. If one or both stores are asynchronous, use `.clone` instead. Recall that `MemoryCookieStore` supports both synchronous and asynchronous API calls. ## Store Base class for CookieJar stores. Available as `tough.Store`. ## Store API The storage model for each `CookieJar` instance can be replaced with a custom implementation. The default is `MemoryCookieStore` which can be found in the `lib/memstore.js` file. The API uses continuation-passing-style to allow for asynchronous stores. Stores should inherit from the base `Store` class, which is available as `require('tough-cookie').Store`. Stores are asynchronous by default, but if `store.synchronous` is set to `true`, then the `*Sync` methods on the of the containing `CookieJar` can be used (however, the continuation-passing style All `domain` parameters will have been normalized before calling. The Cookie store must have all of the following methods. ### `store.findCookie(domain, path, key, cb(err,cookie))` Retrieve a cookie with the given domain, path and key (a.k.a. name). The RFC maintains that exactly one of these cookies should exist in a store. If the store is using versioning, this means that the latest/newest such cookie should be returned. Callback takes an error and the resulting `Cookie` object. If no cookie is found then `null` MUST be passed instead (i.e. not an error). ### `store.findCookies(domain, path, cb(err,cookies))` Locates cookies matching the given domain and path. This is most often called in the context of `cookiejar.getCookies()` above. If no cookies are found, the callback MUST be passed an empty array. The resulting list will be checked for applicability to the current request according to the RFC (domain-match, path-match, http-only-flag, secure-flag, expiry, etc.), so it's OK to use an optimistic search algorithm when implementing this method. However, the search algorithm used SHOULD try to find cookies that `domainMatch()` the domain and `pathMatch()` the path in order to limit the amount of checking that needs to be done. As of version 0.9.12, the `allPaths` option to `cookiejar.getCookies()` above will cause the path here to be `null`. If the path is `null`, path-matching MUST NOT be performed (i.e. domain-matching only). ### `store.putCookie(cookie, cb(err))` Adds a new cookie to the store. The implementation SHOULD replace any existing cookie with the same `.domain`, `.path`, and `.key` properties -- depending on the nature of the implementation, it's possible that between the call to `fetchCookie` and `putCookie` that a duplicate `putCookie` can occur. The `cookie` object MUST NOT be modified; the caller will have already updated the `.creation` and `.lastAccessed` properties. Pass an error if the cookie cannot be stored. ### `store.updateCookie(oldCookie, newCookie, cb(err))` Update an existing cookie. The implementation MUST update the `.value` for a cookie with the same `domain`, `.path` and `.key`. The implementation SHOULD check that the old value in the store is equivalent to `oldCookie` - how the conflict is resolved is up to the store. The `.lastAccessed` property will always be different between the two objects (to the precision possible via JavaScript's clock). Both `.creation` and `.creationIndex` are guaranteed to be the same. Stores MAY ignore or defer the `.lastAccessed` change at the cost of affecting how cookies are selected for automatic deletion (e.g., least-recently-used, which is up to the store to implement). Stores may wish to optimize changing the `.value` of the cookie in the store versus storing a new cookie. If the implementation doesn't define this method a stub that calls `putCookie(newCookie,cb)` will be added to the store object. The `newCookie` and `oldCookie` objects MUST NOT be modified. Pass an error if the newCookie cannot be stored. ### `store.removeCookie(domain, path, key, cb(err))` Remove a cookie from the store (see notes on `findCookie` about the uniqueness constraint). The implementation MUST NOT pass an error if the cookie doesn't exist; only pass an error due to the failure to remove an existing cookie. ### `store.removeCookies(domain, path, cb(err))` Removes matching cookies from the store. The `path` parameter is optional, and if missing means all paths in a domain should be removed. Pass an error ONLY if removing any existing cookies failed. ### `store.getAllCookies(cb(err, cookies))` Produces an `Array` of all cookies during `jar.serialize()`. The items in the array can be true `Cookie` objects or generic `Object`s with the [Serialization Format] data structure. Cookies SHOULD be returned in creation order to preserve sorting via `compareCookies()`. For reference, `MemoryCookieStore` will sort by `.creationIndex` since it uses true `Cookie` objects internally. If you don't return the cookies in creation order, they'll still be sorted by creation time, but this only has a precision of 1ms. See `compareCookies` for more detail. Pass an error if retrieval fails. ## MemoryCookieStore Inherits from `Store`. A just-in-memory CookieJar synchronous store implementation, used by default. Despite being a synchronous implementation, it's usable with both the synchronous and asynchronous forms of the `CookieJar` API. # Serialization Format **NOTE**: if you want to have custom `Cookie` properties serialized, add the property name to `Cookie.serializableProperties`. ```js { // The version of tough-cookie that serialized this jar. version: 'tough-cookie@1.x.y', // add the store type, to make humans happy: storeType: 'MemoryCookieStore', // CookieJar configuration: rejectPublicSuffixes: true, // ... future items go here // Gets filled from jar.store.getAllCookies(): cookies: [ { key: 'string', value: 'string', // ... /* other Cookie.serializableProperties go here */ } ] } ``` # Copyright and License (tl;dr: BSD-3-Clause with some MPL/2.0) ```text Copyright (c) 2015, Salesforce.com, Inc. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of Salesforce.com nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ``` Portions may be licensed under different licenses (in particular `public_suffix_list.dat` is MPL/2.0); please read that file and the LICENSE file for full details."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/tunnel-agent/README.md","tags":[],"body":"tunnel-agent ============ HTTP proxy tunneling agent. Formerly part of mikeal/request, now a standalone module."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/CHANGELOG.md","tags":[],"body":"## Change Log ### v3.29.0 (2015/10/16 21:51 +07:00) - [#282](https://github.com/bcoe/yargs/pull/282) completions now accept promises (@LinusU) - [#281](https://github.com/bcoe/yargs/pull/281) fix parsing issues with dot notation (@bcoe) ### v3.28.0 (2015/10/16 1:55 +07:00) - [#277](https://github.com/bcoe/yargs/pull/277) adds support for ansi escape codes (@bcoe) ### v3.27.0 (2015/10/08 1:55 +00:00) - [#271](https://github.com/bcoe/yargs/pull/273) skips validation for help or version flags with exitProcess(false) (@tepez) - [#273](https://github.com/bcoe/yargs/pull/273) implements single output for errors with exitProcess(false) (@nexdrew) - [#269](https://github.com/bcoe/yargs/pull/269) verifies single output for errors with exitProcess(false) (@tepez) - [#268](https://github.com/bcoe/yargs/pull/268) adds Chinese translation (@qiu8310) - [#266](https://github.com/bcoe/yargs/pull/266) adds case for -- after -- in parser test (@geophree) ### v3.26.0 (2015/09/25 2:14 +00:00) - [#263](https://github.com/bcoe/yargs/pull/263) document count() and option() object keys (@nexdrew) - [#259](https://github.com/bcoe/yargs/pull/259) remove util in readme (@38elements) - [#258](https://github.com/bcoe/yargs/pull/258) node v4 builds, update deps (@nexdrew) - [#257](https://github.com/bcoe/yargs/pull/257) fix spelling errors (@dkoleary88) ### v3.25.0 (2015/09/13 7:38 -07:00) - [#254](https://github.com/bcoe/yargs/pull/254) adds Japanese translation (@oti) - [#253](https://github.com/bcoe/yargs/pull/253) fixes for tests on Windows (@bcoe) ### v3.24.0 (2015/09/04 12:02 +00:00) - [#248](https://github.com/bcoe/yargs/pull/248) reinstate os-locale, no spawning (@nexdrew) - [#249](https://github.com/bcoe/yargs/pull/249) use travis container-based infrastructure (@nexdrew) - [#247](https://github.com/bcoe/yargs/pull/247) upgrade standard (@nexdrew) ### v3.23.0 (2015/08/30 23:00 +00:00) - [#246](https://github.com/bcoe/yargs/pull/246) detect locale based only on environment variables (@bcoe) - [#244](https://github.com/bcoe/yargs/pull/244) adds Windows CI testing (@bcoe) - [#245](https://github.com/bcoe/yargs/pull/245) adds OSX CI testing (@bcoe, @nexdrew) ### v3.22.0 (2015/08/28 22:26 +00:00) - [#242](https://github.com/bcoe/yargs/pull/242) adds detectLocale config option (@bcoe) ### v3.21.1 (2015/08/28 20:58 +00:00) - [#240](https://github.com/bcoe/yargs/pull/240) hot-fix for Atom on Windows (@bcoe) ### v3.21.0 (2015/08/21 21:20 +00:00) - [#238](https://github.com/bcoe/yargs/pull/238) upgrade camelcase, window-size, chai, mocha (@nexdrew) - [#237](https://github.com/bcoe/yargs/pull/237) adds defaultDescription to option() (@nexdrew) ### v3.20.0 (2015/08/20 01:29 +00:00) - [#231](https://github.com/bcoe/yargs/pull/231) Merge pull request #231 from bcoe/detect-locale (@sindresorhus) - [#235](https://github.com/bcoe/yargs/pull/235) adds german translation to yargs (@maxrimue) ### v3.19.0 (2015/08/14 05:12 +00:00) - [#224](https://github.com/bcoe/yargs/pull/224) added Portuguese translation (@codemonkey3045) ### v3.18.1 (2015/08/12 05:53 +00:00) - [#228](https://github.com/bcoe/yargs/pull/228) notes about embedding yargs in Electron (@etiktin) - [#223](https://github.com/bcoe/yargs/pull/223) make booleans work in config files (@sgentle) ### v3.18.0 (2015/08/06 20:05 +00:00) - [#222](https://github.com/bcoe/yargs/pull/222) updates fr locale (@nexdrew) - [#221](https://github.com/bcoe/yargs/pull/221) adds missing locale strings (@nexdrew) - [#220](https://github.com/bcoe/yargs/pull/220) adds es locale (@zkat) ### v3.17.1 (2015/08/02 19:35 +00:00) - [#218](https://github.com/bcoe/yargs/pull/218) upgrades nyc (@bcoe) ### v3.17.0 (2015/08/02 18:39 +00:00) - [#217](https://github.com/bcoe/yargs/pull/217) sort methods in README.md (@nexdrew) - [#215](https://github.com/bcoe/yargs/pull/215) adds fr locale (@LoicMahieu) ### v3.16.0 (2015/07/30 04:35 +00:00) - [#210](https://github.com/bcoe/yargs/pull/210) adds i18n support to yargs (@bcoe) - [#209](https://github.com/bcoe/yargs/pull/209) adds choices type to yargs (@nexdrew) - [#207](https://github.com/bcoe/yargs/pull/207) pretty new shields from shields.io (@SimenB) - [#208](https://github.com/bcoe/yargs/pull/208) improvements to README.md (@nexdrew) - [#205](https://github.com/bcoe/yargs/pull/205) faster build times on Travis (@ChristianMurphy) ### v3.15.0 (2015/07/06 06:01 +00:00) - [#197](https://github.com/bcoe/yargs/pull/197) tweaks to how errors bubble up from parser.js (@bcoe) - [#193](https://github.com/bcoe/yargs/pull/193) upgraded nyc, reporting now happens by default (@bcoe) ### v3.14.0 (2015/06/28 02:12 +00:00) - [#192](https://github.com/bcoe/yargs/pull/192) standard style nits (@bcoe) - [#190](https://github.com/bcoe/yargs/pull/190) allow for hidden commands, e.g., .completion('completion', false) (@tschaub) ### v3.13.0 (2015/06/24 04:12 +00:00) - [#187](https://github.com/bcoe/yargs/pull/187) completion now behaves differently if it is being run in the context of a command (@tschaub) - [#186](https://github.com/bcoe/yargs/pull/186) if no matches are found for a completion default to filename completion (@tschaub) ### v3.12.0 (2015/06/19 03:23 +00:00) - [#183](https://github.com/bcoe/yargs/pull/183) don't complete commands if they've already been completed (@tschaub) - [#181](https://github.com/bcoe/yargs/pull/181) various fixes for completion. (@bcoe, @tschaub) - [#182](https://github.com/bcoe/yargs/pull/182) you can now set a maximum # of of required arguments (@bcoe) ### v3.11.0 (2015/06/15 05:15 +00:00) - [#173](https://github.com/bcoe/yargs/pull/173) update standard, window-size, chai (@bcoe) - [#171](https://github.com/bcoe/yargs/pull/171) a description can now be set when providing a config option. (@5c077yP) ### v3.10.0 (2015/05/29 04:25 +00:00) - [#165](https://github.com/bcoe/yargs/pull/165) expose yargs.terminalWidth() thanks @ensonic (@bcoe) - [#164](https://github.com/bcoe/yargs/pull/164) better array handling thanks @getify (@bcoe) ### v3.9.1 (2015/05/20 05:14 +00:00) - [b6662b6](https://github.com/bcoe/yargs/commit/b6662b6774cfeab4876f41ec5e2f67b7698f4e2f) clarify .config() docs (@linclark) - [0291360](https://github.com/bcoe/yargs/commit/02913606285ce31ce81d7f12c48d8a3029776ec7) fixed tests, switched to nyc for coverage, fixed security issue, added Lin as collaborator (@bcoe) ### v3.9.0 (2015/05/10 18:32 +00:00) - [#157](https://github.com/bcoe/yargs/pull/157) Merge pull request #157 from bcoe/command-yargs. allows handling of command specific arguments. Thanks for the suggestion @ohjames (@bcoe) - [#158](https://github.com/bcoe/yargs/pull/158) Merge pull request #158 from kemitchell/spdx-license. Update license format (@kemitchell) ### v3.8.0 (2015/04/24 23:10 +00:00) - [#154](https://github.com/bcoe/yargs/pull/154) showHelp's method signature was misleading fixes #153 (@bcoe) - [#151](https://github.com/bcoe/yargs/pull/151) refactor yargs' table layout logic to use new helper library (@bcoe) - [#150](https://github.com/bcoe/yargs/pull/150) Fix README example in argument requirements (@annonymouse) ### v3.7.2 (2015/04/13 11:52 -07:00) * [679fbbf](https://github.com/bcoe/yargs/commit/679fbbf55904030ccee8a2635e8e5f46551ab2f0) updated yargs to use the [standard](https://github.com/feross/standard) style guide (agokjr) * [22382ee](https://github.com/bcoe/yargs/commit/22382ee9f5b495bc2586c1758cd1091cec3647f9 various bug fixes for $0 (@nylen) ### v3.7.1 (2015/04/10 11:06 -07:00) * [89e1992](https://github.com/bcoe/yargs/commit/89e1992a004ba73609b5f9ee6890c4060857aba4) detect iojs bin along with node bin. (@bcoe) * [755509e](https://github.com/bcoe/yargs/commit/755509ea90041e5f7833bba3b8c5deffe56f0aab) improvements to example documentation in README.md (@rstacruz) * [0d2dfc8](https://github.com/bcoe/yargs/commit/0d2dfc822a43418242908ad97ddd5291a1b35dc6) showHelp() no longer requires that .argv has been called (@bcoe) ### v3.7.0 (2015/04/04 02:29 -07:00) * [56cbe2d](https://github.com/bcoe/yargs/commit/56cbe2ddd33dc176dcbf97ba40559864a9f114e4) make .requiresArg() work with type hints. (@bcoe). * [2f5d562](https://github.com/bcoe/yargs/commit/2f5d5624f736741deeedf6a664d57bc4d857bdd0) serialize arrays and objects in usage strings. (@bcoe). * [5126304](https://github.com/bcoe/yargs/commit/5126304dd18351fc28f10530616fdd9361e0af98) be more lenient about alias/primary key ordering in chaining API. (@bcoe) ### v3.6.0 (2015/03/21 01:00 +00:00) - [4e24e22](https://github.com/bcoe/yargs/commit/4e24e22e6a195e55ab943ede704a0231ac33b99c) support for .js configuration files. (@pirxpilot) ### v3.5.4 (2015/03/12 05:56 +00:00) - [c16cc08](https://github.com/bcoe/yargs/commit/c16cc085501155cf7fd853ccdf8584b05ab92b78) message for non-option arguments is now optional, thanks to (@raine) ### v3.5.3 (2015/03/09 06:14 +00:00) - [870b428](https://github.com/bcoe/yargs/commit/870b428cf515d560926ca392555b7ad57dba9e3d) completion script was missing in package.json (@bcoe) ### v3.5.2 (2015/03/09 06:11 +00:00) - [58a4b24](https://github.com/bcoe/yargs/commit/58a4b2473ebbb326713d522be53e32d3aabb08d2) parse was being called multiple times, resulting in strange behavior (@bcoe) ### v3.5.1 (2015/03/09 04:55 +00:00) - [4e588e0](https://github.com/bcoe/yargs/commit/4e588e055afbeb9336533095f051496e3977f515) accidentally left testing logic in (@bcoe) ### v3.5.0 (2015/03/09 04:49 +00:00) - [718bacd](https://github.com/bcoe/yargs/commit/718bacd81b9b44f786af76b2afe491fe06274f19) added support for bash completions see #4 (@bcoe) - [a192882](https://github.com/bcoe/yargs/commit/a19288270fc431396c42af01125eeb4443664528) downgrade to mocha 2.1.0 until https://github.com/mochajs/mocha/issues/1585 can be sorted out (@bcoe) ### v3.4.7 (2015/03/09 04:09 +00:00) - [9845e5c](https://github.com/bcoe/yargs/commit/9845e5c1a9c684ba0be3f0bfb40e7b62ab49d9c8) the Argv singleton was not being updated when manually parsing arguments, fixes #114 (@bcoe) ### v3.4.6 (2015/03/09 04:01 +00:00) - [45b4c80](https://github.com/bcoe/yargs/commit/45b4c80b890d02770b0a94f326695a8a566e8fe9) set placeholders for all keys fixes #115 (@bcoe) ### v3.4.5 (2015/03/01 20:31 +00:00) - [a758e0b](https://github.com/bcoe/yargs/commit/a758e0b2556184f067cf3d9c4ef886d39817ebd2) fix for count consuming too many arguments (@bcoe) ### v3.4.4 (2015/02/28 04:52 +00:00) - [0476af7](https://github.com/bcoe/yargs/commit/0476af757966acf980d998b45108221d4888cfcb) added nargs feature, allowing you to specify the number of arguments after an option (@bcoe) - [092477d](https://github.com/bcoe/yargs/commit/092477d7ab3efbf0ba11cede57f7d8cfc70b024f) updated README with full example of v3.0 API (@bcoe) ### v3.3.3 (2015/02/28 04:23 +00:00) - [0c4b769](https://github.com/bcoe/yargs/commit/0c4b769516cd8d93a7c4e5e675628ae0049aa9a8) remove string dependency, which conflicted with other libraries see #106 (@bcoe) ### v3.3.2 (2015/02/28 04:11 +00:00) - [2a98906](https://github.com/bcoe/yargs/commit/2a9890675821c0e7a12f146ce008b0562cb8ec9a) add $0 to epilog (@schnittstabil) ### v3.3.1 (2015/02/24 03:28 +00:00) - [ad485ce](https://github.com/bcoe/yargs/commit/ad485ce748ebdfce25b88ef9d6e83d97a2f68987) fix for applying defaults to camel-case args (@bcoe) ### v3.3.0 (2015/02/24 00:49 +00:00) - [8bfe36d](https://github.com/bcoe/yargs/commit/8bfe36d7fb0f93a799ea3f4c756a7467c320f8c0) fix and document restart() command, as a tool for building nested CLIs (@bcoe) ### v3.2.1 (2015/02/22 05:45 +00:00) - [49a6d18](https://github.com/bcoe/yargs/commit/49a6d1822a4ef9b1ea6f90cc366be60912628885) you can now provide a function that generates a default value (@bcoe) ### v3.2.0 (2015/02/22 05:24 +00:00) - [7a55886](https://github.com/bcoe/yargs/commit/7a55886c9343cf71a20744ca5cdd56d2ea7412d5) improvements to yargs two-column text layout (@bcoe) - [b6ab513](https://github.com/bcoe/yargs/commit/b6ab5136a4c3fa6aa496f6b6360382e403183989) Tweak NPM version badge (@nylen) ### v3.1.0 (2015/02/19 19:37 +00:00) - [9bd2379](https://github.com/bcoe/yargs/commit/9bd237921cf1b61fd9f32c0e6d23f572fc225861) version now accepts a function, making it easy to load version #s from a package.json (@bcoe) ### v3.0.4 (2015/02/14 01:40 +00:00) - [0b7c19b](https://github.com/bcoe/yargs/commit/0b7c19beaecb747267ca4cc10e5cb2a8550bc4b7) various fixes for dot-notation handling (@bcoe) ### v3.0.3 (2015/02/14 00:59 +00:00) - [c3f35e9](https://github.com/bcoe/yargs/commit/c3f35e99bd5a0d278073fcadd95e2d778616cc17) make sure dot-notation is applied to aliases (@bcoe) ### 3.0.2 (2015/02/13 16:50 +00:00) - [74c8967](https://github.com/bcoe/yargs/commit/74c8967c340c204a0a7edf8a702b6f46c2705435) document epilog shorthand of epilogue. (@bcoe) - [670110f](https://github.com/bcoe/yargs/commit/670110fc01bedc4831b6fec6afac54517d5a71bc) any non-truthy value now causes check to fail see #76 (@bcoe) - [0d8f791](https://github.com/bcoe/yargs/commit/0d8f791a33c11ced4cd431ea8d3d3a337d456b56) finished implementing my wish-list of fetures for yargs 3.0. see #88 (@bcoe) - [5768447](https://github.com/bcoe/yargs/commit/5768447447c4c8e8304f178846206ce86540f063) fix coverage. (@bcoe) - [82e793f](https://github.com/bcoe/yargs/commit/82e793f3f61c41259eaacb67f0796aea2cf2aaa0) detect console width and perform word-wrapping. (@bcoe) - [67476b3](https://github.com/bcoe/yargs/commit/67476b37eea07fee55f23f35b9e0c7d76682b86d) refactor two-column table layout so that we can use it for examples and usage (@bcoe) - [4724cdf](https://github.com/bcoe/yargs/commit/4724cdfcc8e37ae1ca3dcce9d762f476e9ef4bb4) major refactor of index.js, in prep for 3.x release. (@bcoe) ### v2.3.0 (2015/02/08 20:41 +00:00) - [d824620](https://github.com/bcoe/yargs/commit/d824620493df4e63664af1fe320764dd1a9244e6) allow for undefined boolean defaults (@ashi009) ### v2.2.0 (2015/02/08 20:07 +00:00) - [d6edd98](https://github.com/bcoe/yargs/commit/d6edd9848826e7389ed1393858c45d03961365fd) in-prep for further refactoring, and a 3.x release I've shuffled some things around and gotten test-coverage to 100%. (@bcoe) ### v2.1.2 (2015/02/08 06:05 +00:00) - [d640745](https://github.com/bcoe/yargs/commit/d640745a7b9f8d476e0223879d056d18d9c265c4) switch to path.relative (@bcoe) - [3bfd41f](https://github.com/bcoe/yargs/commit/3bfd41ff262a041f29d828b88936a79c63cad594) remove mocha.opts. (@bcoe) - [47a2f35](https://github.com/bcoe/yargs/commit/47a2f357091db70903a402d6765501c1d63f15fe) document using .string('_') for string ids. see #56 (@bcoe) - [#57](https://github.com/bcoe/yargs/pull/57) Merge pull request #57 from eush77/option-readme (@eush77) ### v2.1.1 (2015/02/06 08:08 +00:00) - [01c6c61](https://github.com/bcoe/yargs/commit/01c6c61d67b4ebf88f41f0b32a345ec67f0ac17d) fix for #71, 'newAliases' of undefined (@bcoe) ### v2.1.0 (2015/02/06 07:59 +00:00) - [6a1a3fa](https://github.com/bcoe/yargs/commit/6a1a3fa731958e26ccd56885f183dd8985cc828f) try to guess argument types, and apply sensible defaults see #73 (@bcoe) ### v2.0.1 (2015/02/06 07:54 +00:00) - [96a06b2](https://github.com/bcoe/yargs/commit/96a06b2650ff1d085a52b7328d8bba614c20cc12) Fix for strange behavior with --sort option, see #51 (@bcoe) ### v2.0.0 (2015/02/06 07:45 +00:00) - [0250517](https://github.com/bcoe/yargs/commit/0250517c9643e53f431b824e8ccfa54937414011) - [108fb84](https://github.com/bcoe/yargs/commit/108fb8409a3a63dcaf99d917fe4dfcfaa1de236d) fixed bug with boolean parsing, when bools separated by = see #66 (@bcoe) - [a465a59](https://github.com/bcoe/yargs/commit/a465a5915f912715738de890982e4f8395958b10) Add `files` field to the package.json (@shinnn) - [31043de](https://github.com/bcoe/yargs/commit/31043de7a38a17c4c97711f1099f5fb164334db3) fix for yargs.argv having the same keys added multiple times see #63 (@bcoe) - [2d68c5b](https://github.com/bcoe/yargs/commit/2d68c5b91c976431001c4863ce47c9297850f1ad) Disable process.exit calls using .exitProcess(false) (@cianclarke) - [45da9ec](https://github.com/bcoe/yargs/commit/45da9ec4c55a7bd394721bc6a1db0dabad7bc52a) Mention .option in README (@eush77) ### v1.3.2 (2014/10/06 21:56 +00:00) - [b8d3472](https://github.com/bcoe/yargs/commit/b8d34725482e5821a3cc809c0df71378f282f526) 1.3.2 (@chevex) ### list (2014/08/30 18:41 +00:00) - [fbc777f](https://github.com/bcoe/yargs/commit/fbc777f416eeefd37c84e44d27d7dfc7c1925721) Now that yargs is the successor to optimist, I'm changing the README language to be more universal. Pirate speak isn't very accessible to non-native speakers. (@chevex) - [a54d068](https://github.com/bcoe/yargs/commit/a54d0682ae2efc2394d407ab171cc8a8bbd135ea) version output will not print extra newline (@boneskull) - [1cef5d6](https://github.com/bcoe/yargs/commit/1cef5d62a9d6d61a3948a49574892e01932cc6ae) Added contributors section to package.json (@chrisn) - [cc295c0](https://github.com/bcoe/yargs/commit/cc295c0a80a2de267e0155b60d315fc4b6f7c709) Added 'require' and 'required' as synonyms for 'demand' (@chrisn) - [d0bf951](https://github.com/bcoe/yargs/commit/d0bf951d949066b6280101ed606593d079ee15c8) Updating minimist. (@chevex) - [c15f8e7](https://github.com/bcoe/yargs/commit/c15f8e7f245b261e542cf205ce4f4313630cbdb4) Fix #31 (bad interaction between camelCase options and strict mode) (@nylen) - [d991b9b](https://github.com/bcoe/yargs/commit/d991b9be687a68812dee1e3b185ba64b7778b82d) Added .help() and .version() methods (@chrisn) - [e8c8aa4](https://github.com/bcoe/yargs/commit/e8c8aa46268379357cb11e9fc34b8c403037724b) Added .showHelpOnFail() method (@chrisn) - [e855af4](https://github.com/bcoe/yargs/commit/e855af4a933ea966b5bbdd3c4c6397a4bac1a053) Allow boolean flag with .demand() (@chrisn) - [14dbec2](https://github.com/bcoe/yargs/commit/14dbec24fb7380683198e2b20c4deb8423e64bea) Fixes issue #22. Arguments are no longer printed to the console when using .config. (@chevex) - [bef74fc](https://github.com/bcoe/yargs/commit/bef74fcddc1544598a804f80d0a3728459f196bf) Informing users that Yargs is the official optimist successor. (@chevex) - [#24](https://github.com/bcoe/yargs/pull/24) Merge pull request #24 from chrisn/strict (@chrisn) - [889a2b2](https://github.com/bcoe/yargs/commit/889a2b28eb9768801b05163360a470d0fd6c8b79) Added requiresArg option, for options that require values (@chrisn) - [eb16369](https://github.com/bcoe/yargs/commit/eb163692262be1fe80b992fd8803d5923c5a9b18) Added .strict() method, to report error if unknown arguments are given (@chrisn) - [0471c3f](https://github.com/bcoe/yargs/commit/0471c3fd999e1ad4e6cded88b8aa02013b66d14f) Changed optimist to yargs in usage-options.js example (@chrisn) - [5c88f74](https://github.com/bcoe/yargs/commit/5c88f74e3cf031b17c54b4b6606c83e485ff520e) Change optimist to yargs in examples (@chrisn) - [66f12c8](https://github.com/bcoe/yargs/commit/66f12c82ba3c943e4de8ca862980e835da8ecb3a) Fix a couple of bad interactions between aliases and defaults (@nylen) - [8fa1d80](https://github.com/bcoe/yargs/commit/8fa1d80f14b03eb1f2898863a61f1d1615bceb50) Document second argument of usage(message, opts) (@Gobie) - [56e6528](https://github.com/bcoe/yargs/commit/56e6528cf674ff70d63083fb044ff240f608448e) For \"--some-option\", also set argv.someOption (@nylen) - [ed5f6d3](https://github.com/bcoe/yargs/commit/ed5f6d33f57ad1086b11c91b51100f7c6c7fa8ee) Finished porting unit tests to Mocha. (@chevex) ### v1.0.15 (2014/02/05 23:18 +00:00) - [e2b1fc0](https://github.com/bcoe/yargs/commit/e2b1fc0c4a59cf532ae9b01b275e1ef57eeb64d2) 1.0.15 update to badges (@chevex) ### v1.0.14 (2014/02/05 23:17 +00:00) - [f33bbb0](https://github.com/bcoe/yargs/commit/f33bbb0f00fe18960f849cc8e15a7428a4cd59b8) Revert \"Fixed issue which caused .demand function not to work correctly.\" (@chevex) ### v1.0.13 (2014/02/05 22:13 +00:00) - [6509e5e](https://github.com/bcoe/yargs/commit/6509e5e7dee6ef1a1f60eea104be0faa1a045075) Fixed issue which caused .demand function not to work correctly. (@chevex) ### v1.0.12 (2013/12/13 00:09 +00:00) - [05eb267](https://github.com/bcoe/yargs/commit/05eb26741c9ce446b33ff006e5d33221f53eaceb) 1.0.12 (@chevex) ### v1.0.11 (2013/12/13 00:07 +00:00) - [c1bde46](https://github.com/bcoe/yargs/commit/c1bde46e37318a68b87d17a50c130c861d6ce4a9) 1.0.11 (@chevex) ### v1.0.10 (2013/12/12 23:57 +00:00) - [dfebf81](https://github.com/bcoe/yargs/commit/dfebf8164c25c650701528ee581ca483a99dc21c) Fixed formatting in README (@chevex) ### v1.0.9 (2013/12/12 23:47 +00:00) - [0b4e34a](https://github.com/bcoe/yargs/commit/0b4e34af5e6d84a9dbb3bb6d02cd87588031c182) Update README.md (@chevex) ### v1.0.8 (2013/12/06 16:36 +00:00) - [#1](https://github.com/bcoe/yargs/pull/1) fix error caused by check() see #1 (@martinheidegger) ### v1.0.7 (2013/11/24 18:01 +00:00) - [a247d88](https://github.com/bcoe/yargs/commit/a247d88d6e46644cbb7303c18b1bb678fc132d72) Modified Pirate Joe image. (@chevex) ### v1.0.6 (2013/11/23 19:21 +00:00) - [d7f69e1](https://github.com/bcoe/yargs/commit/d7f69e1d34bc929736a8bdccdc724583e21b7eab) Updated Pirate Joe image. (@chevex) ### v1.0.5 (2013/11/23 19:09 +00:00) - [ece809c](https://github.com/bcoe/yargs/commit/ece809cf317cc659175e1d66d87f3ca68c2760be) Updated readme notice again. (@chevex) ### v1.0.4 (2013/11/23 19:05 +00:00) - [9e81e81](https://github.com/bcoe/yargs/commit/9e81e81654028f83ba86ffc3ac772a0476084e5e) Updated README with a notice about yargs being a fork of optimist and what that implies. (@chevex) ### v1.0.3 (2013/11/23 17:43 +00:00) - [65e7a78](https://github.com/bcoe/yargs/commit/65e7a782c86764944d63d084416aba9ee6019c5f) Changed some small wording in README.md. (@chevex) - [459e20e](https://github.com/bcoe/yargs/commit/459e20e539b366b85128dd281ccd42221e96c7da) Fix a bug in the options function, when string and boolean options weren't applied to aliases. (@shockone) ### v1.0.2 (2013/11/23 09:46 +00:00) - [3d80ebe](https://github.com/bcoe/yargs/commit/3d80ebed866d3799224b6f7d596247186a3898a9) 1.0.2 (@chevex) ### v1.0.1 (2013/11/23 09:39 +00:00) - [f80ff36](https://github.com/bcoe/yargs/commit/f80ff3642d580d4b68bf9f5a94277481bd027142) Updated image. (@chevex) ### v1.0.0 (2013/11/23 09:33 +00:00) - [54e31d5](https://github.com/bcoe/yargs/commit/54e31d505f820b80af13644e460894b320bf25a3) Rebranded from optimist to yargs in the spirit of the fork :D (@chevex) - [4ebb6c5](https://github.com/bcoe/yargs/commit/4ebb6c59f44787db7c24c5b8fe2680f01a23f498) Added documentation for demandCount(). (@chevex) - [4561ce6](https://github.com/bcoe/yargs/commit/4561ce66dcffa95f49e8b4449b25b94cd68acb25) Simplified the error messages returned by .check(). (@chevex) - [661c678](https://github.com/bcoe/yargs/commit/661c67886f479b16254a830b7e1db3be29e6b7a6) Fixed an issue with demand not accepting a zero value. (@chevex) - [731dd3c](https://github.com/bcoe/yargs/commit/731dd3c37624790490bd6df4d5f1da8f4348279e) Add .fail(fn) so death isn't the only option. Should fix issue #39. (@chevex) - [fa15417](https://github.com/bcoe/yargs/commit/fa15417ff9e70dace0d726627a5818654824c1d8) Added a few missing 'return self' (@chevex) - [e655e4d](https://github.com/bcoe/yargs/commit/e655e4d99d1ae1d3695ef755d51c2de08d669761) Fix showing help in certain JS environments. (@chevex) - [a746a31](https://github.com/bcoe/yargs/commit/a746a31cd47c87327028e6ea33762d6187ec5c87) Better string representation of default values. (@chevex) - [6134619](https://github.com/bcoe/yargs/commit/6134619a7e90b911d5443230b644c5d447c1a68c) Implies: conditional demands (@chevex) - [046b93b](https://github.com/bcoe/yargs/commit/046b93b5d40a27367af4cb29726e4d781d934639) Added support for JSON config files. (@chevex) - [a677ec0](https://github.com/bcoe/yargs/commit/a677ec0a0ecccd99c75e571d03323f950688da03) Add .example(cmd, desc) feature. (@chevex) - [1bd4375](https://github.com/bcoe/yargs/commit/1bd4375e11327ba1687d4bb6e5e9f3c30c1be2af) Added 'defaults' as alias to 'default' so as to avoid usage of a reserved keyword. (@chevex) - [6b753c1](https://github.com/bcoe/yargs/commit/6b753c16ca09e723060e70b773b430323b29c45c) add .normalize(args..) support for normalizing paths (@chevex) - [33d7d59](https://github.com/bcoe/yargs/commit/33d7d59341d364f03d3a25f0a55cb99004dbbe4b) Customize error messages with demand(key, msg) (@chevex) - [647d37f](https://github.com/bcoe/yargs/commit/647d37f164c20f4bafbf67dd9db6cd6e2cd3b49f) Merge branch 'rewrite-duplicate-test' of github.com:isbadawi/node-optimist (@chevex) - [9059d1a](https://github.com/bcoe/yargs/commit/9059d1ad5e8aea686c2a01c89a23efdf929fff2e) Pass aliases object to check functions for greater versatility. (@chevex) - [623dc26](https://github.com/bcoe/yargs/commit/623dc26c7331abff2465ef8532e3418996d42fe6) Added ability to count boolean options and rolled minimist library back into project. (@chevex) - [49f0dce](https://github.com/bcoe/yargs/commit/49f0dcef35de4db544c3966350d36eb5838703f6) Fixed small typo. (@chevex) - [79ec980](https://github.com/bcoe/yargs/commit/79ec9806d9ca6eb0014cfa4b6d1849f4f004baf2) Removed dependency on wordwrap module. (@chevex) - [ea14630](https://github.com/bcoe/yargs/commit/ea14630feddd69d1de99dd8c0e08948f4c91f00a) Merge branch 'master' of github.com:chbrown/node-optimist (@chevex) - [2b75da2](https://github.com/bcoe/yargs/commit/2b75da2624061e0f4f3107d20303c06ec9054906) Merge branch 'master' of github.com:seanzhou1023/node-optimist (@chevex) - [d9bda11](https://github.com/bcoe/yargs/commit/d9bda1116e26f3b40e833ca9ca19263afea53565) Merge branch 'patch-1' of github.com:thefourtheye/node-optimist (@chevex) - [d6cc606](https://github.com/bcoe/yargs/commit/d6cc6064a4f1bea38a16a4430b8a1334832fbeff) Renamed README. (@chevex) - [9498d3f](https://github.com/bcoe/yargs/commit/9498d3f59acfb5e102826503e681623c3a64b178) Renamed readme and added .gitignore. (@chevex) - [bbd1fe3](https://github.com/bcoe/yargs/commit/bbd1fe37fefa366dde0fb3dc44d91fe8b28f57f5) Included examples for ```help``` and ```showHelp``` functions and fixed few formatting issues (@thefourtheye) - [37fea04](https://github.com/bcoe/yargs/commit/37fea0470a5796a0294c1dcfff68d8041650e622) .alias({}) behaves differently based on mapping direction when generating descriptions (@chbrown) - [855b20d](https://github.com/bcoe/yargs/commit/855b20d0be567ca121d06b30bea64001b74f3d6d) Documented function signatures are useful for dynamically typed languages. (@chbrown) ### 0.6.0 (2013/06/25 08:48 +00:00) - [d37bfe0](https://github.com/bcoe/yargs/commit/d37bfe05ae6d295a0ab481efe4881222412791f4) all tests passing using minimist (@substack) - [76f1352](https://github.com/bcoe/yargs/commit/76f135270399d01f2bbc621e524a5966e5c422fd) all parse tests now passing (@substack) - [a7b6754](https://github.com/bcoe/yargs/commit/a7b6754276c38d1565479a5685c3781aeb947816) using minimist, some tests passing (@substack) - [6655688](https://github.com/bcoe/yargs/commit/66556882aa731cbbbe16cc4d42c85740a2e98099) Give credit where its due (@DeadAlready) - [602a2a9](https://github.com/bcoe/yargs/commit/602a2a92a459f93704794ad51b115bbb08b535ce) v0.5.3 - Remove wordwrap as dependency (@DeadAlready) ### 0.5.2 (2013/05/31 03:46 +00:00) - [4497ca5](https://github.com/bcoe/yargs/commit/4497ca55e332760a37b866ec119ded347ca27a87) fixed the whitespace bug without breaking anything else (@substack) - [5a3dd1a](https://github.com/bcoe/yargs/commit/5a3dd1a4e0211a38613c6e02f61328e1031953fa) failing test for whitespace arg (@substack) ### 0.5.1 (2013/05/30 07:17 +00:00) - [a20228f](https://github.com/bcoe/yargs/commit/a20228f62a454755dd07f628a7c5759113918327) fix parse() to work with functions before it (@substack) - [b13bd4c](https://github.com/bcoe/yargs/commit/b13bd4cac856a9821d42fa173bdb58f089365a7d) failing test for parse() with modifiers (@substack) ### 0.5.0 (2013/05/18 21:59 +00:00) - [c474a64](https://github.com/bcoe/yargs/commit/c474a649231527915c222156e3b40806d365a87c) fixes for dash (@substack) ### 0.4.0 (2013/04/13 19:03 +00:00) - [dafe3e1](https://github.com/bcoe/yargs/commit/dafe3e18d7c6e7c2d68e06559df0e5cbea3adb14) failing short test (@substack) ### 0.3.7 (2013/04/04 04:07 +00:00) - [6c7a0ec](https://github.com/bcoe/yargs/commit/6c7a0ec94ce4199a505f0518b4d6635d4e47cc81) Fix for windows. On windows there is no _ in environment. (@hdf) ### 0.3.6 (2013/04/04 04:04 +00:00) - [e72346a](https://github.com/bcoe/yargs/commit/e72346a727b7267af5aa008b418db89970873f05) Add support for newlines in -a=\"\" arguments (@danielbeardsley) - [71e1fb5](https://github.com/bcoe/yargs/commit/71e1fb55ea9987110a669ac6ec12338cfff3821c) drop 0.4, add 0.8 to travis (@substack) ### 0.3.5 (2012/10/10 11:09 +00:00) - [ee692b3](https://github.com/bcoe/yargs/commit/ee692b37554c70a0bb16389a50a26b66745cbbea) Fix parsing booleans (@vojtajina) - [5045122](https://github.com/bcoe/yargs/commit/5045122664c3f5b4805addf1be2148d5856f7ce8) set $0 properly in the tests (@substack) ### 0.3.4 (2012/04/30 06:54 +00:00) - [f28c0e6](https://github.com/bcoe/yargs/commit/f28c0e62ca94f6e0bb2e6d82fc3d91a55e69b903) bump for string \"true\" params (@substack) - [8f44aeb](https://github.com/bcoe/yargs/commit/8f44aeb74121ddd689580e2bf74ef86a605e9bf2) Fix failing test for aliased booleans. (@coderarity) - [b9f7b61](https://github.com/bcoe/yargs/commit/b9f7b613b1e68e11e6c23fbda9e555a517dcc976) Add failing test for short aliased booleans. (@coderarity) ### 0.3.3 (2012/04/30 06:45 +00:00) - [541bac8](https://github.com/bcoe/yargs/commit/541bac8dd787a5f1a5d28f6d8deb1627871705e7) Fixes #37. ### 0.3.2 (2012/04/12 20:28 +00:00) - [3a0f014](https://github.com/bcoe/yargs/commit/3a0f014c1451280ac1c9caa1f639d31675586eec) travis badge (@substack) - [4fb60bf](https://github.com/bcoe/yargs/commit/4fb60bf17845f4ce3293f8ca49c9a1a7c736cfce) Fix boolean aliases. (@coderarity) - [f14dda5](https://github.com/bcoe/yargs/commit/f14dda546efc4fe06ace04d36919bfbb7634f79b) Adjusted package.json to use tap (@jfhbrook) - [88e5d32](https://github.com/bcoe/yargs/commit/88e5d32295be6e544c8d355ff84e355af38a1c74) test/usage.js no longer hangs (@jfhbrook) - [e1e740c](https://github.com/bcoe/yargs/commit/e1e740c27082f3ce84deca2093d9db2ef735d0e5) two tests for combined boolean/alias opts parsing (@jfhbrook) ### 0.3.1 (2011/12/31 08:44 +00:00) - [d09b719](https://github.com/bcoe/yargs/commit/d09b71980ef711b6cf3918cd19beec8257e40e82) If \"default\" is set to false it was not passed on, fixed. (@wolframkriesing) ### 0.3.0 (2011/12/09 06:03 +00:00) - [6e74aa7](https://github.com/bcoe/yargs/commit/6e74aa7b46a65773e20c0cb68d2d336d4a0d553d) bump and documented dot notation (@substack) ### 0.2.7 (2011/10/20 02:25 +00:00) - [94adee2](https://github.com/bcoe/yargs/commit/94adee20e17b58d0836f80e8b9cdbe9813800916) argv._ can be told 'Hey! argv._! Don't be messing with my args.', and it WILL obey (@colinta) - [c46fdd5](https://github.com/bcoe/yargs/commit/c46fdd56a05410ae4a1e724a4820c82e77ff5469) optimistic critter image (@substack) - [5c95c73](https://github.com/bcoe/yargs/commit/5c95c73aedf4c7482bd423e10c545e86d7c8a125) alias options() to option() (@substack) - [f7692ea](https://github.com/bcoe/yargs/commit/f7692ea8da342850af819367833abb685fde41d8) [fix] Fix for parsing boolean edge case (@indexzero) - [d1f92d1](https://github.com/bcoe/yargs/commit/d1f92d1425bd7f356055e78621b30cdf9741a3c2) - [b01bda8](https://github.com/bcoe/yargs/commit/b01bda8d86e455bbf74ce497864cb8ab5b9fb847) [fix test] Update to ensure optimist is aware of default booleans. Associated tests included (@indexzero) - [aa753e7](https://github.com/bcoe/yargs/commit/aa753e7c54fb3a12f513769a0ff6d54aa0f63943) [dist test] Update devDependencies in package.json. Update test pathing to be more npm and require.paths future-proof (@indexzero) - [7bfce2f](https://github.com/bcoe/yargs/commit/7bfce2f3b3c98e6539e7549d35fbabced7e9341e) s/sys/util/ (@substack) - [d420a7a](https://github.com/bcoe/yargs/commit/d420a7a9c890d2cdb11acfaf3ea3f43bc3e39f41) update usage output (@substack) - [cf86eed](https://github.com/bcoe/yargs/commit/cf86eede2e5fc7495b6ec15e6d137d9ac814f075) some sage readme protips about parsing rules (@substack) - [5da9f7a](https://github.com/bcoe/yargs/commit/5da9f7a5c0e1758ec7c5801fb3e94d3f6e970513) documented all the methods finally (@substack) - [8ca6879](https://github.com/bcoe/yargs/commit/8ca6879311224b25933642987300f6a29de5c21b) fenced syntax highlighting (@substack) - [b72bacf](https://github.com/bcoe/yargs/commit/b72bacf1d02594778c1935405bc8137eb61761dc) right-alignment of wrapped extra params (@substack) - [2b980bf](https://github.com/bcoe/yargs/commit/2b980bf2656b4ee8fc5134dc5f56a48855c35198) now with .wrap() (@substack) - [d614f63](https://github.com/bcoe/yargs/commit/d614f639654057d1b7e35e3f5a306e88ec2ad1e4) don't show 'Options:' when there aren't any (@substack) - [691eda3](https://github.com/bcoe/yargs/commit/691eda354df97b5a86168317abcbcaabdc08a0fb) failing test for multi-aliasing (@substack) - [0826c9f](https://github.com/bcoe/yargs/commit/0826c9f462109feab2bc7a99346d22e72bf774b7) \"Options:\" > \"options:\" (@substack) - [72f7490](https://github.com/bcoe/yargs/commit/72f749025d01b7f295738ed370a669d885fbada0) [minor] Update formatting for `.showHelp()` (@indexzero) - [75aecce](https://github.com/bcoe/yargs/commit/75aeccea74329094072f95800e02c275e7d999aa) options works again, too lazy to write a proper test right now (@substack) - [f742e54](https://github.com/bcoe/yargs/commit/f742e5439817c662dc3bd8734ddd6467e6018cfd) line_count_options example, which breaks (@substack) - [4ca06b8](https://github.com/bcoe/yargs/commit/4ca06b8b4ea99b5d5714b315a2a8576bee6e5537) line count example (@substack) - [eeb8423](https://github.com/bcoe/yargs/commit/eeb8423e0a5ecc9dc3eb1e6df9f3f8c1c88f920b) remove self.argv setting in boolean (@substack) - [6903412](https://github.com/bcoe/yargs/commit/69034126804660af9cc20ea7f4457b50338ee3d7) removed camel case for now (@substack) - [5a0d88b](https://github.com/bcoe/yargs/commit/5a0d88bf23e9fa79635dd034e2a1aa992acc83cd) remove dead longest checking code (@substack) - [d782170](https://github.com/bcoe/yargs/commit/d782170babf7284b1aa34f5350df0dd49c373fa8) .help() too (@substack) - [622ec17](https://github.com/bcoe/yargs/commit/622ec17379bb5374fdbb190404c82bc600975791) rm old help generator (@substack) - [7c8baac](https://github.com/bcoe/yargs/commit/7c8baac4d66195e9f5158503ea9ebfb61153dab7) nub keys (@substack) - [8197785](https://github.com/bcoe/yargs/commit/8197785ad4762465084485b041abd722f69bf344) generate help message based on the previous calls, todo: nub (@substack) - [3ffbdc3](https://github.com/bcoe/yargs/commit/3ffbdc33c8f5e83d4ea2ac60575ce119570c7ede) stub out new showHelp, better checks (@substack) - [d4e21f5](https://github.com/bcoe/yargs/commit/d4e21f56a4830f7de841900d3c79756fb9886184) let .options() take single options too (@substack) - [3c4cf29](https://github.com/bcoe/yargs/commit/3c4cf2901a29bac119cca8e983028d8669230ec6) .options() is now heaps simpler (@substack) - [89f0d04](https://github.com/bcoe/yargs/commit/89f0d043cbccd302f10ab30c2069e05d2bf817c9) defaults work again, all tests pass (@substack) - [dd87333](https://github.com/bcoe/yargs/commit/dd8733365423006a6e4156372ebb55f98323af58) update test error messages, down to 2 failing tests (@substack) - [53f7bc6](https://github.com/bcoe/yargs/commit/53f7bc626b9875f2abdfc5dd7a80bde7f14143a3) fix for bools doubling up, passes the parse test again, others fail (@substack) - [2213e2d](https://github.com/bcoe/yargs/commit/2213e2ddc7263226fba717fb041dc3fde9bc2ee4) refactored for an argv getter, failing several tests (@substack) - [d1e7379](https://github.com/bcoe/yargs/commit/d1e737970f15c6c006bebdd8917706827ff2f0f2) just rescan for now, alias test passes (@substack) - [b2f8c99](https://github.com/bcoe/yargs/commit/b2f8c99cc477a8eb0fdf4cf178e1785b63185cfd) failing alias test (@substack) - [d0c0174](https://github.com/bcoe/yargs/commit/d0c0174daa144bfb6dc7290fdc448c393c475e15) .alias() (@substack) - [d85f431](https://github.com/bcoe/yargs/commit/d85f431ad7d07b058af3f2a57daa51495576c164) [api] Remove `.describe()` in favor of building upon the existing `.usage()` API (@indexzero) - [edbd527](https://github.com/bcoe/yargs/commit/edbd5272a8e213e71acd802782135c7f9699913a) [doc api] Add `.describe()`, `.options()`, and `.showHelp()` methods along with example. (@indexzero) - [be4902f](https://github.com/bcoe/yargs/commit/be4902ff0961ae8feb9093f2c0a4066463ded2cf) updates for coffee since it now does argv the node way (@substack) - [e24cb23](https://github.com/bcoe/yargs/commit/e24cb23798ee64e53b60815e7fda78b87f42390c) more general coffeescript detection (@substack) - [78ac753](https://github.com/bcoe/yargs/commit/78ac753e5d0ec32a96d39d893272afe989e42a4d) Don't trigger the CoffeeScript hack when running under node_g. (@papandreou) - [bcfe973](https://github.com/bcoe/yargs/commit/bcfe9731d7f90d4632281b8a52e8d76eb0195ae6) .string() but failing test (@substack) - [1987aca](https://github.com/bcoe/yargs/commit/1987aca28c7ba4e8796c07bbc547cb984804c826) test hex strings (@substack) - [ef36db3](https://github.com/bcoe/yargs/commit/ef36db32259b0b0d62448dc907c760e5554fb7e7) more keywords (@substack) - [cc53c56](https://github.com/bcoe/yargs/commit/cc53c56329960bed6ab077a79798e991711ba01d) Added camelCase function that converts --multi-word-option to camel case (so it becomes argv.multiWordOption). (@papandreou) - [60b57da](https://github.com/bcoe/yargs/commit/60b57da36797716e5783a633c6d5c79099016d45) fixed boolean bug by rescanning (@substack) - [dff6d07](https://github.com/bcoe/yargs/commit/dff6d078d97f8ac503c7d18dcc7b7a8c364c2883) boolean examples (@substack) - [0e380b9](https://github.com/bcoe/yargs/commit/0e380b92c4ef4e3c8dac1da18b5c31d85b1d02c9) boolean() with passing test (@substack) - [62644d4](https://github.com/bcoe/yargs/commit/62644d4bffbb8d1bbf0c2baf58a1d14a6359ef07) coffee compatibility with node regex for versions too (@substack) - [430fafc](https://github.com/bcoe/yargs/commit/430fafcf1683d23774772826581acff84b456827) argv._ fixed by fixing the coffee detection (@substack) - [343b8af](https://github.com/bcoe/yargs/commit/343b8afefd98af274ebe21b5a16b3a949ec5429f) whichNodeArgs test fails too (@substack) - [63df2f3](https://github.com/bcoe/yargs/commit/63df2f371f31e63d7f1dec2cbf0022a5f08da9d2) replicated mnot's bug in whichNodeEmpty test (@substack) - [35473a4](https://github.com/bcoe/yargs/commit/35473a4d93a45e5e7e512af8bb54ebb532997ae1) test for ./bin usage (@substack) - [13df151](https://github.com/bcoe/yargs/commit/13df151e44228eed10e5441c7cd163e086c458a4) don't coerce booleans to numbers (@substack) - [85f8007](https://github.com/bcoe/yargs/commit/85f8007e93b8be7124feea64b1f1916d8ba1894a) package bump for automatic number conversion (@substack) - [8f17014](https://github.com/bcoe/yargs/commit/8f170141cded4ccc0c6d67a849c5bf996aa29643) updated readme and examples with new auto-numberification goodness (@substack) - [73dc901](https://github.com/bcoe/yargs/commit/73dc9011ac968e39b55e19e916084a839391b506) auto number conversion works yay (@substack) - [bcec56b](https://github.com/bcoe/yargs/commit/bcec56b3d031e018064cbb691539ccc4f28c14ad) failing test for not-implemented auto numification (@substack) - [ebd2844](https://github.com/bcoe/yargs/commit/ebd2844d683feeac583df79af0e5124a7a7db04e) odd that eql doesn't check types careflly (@substack) - [fd854b0](https://github.com/bcoe/yargs/commit/fd854b02e512ce854b76386d395672a7969c1bc4) package author + keywords (@substack) - [656a1d5](https://github.com/bcoe/yargs/commit/656a1d5a1b7c0e49d72e80cb13f20671d56f76c6) updated readme with .default() stuff (@substack) - [cd7f8c5](https://github.com/bcoe/yargs/commit/cd7f8c55f0b82b79b690d14c5f806851236998a1) passing tests for new .default() behavior (@substack) - [932725e](https://github.com/bcoe/yargs/commit/932725e39ce65bc91a0385a5fab659a5fa976ac2) new default() thing for setting default key/values (@substack) - [4e6c7ab](https://github.com/bcoe/yargs/commit/4e6c7aba6374ac9ebc6259ecf91f13af7bce40e3) test for coffee usage (@substack) - [d54ffcc](https://github.com/bcoe/yargs/commit/d54ffccf2a5a905f51ed5108f7c647f35d64ae23) new --key value style with passing tests. NOTE: changes existing behavior (@substack) - [ed2a2d5](https://github.com/bcoe/yargs/commit/ed2a2d5d828100ebeef6385c0fb88d146a5cfe9b) package bump for summatix's coffee script fix (@substack) - [75a975e](https://github.com/bcoe/yargs/commit/75a975eed8430d28e2a79dc9e6d819ad545f4587) Added support for CoffeeScript (@summatix) - [56b2b1d](https://github.com/bcoe/yargs/commit/56b2b1de8d11f8a2b91979d8ae2d6db02d8fe64d) test coverage for the falsy check() usage (@substack) - [a4843a9](https://github.com/bcoe/yargs/commit/a4843a9f0e69ffb4afdf6a671d89eb6f218be35d) check bug fixed plus a handy string (@substack) - [857bd2d](https://github.com/bcoe/yargs/commit/857bd2db933a5aaa9cfecba0ced2dc9b415f8111) tests for demandCount, back up to 100% coverage (@substack) - [073b776](https://github.com/bcoe/yargs/commit/073b7768ebd781668ef05c13f9003aceca2f5c35) call demandCount from demand (@substack) - [4bd4b7a](https://github.com/bcoe/yargs/commit/4bd4b7a085c8b6ce1d885a0f486cc9865cee2db1) add demandCount to check for the number of arguments in the _ list (@marshall) - [b8689ac](https://github.com/bcoe/yargs/commit/b8689ac68dacf248119d242bba39a41cb0adfa07) Rebase checks. That will be its own module eventually. (@substack) - [e688370](https://github.com/bcoe/yargs/commit/e688370b576f0aa733c3f46183df69e1b561668e) a $0 like in perl (@substack) - [2e5e196](https://github.com/bcoe/yargs/commit/2e5e1960fc19afb21fb3293752316eaa8bcd3609) usage test hacking around process and console (@substack) - [fcc3521](https://github.com/bcoe/yargs/commit/fcc352163fbec6a1dfe8caf47a0df39de24fe016) description pun (@substack) - [87a1fe2](https://github.com/bcoe/yargs/commit/87a1fe29037ca2ca5fefda85141aaeb13e8ce761) mit/x11 license (@substack) - [8d089d2](https://github.com/bcoe/yargs/commit/8d089d24cd687c0bde3640a96c09b78f884900dd) bool example is more consistent and also shows off short option grouping (@substack) - [448d747](https://github.com/bcoe/yargs/commit/448d7473ac68e8e03d8befc9457b0d9e21725be0) start of the readme and examples (@substack) - [da74dea](https://github.com/bcoe/yargs/commit/da74dea799a9b59dbf022cbb8001bfdb0d52eec9) more tests for long and short captures (@substack) - [ab6387e](https://github.com/bcoe/yargs/commit/ab6387e6769ca4af82ca94c4c67c7319f0d9fcfa) silly bug in the tests with s/not/no/, all tests pass now (@substack) - [102496a](https://github.com/bcoe/yargs/commit/102496a319e8e06f6550d828fc2f72992c7d9ecc) hack an instance for process.argv onto Argv so the export can be called to create an instance or used for argv, which is the most common case (@substack) - [a01caeb](https://github.com/bcoe/yargs/commit/a01caeb532546d19f68f2b2b87f7036cfe1aaedd) divide example (@substack) - [443da55](https://github.com/bcoe/yargs/commit/443da55736acbaf8ff8b04d1b9ce19ab016ddda2) start of the lib with a package.json (@substack)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/README.md","tags":[],"body":"yargs ======== Yargs be a node.js library fer hearties tryin' ter parse optstrings. With yargs, ye be havin' a map that leads straight to yer treasure! Treasure of course, being a simple option hash. [![Build Status][travis-image]][travis-url] [![Dependency Status][gemnasium-image]][gemnasium-url] [![Coverage Status][coveralls-image]][coveralls-url] [![NPM version][npm-image]][npm-url] [![Windows Tests][windows-image]][windows-url] > Yargs is the official successor to optimist. Please feel free to submit issues and pull requests. If you'd like to contribute and don't know where to start, have a look at [the issue list](https://github.com/bcoe/yargs/issues) :) examples ======== With yargs, the options be just a hash! ------------------------------------------------------------------- plunder.js: ````javascript #!/usr/bin/env node var argv = require('yargs').argv; if (argv.ships > 3 && argv.distance = 0 && console.log.apply(console, arguments); } function INFO() { VERBOSE_LEVEL >= 1 && console.log.apply(console, arguments); } function DEBUG() { VERBOSE_LEVEL >= 2 && console.log.apply(console, arguments); } WARN(\"Showing only important stuff\"); INFO(\"Showing semi-important stuff too\"); DEBUG(\"Extra chatty mode\"); ```` *** $ node count.js Showing only important stuff $ node count.js -v Showing only important stuff Showing semi-important stuff too $ node count.js -vv Showing only important stuff Showing semi-important stuff too Extra chatty mode $ node count.js -v --verbose Showing only important stuff Showing semi-important stuff too Extra chatty mode Tell users how to use yer options and make demands. ------------------------------------------------- area.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .usage('Usage: $0 -w [num] -h [num]') .demand(['w','h']) .argv; console.log(\"The area is:\", argv.w * argv.h); ```` *** $ ./area.js -w 55 -h 11 The area is: 605 $ node ./area.js -w 4.91 -w 2.51 Usage: area.js -w [num] -h [num] Options: -w [required] -h [required] Missing required arguments: h After yer demands have been met, demand more! Ask for non-hyphenated arguments! ----------------------------------------- demand_count.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .demand(2) .argv; console.dir(argv); ```` *** $ ./demand_count.js a Not enough non-option arguments: got 1, need at least 2 $ ./demand_count.js a b { _: [ 'a', 'b' ], '$0': 'demand_count.js' } $ ./demand_count.js a b c { _: [ 'a', 'b', 'c' ], '$0': 'demand_count.js' } EVEN MORE SHIVER ME TIMBERS! ------------------ default_singles.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .default('x', 10) .default('y', 10) .argv ; console.log(argv.x + argv.y); ```` *** $ ./default_singles.js -x 5 15 default_hash.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .default({ x : 10, y : 10 }) .argv ; console.log(argv.x + argv.y); ```` *** $ ./default_hash.js -y 7 17 And if you really want to get all descriptive about it... --------------------------------------------------------- boolean_single.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .boolean('v') .argv ; console.dir(argv.v); console.dir(argv._); ```` *** $ ./boolean_single.js -v \"me hearties\" yo ho true [ 'me hearties', 'yo', 'ho' ] boolean_double.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .boolean(['x','y','z']) .argv ; console.dir([ argv.x, argv.y, argv.z ]); console.dir(argv._); ```` *** $ ./boolean_double.js -x -z one two three [ true, false, true ] [ 'one', 'two', 'three' ] Yargs is here to help you... --------------------------- Ye can describe parameters fer help messages and set aliases. Yargs figures out how ter format a handy help string automatically. line_count.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .usage('Usage: $0 [options]') .command('count', 'Count the lines in a file') .demand(1) .example('$0 count -f foo.js', 'count the lines in the given file') .demand('f') .alias('f', 'file') .nargs('f', 1) .describe('f', 'Load a file') .help('h') .alias('h', 'help') .epilog('copyright 2015') .argv; var fs = require('fs'); var s = fs.createReadStream(argv.file); var lines = 0; s.on('data', function (buf) { lines += buf.toString().match(/\\n/g).length; }); s.on('end', function () { console.log(lines); }); ```` *** $ node line_count.js count Usage: line_count.js [options] Commands: count Count the lines in a file Options: -f, --file Load a file [required] -h, --help Show help [boolean] Examples: line_count.js count -f foo.js count the lines in the given file copyright 2015 Missing required arguments: f $ node line_count.js count --file line_count.js 26 $ node line_count.js count -f line_count.js 26 methods ======= By itself, ````javascript require('yargs').argv ```` will use the `process.argv` array to construct the `argv` object. You can pass in the `process.argv` yourself: ````javascript require('yargs')([ '-x', '1', '-y', '2' ]).argv ```` or use `.parse()` to do the same thing: ````javascript require('yargs').parse([ '-x', '1', '-y', '2' ]) ```` The rest of these methods below come in just before the terminating `.argv`. .alias(key, alias) ------------------ Set key names as equivalent such that updates to a key will propagate to aliases and vice-versa. Optionally `.alias()` can take an object that maps keys to aliases. Each key of this object should be the canonical version of the option, and each value should be a string or an array of strings. .argv ----- Get the arguments as a plain old object. Arguments without a corresponding flag show up in the `argv._` array. The script name or node command is available at `argv.$0` similarly to how `$0` works in bash or perl. If `yargs` is executed in an environment that embeds node and there's no script name (e.g. [Electron](http://electron.atom.io/) or [nw.js](http://nwjs.io/)), it will ignore the first parameter since it expects it to be the script name. In order to override this behavior, use `.parse(process.argv.slice(1))` instead of `.argv` and the first parameter won't be ignored. .array(key) ---------- Tell the parser to interpret `key` as an array. If `.array('foo')` is set, `--foo foo bar` will be parsed as `['foo', 'bar']` rather than as `'foo'`. .boolean(key) ------------- Interpret `key` as a boolean. If a non-flag option follows `key` in `process.argv`, that string won't get set as the value of `key`. `key` will default to `false`, unless a `default(key, undefined)` is explicitly set. If `key` is an array, interpret all the elements as booleans. .check(fn) ---------- Check that certain conditions are met in the provided arguments. `fn` is called with two arguments, the parsed `argv` hash and an array of options and their aliases. If `fn` throws or returns a non-truthy value, show the thrown error, usage information, and exit. .choices(key, choices) ---------------------- Limit valid values for `key` to a predefined set of `choices`, given as an array or as an individual value. ```js var argv = require('yargs') .alias('i', 'ingredient') .describe('i', 'choose your sandwich ingredients') .choices('i', ['peanut-butter', 'jelly', 'banana', 'pickles']) .help('help') .argv ``` If this method is called multiple times, all enumerated values will be merged together. Choices are generally strings or numbers, and value matching is case-sensitive. Optionally `.choices()` can take an object that maps multiple keys to their choices. Choices can also be specified as `choices` in the object given to `option()`. ```js var argv = require('yargs') .option('size', { alias: 's', describe: 'choose a size', choices: ['xs', 's', 'm', 'l', 'xl'] }) .argv ``` .command(cmd, desc, [fn]) ------------------- Document the commands exposed by your application. Use `desc` to provide a description for each command your application accepts (the values stored in `argv._`). Set `desc` to `false` to create a hidden command. Hidden commands don't show up in the help output and aren't available for completion. Optionally, you can provide a handler `fn` which will be executed when a given command is provided. The handler will be executed with an instance of `yargs`, which can be used to compose nested commands. Here's an example of top-level and nested commands in action: ```js var argv = require('yargs') .usage('npm ') .command('install', 'tis a mighty fine package to install') .command('publish', 'shiver me timbers, should you be sharing all that', function (yargs) { argv = yargs.option('f', { alias: 'force', description: 'yar, it usually be a bad idea' }) .help('help') .argv }) .help('help') .argv; ``` .completion(cmd, [description], [fn]); ------------- Enable bash-completion shortcuts for commands and options. `cmd`: When present in `argv._`, will result in the `.bashrc` completion script being outputted. To enable bash completions, concat the generated script to your `.bashrc` or `.bash_profile`. `description`: Provide a description in your usage instructions for the command that generates bash completion scripts. `fn`: Rather than relying on yargs' default completion functionality, which shiver me timbers is pretty awesome, you can provide your own completion method. ```js var argv = require('yargs') .completion('completion', function(current, argv) { // 'current' is the current command being completed. // 'argv' is the parsed arguments so far. // simply return an array of completions. return [ 'foo', 'bar' ]; }) .argv; ``` You can also provide asynchronous completions. ```js var argv = require('yargs') .completion('completion', function(current, argv, done) { setTimeout(function() { done([ 'apple', 'banana' ]); }, 500); }) .argv; ``` But wait, there's more! You can return an asynchronous promise. ```js var argv = require('yargs') .completion('completion', function(current, argv, done) { return new Promise(function (resolve, reject) { setTimeout(function () { resolve(['apple', 'banana']) }, 10) }) }) .argv; ``` .config(key, [description]) ------------ Tells the parser that if the option specified by `key` is passed in, it should be interpreted as a path to a JSON config file. The file is loaded and parsed, and its properties are set as arguments. If present, the `description` parameter customizes the description of the config (`key`) option in the usage string. .count(key) ------------ Interpret `key` as a boolean flag, but set its parsed value to the number of flag occurrences rather than `true` or `false`. Default value is thus `0`. .default(key, value, [description]) -------------------- Set `argv[key]` to `value` if no option was specified in `process.argv`. Optionally `.default()` can take an object that maps keys to default values. But wait, there's more! The default value can be a `function` which returns a value. The name of the function will be used in the usage string: ```js var argv = require('yargs') .default('random', function randomValue() { return Math.random() * 256; }).argv; ``` Optionally, `description` can also be provided and will take precedence over displaying the value in the usage instructions: ```js .default('timeout', 60000, '(one-minute)') ``` .demand(key, [msg | boolean]) ------------------------------ .demand(count, [max], [msg]) ------------------------------ If `key` is a string, show the usage information and exit if `key` wasn't specified in `process.argv`. If `key` is a number, demand at least as many non-option arguments, which show up in `argv._`. A second number can also optionally be provided, which indicates the maximum number of non-option arguments. If `key` is an array, demand each element. If a `msg` string is given, it will be printed when the argument is missing, instead of the standard error message. This is especially helpful for the non-option arguments in `argv._`. If a `boolean` value is given, it controls whether the option is demanded; this is useful when using `.options()` to specify command line parameters. .describe(key, desc) -------------------- Describe a `key` for the generated usage information. Optionally `.describe()` can take an object that maps keys to descriptions. .detectLocale(boolean) ----------- Should yargs attempt to detect the os' locale? Defaults to `true`. .epilog(str) ------------ .epilogue(str) -------------- A message to print at the end of the usage instructions, e.g. ```js var argv = require('yargs') .epilogue('for more information, find our manual at http://example.com'); ``` .example(cmd, desc) ------------------- Give some example invocations of your program. Inside `cmd`, the string `$0` will get interpolated to the current script name or node command for the present script similar to how `$0` works in bash or perl. Examples will be printed out as part of the help message. .exitProcess(enable) ---------------------------------- By default, yargs exits the process when the user passes a help flag, uses the `.version` functionality, or when validation fails. Calling `.exitProcess(false)` disables this behavior, enabling further actions after yargs have been validated. .fail(fn) --------- Method to execute when a failure occurs, rather than printing the failure message. `fn` is called with the failure message that would have been printed. .help([option, [description]]) ------------------------------ Add an option (e.g. `--help`) that displays the usage string and exits the process. If present, the `description` parameter customizes the description of the help option in the usage string. If invoked without parameters, `.help()` returns the generated usage string. Example: ```js var yargs = require(\"yargs\") .usage(\"$0 -operand1 number -operand2 number -operation [add|subtract]\"); console.log(yargs.help()); ``` Later on, `argv` can be retrieved with `yargs.argv`. .implies(x, y) -------------- Given the key `x` is set, it is required that the key `y` is set. Optionally `.implies()` can accept an object specifying multiple implications. .locale() --------- Return the locale that yargs is currently using. By default, yargs will auto-detect the operating system's locale so that yargs-generated help content will display in the user's language. To override this behavior with a static locale, pass the desired locale as a string to this method (see below). .locale(locale) --------------- Override the auto-detected locale from the user's operating system with a static locale. Note that the OS locale can be modified by setting/exporting the `LC_ALL` environment variable. ```js var argv = require('yargs') .usage('./$0 - follow ye instructions true') .option('option', { alias: 'o', describe: \"'tis a mighty fine option\", demand: true }) .command('run', \"Arrr, ya best be knowin' what yer doin'\") .example('$0 run foo', \"shiver me timbers, here's an example for ye\") .help('help') .wrap(70) .locale('pirate') .argv ``` *** ```shell ./test.js - follow ye instructions true Choose yer command: run Arrr, ya best be knowin' what yer doin' Options for me hearties! --option, -o 'tis a mighty fine option [requi-yar-ed] --help Parlay this here code of conduct [boolean] Ex. marks the spot: test.js run foo shiver me timbers, here's an example for ye Ye be havin' to set the followin' argument land lubber: option ``` Locales currently supported: * **de:** German. * **en:** American English. * **es:** Spanish. * **fr:** French. * **ja:** Japanese. * **pt:** Portuguese. * **zh:** Chinese. * **pirate:** American Pirate. To submit a new translation for yargs: 1. use `./locales/en.json` as a starting point. 2. submit a pull request with the new locale file. .nargs(key, count) ----------- The number of arguments that should be consumed after a key. This can be a useful hint to prevent parsing ambiguity. For example: ```js var argv = require('yargs') .nargs('token', 1) .parse(['--token', '-my-token']); ``` parses as: `{ _: [], token: '-my-token', '$0': 'node test' }` Optionally `.nargs()` can take an object of `key`/`narg` pairs. .option(key, opt) ----------------- .options(key, opt) ------------------ Instead of chaining together `.alias().demand().default().describe().string()`, you can specify keys in `opt` for each of the chainable methods. For example: ````javascript var argv = require('yargs') .option('f', { alias: 'file', demand: true, default: '/etc/passwd', describe: 'x marks the spot', type: 'string' }) .argv ; ```` is the same as ````javascript var argv = require('yargs') .alias('f', 'file') .demand('f') .default('f', '/etc/passwd') .describe('f', 'x marks the spot') .string('f') .argv ; ```` Optionally `.options()` can take an object that maps keys to `opt` parameters. ````javascript var argv = require('yargs') .options({ 'f': { alias: 'file', demand: true, default: '/etc/passwd', describe: 'x marks the spot', type: 'string' } }) .argv ; ```` Valid `opt` keys include: - `alias`: string or array of strings, alias(es) for the canonical option key, see [`alias()`](#alias) - `array`: boolean, interpret option as an array, see [`array()`](#array) - `boolean`: boolean, interpret option as a boolean flag, see [`boolean()`](#boolean) - `choices`: value or array of values, limit valid option arguments to a predefined set, see [`choices()`](#choices) - `config`: boolean, interpret option as a path to a JSON config file, see [`config()`](#config) - `count`: boolean, interpret option as a count of boolean flags, see [`count()`](#count) - `default`: value, set a default value for the option, see [`default()`](#default) - `defaultDescription`: string, use this description for the default value in help content, see [`default()`](#default) - `demand`/`require`/`required`: boolean or string, demand the option be given, with optional error message, see [`demand()`](#demand) - `desc`/`describe`/`description`: string, the option description for help content, see [`describe()`](#describe) - `nargs`: number, specify how many arguments should be consumed for the option, see [`nargs()`](#nargs) - `requiresArg`: boolean, require the option be specified with a value, see [`requiresArg()`](#requiresArg) - `string`: boolean, interpret option as a string, see [`string()`](#string) - `type`: one of the following strings - `'array'`: synonymous for `array: true`, see [`array()`](#array) - `'boolean'`: synonymous for `boolean: true`, see [`boolean()`](#boolean) - `'count'`: synonymous for `count: true`, see [`count()`](#count) - `'string'`: synonymous for `string: true`, see [`string()`](#string) .parse(args) ------------ Parse `args` instead of `process.argv`. Returns the `argv` object. .require(key, [msg | boolean]) ------------------------------ .required(key, [msg | boolean]) ------------------------------ An alias for [`demand()`](#demand). See docs there. .requiresArg(key) ----------------- Specifies either a single option key (string), or an array of options that must be followed by option values. If any option value is missing, show the usage information and exit. The default behavior is to set the value of any key not followed by an option value to `true`. .reset() -------- Reset the argument object built up so far. This is useful for creating nested command line interfaces. ```js var yargs = require('yargs') .usage('$0 command') .command('hello', 'hello command') .command('world', 'world command') .demand(1, 'must provide a valid command'), argv = yargs.argv, command = argv._[0]; if (command === 'hello') { yargs.reset() .usage('$0 hello') .help('h') .example('$0 hello', 'print the hello message!') .argv console.log('hello!'); } else if (command === 'world'){ yargs.reset() .usage('$0 world') .help('h') .example('$0 world', 'print the world message!') .argv console.log('world!'); } else { yargs.showHelp(); } ``` .showCompletionScript() ---------------------- Generate a bash completion script. Users of your application can install this script in their `.bashrc`, and yargs will provide completion shortcuts for commands and options. .showHelp(consoleLevel='error') --------------------------- Print the usage data using the [`console`](https://nodejs.org/api/console.html) function `consoleLevel` for printing. Example: ```js var yargs = require(\"yargs\") .usage(\"$0 -operand1 number -operand2 number -operation [add|subtract]\"); yargs.showHelp(); //prints to stderr using console.error() ``` Or, to print the usage data to `stdout` instead, you can specify the use of `console.log`: ```js yargs.showHelp(\"log\"); //prints to stdout using console.log() ``` Later on, `argv` can be retrieved with `yargs.argv`. .showHelpOnFail(enable, [message]) ---------------------------------- By default, yargs outputs a usage string if any error is detected. Use the `.showHelpOnFail()` method to customize this behavior. If `enable` is `false`, the usage string is not output. If the `message` parameter is present, this message is output after the error message. line_count.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .usage('Count the lines in a file.\\nUsage: $0 -f ') .demand('f') .alias('f', 'file') .describe('f', 'Load a file') .string('f') .showHelpOnFail(false, 'Specify --help for available options') .help('help') .argv; // etc. ```` *** ``` $ node line_count.js Missing argument value: f Specify --help for available options ``` .strict() --------- Any command-line argument given that is not demanded, or does not have a corresponding description, will be reported as an error. .string(key) ------------ Tell the parser logic not to interpret `key` as a number or boolean. This can be useful if you need to preserve leading zeros in an input. If `key` is an array, interpret all the elements as strings. `.string('_')` will result in non-hyphenated arguments being interpreted as strings, regardless of whether they resemble numbers. .updateLocale(obj) ------------------ .updateStrings(obj) ------------------ Override the default strings used by yargs with the key/value pairs provided in `obj`: ```js var argv = require('yargs') .command('run', 'the run command') .help('help') .updateStrings({ 'Commands:': 'My Commands -->\\n' }) .wrap(null) .argv ``` *** ```shell My Commands --> run the run command Options: --help Show help [boolean] ``` If you explicitly specify a `locale()`, you should do so *before* calling `updateStrings()`. .usage(message, [opts]) --------------------- Set a usage message to show which commands to use. Inside `message`, the string `$0` will get interpolated to the current script name or node command for the present script similar to how `$0` works in bash or perl. `opts` is optional and acts like calling `.options(opts)`. .version(version, [option], [description]) ---------------------------------------- Add an option (e.g. `--version`) that displays the version number (given by the `version` parameter) and exits the process. If present, the `description` parameter customizes the description of the version option in the usage string. You can provide a `function` for version, rather than a string. This is useful if you want to use the version from your package.json: ```js var argv = require('yargs') .version(function() { return require('../package').version; }) .argv; ``` .wrap(columns) -------------- Format usage output to wrap at `columns` many columns. By default wrap will be set to `Math.min(80, windowWidth)`. Use `.wrap(null)` to specify no column limit (no right-align). Use `.wrap(yargs.terminalWidth())` to maximize the width of yargs' usage instructions. parsing tricks ============== stop parsing ------------ Use `--` to stop parsing flags and stuff the remainder into `argv._`. $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4 { _: [ '-c', '3', '-d', '4' ], a: 1, b: 2, '$0': 'examples/reflect.js' } negate fields ------------- If you want to explicitly set a field to false instead of just leaving it undefined or to override a default you can do `--no-key`. $ node examples/reflect.js -a --no-b { _: [], a: true, b: false, '$0': 'examples/reflect.js' } numbers ------- Every argument that looks like a number (`!isNaN(Number(arg))`) is converted to one. This way you can just `net.createConnection(argv.port)` and you can add numbers out of `argv` with `+` without having that mean concatenation, which is super frustrating. duplicates ---------- If you specify a flag multiple times it will get turned into an array containing all the values in order. $ node examples/reflect.js -x 5 -x 8 -x 0 { _: [], x: [ 5, 8, 0 ], '$0': 'examples/reflect.js' } dot notation ------------ When you use dots (`.`s) in argument names, an implicit object path is assumed. This lets you organize arguments into nested objects. $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5 { _: [], foo: { bar: { baz: 33 }, quux: 5 }, '$0': 'examples/reflect.js' } short numbers ------------- Short numeric `-n5` style arguments work too: $ node examples/reflect.js -n123 -m456 { _: [], n: 123, m: 456, '$0': 'examples/reflect.js' } installation ============ With [npm](http://github.com/isaacs/npm), just do: npm install yargs or clone this project on github: git clone http://github.com/bcoe/yargs.git To run the tests with npm, just do: npm test inspired by =========== This module is loosely inspired by Perl's [Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm). [travis-url]: https://travis-ci.org/bcoe/yargs [travis-image]: https://img.shields.io/travis/bcoe/yargs.svg [gemnasium-url]: https://gemnasium.com/bcoe/yargs [gemnasium-image]: https://img.shields.io/gemnasium/bcoe/yargs.svg [coveralls-url]: https://coveralls.io/github/bcoe/yargs [coveralls-image]: https://img.shields.io/coveralls/bcoe/yargs.svg [npm-url]: https://npmjs.org/package/yargs [npm-image]: https://img.shields.io/npm/v/yargs.svg [windows-url]: https://ci.appveyor.com/project/bcoe/yargs [windows-image]: https://img.shields.io/appveyor/ci/bcoe/yargs/master.svg?label=Windows%20Tests"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/camelcase/readme.md","tags":[],"body":"# camelcase [![Build Status](https://travis-ci.org/sindresorhus/camelcase.svg?branch=master)](https://travis-ci.org/sindresorhus/camelcase) > Convert a dash/dot/underscore/space separated string to camelCase: `foo-bar` → `fooBar` ## Install ```sh $ npm install --save camelcase ``` ## Usage ```js var camelCase = require('camelcase'); camelCase('foo-bar'); //=> fooBar camelCase('foo_bar'); //=> fooBar camelCase('Foo-Bar'); //=> fooBar camelCase('--foo.bar'); //=> fooBar camelCase('__foo__bar__'); //=> fooBar camelCase('foo bar'); //=> fooBar console.log(process.argv[3]); //=> --foo-bar camelCase(process.argv[3]); //=> fooBar camelCase('foo', 'bar'); //=> fooBar camelCase('__foo__', '--bar'); //=> fooBar ``` ## Related See [`decamelize`](https://github.com/sindresorhus/decamelize) for the inverse. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/cliui/CHANGELOG.md","tags":[],"body":"# Change Log All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines. # [3.2.0](https://github.com/yargs/cliui/compare/v3.1.2...v3.2.0) (2016-04-11) ### Bug Fixes * reduces tarball size ([acc6c33](https://github.com/yargs/cliui/commit/acc6c33)) ### Features * adds standard-version for release management ([ff84e32](https://github.com/yargs/cliui/commit/ff84e32))"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/cliui/README.md","tags":[],"body":"# cliui [![Build Status](https://travis-ci.org/yargs/cliui.svg)](https://travis-ci.org/yargs/cliui) [![Coverage Status](https://coveralls.io/repos/yargs/cliui/badge.svg?branch=)](https://coveralls.io/r/yargs/cliui?branch=) [![NPM version](https://img.shields.io/npm/v/cliui.svg)](https://www.npmjs.com/package/cliui) [![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version) easily create complex multi-column command-line-interfaces. ## Example ```js var ui = require('cliui')({ width: 80 }) ui.div('Usage: $0 [command] [options]') ui.div({ text: 'Options:', padding: [2, 0, 2, 0] }) ui.div( { text: \"-f, --file\", width: 20, padding: [0, 4, 0, 4] }, { text: \"the file to load.\" + chalk.green(\"(if this description is long it wraps).\") , width: 20 }, { text: chalk.red(\"[required]\"), align: 'right' } ) console.log(ui.toString()) ``` ## Layout DSL cliui exposes a simple layout DSL: If you create a single `ui.row`, passing a string rather than an object: * `\\n`: characters will be interpreted as new rows. * `\\t`: characters will be interpreted as new columns. * `\\s`: characters will be interpreted as padding. **as an example...** ```js var ui = require('./')({ width: 60 }) ui.div( 'Usage: node ./bin/foo.js\\n' + ' \\t provide a regex\\n' + ' \\t provide a glob\\t [required]' ) console.log(ui.toString()) ``` **will output:** ```shell Usage: node ./bin/foo.js provide a regex provide a glob [required] ``` ## Methods ```js cliui = require('cliui') ``` ### cliui({width: integer}) Specify the maximum width of the UI being generated. ### cliui({wrap: boolean}) Enable or disable the wrapping of text in a column. ### cliui.div(column, column, column) Create a row with any number of columns, a column can either be a string, or an object with the following options: * **width:** the width of a column. * **align:** alignment, `right` or `center`. * **padding:** `[top, right, bottom, left]`. * **border:** should a border be placed around the div? ### cliui.span(column, column, column) Similar to `div`, except the next row will be appended without a new line being created."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/cliui/node_modules/string-width/node_modules/code-point-at/node_modules/number-is-nan/readme.md","tags":[],"body":"# number-is-nan [![Build Status](https://travis-ci.org/sindresorhus/number-is-nan.svg?branch=master)](https://travis-ci.org/sindresorhus/number-is-nan) > ES6 [`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save number-is-nan ``` ## Usage ```js var numberIsNan = require('number-is-nan'); numberIsNan(NaN); //=> true numberIsNan('unicorn'); //=> false ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/cliui/node_modules/string-width/node_modules/code-point-at/readme.md","tags":[],"body":"# code-point-at [![Build Status](https://travis-ci.org/sindresorhus/code-point-at.svg?branch=master)](https://travis-ci.org/sindresorhus/code-point-at) > ES2015 [`String#codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save code-point-at ``` ## Usage ```js var codePointAt = require('code-point-at'); codePointAt('🐴'); //=> 128052 codePointAt('abc', 2); //=> 99 ``` ## API ### codePointAt(input, [position]) ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/cliui/node_modules/string-width/node_modules/is-fullwidth-code-point/node_modules/number-is-nan/readme.md","tags":[],"body":"# number-is-nan [![Build Status](https://travis-ci.org/sindresorhus/number-is-nan.svg?branch=master)](https://travis-ci.org/sindresorhus/number-is-nan) > ES6 [`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save number-is-nan ``` ## Usage ```js var numberIsNan = require('number-is-nan'); numberIsNan(NaN); //=> true numberIsNan('unicorn'); //=> false ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/cliui/node_modules/string-width/node_modules/is-fullwidth-code-point/readme.md","tags":[],"body":"# is-fullwidth-code-point [![Build Status](https://travis-ci.org/sindresorhus/is-fullwidth-code-point.svg?branch=master)](https://travis-ci.org/sindresorhus/is-fullwidth-code-point) > Check if the character represented by a given [Unicode code point](https://en.wikipedia.org/wiki/Code_point) is [fullwidth](https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms) ## Install ``` $ npm install --save is-fullwidth-code-point ``` ## Usage ```js var isFullwidthCodePoint = require('is-fullwidth-code-point'); isFullwidthCodePoint('谢'.codePointAt()); //=> true isFullwidthCodePoint('a'.codePointAt()); //=> false ``` ## API ### isFullwidthCodePoint(input) #### input Type: `number` [Code point](https://en.wikipedia.org/wiki/Code_point) of a character. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/cliui/node_modules/string-width/readme.md","tags":[],"body":"# string-width [![Build Status](https://travis-ci.org/sindresorhus/string-width.svg?branch=master)](https://travis-ci.org/sindresorhus/string-width) > Get the visual width of a string - the number of columns required to display it Some Unicode characters are [fullwidth](https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms) and use double the normal width. Useful to be able to measure the actual width of command-line output. ## Install ``` $ npm install --save string-width ``` ## Usage ```js var stringWidth = require('string-width'); stringWidth('古'); //=> 2 stringWidth('\\u001b[1m古\\u001b[22m'); //=> 2 stringWidth('a'); //=> 1 ``` ## Related - [string-width-cli](https://github.com/sindresorhus/string-width-cli) - CLI for this module - [string-length](https://github.com/sindresorhus/string-length) - Get the real length of a string ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/cliui/node_modules/strip-ansi/node_modules/ansi-regex/readme.md","tags":[],"body":"# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex) > Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save ansi-regex ``` ## Usage ```js var ansiRegex = require('ansi-regex'); ansiRegex().test('\\u001b[4mcake\\u001b[0m'); //=> true ansiRegex().test('cake'); //=> false '\\u001b[4mcake\\u001b[0m'.match(ansiRegex()); //=> ['\\u001b[4m', '\\u001b[0m'] ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/cliui/node_modules/strip-ansi/readme.md","tags":[],"body":"# strip-ansi [![Build Status](https://travis-ci.org/chalk/strip-ansi.svg?branch=master)](https://travis-ci.org/chalk/strip-ansi) > Strip [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save strip-ansi ``` ## Usage ```js var stripAnsi = require('strip-ansi'); stripAnsi('\\u001b[4mcake\\u001b[0m'); //=> 'cake' ``` ## Related - [strip-ansi-cli](https://github.com/chalk/strip-ansi-cli) - CLI for this module - [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes - [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/cliui/node_modules/wrap-ansi/readme.md","tags":[],"body":"# wrap-ansi [![Build Status](https://travis-ci.org/chalk/wrap-ansi.svg?branch=master)](https://travis-ci.org/chalk/wrap-ansi) [![Coverage Status](https://coveralls.io/repos/chalk/wrap-ansi/badge.svg?branch=master&service=github)](https://coveralls.io/github/chalk/wrap-ansi?branch=master) > Wordwrap a string with [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors_and_Styles) ## Install ``` $ npm install --save wrap-ansi ``` ## Usage ```js const chalk = require('chalk'); const wrapAnsi = require('wrap-ansi'); const input = 'The quick brown ' + chalk.red('fox jumped over ') + 'the lazy ' + chalk.green('dog and then ran away with the unicorn.'); console.log(wrapAnsi(input, 20)); ``` ## API ### wrapAnsi(input, columns, [options]) Wrap words to the specified column width. #### input Type: `string` String with ANSI escape codes. Like one styled by [`chalk`](https://github.com/chalk/chalk). #### columns Type: `number` Number of columns to wrap the text to. #### options.hard Type: `boolean` Default: `false` By default the wrap is soft, meaning long words may extend past the column width. Setting this to `true` will make it hard wrap at the column width. ## Related - [slice-ansi](https://github.com/chalk/slice-ansi) - Slice a string with ANSI escape codes - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right - [jsesc](https://github.com/mathiasbynens/jsesc) - Generate ASCII-only output from Unicode strings. Useful for creating test fixtures. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/decamelize/readme.md","tags":[],"body":"# decamelize [![Build Status](https://travis-ci.org/sindresorhus/decamelize.svg?branch=master)](https://travis-ci.org/sindresorhus/decamelize) > Convert a camelized string into a lowercased one with a custom separator > Example: `unicornRainbow` → `unicorn_rainbow` ## Install ``` $ npm install --save decamelize ``` ## Usage ```js const decamelize = require('decamelize'); decamelize('unicornRainbow'); //=> 'unicorn_rainbow' decamelize('unicornRainbow', '-'); //=> 'unicorn-rainbow' ``` ## API ### decamelize(input, [separator]) #### input Type: `string` #### separator Type: `string` Default: `_` ## Related See [`camelcase`](https://github.com/sindresorhus/camelcase) for the inverse. ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/os-locale/node_modules/lcid/node_modules/invert-kv/readme.md","tags":[],"body":"# invert-kv [![Build Status](https://travis-ci.org/sindresorhus/invert-kv.svg?branch=master)](https://travis-ci.org/sindresorhus/invert-kv) > Invert the key/value of an object. Example: `{foo: 'bar'}` → `{bar: 'foo'}` ## Install ```sh $ npm install --save invert-kv ``` ## Usage ```js var invertKv = require('invert-kv'); invertKv({foo: 'bar', unicorn: 'rainbow'}); //=> {bar: 'foo', rainbow: 'unicorn'} ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/os-locale/node_modules/lcid/readme.md","tags":[],"body":"# lcid [![Build Status](https://travis-ci.org/sindresorhus/lcid.svg?branch=master)](https://travis-ci.org/sindresorhus/lcid) > Mapping between [standard locale identifiers](http://en.wikipedia.org/wiki/Locale) and [Windows locale identifiers (LCID)](http://en.wikipedia.org/wiki/Locale#Specifics_for_Microsoft_platforms) Based on the [mapping](https://github.com/python/cpython/blob/be2a1a76fa43bb1ea1b3577bb5bdd506a2e90e37/Lib/locale.py#L1395-L1604) used in the Python standard library. The mapping itself is just a [JSON file](lcid.json) and can be used wherever. ## Install ``` $ npm install --save lcid ``` ## Usage ```js var lcid = require('lcid'); lcid.from(1044); //=> 'nb_NO' lcid.to('nb_NO'); //=> 1044 lcid.all; //=> {'af_ZA': 1078, ...} ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/os-locale/readme.md","tags":[],"body":"# os-locale [![Build Status](https://travis-ci.org/sindresorhus/os-locale.svg?branch=master)](https://travis-ci.org/sindresorhus/os-locale) > Get the system [locale](http://en.wikipedia.org/wiki/Locale) Useful for localizing your module or app. POSIX systems: The returned locale refers to the [`LC_MESSAGE`](http://www.gnu.org/software/libc/manual/html_node/Locale-Categories.html#Locale-Categories) category, suitable for selecting the language used in the user interface for message translation. ## Install ``` $ npm install --save os-locale ``` ## Usage ```js var osLocale = require('os-locale'); osLocale(function (err, locale) { console.log(locale); //=> 'en_US' }); ``` ## API ### osLocale([options], callback(error, locale)) ### osLocale.sync([options]) Returns the locale. #### options.spawn Type: `boolean` Default: `true` Set to `false` to avoid spawning subprocesses and instead only resolve the locale from environment variables. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/window-size/README.md","tags":[],"body":"# window-size [![NPM version](https://badge.fury.io/js/window-size.svg)](http://badge.fury.io/js/window-size) [![Build Status](https://travis-ci.org/jonschlinkert/window-size.svg)](https://travis-ci.org/jonschlinkert/window-size) > Reliable way to to get the height and width of the terminal/console in a node.js environment. ## Install Install with [npm](https://www.npmjs.com/) ```sh $ npm i window-size --save ``` ## Usage ```js var size = require('window-size'); size.height; // \"25\" (rows) size.width; // \"80\" (columns) ``` ## Other projects * [base-cli](https://www.npmjs.com/package/base-cli): Plugin for base-methods that maps built-in methods to CLI args (also supports methods from a… [more](https://www.npmjs.com/package/base-cli) | [homepage](https://github.com/jonschlinkert/base-cli) * [lint-deps](https://www.npmjs.com/package/lint-deps): CLI tool that tells you when dependencies are missing from package.json and offers you a… [more](https://www.npmjs.com/package/lint-deps) | [homepage](https://github.com/jonschlinkert/lint-deps) * [yargs](https://www.npmjs.com/package/yargs): Light-weight option parsing with an argv hash. No optstrings attached. | [homepage](https://github.com/bcoe/yargs#readme) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/window-size/issues/new). ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2014-2015 [Jon Schlinkert](https://github.com/jonschlinkert) Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on November 15, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/localtunnel/node_modules/yargs/node_modules/y18n/README.md","tags":[],"body":"# y18n [![Build Status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url] [![NPM version][npm-image]][npm-url] [![js-standard-style][standard-image]][standard-url] The bare-bones internationalization library used by yargs. Inspired by [i18n](https://www.npmjs.com/package/i18n). ## Examples _simple string translation:_ ```js var __ = require('y18n').__ console.log(__('my awesome string %s', 'foo')) ``` output: `my awesome string foo` _pluralization support:_ ```js var __n = require('y18n').__n console.log(__n('one fish %s', '%d fishes %s', 2, 'foo')) ``` output: `2 fishes foo` ## JSON Language Files The JSON language files should be stored in a `./locales` folder. File names correspond to locales, e.g., `en.json`, `pirate.json`. When strings are observed for the first time they will be added to the JSON file corresponding to the current locale. ## Methods ### require('y18n')(config) Create an instance of y18n with the config provided, options include: * `directory`: the locale directory, default `./locales`. * `updateFiles`: should newly observed strings be updated in file, default `true`. * `locale`: what locale should be used. * `fallbackToLanguage`: should fallback to a language-only file (e.g. `en.json`) be allowed if a file matching the locale does not exist (e.g. `en_US.json`), default `true`. ### y18n.\\_\\_(str, arg, arg, arg) Print a localized string, `%s` will be replaced with `arg`s. ### y18n.\\_\\_n(singularString, pluralString, count, arg, arg, arg) Print a localized string with appropriate pluralization. If `%d` is provided in the string, the `count` will replace this placeholder. ### y18n.setLocale(str) Set the current locale being used. ### y18n.getLocale() What locale is currently being used? ### y18n.updateLocale(obj) Update the current locale with the key value pairs in `obj`. ## License ISC [travis-url]: https://travis-ci.org/yargs/y18n [travis-image]: https://img.shields.io/travis/yargs/y18n.svg [coveralls-url]: https://coveralls.io/github/yargs/y18n [coveralls-image]: https://img.shields.io/coveralls/yargs/y18n.svg [npm-url]: https://npmjs.org/package/y18n [npm-image]: https://img.shields.io/npm/v/y18n.svg [standard-image]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg [standard-url]: https://github.com/feross/standard"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/README.md","tags":[],"body":"# micromatch [![NPM version](https://img.shields.io/npm/v/micromatch.svg?style=flat)](https://www.npmjs.com/package/micromatch) [![NPM downloads](https://img.shields.io/npm/dm/micromatch.svg?style=flat)](https://npmjs.org/package/micromatch) [![Build Status](https://img.shields.io/travis/jonschlinkert/micromatch.svg?style=flat)](https://travis-ci.org/jonschlinkert/micromatch) > Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. Micromatch supports all of the same matching features as minimatch and micromatch. * [mm()](#usage) is the same as [multimatch()](https://github.com/sindresorhus/multimatch) * [mm.match()](#match) is the same as [minimatch.match()](https://github.com/isaacs/minimatch#readme) * use [mm.isMatch()](#ismatch) instead of [minimatch()](https://github.com/isaacs/minimatch#readme) ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install micromatch --save ``` ## Start matching! ```js var mm = require('micromatch'); console.log(mm([''])) ``` ## Table of contents *** ### Features * [Drop-in replacement](#switch-from-minimatch) for [minimatch](https://github.com/isaacs/minimatch#readme) and [multimatch](https://github.com/sindresorhus/multimatch) * Built-in support for multiple glob patterns, like `['foo/*.js', '!bar.js']` * [Brace Expansion](https://github.com/jonschlinkert/braces) (`foo/bar-{1..5}.md`, `one/{two,three}/four.md`) * Typical glob patterns, like `**/*`, `a/b/*.js`, or `['foo/*.js', '!bar.js']` * Methods like `.isMatch()`, `.contains()` and `.any()` **Extended globbing features:** * Logical `OR` (`foo/bar/(abc|xyz).js`) * Regex character classes (`foo/bar/baz-[1-5].js`) * POSIX [bracket expressions](https://github.com/jonschlinkert/expand-brackets) (`**/[[:alpha:][:digit:]]/`) * [extglobs](https://github.com/jonschlinkert/extglob) (`**/+(x|y)`, `!(a|b)`, etc). You can combine these to create whatever matching patterns you need. **Example** ```js // double-negation! mm(['fa', 'fb', 'f', 'fo'], '!(f!(o))'); //=> ['fo'] ``` ## Why switch to micromatch? * Native support for multiple glob patterns, no need for wrappers like [multimatch](https://github.com/sindresorhus/multimatch) * [10-55x faster](#benchmarks) and more performant than [minimatch](https://github.com/isaacs/minimatch#readme) and [multimatch](https://github.com/sindresorhus/multimatch). This is achieved through a combination of caching and regex optimization strategies, a fundamentally different approach than minimatch. * More extensive support for the Bash 4.3 specification * More complete extglob support * Extensive [unit tests](./test) (approx. 1,300 tests). Minimatch fails many of the tests. ### Switch from minimatch Use `mm.isMatch()` instead of `minimatch()`: ```js mm.isMatch('foo', 'b*'); //=> false ``` Use `mm.match()` instead of `minimatch.match()`: ```js mm.match(['foo', 'bar'], 'b*'); //=> 'bar' ``` ### Switch from multimatch Same signature: ```js mm(['foo', 'bar', 'baz'], ['f*', '*z']); //=> ['foo', 'baz'] ``` *** ## Usage Add micromatch to your node.js project: ```js var mm = require('micromatch'); ``` **Signature** ```js mm(array_of_strings, glob_patterns[, options]); ``` **Example** ```js mm(['foo', 'bar', 'baz'], 'b*'); //=> ['bar', 'baz'] ``` ### Usage examples **Brace expansion** Match files with `.js` or `.txt` extensions. ```js mm(['a.js', 'b.md', 'c.txt'], '*.{js,txt}'); //=> ['a.js', 'c.txt'] ``` **Extglobs** Match anything except for files with the `.md` extension. ```js mm(files, '**/*.!(md)'); //=> ['a.js', 'c.txt'] ``` **Multiple patterns** Match using an array of patterns. ```js mm(['a.md', 'b.js', 'c.txt', 'd.json'], ['*.md', '*.txt']); //=> ['a.md', 'c.txt'] ``` **Negation patterns:** Behavior is designed to be what users would expect, based on conventions that are already well-established. * [minimatch](https://github.com/isaacs/minimatch#readme) behavior is used when the pattern is a string, so patterns are **inclusive by default**. * [multimatch](https://github.com/sindresorhus/multimatch) behavior is used when an array of patterns is passed, so patterns are **exclusive by default**. ```js mm(['a.js', 'b.md', 'c.txt'], '!*.{js,txt}'); //=> ['b.md'] mm(['a.md', 'b.js', 'c.txt', 'd.json'], ['*.*', '!*.{js,txt}']); //=> ['a.md', 'd.json'] ``` *** ## API methods ```js var mm = require('micromatch'); ``` ### .match ```js mm.match(array, globString); ``` Return an array of files that match the given glob pattern. Useful if you only need to use a single glob pattern. **Example** ```js mm.match(['ab', 'a/b', 'bb', 'b/c'], '?b'); //=> ['ab', 'bb'] mm.match(['ab', 'a/b', 'bb', 'b/c'], '*/b'); //=> ['a/b'] ``` ### .isMatch ```js mm.isMatch(filepath, globString); ``` Returns true if a file path matches the given glob pattern. **Example** ```js mm.isMatch('.verb.md', '*.md'); //=> false mm.isMatch('.verb.md', '*.md', {dot: true}); //=> true ``` ### .contains Returns true if any part of a file path matches the given glob pattern. Think of this is \"has path\" versus \"is path\". **Example** `.isMatch()` would return false for both of the following: ```js mm.contains('a/b/c', 'a/b'); //=> true mm.contains('a/b/c', 'a/*'); //=> true ``` ### .matcher Returns a function for matching using the supplied pattern. e.g. create your own \"matcher\". The advantage of this method is that the pattern can be compiled outside of a loop. **Pattern** Can be any of the following: * `glob/string` * `regex` * `function` **Example** ```js var isMatch = mm.matcher('*.md'); var files = []; ['a.md', 'b.txt', 'c.md'].forEach(function(fp) { if (isMatch(fp)) { files.push(fp); } }); ``` ### .filter Returns a function that can be passed to `Array#filter()`. **Params** * `patterns` **{String|Array}**: **Examples** Single glob: ```js var fn = mm.filter('*.md'); ['a.js', 'b.txt', 'c.md'].filter(fn); //=> ['c.md'] var fn = mm.filter('[a-c]'); ['a', 'b', 'c', 'd', 'e'].filter(fn); //=> ['a', 'b', 'c'] ``` Array of glob patterns: ```js var arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]; var fn = mm.filter(['{1..10}', '![7-9]', '!{3..4}']); arr.filter(fn); //=> [1, 2, 5, 6, 10] ``` _(Internally this function generates the matching function by using the [matcher](#matcher) method. You can use the [matcher](#matcher) method directly to create your own filter function)_ ### .any Returns true if a file path matches any of the given patterns. ```js mm.any(filepath, patterns, options); ``` **Params** * filepath `{String}`: The file path to test. * patterns `{String|Array}`: One or more glob patterns * options: `{Object}`: options to pass to the `.matcher()` method. **Example** ```js mm.any('abc', ['!*z']); //=> true mm.any('abc', ['a*', 'z*']); //=> true mm.any('abc', 'a*'); //=> true mm.any('abc', ['z*']); //=> false ``` ### .expand Returns an object with a regex-compatible string and tokens. ```js mm.expand('*.js'); // when `track` is enabled (for debugging), the `history` array is used // to record each mutation to the glob pattern as it's converted to regex { options: { track: false, dot: undefined, makeRe: true, negated: false }, pattern: '(.*\\\\/|^)bar\\\\/(?:(?!(?:^|\\\\/)\\\\.).)*?', history: [], tokens: { path: { whole: '**/bar/**', dirname: '**/bar/', filename: '**', basename: '**', extname: '', ext: '' }, is: { glob: true, negated: false, globstar: true, dotfile: false, dotdir: false }, match: {}, original: '**/bar/**', pattern: '**/bar/**', base: '' } } ``` ### .makeRe Create a regular expression for matching file paths based on the given pattern: ```js mm.makeRe('*.js'); //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/ ``` ## Options ### options.unixify Normalize slashes in file paths and glob patterns to forward slashes. Type: `{Boolean}` Default: `undefined` on non-windows, `true` on windows. ### options.dot Match dotfiles. Same behavior as [minimatch](https://github.com/isaacs/minimatch#readme). Type: `{Boolean}` Default: `false` ### options.unescape Unescape slashes in glob patterns. Use cautiously, especially on windows. Type: `{Boolean}` Default: `undefined` **Example** ```js mm.isMatch('abc', '\\\\a\\\\b\\\\c', {unescape: true}); //=> true ``` ### options.nodupes Remove duplicate elements from the result array. Type: `{Boolean}` Default: `undefined` **Example** Example of using the `unescape` and `nodupes` options together: ```js mm.match(['abc', '\\\\a\\\\b\\\\c'], '\\\\a\\\\b\\\\c', {unescape: true}); //=> ['abc', 'abc'] mm.match(['abc', '\\\\a\\\\b\\\\c'], '\\\\a\\\\b\\\\c', {unescape: true, nodupes: true}); //=> ['abc'] ``` ### options.matchBase Allow glob patterns without slashes to match a file path based on its basename. . Same behavior as [minimatch](https://github.com/isaacs/minimatch#readme). Type: `{Boolean}` Default: `false` **Example** ```js mm(['a/b.js', 'a/c.md'], '*.js'); //=> [] mm(['a/b.js', 'a/c.md'], '*.js', {matchBase: true}); //=> ['a/b.js'] ``` ### options.nobraces Don't expand braces in glob patterns. Same behavior as [minimatch](https://github.com/isaacs/minimatch#readme) `nobrace`. Type: `{Boolean}` Default: `undefined` See [braces](https://github.com/jonschlinkert/braces) for more information about extended brace expansion. ### options.nobrackets Don't expand POSIX bracket expressions. Type: `{Boolean}` Default: `undefined` See [expand-brackets](https://github.com/jonschlinkert/expand-brackets) for more information about extended bracket expressions. ### options.noextglob Don't expand extended globs. Type: `{Boolean}` Default: `undefined` See [extglob](https://github.com/jonschlinkert/extglob) for more information about extended globs. ### options.nocase Use a case-insensitive regex for matching files. Same behavior as [minimatch](https://github.com/isaacs/minimatch#readme). Type: `{Boolean}` Default: `false` ### options.nonull If `true`, when no matches are found the actual (array-ified) glob pattern is returned instead of an empty array. Same behavior as [minimatch](https://github.com/isaacs/minimatch#readme). Type: `{Boolean}` Default: `false` ### options.cache Cache the platform (e.g. `win32`) to prevent this from being looked up for every filepath. Type: `{Boolean}` Default: `true` *** ## Other features Micromatch also supports the following. ### Extended globbing #### extglobs Extended globbing, as described by the bash man page: | **pattern** | **regex equivalent** | **description** | | --- | --- | --- | | `?(pattern-list)` | `(... | ...)?` | Matches zero or one occurrence of the given patterns | | `*(pattern-list)` | `(... | ...)*` | Matches zero or more occurrences of the given patterns | | `+(pattern-list)` | `(... | ...)+` | Matches one or more occurrences of the given patterns | | `@(pattern-list)` | `(... | ...)` * | Matches one of the given patterns | | `!(pattern-list)` | N/A | Matches anything except one of the given patterns | * `@` isn't a RegEx character. Powered by [extglob](https://github.com/jonschlinkert/extglob). Visit that library for the full range of options or to report extglob related issues. See [extglob](https://github.com/jonschlinkert/extglob) for more information about extended globs. #### brace expansion In simple cases, brace expansion appears to work the same way as the logical `OR` operator. For example, `(a|b)` will achieve the same result as `{a,b}`. Here are some powerful features unique to brace expansion (versus character classes): * range expansion: `a{1..3}b/*.js` expands to: `['a1b/*.js', 'a2b/*.js', 'a3b/*.js']` * nesting: `a{c,{d,e}}b/*.js` expands to: `['acb/*.js', 'adb/*.js', 'aeb/*.js']` Visit [braces](https://github.com/jonschlinkert/braces) to ask questions and create an issue related to brace-expansion, or to see the full range of features and options related to brace expansion. #### regex character classes With the exception of brace expansion (`{a,b}`, `{1..5}`, etc), most of the special characters convert directly to regex, so you can expect them to follow the same rules and produce the same results as regex. For example, given the list: `['a.js', 'b.js', 'c.js', 'd.js', 'E.js']`: * `[ac].js`: matches both `a` and `c`, returning `['a.js', 'c.js']` * `[b-d].js`: matches from `b` to `d`, returning `['b.js', 'c.js', 'd.js']` * `[b-d].js`: matches from `b` to `d`, returning `['b.js', 'c.js', 'd.js']` * `a/[A-Z].js`: matches and uppercase letter, returning `['a/E.md']` Learn about [regex character classes](http://www.regular-expressions.info/charclass.html). #### regex groups Given `['a.js', 'b.js', 'c.js', 'd.js', 'E.js']`: * `(a|c).js`: would match either `a` or `c`, returning `['a.js', 'c.js']` * `(b|d).js`: would match either `b` or `d`, returning `['b.js', 'd.js']` * `(b|[A-Z]).js`: would match either `b` or an uppercase letter, returning `['b.js', 'E.js']` As with regex, parenthese can be nested, so patterns like `((a|b)|c)/b` will work. But it might be easier to achieve your goal using brace expansion. #### POSIX bracket expressions **Example** ```js mm.isMatch('a1', '[[:alpha:][:digit:]]'); //=> true ``` See [expand-brackets](https://github.com/jonschlinkert/expand-brackets) for more information about extended bracket expressions. *** ## Notes Whenever possible parsing behavior for patterns is based on globbing specifications in Bash 4.3. Patterns that aren't described by Bash follow wildmatch spec (used by git). ## Benchmarks Run the [benchmarks](./benchmark): ```bash node benchmark ``` As of April 22, 2016: ```bash #1: basename-braces micromatch x 26,420 ops/sec ±0.89% (91 runs sampled) minimatch x 3,507 ops/sec ±0.64% (97 runs sampled) #2: basename micromatch x 25,315 ops/sec ±0.82% (93 runs sampled) minimatch x 4,398 ops/sec ±0.86% (94 runs sampled) #3: braces-no-glob micromatch x 341,254 ops/sec ±0.78% (93 runs sampled) minimatch x 30,197 ops/sec ±1.12% (91 runs sampled) #4: braces micromatch x 54,649 ops/sec ±0.74% (94 runs sampled) minimatch x 3,095 ops/sec ±0.82% (95 runs sampled) #5: immediate micromatch x 16,719 ops/sec ±0.79% (95 runs sampled) minimatch x 4,348 ops/sec ±0.86% (96 runs sampled) #6: large micromatch x 721 ops/sec ±0.77% (94 runs sampled) minimatch x 17.73 ops/sec ±1.08% (50 runs sampled) #7: long micromatch x 5,051 ops/sec ±0.87% (97 runs sampled) minimatch x 628 ops/sec ±0.83% (94 runs sampled) #8: mid micromatch x 51,280 ops/sec ±0.80% (95 runs sampled) minimatch x 1,923 ops/sec ±0.84% (95 runs sampled) #9: multi-patterns micromatch x 22,440 ops/sec ±0.97% (94 runs sampled) minimatch x 2,481 ops/sec ±1.10% (94 runs sampled) #10: no-glob micromatch x 722,823 ops/sec ±1.30% (87 runs sampled) minimatch x 52,967 ops/sec ±1.09% (94 runs sampled) #11: range micromatch x 243,471 ops/sec ±0.79% (94 runs sampled) minimatch x 11,736 ops/sec ±0.82% (96 runs sampled) #12: shallow micromatch x 190,874 ops/sec ±0.98% (95 runs sampled) minimatch x 21,699 ops/sec ±0.81% (97 runs sampled) #13: short micromatch x 496,393 ops/sec ±3.86% (90 runs sampled) minimatch x 53,765 ops/sec ±0.75% (95 runs sampled) ``` ## Tests ### Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ### Coverage As of April 22, 2016: ```sh Statements : 100% (441/441) Branches : 100% (270/270) Functions : 100% (54/54) Lines : 100% (429/429) ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/micromatch/issues/new). Please be sure to run the benchmarks before/after any code changes to judge the impact before you do a PR. thanks! ## Related * [braces](https://www.npmjs.com/package/braces): Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces… [more](https://www.npmjs.com/package/braces) | [homepage](https://github.com/jonschlinkert/braces) * [expand-brackets](https://www.npmjs.com/package/expand-brackets): Expand POSIX bracket expressions (character classes) in glob patterns. | [homepage](https://github.com/jonschlinkert/expand-brackets) * [expand-range](https://www.npmjs.com/package/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See… [more](https://www.npmjs.com/package/expand-range) | [homepage](https://github.com/jonschlinkert/expand-range) * [extglob](https://www.npmjs.com/package/extglob): Convert extended globs to regex-compatible strings. Add (almost) the expressive power of regular expressions to… [more](https://www.npmjs.com/package/extglob) | [homepage](https://github.com/jonschlinkert/extglob) * [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or multiplier to… [more](https://www.npmjs.com/package/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range) * [gulp-micromatch](https://www.npmjs.com/package/gulp-micromatch): Filter vinyl files with glob patterns, string, regexp, array, object or matcher function. micromatch stream. | [homepage](https://github.com/tunnckocore/gulp-micromatch) * [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern.… [more](https://www.npmjs.com/package/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob) * [parse-glob](https://www.npmjs.com/package/parse-glob): Parse a glob pattern into an object of tokens. | [homepage](https://github.com/jonschlinkert/parse-glob) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/micromatch/issues/new). ## Building docs Generate readme and API documentation with [verb](https://github.com/verbose/verb): ```sh $ npm install verb && npm run docs ``` Or, if [verb](https://github.com/verbose/verb) is installed globally: ```sh $ verb ``` ## Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ## Author **Jon Schlinkert** * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert). Released under the [MIT license](https://github.com/jonschlinkert/micromatch/blob/master/LICENSE). *** _This file was generated by [verb](https://github.com/verbose/verb), v0.9.0, on April 22, 2016._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/arr-diff/README.md","tags":[],"body":"# arr-diff [![NPM version](https://img.shields.io/npm/v/arr-diff.svg)](https://www.npmjs.com/package/arr-diff) [![Build Status](https://img.shields.io/travis/jonschlinkert/base.svg)](https://travis-ci.org/jonschlinkert/base) > Returns an array with only the unique values from the first array, by excluding all values from additional arrays using strict equality for comparisons. ## Install Install with [npm](https://www.npmjs.com/) ```sh $ npm i arr-diff --save ``` Install with [bower](http://bower.io/) ```sh $ bower install arr-diff --save ``` ## API ### [diff](index.js#L33) Return the difference between the first array and additional arrays. **Params** * `a` **{Array}** * `b` **{Array}** * `returns` **{Array}** **Example** ```js var diff = require('arr-diff'); var a = ['a', 'b', 'c', 'd']; var b = ['b', 'c']; console.log(diff(a, b)) //=> ['a', 'd'] ``` ## Related projects * [arr-flatten](https://www.npmjs.com/package/arr-flatten): Recursively flatten an array or arrays. This is the fastest implementation of array flatten. | [homepage](https://github.com/jonschlinkert/arr-flatten) * [array-filter](https://www.npmjs.com/package/array-filter): Array#filter for older browsers. | [homepage](https://github.com/juliangruber/array-filter) * [array-intersection](https://www.npmjs.com/package/array-intersection): Return an array with the unique values present in _all_ given arrays using strict equality… [more](https://www.npmjs.com/package/array-intersection) | [homepage](https://github.com/jonschlinkert/array-intersection) ## Running tests Install dev dependencies: ```sh $ npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/arr-diff/issues/new). ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2015 [Jon Schlinkert](https://github.com/jonschlinkert) Released under the MIT license. *** _This file was generated by [verb](https://github.com/verbose/verb) on Sat Dec 05 2015 23:24:53 GMT-0500 (EST)._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/arr-diff/node_modules/arr-flatten/README.md","tags":[],"body":"# arr-flatten [![NPM version](https://badge.fury.io/js/arr-flatten.svg)](http://badge.fury.io/js/arr-flatten) [![Build Status](https://travis-ci.org/jonschlinkert/arr-flatten.svg)](https://travis-ci.org/jonschlinkert/arr-flatten) > Recursively flatten an array or arrays. This is the fastest implementation of array flatten. Why another flatten utility? I wanted the fastest implementation I could find, with implementation choices that should work for 95% of use cases, but no cruft to cover the other 5%. ## Run benchmarks ```bash npm run benchmarks ``` Benchmark results comparing this library to [array-flatten]: ```bash #1: large.js arr-flatten.js x 487,030 ops/sec ±0.67% (92 runs sampled) array-flatten.js x 347,020 ops/sec ±0.57% (98 runs sampled) #2: medium.js arr-flatten.js x 1,914,516 ops/sec ±0.76% (94 runs sampled) array-flatten.js x 1,391,661 ops/sec ±0.63% (96 runs sampled) #3: small.js arr-flatten.js x 5,158,980 ops/sec ±0.85% (94 runs sampled) array-flatten.js x 3,683,173 ops/sec ±0.79% (97 runs sampled) ``` ## Run tests Install dev dependencies: ```bash npm i -d && npm test ``` ## Install with [npm](npmjs.org) ```bash npm i arr-flatten --save ``` ### Install with [bower](https://github.com/bower/bower) ```bash bower install arr-flatten --save ``` ## Usage ```js var flatten = require('arr-flatten'); flatten(['a', ['b', ['c']], 'd', ['e']]); //=> ['a', 'b', 'c', 'd', 'e'] ``` ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright (c) 2014-2015 Jon Schlinkert Released under the MIT license *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on March 11, 2015._ [array-flatten]: https://github.com/blakeembrey/array-flatten"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/array-unique/README.md","tags":[],"body":"# array-unique [![NPM version](https://badge.fury.io/js/array-unique.svg)](http://badge.fury.io/js/array-unique) [![Build Status](https://travis-ci.org/jonschlinkert/array-unique.svg)](https://travis-ci.org/jonschlinkert/array-unique) > Return an array free of duplicate values. Fastest ES5 implementation. ## Install with [npm](npmjs.org) ```bash npm i array-unique --save ``` ## Usage ```js var unique = require('array-unique'); unique(['a', 'b', 'c', 'c']); //=> ['a', 'b', 'c'] ``` ## Related * [arr-diff](https://github.com/jonschlinkert/arr-diff): Returns an array with only the unique values from the first array, by excluding all values from additional arrays using strict equality for comparisons. * [arr-union](https://github.com/jonschlinkert/arr-union): Returns an array of unique values using strict equality for comparisons. * [arr-flatten](https://github.com/jonschlinkert/arr-flatten): Recursively flatten an array or arrays. This is the fastest implementation of array flatten. * [arr-reduce](https://github.com/jonschlinkert/arr-reduce): Fast array reduce that also loops over sparse elements. * [arr-map](https://github.com/jonschlinkert/arr-map): Faster, node.js focused alternative to JavaScript's native array map. * [arr-pluck](https://github.com/jonschlinkert/arr-pluck): Retrieves the value of a specified property from all elements in the collection. ## Run tests Install dev dependencies. ```bash npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/array-unique/issues) ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright (c) 2015 Jon Schlinkert Released under the MIT license *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on March 24, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/braces/README.md","tags":[],"body":"# braces [![NPM version](https://img.shields.io/npm/v/braces.svg?style=flat)](https://www.npmjs.com/package/braces) [![NPM downloads](https://img.shields.io/npm/dm/braces.svg?style=flat)](https://npmjs.org/package/braces) [![Build Status](https://img.shields.io/travis/jonschlinkert/braces.svg?style=flat)](https://travis-ci.org/jonschlinkert/braces) Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces specification. ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install braces --save ``` ## Features * Complete support for the braces part of the [Bash 4.3 Brace Expansion](www.gnu.org/software/bash/). Braces passes [all of the relevant unit tests](#bash-4-3-support) from the spec. * Expands comma-separated values: `a/{b,c}/d` => `['a/b/d', 'a/c/d']` * Expands alphabetical or numerical ranges: `{1..3}` => `['1', '2', '3']` * [Very fast](#benchmarks) * [Special characters](./patterns.md) can be used to generate interesting patterns. ## Example usage ```js var braces = require('braces'); braces('a/{x,y}/c{d}e') //=> ['a/x/cde', 'a/y/cde'] braces('a/b/c/{x,y}') //=> ['a/b/c/x', 'a/b/c/y'] braces('a/{x,{1..5},y}/c{d}e') //=> ['a/x/cde', 'a/1/cde', 'a/y/cde', 'a/2/cde', 'a/3/cde', 'a/4/cde', 'a/5/cde'] ``` ### Use case: fixtures > Use braces to generate test fixtures! **Example** ```js var braces = require('./'); var path = require('path'); var fs = require('fs'); braces('blah/{a..z}.js').forEach(function(fp) { if (!fs.existsSync(path.dirname(fp))) { fs.mkdirSync(path.dirname(fp)); } fs.writeFileSync(fp, ''); }); ``` See the [tests](./test/test.js) for more examples and use cases (also see the [bash spec tests](./test/bash-mm-adjusted.js)); ### Range expansion Uses [expand-range](https://github.com/jonschlinkert/expand-range) for range expansion. ```js braces('a{1..3}b') //=> ['a1b', 'a2b', 'a3b'] braces('a{5..8}b') //=> ['a5b', 'a6b', 'a7b', 'a8b'] braces('a{00..05}b') //=> ['a00b', 'a01b', 'a02b', 'a03b', 'a04b', 'a05b'] braces('a{01..03}b') //=> ['a01b', 'a02b', 'a03b'] braces('a{000..005}b') //=> ['a000b', 'a001b', 'a002b', 'a003b', 'a004b', 'a005b'] braces('a{a..e}b') //=> ['aab', 'abb', 'acb', 'adb', 'aeb'] braces('a{A..E}b') //=> ['aAb', 'aBb', 'aCb', 'aDb', 'aEb'] ``` Pass a function as the last argument to customize range expansions: ```js var range = braces('x{a..e}y', function (str, i) { return String.fromCharCode(str) + i; }); console.log(range); //=> ['xa0y', 'xb1y', 'xc2y', 'xd3y', 'xe4y'] ``` See [expand-range](https://github.com/jonschlinkert/expand-range) for benchmarks, tests and the full list of range expansion features. ## Options ### options.makeRe Type: `Boolean` Deafault: `false` Return a regex-optimal string. If you're using braces to generate regex, this will result in dramatically faster performance. **Examples** With the default settings (`{makeRe: false}`): ```js braces('{1..5}'); //=> ['1', '2', '3', '4', '5'] ``` With `{makeRe: true}`: ```js braces('{1..5}', {makeRe: true}); //=> ['[1-5]'] braces('{3..9..3}', {makeRe: true}); //=> ['(3|6|9)'] ``` ### options.bash Type: `Boolean` Default: `false` Enables complete support for the Bash specification. The downside is a 20-25% speed decrease. **Example** Using the default setting (`{bash: false}`): ```js braces('a{b}c'); //=> ['abc'] ``` In bash (and minimatch), braces with one item are not expanded. To get the same result with braces, set `{bash: true}`: ```js braces('a{b}c', {bash: true}); //=> ['a{b}c'] ``` ### options.nodupes Type: `Boolean` Deafault: `true` Duplicates are removed by default. To keep duplicates, pass `{nodupes: false}` on the options ## Bash 4.3 Support > Better support for Bash 4.3 than minimatch This project has comprehensive unit tests, including tests coverted from [Bash 4.3](www.gnu.org/software/bash/). Currently only 8 of 102 unit tests fail, and ## Run benchmarks Install dev dependencies: ```bash npm i -d && npm benchmark ``` ### Latest results ```bash #1: escape.js brace-expansion.js x 114,934 ops/sec ±1.24% (93 runs sampled) braces.js x 342,254 ops/sec ±0.84% (90 runs sampled) #2: exponent.js brace-expansion.js x 12,359 ops/sec ±0.86% (96 runs sampled) braces.js x 20,389 ops/sec ±0.71% (97 runs sampled) #3: multiple.js brace-expansion.js x 114,469 ops/sec ±1.44% (94 runs sampled) braces.js x 401,621 ops/sec ±0.87% (91 runs sampled) #4: nested.js brace-expansion.js x 102,769 ops/sec ±1.55% (92 runs sampled) braces.js x 314,088 ops/sec ±0.71% (98 runs sampled) #5: normal.js brace-expansion.js x 157,577 ops/sec ±1.65% (91 runs sampled) braces.js x 1,115,950 ops/sec ±0.74% (94 runs sampled) #6: range.js brace-expansion.js x 138,822 ops/sec ±1.71% (91 runs sampled) braces.js x 1,108,353 ops/sec ±0.85% (94 runs sampled) ``` ## Related projects You might also be interested in these projects: * [expand-range](https://www.npmjs.com/package/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See… [more](https://www.npmjs.com/package/expand-range) | [homepage](https://github.com/jonschlinkert/expand-range) * [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or multiplier to… [more](https://www.npmjs.com/package/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range) * [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/jonschlinkert/micromatch) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/braces/issues/new). ## Building docs Generate readme and API documentation with [verb](https://github.com/verbose/verb): ```sh $ npm install verb && npm run docs ``` Or, if [verb](https://github.com/verbose/verb) is installed globally: ```sh $ verb ``` ## Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ## Author **Jon Schlinkert** * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert). Released under the [MIT license](https://github.com/jonschlinkert/braces/blob/master/LICENSE). *** _This file was generated by [verb](https://github.com/verbose/verb), v0.9.0, on May 21, 2016._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/braces/node_modules/expand-range/README.md","tags":[],"body":"# expand-range [![NPM version](https://img.shields.io/npm/v/expand-range.svg?style=flat)](https://www.npmjs.com/package/expand-range) [![NPM downloads](https://img.shields.io/npm/dm/expand-range.svg?style=flat)](https://npmjs.org/package/expand-range) [![Build Status](https://img.shields.io/travis/jonschlinkert/expand-range.svg?style=flat)](https://travis-ci.org/jonschlinkert/expand-range) Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See the benchmarks. Used by micromatch. ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install expand-range --save ``` Wraps [fill-range] to do range expansion using `..` separated strings. See [fill-range] for the full list of options and features. ## Example usage ```js var expand = require('expand-range'); ``` **Params** ```js expand(start, stop, increment); ``` * `start`: the number or letter to start with * `end`: the number or letter to end with * `increment`: optionally pass the increment to use. works for letters or numbers **Examples** ```js expand('a..e') //=> ['a', 'b', 'c', 'd', 'e'] expand('a..e..2') //=> ['a', 'c', 'e'] expand('A..E..2') //=> ['A', 'C', 'E'] expand('1..3') //=> ['1', '2', '3'] expand('0..-5') //=> [ '0', '-1', '-2', '-3', '-4', '-5' ] expand('-9..9..3') //=> [ '-9', '-6', '-3', '0', '3', '6', '9' ]) expand('-1..-10..-2') //=> [ '-1', '-3', '-5', '-7', '-9' ] expand('1..10..2') //=> [ '1', '3', '5', '7', '9' ] ``` ### Custom function Optionally pass a custom function as the second argument: ```js expand('a..e', function (val, isNumber, pad, i) { if (!isNumber) { return String.fromCharCode(val) + i; } return val; }); //=> ['a0', 'b1', 'c2', 'd3', 'e4'] ``` ## Benchmarks ```sh # benchmark/fixtures/alpha-lower.js (29 bytes) brace-expansion x 145,653 ops/sec ±0.89% (87 runs sampled) expand-range x 453,213 ops/sec ±1.66% (85 runs sampled) minimatch x 152,193 ops/sec ±1.17% (86 runs sampled) # benchmark/fixtures/alpha-upper.js (29 bytes) brace-expansion x 149,975 ops/sec ±1.10% (88 runs sampled) expand-range x 459,390 ops/sec ±1.27% (84 runs sampled) minimatch x 155,253 ops/sec ±1.25% (88 runs sampled) # benchmark/fixtures/padded.js (33 bytes) brace-expansion x 14,694 ops/sec ±1.37% (85 runs sampled) expand-range x 169,393 ops/sec ±1.76% (80 runs sampled) minimatch x 15,052 ops/sec ±1.15% (88 runs sampled) # benchmark/fixtures/range.js (29 bytes) brace-expansion x 142,968 ops/sec ±1.35% (86 runs sampled) expand-range x 465,579 ops/sec ±1.43% (86 runs sampled) minimatch x 126,872 ops/sec ±1.18% (90 runs sampled) ``` ## Related projects You might also be interested in these projects: * [braces](https://www.npmjs.com/package/braces): Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces… [more](https://www.npmjs.com/package/braces) | [homepage](https://github.com/jonschlinkert/braces) * [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or multiplier to… [more](https://www.npmjs.com/package/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range) * [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/jonschlinkert/micromatch) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/expand-range/issues/new). ## Building docs Generate readme and API documentation with [verb](https://github.com/verbose/verb): ```sh $ npm install verb && npm run docs ``` Or, if [verb](https://github.com/verbose/verb) is installed globally: ```sh $ verb ``` ## Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ## Author **Jon Schlinkert** * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert). Released under the [MIT license](https://github.com/jonschlinkert/expand-range/blob/master/LICENSE). *** _This file was generated by [verb](https://github.com/verbose/verb), v0.9.0, on May 05, 2016._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/README.md","tags":[],"body":"# fill-range [![NPM version](https://badge.fury.io/js/fill-range.svg)](http://badge.fury.io/js/fill-range) [![Build Status](https://travis-ci.org/jonschlinkert/fill-range.svg)](https://travis-ci.org/jonschlinkert/fill-range) > Fill in a range of numbers or letters, optionally passing an increment or multiplier to use. ## Install with [npm](npmjs.org) ```bash npm i fill-range --save ``` - [Usage](#usage) * [Invalid ranges](#invalid-ranges) * [Custom function](#custom-function) * [Special characters](#special-characters) + [plus](#plus) + [pipe and tilde](#pipe-and-tilde) + [angle bracket](#angle-bracket) + [question mark](#question-mark) - [Other useful libs](#other-useful-libs) - [Running tests](#running-tests) - [Contributing](#contributing) - [Author](#author) - [License](#license) _(Table of contents generated by [verb])_ ## Usage ```js var range = require('fill-range'); range('a', 'e'); //=> ['a', 'b', 'c', 'd', 'e'] ``` **Params** ```js range(start, stop, step, options, fn); ``` - `start`: **{String|Number}** the number or letter to start with - `end`: **{String|Number}** the number or letter to end with - `step`: **{String|Number}** optionally pass the step to use. works for letters or numbers. - `options`: **{Object}**: + `makeRe`: return a regex-compatible string (still returned as an array for consistency) + `step`: pass the step on the options as an alternative to passing it as an argument + `silent`: `true` by default, set to false to throw errors for invalid ranges. - `fn`: **{Function}** optionally [pass a function](#custom-function) to modify each character **Examples** ```js range(1, 3) //=> ['1', '2', '3'] range('1', '3') //=> ['1', '2', '3'] range('0', '-5') //=> [ '0', '-1', '-2', '-3', '-4', '-5' ] range(-9, 9, 3) //=> [ '-9', '-6', '-3', '0', '3', '6', '9' ]) range('-1', '-10', '-2') //=> [ '-1', '-3', '-5', '-7', '-9' ] range('1', '10', '2') //=> [ '1', '3', '5', '7', '9' ] range('a', 'e') //=> ['a', 'b', 'c', 'd', 'e'] range('a', 'e', 2) //=> ['a', 'c', 'e'] range('A', 'E', 2) //=> ['A', 'C', 'E'] ``` ### Invalid ranges When an invalid range is passed, `null` is returned. ```js range('1.1', '2'); //=> null range('a', '2'); //=> null range(1, 10, 'foo'); //=> null ``` If you want errors to be throw, pass `silent: false` on the options: ### Custom function Optionally pass a custom function as the third or fourth argument: ```js range('a', 'e', function (val, isNumber, pad, i) { if (!isNumber) { return String.fromCharCode(val) + i; } return val; }); //=> ['a0', 'b1', 'c2', 'd3', 'e4'] ``` ### Special characters A special character may be passed as the third arg instead of a step increment. These characters can be pretty useful for brace expansion, creating file paths, test fixtures and similar use case. ```js range('a', 'z', SPECIAL_CHARACTER_HERE); ``` **Supported characters** - `+`: repeat the given string `n` times - `|`: create a regex-ready string, instead of an array - `>`: join values to single array element - `?`: randomize the given pattern using [randomatic] #### plus Character: _(`+`)_ Repeat the first argument the number of times passed on the second argument. **Examples:** ```js range('a', 3, '+'); //=> ['a', 'a', 'a'] range('abc', 2, '+'); //=> ['abc', 'abc'] ``` #### pipe and tilde Characters: _(`|` and `~`)_ Creates a regex-capable string (either a logical `or` or a character class) from the expanded arguments. **Examples:** ```js range('a', 'c', '|'); //=> ['(a|b|c)' range('a', 'c', '~'); //=> ['[a-c]' range('a', 'z', '|5'); //=> ['(a|f|k|p|u|z)' ``` **Automatic separator correction** To avoid this error: > `Range out of order in character class` Fill-range detects invalid sequences and uses the correct syntax. For example: **invalid** (regex) If you pass these: ```js range('a', 'z', '~5'); // which would result in this //=> ['[a-f-k-p-u-z]'] range('10', '20', '~'); // which would result in this //=> ['[10-20]'] ``` **valid** (regex) fill-range corrects them to this: ```js range('a', 'z', '~5'); //=> ['(a|f|k|p|u|z)' range('10', '20', '~'); //=> ['(10-20)' ``` #### angle bracket Character: _(`>`)_ Joins all values in the returned array to a single value. **Examples:** ```js range('a', 'e', '>'); //=> ['abcde'] range('5', '8', '>'); //=> ['5678'] range('2', '20', '2>'); //=> ['2468101214161820'] ``` #### question mark Character: _(`?`)_ Uses [randomatic] to generate randomized alpha, numeric, or alpha-numeric patterns based on the provided arguments. **Examples:** _(actual results would obviously be randomized)_ Generate a 5-character, uppercase, alphabetical string: ```js range('A', 5, '?'); //=> ['NSHAK'] ``` Generate a 5-digit random number: ```js range('0', 5, '?'); //=> ['36583'] ``` Generate a 10-character alpha-numeric string: ```js range('A0', 10, '?'); //=> ['5YJD60VQNN'] ``` See the [randomatic] repo for all available options and or to create issues or feature requests related to randomization. ## Other useful libs * [micromatch](https://github.com/jonschlinkert/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. Just use `micromatch.isMatch()` instead of `minimatch()`, or use `micromatch()` instead of `multimatch()`. * [expand-range](https://github.com/jonschlinkert/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See the benchmarks. Used by micromatch. * [braces](https://github.com/jonschlinkert/braces): Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces specification. * [is-glob](https://github.com/jonschlinkert/is-glob): Returns `true` if the given string looks like a glob pattern. ## Running tests Install dev dependencies: ```bash npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/fill-range/issues) ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright (c) 2014-2015 Jon Schlinkert Released under the MIT license *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on April 07, 2015._ [randomatic]: https://github.com/jonschlinkert/randomatic [expand-range]: https://github.com/jonschlinkert/expand-range [micromatch]: https://github.com/jonschlinkert/micromatch [braces]: https://github.com/jonschlinkert/braces"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/is-number/README.md","tags":[],"body":"# is-number [![NPM version](https://badge.fury.io/js/is-number.svg)](http://badge.fury.io/js/is-number) [![Build Status](https://travis-ci.org/jonschlinkert/is-number.svg)](https://travis-ci.org/jonschlinkert/is-number) > Returns true if the value is a number. comprehensive tests. To understand some of the rationale behind the decisions made in this library (and to learn about some oddities of number evaluation in JavaScript), [see this gist](https://gist.github.com/jonschlinkert/e30c70c713da325d0e81). ## Install Install with [npm](https://www.npmjs.com/) ```sh $ npm i is-number --save ``` ## Usage ```js var isNumber = require('is-number'); ``` ### true See the [tests](./test.js) for more examples. ```js isNumber(5e3) //=> 'true' isNumber(0xff) //=> 'true' isNumber(-1.1) //=> 'true' isNumber(0) //=> 'true' isNumber(1) //=> 'true' isNumber(1.1) //=> 'true' isNumber(10) //=> 'true' isNumber(10.10) //=> 'true' isNumber(100) //=> 'true' isNumber('-1.1') //=> 'true' isNumber('0') //=> 'true' isNumber('012') //=> 'true' isNumber('0xff') //=> 'true' isNumber('1') //=> 'true' isNumber('1.1') //=> 'true' isNumber('10') //=> 'true' isNumber('10.10') //=> 'true' isNumber('100') //=> 'true' isNumber('5e3') //=> 'true' isNumber(parseInt('012')) //=> 'true' isNumber(parseFloat('012')) //=> 'true' ``` ### False See the [tests](./test.js) for more examples. ```js isNumber('foo') //=> 'false' isNumber([1]) //=> 'false' isNumber([]) //=> 'false' isNumber(function () {}) //=> 'false' isNumber(Infinity) //=> 'false' isNumber(NaN) //=> 'false' isNumber(new Array('abc')) //=> 'false' isNumber(new Array(2)) //=> 'false' isNumber(new Buffer('abc')) //=> 'false' isNumber(null) //=> 'false' isNumber(undefined) //=> 'false' isNumber({abc: 'abc'}) //=> 'false' ``` ## Other projects * [even](https://www.npmjs.com/package/even): Get the even numbered items from an array. | [homepage](https://github.com/jonschlinkert/even) * [is-even](https://www.npmjs.com/package/is-even): Return true if the given number is even. | [homepage](https://github.com/jonschlinkert/is-even) * [is-odd](https://www.npmjs.com/package/is-odd): Returns true if the given number is odd. | [homepage](https://github.com/jonschlinkert/is-odd) * [is-primitive](https://www.npmjs.com/package/is-primitive): Returns `true` if the value is a primitive. | [homepage](https://github.com/jonschlinkert/is-primitive) * [kind-of](https://www.npmjs.com/package/kind-of): Get the native type of a value. | [homepage](https://github.com/jonschlinkert/kind-of) * [odd](https://www.npmjs.com/package/odd): Get the odd numbered items from an array. | [homepage](https://github.com/jonschlinkert/odd) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-number/issues/new). ## Run tests Install dev dependencies: ```sh $ npm i -d && npm test ``` ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2015 Jon Schlinkert Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on November 22, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/README.md","tags":[],"body":"# isobject [![NPM version](https://img.shields.io/npm/v/isobject.svg?style=flat)](https://www.npmjs.com/package/isobject) [![NPM downloads](https://img.shields.io/npm/dm/isobject.svg?style=flat)](https://npmjs.org/package/isobject) [![Build Status](https://img.shields.io/travis/jonschlinkert/isobject.svg?style=flat)](https://travis-ci.org/jonschlinkert/isobject) Returns true if the value is an object and not an array or null. ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install isobject --save ``` Use [is-plain-object](https://github.com/jonschlinkert/is-plain-object) if you want only objects that are created by the `Object` constructor. ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install isobject ``` Install with [bower](http://bower.io/) ```sh $ bower install isobject ``` ## Usage ```js var isObject = require('isobject'); ``` **True** All of the following return `true`: ```js isObject({}); isObject(Object.create({})); isObject(Object.create(Object.prototype)); isObject(Object.create(null)); isObject({}); isObject(new Foo); isObject(/foo/); ``` **False** All of the following return `false`: ```js isObject(); isObject(function () {}); isObject(1); isObject([]); isObject(undefined); isObject(null); ``` ## Related projects You might also be interested in these projects: [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep) * [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow) * [is-plain-object](https://www.npmjs.com/package/is-plain-object): Returns true if an object was created by the `Object` constructor. | [homepage](https://github.com/jonschlinkert/is-plain-object) * [kind-of](https://www.npmjs.com/package/kind-of): Get the native type of a value. | [homepage](https://github.com/jonschlinkert/kind-of) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/isobject/issues/new). ## Building docs Generate readme and API documentation with [verb](https://github.com/verbose/verb): ```sh $ npm install verb && npm run docs ``` Or, if [verb](https://github.com/verbose/verb) is installed globally: ```sh $ verb ``` ## Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ## Author **Jon Schlinkert** * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert). Released under the [MIT license](https://github.com/jonschlinkert/isobject/blob/master/LICENSE). *** _This file was generated by [verb](https://github.com/verbose/verb), v0.9.0, on April 25, 2016._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. [![build status](https://secure.travis-ci.org/juliangruber/isarray.svg)](http://travis-ci.org/juliangruber/isarray) [![downloads](https://img.shields.io/npm/dm/isarray.svg)](https://www.npmjs.org/package/isarray) [![browser support](https://ci.testling.com/juliangruber/isarray.png) ](https://ci.testling.com/juliangruber/isarray) ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/randomatic/README.md","tags":[],"body":"# randomatic [![NPM version](https://img.shields.io/npm/v/randomatic.svg)](https://www.npmjs.com/package/randomatic) > Generate randomized strings of a specified length, fast. Only the length is necessary, but you can optionally generate patterns using any combination of numeric, alpha-numeric, alphabetical, special or custom characters. ## Install Install with [npm](https://www.npmjs.com/) ```sh $ npm i randomatic --save ``` Install with [bower](http://bower.io/) ```sh $ bower install randomatic --save ``` ## Usage ```js var randomize = require('randomatic'); ``` ## API ```js randomize(pattern, length, options); ``` * `pattern` **{String}**: The pattern to use for randomizing * `length` **{Object}**: The length of the string to generate ### pattern > The pattern to use for randomizing Patterns can contain any combination of the below characters, specified in any order. **Example:** To generate a 10-character randomized string using all available characters: ```js randomize('*', 10); //=> randomize('Aa0!', 10); //=> ``` * `a`: Lowercase alpha characters (`abcdefghijklmnopqrstuvwxyz'`) * `A`: Uppercase alpha characters (`ABCDEFGHIJKLMNOPQRSTUVWXYZ'`) * `0`: Numeric characters (`0123456789'`) * `!`: Special characters (`~!@#$%^&()_+-={}[];\\',.`) * `*`: All characters (all of the above combined) * `?`: Custom characters (pass a string of custom characters to the options) ### length > the length of the string to generate **Examples:** * `randomize('A', 5)` will generate a 5-character, uppercase, alphabetical, randomized string, e.g. `KDJWJ`. * `randomize('0', 2)` will generate a 2-digit random number * `randomize('0', 3)` will generate a 3-digit random number * `randomize('0', 12)` will generate a 12-digit random number * `randomize('A0', 16)` will generate a 16-character, alpha-numeric randomized string If `length` is left undefined, the length of the pattern in the first parameter will be used. For example: + `randomize('00')` will generate a 2-digit random number * `randomize('000')` will generate a 3-digit random number * `randomize('0000')` will generate a 4-digit random number... * `randomize('AAAAA')` will generate a 5-character, uppercase alphabetical random string... These are just examples, [see the tests](./test.js) for more use cases and examples. ## options #### chars Type: `String` Default: `undefined` Define a custom string to be randomized. **Example:** * `randomize('?', 20, {chars: 'jonschlinkert'})` will generate a 20-character randomized string from the letters contained in `jonschlinkert`. * `randomize('?', {chars: 'jonschlinkert'})` will generate a 13-character randomized string from the letters contained in `jonschlinkert`. ## Usage Examples * `randomize('A', 4)` (_whitespace insenstive_) would result in randomized 4-digit uppercase letters, like, `ZAKH`, `UJSL`... etc. * `randomize('AAAA')` is equivelant to `randomize('A', 4)` * `randomize('AAA0')` and `randomize('AA00')` and `randomize('A0A0')` are equivelant to `randomize('A0', 4)` * `randomize('aa')`: results in double-digit, randomized, lower-case letters (`abcdefghijklmnopqrstuvwxyz`) * `randomize('AAA')`: results in triple-digit, randomized, upper-case letters (`ABCDEFGHIJKLMNOPQRSTUVWXYZ`) * `randomize('0', 6)`: results in six-digit, randomized nubmers (`0123456789`) * `randomize('!', 5)`: results in single-digit randomized, _valid_ non-letter characters (`~!@#$%^&()_+-={}[];\\',.`) * `randomize('A!a0', 9)`: results in nine-digit, randomized characters (any of the above) _The order in which the characters are defined is insignificant._ ## Related * [pad-left](https://www.npmjs.com/package/pad-left): Left pad a string with zeros or a specified string. Fastest implementation. | [homepage](https://github.com/jonschlinkert/pad-left) * [pad-right](https://www.npmjs.com/package/pad-right): Right pad a string with zeros or a specified string. Fastest implementation. | [homepage](https://github.com/jonschlinkert/pad-right) * [repeat-string](https://www.npmjs.com/package/repeat-string): Repeat the given string n times. Fastest implementation for repeating a string. | [homepage](https://github.com/jonschlinkert/repeat-string) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/randomatic/issues/new). ## Author **Jon Schlinkert** * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2015 [Jon Schlinkert](https://github.com/jonschlinkert) Released under the MIT license. *** _This file was generated by [verb](https://github.com/verbose/verb) on December 10, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/repeat-string/README.md","tags":[],"body":"# repeat-string [![NPM version](https://img.shields.io/npm/v/repeat-string.svg)](https://www.npmjs.com/package/repeat-string) [![Build Status](https://img.shields.io/travis/jonschlinkert/repeat-string.svg)](https://travis-ci.org/jonschlinkert/repeat-string) > Repeat the given string n times. Fastest implementation for repeating a string. ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install repeat-string --save ``` ## Usage ### [repeat](index.js#L41) Repeat the given `string` the specified `number` of times. **Example:** **Params** * `string` **{String}**: The string to repeat * `number` **{Number}**: The number of times to repeat the string * `returns` **{String}**: Repeated string **Example** ```js var repeat = require('repeat-string'); repeat('A', 5); //=> AAAAA ``` ## Benchmarks Repeat string is significantly faster than the native method (which is itself faster than [repeating](https://github.com/sindresorhus/repeating)): ```sh #1: 5 native x 10,484,023 ops/sec ±1.24% (89 runs sampled) repeat-string x 16,189,255 ops/sec ±1.05% (91 runs sampled) repeating x 9,051,715 ops/sec ±1.18% (90 runs sampled) #2: 50 native x 7,975,566 ops/sec ±1.29% (91 runs sampled) repeat-string x 15,317,972 ops/sec ±1.16% (87 runs sampled) repeating x 6,279,112 ops/sec ±1.29% (89 runs sampled) #3: 250 native x 6,212,752 ops/sec ±1.33% (91 runs sampled) repeat-string x 14,565,168 ops/sec ±0.83% (93 runs sampled) repeating x 5,787,124 ops/sec ±1.25% (92 runs sampled) #4: 2000 native x 4,912,163 ops/sec ±1.27% (91 runs sampled) repeat-string x 17,129,748 ops/sec ±1.01% (91 runs sampled) repeating x 4,613,043 ops/sec ±1.37% (91 runs sampled) #5: 20000 native x 4,506,624 ops/sec ±1.33% (90 runs sampled) repeat-string x 14,877,672 ops/sec ±1.00% (93 runs sampled) repeating x 4,305,756 ops/sec ±1.36% (89 runs sampled) ``` **Run the benchmarks** Install dev dependencies: ```sh npm i -d && node benchmark ``` ## Related projects [repeat-element](https://www.npmjs.com/package/repeat-element): Create an array by repeating the given value n times. | [homepage](https://github.com/jonschlinkert/repeat-element) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/repeat-string/issues/new). ## Building docs Generate readme and API documentation with [verb](https://github.com/verbose/verb): ```sh $ npm install verb && npm run docs ``` Or, if [verb](https://github.com/verbose/verb) is installed globally: ```sh $ verb ``` ## Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ## Author **Jon Schlinkert** * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2016 [Jon Schlinkert](http://github.com/jonschlinkert) Released under the [MIT license](https://github.com/jonschlinkert/repeat-string/blob/master/LICENSE). *** _This file was generated by [verb](https://github.com/verbose/verb), v0.9.0, on February 29, 2016._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/braces/node_modules/preserve/README.md","tags":[],"body":"# preserve [![NPM version](https://badge.fury.io/js/preserve.svg)](http://badge.fury.io/js/preserve) > Temporarily substitute tokens in the given `string` with placeholders, then put them back after transforming the string. Useful for protecting tokens, like templates in HTML, from being mutated when the string is transformed in some way, like from a formatter/beautifier. **Example without `preserve`** Let's say you want to use [js-beautify] on a string of html with Lo-Dash/Underscore templates, such as: ``: js-beautify will render the template unusable (and apply incorrect formatting because of the unfamiliar syntax from the Lo-Dash template): ```html ``` **Example with `preserve`** Correct. ```html ``` For the record, this is just a random example, I've had very few issues with js-beautify in general. But with or without js-beautify, this kind of token mangling does happen sometimes when you use formatters, beautifiers or similar tools. ## Install ## Install with [npm](npmjs.org) ```bash npm i preserve --save ``` ## Run tests ```bash npm test ``` ## API ### [.before](index.js#L23) Replace tokens in `str` with a temporary, heuristic placeholder. * `str` **{String}** * `returns` **{String}**: String with placeholders. ```js tokens.before('{a\\\\,b}'); //=> '{__ID1__}' ``` ### [.after](index.js#L44) Replace placeholders in `str` with original tokens. * `str` **{String}**: String with placeholders * `returns` **{String}** `str`: String with original tokens. ```js tokens.after('{__ID1__}'); //=> '{a\\\\,b}' ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/preserve/issues) ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright (c) 2015-2015, Jon Schlinkert. Released under the MIT license *** _This file was generated by [verb](https://github.com/assemble/verb) on January 10, 2015._ [js-beautify]: https://github.com/beautify-web/js-beautify"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/braces/node_modules/repeat-element/README.md","tags":[],"body":"# repeat-element [![NPM version](https://badge.fury.io/js/repeat-element.svg)](http://badge.fury.io/js/repeat-element) > Create an array by repeating the given value n times. ## Install Install with [npm](https://www.npmjs.com/) ```bash npm i repeat-element --save ``` ## Usage ```js var repeat = require('repeat-element'); repeat('a', 5); //=> ['a', 'a', 'a', 'a', 'a'] repeat('a', 1); //=> ['a'] repeat('a', 0); //=> [] repeat(null, 5) //» [ null, null, null, null, null ] repeat({some: 'object'}, 5) //» [ { some: 'object' }, // { some: 'object' }, // { some: 'object' }, // { some: 'object' }, // { some: 'object' } ] repeat(5, 5) //» [ 5, 5, 5, 5, 5 ] ``` ## Related projects [repeat-string](https://github.com/jonschlinkert/repeat-string): Repeat the given string n times. Fastest implementation for repeating a string. ## Running tests Install dev dependencies: ```bash npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/repeat-element/issues) ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright (c) 2015 Jon Schlinkert Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on May 06, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/expand-brackets/README.md","tags":[],"body":"# expand-brackets [![NPM version](https://img.shields.io/npm/v/expand-brackets.svg?style=flat)](https://www.npmjs.com/package/expand-brackets) [![NPM downloads](https://img.shields.io/npm/dm/expand-brackets.svg?style=flat)](https://npmjs.org/package/expand-brackets) [![Build Status](https://img.shields.io/travis/jonschlinkert/expand-brackets.svg?style=flat)](https://travis-ci.org/jonschlinkert/expand-brackets) > Expand POSIX bracket expressions (character classes) in glob patterns. ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install expand-brackets --save ``` ## Usage ```js var brackets = require('expand-brackets'); brackets('[![:lower:]]'); //=> '[^a-z]' ``` ## .isMatch Return true if the given string matches the bracket expression: ```js brackets.isMatch('A', '[![:lower:]]'); //=> true brackets.isMatch('a', '[![:lower:]]'); //=> false ``` ## .makeRe Make a regular expression from a bracket expression: ```js brackets.makeRe('[![:lower:]]'); //=> /[^a-z]/ ``` The following named POSIX bracket expressions are supported: * `[:alnum:]`: Alphanumeric characters (`a-zA-Z0-9]`) * `[:alpha:]`: Alphabetic characters (`a-zA-Z]`) * `[:blank:]`: Space and tab (`[ t]`) * `[:digit:]`: Digits (`[0-9]`) * `[:lower:]`: Lowercase letters (`[a-z]`) * `[:punct:]`: Punctuation and symbols. (`[!\"#$%&'()*+, -./:;?@ [\\]^_``{|}~]`) * `[:upper:]`: Uppercase letters (`[A-Z]`) * `[:word:]`: Word characters (letters, numbers and underscores) (`[A-Za-z0-9_]`) * `[:xdigit:]`: Hexadecimal digits (`[A-Fa-f0-9]`) Collating sequences are not supported. ## Related projects You might also be interested in these projects: * [extglob](https://www.npmjs.com/package/extglob): Convert extended globs to regex-compatible strings. Add (almost) the expressive power of regular expressions to… [more](https://www.npmjs.com/package/extglob) | [homepage](https://github.com/jonschlinkert/extglob) * [is-extglob](https://www.npmjs.com/package/is-extglob): Returns true if a string has an extglob. | [homepage](https://github.com/jonschlinkert/is-extglob) * [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern.… [more](https://www.npmjs.com/package/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob) * [is-posix-bracket](https://www.npmjs.com/package/is-posix-bracket): Returns true if the given string is a POSIX bracket expression (POSIX character class). | [homepage](https://github.com/jonschlinkert/is-posix-bracket) * [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. Just… [more](https://www.npmjs.com/package/micromatch) | [homepage](https://github.com/jonschlinkert/micromatch) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/expand-brackets/issues/new). ## Building docs Generate readme and API documentation with [verb](https://github.com/verbose/verb): ```sh $ npm install verb && npm run docs ``` Or, if [verb](https://github.com/verbose/verb) is installed globally: ```sh $ verb ``` ## Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ## Author **Jon Schlinkert** * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License verb © 2016, [Jon Schlinkert](https://github.com/jonschlinkert). Released under the [MIT license](https://github.com/jonschlinkert/expand-brackets/blob/master/LICENSE). *** _This file was generated by [verb](https://github.com/verbose/verb), v, on April 01, 2016._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/expand-brackets/node_modules/is-posix-bracket/README.md","tags":[],"body":"# is-posix-bracket [![NPM version](https://img.shields.io/npm/v/is-posix-bracket.svg?style=flat)](https://www.npmjs.com/package/is-posix-bracket) [![NPM downloads](https://img.shields.io/npm/dm/is-posix-bracket.svg?style=flat)](https://npmjs.org/package/is-posix-bracket) [![Build Status](https://img.shields.io/travis/jonschlinkert/is-posix-bracket.svg?style=flat)](https://travis-ci.org/jonschlinkert/is-posix-bracket) > Returns true if the given string is a POSIX bracket expression (POSIX character class). ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install is-posix-bracket --save ``` ## Usage ```js var isPosixBracket = require('is-posix-bracket'); isPosixBracket('[foo:]]'); //=> false isPosixBracket('[xdigit:]]'); //=> false isPosixBracket('[[:xdigit:]]'); //=> true isPosixBracket('[[:xdigit:]]'); //=> true isPosixBracket('[[:alpha:]123]'); //=> true isPosixBracket('[[:alpha:]123]'); //=> true isPosixBracket('[a-c[:digit:]x-z]'); //=> true isPosixBracket('[:al:]'); //=> true isPosixBracket('[abc[:punct:][0-9]'); //=> true ``` ## Related projects You might also be interested in these projects: * [braces](https://www.npmjs.com/package/braces): Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces… [more](https://www.npmjs.com/package/braces) | [homepage](https://github.com/jonschlinkert/braces) * [expand-brackets](https://www.npmjs.com/package/expand-brackets): Expand POSIX bracket expressions (character classes) in glob patterns. | [homepage](https://github.com/jonschlinkert/expand-brackets) * [is-extglob](https://www.npmjs.com/package/is-extglob): Returns true if a string has an extglob. | [homepage](https://github.com/jonschlinkert/is-extglob) * [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern.… [more](https://www.npmjs.com/package/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob) * [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. Just… [more](https://www.npmjs.com/package/micromatch) | [homepage](https://github.com/jonschlinkert/micromatch) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-posix-bracket/issues/new). ## Building docs Generate readme and API documentation with [verb](https://github.com/verbose/verb): ```sh $ npm install verb && npm run docs ``` Or, if [verb](https://github.com/verbose/verb) is installed globally: ```sh $ verb ``` ## Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ## Author **Jon Schlinkert** * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert). Released under the [MIT license](https://github.com/jonschlinkert/is-posix-bracket/blob/master/LICENSE). *** _This file was generated by [verb](https://github.com/verbose/verb), v, on April 05, 2016._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/extglob/README.md","tags":[],"body":"# extglob [![NPM version](https://badge.fury.io/js/extglob.svg)](http://badge.fury.io/js/extglob) [![Build Status](https://travis-ci.org/jonschlinkert/extglob.svg)](https://travis-ci.org/jonschlinkert/extglob) > Convert extended globs to regex-compatible strings. Add (almost) the expressive power of regular expressions to glob patterns. Install with [npm](https://www.npmjs.com/) ```sh $ npm i extglob --save ``` Used by [micromatch](https://github.com/jonschlinkert/micromatch). **Features** * Convert an extglob string to a regex-compatible string. **Only converts extglobs**, to handle full globs use [micromatch](https://github.com/jonschlinkert/micromatch). * Pass `{regex: true}` to return a regex * Handles nested patterns * More complete (and correct) support than [minimatch](https://github.com/isaacs/minimatch) ## Usage ```js var extglob = require('extglob'); extglob('?(z)'); //=> '(?:z)?' extglob('*(z)'); //=> '(?:z)*' extglob('+(z)'); //=> '(?:z)+' extglob('@(z)'); //=> '(?:z)' extglob('!(z)'); //=> '(?!^(?:(?!z)[^/]*?)).*$' ``` **Optionally return regex** ```js extglob('!(z)', {regex: true}); //=> /(?!^(?:(?!z)[^/]*?)).*$/ ``` ## Extglob patterns To learn more about how extglobs work, see the docs for [Bash pattern matching](https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html): * `?(pattern)`: Match zero or one occurrence of the given pattern. * `*(pattern)`: Match zero or more occurrences of the given pattern. * `+(pattern)`: Match one or more occurrences of the given pattern. * `@(pattern)`: Match one of the given pattern. * `!(pattern)`: Match anything except one of the given pattern. ## Related * [braces](https://github.com/jonschlinkert/braces): Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces… [more](https://github.com/jonschlinkert/braces) * [expand-brackets](https://github.com/jonschlinkert/expand-brackets): Expand POSIX bracket expressions (character classes) in glob patterns. * [expand-range](https://github.com/jonschlinkert/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See… [more](https://github.com/jonschlinkert/expand-range) * [fill-range](https://github.com/jonschlinkert/fill-range): Fill in a range of numbers or letters, optionally passing an increment or multiplier to… [more](https://github.com/jonschlinkert/fill-range) * [micromatch](https://github.com/jonschlinkert/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. Just… [more](https://github.com/jonschlinkert/micromatch) ## Run tests Install dev dependencies: ```sh $ npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/extglob/issues/new) ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2015 Jon Schlinkert Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on August 01, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/filename-regex/README.md","tags":[],"body":"# filename-regex [![NPM version](https://badge.fury.io/js/filename-regex.svg)](http://badge.fury.io/js/filename-regex) > Regular expression for matching file names, with or without extension. ## Install with [npm](npmjs.org) ```bash npm i filename-regex --save ``` ## Usage ```js var regex = require('filename-regex'); 'a/b/c/d.min.js'.match(regex()); //=> match[0] = 'd.min.js' 'a/b/c/.dotfile'.match(regex()); //=> match[0] = '.dotfile' ``` ## Run tests Install dev dependencies: ```bash npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/regexps/filename-regex/issues) ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright (c) 2015 Jon Schlinkert Released under the MIT license *** _This file was generated by [verb](https://github.com/assemble/verb) on January 24, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/is-extglob/README.md","tags":[],"body":"# is-extglob [![NPM version](https://badge.fury.io/js/is-extglob.svg)](http://badge.fury.io/js/is-extglob) [![Build Status](https://travis-ci.org/jonschlinkert/is-extglob.svg)](https://travis-ci.org/jonschlinkert/is-extglob) > Returns true if a string has an extglob. ## Install with [npm](npmjs.org) ```bash npm i is-extglob --save ``` ## Usage ```js var isExtglob = require('is-extglob'); ``` **True** ```js isExtglob('?(abc)'); isExtglob('@(abc)'); isExtglob('!(abc)'); isExtglob('*(abc)'); isExtglob('+(abc)'); ``` **False** Everything else... ```js isExtglob('foo.js'); isExtglob('!foo.js'); isExtglob('*.js'); isExtglob('**/abc.js'); isExtglob('abc/*.js'); isExtglob('abc/(aaa|bbb).js'); isExtglob('abc/[a-z].js'); isExtglob('abc/{a,b}.js'); isExtglob('abc/?.js'); isExtglob('abc.js'); isExtglob('abc/def/ghi.js'); ``` ## Related * [extglob](https://github.com/jonschlinkert/extglob): Extended globs. extglobs add the expressive power of regular expressions to glob patterns. * [micromatch](https://github.com/jonschlinkert/micromatch): Glob matching for javascript/node.js. A faster alternative to minimatch (10-45x faster on avg), with all the features you're used to using in your Grunt and gulp tasks. * [parse-glob](https://github.com/jonschlinkert/parse-glob): Parse a glob pattern into an object of tokens. ## Run tests Install dev dependencies. ```bash npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-extglob/issues) ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright (c) 2015 Jon Schlinkert Released under the MIT license *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on March 06, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/is-glob/README.md","tags":[],"body":"# is-glob [![NPM version](https://badge.fury.io/js/is-glob.svg)](http://badge.fury.io/js/is-glob) [![Build Status](https://travis-ci.org/jonschlinkert/is-glob.svg)](https://travis-ci.org/jonschlinkert/is-glob) > Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a better user experience. Also take a look at [is-valid-glob](https://github.com/jonschlinkert/is-valid-glob) and [has-glob](https://github.com/jonschlinkert/has-glob). ## Install Install with [npm](https://www.npmjs.com/) ```sh $ npm i is-glob --save ``` ## Usage ```js var isGlob = require('is-glob'); ``` **True** Patterns that have glob characters or regex patterns will return `true`: ```js isGlob('!foo.js'); isGlob('*.js'); isGlob('**/abc.js'); isGlob('abc/*.js'); isGlob('abc/(aaa|bbb).js'); isGlob('abc/[a-z].js'); isGlob('abc/{a,b}.js'); isGlob('abc/?.js'); //=> true ``` Extglobs ```js isGlob('abc/@(a).js'); isGlob('abc/!(a).js'); isGlob('abc/+(a).js'); isGlob('abc/*(a).js'); isGlob('abc/?(a).js'); //=> true ``` **False** Patterns that do not have glob patterns return `false`: ```js isGlob('abc.js'); isGlob('abc/def/ghi.js'); isGlob('foo.js'); isGlob('abc/@.js'); isGlob('abc/+.js'); isGlob(); isGlob(null); //=> false ``` Arrays are also `false` (If you want to check if an array has a glob pattern, use [has-glob](https://github.com/jonschlinkert/has-glob)): ```js isGlob(['**/*.js']); isGlob(['foo.js']); //=> false ``` ## Related * [has-glob](https://www.npmjs.com/package/has-glob): Returns `true` if an array has a glob pattern. | [homepage](https://github.com/jonschlinkert/has-glob) * [is-extglob](https://www.npmjs.com/package/is-extglob): Returns true if a string has an extglob. | [homepage](https://github.com/jonschlinkert/is-extglob) * [is-posix-bracket](https://www.npmjs.com/package/is-posix-bracket): Returns true if the given string is a POSIX bracket expression (POSIX character class). | [homepage](https://github.com/jonschlinkert/is-posix-bracket) * [is-valid-glob](https://www.npmjs.com/package/is-valid-glob): Return true if a value is a valid glob pattern or patterns. | [homepage](https://github.com/jonschlinkert/is-valid-glob) * [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. Just… [more](https://www.npmjs.com/package/micromatch) | [homepage](https://github.com/jonschlinkert/micromatch) ## Run tests Install dev dependencies: ```sh $ npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-glob/issues/new). ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2015 Jon Schlinkert Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on October 02, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/kind-of/README.md","tags":[],"body":"# kind-of [![NPM version](https://img.shields.io/npm/v/kind-of.svg?style=flat)](https://www.npmjs.com/package/kind-of) [![NPM downloads](https://img.shields.io/npm/dm/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![Build Status](https://img.shields.io/travis/jonschlinkert/kind-of.svg?style=flat)](https://travis-ci.org/jonschlinkert/kind-of) Get the native type of a value. ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install kind-of --save ``` Install with [bower](http://bower.io/) ```sh $ bower install kind-of --save ``` ## Usage > es5, browser and es6 ready ```js var kindOf = require('kind-of'); kindOf(undefined); //=> 'undefined' kindOf(null); //=> 'null' kindOf(true); //=> 'boolean' kindOf(false); //=> 'boolean' kindOf(new Boolean(true)); //=> 'boolean' kindOf(new Buffer('')); //=> 'buffer' kindOf(42); //=> 'number' kindOf(new Number(42)); //=> 'number' kindOf('str'); //=> 'string' kindOf(new String('str')); //=> 'string' kindOf(arguments); //=> 'arguments' kindOf({}); //=> 'object' kindOf(Object.create(null)); //=> 'object' kindOf(new Test()); //=> 'object' kindOf(new Date()); //=> 'date' kindOf([]); //=> 'array' kindOf([1, 2, 3]); //=> 'array' kindOf(new Array()); //=> 'array' kindOf(/foo/); //=> 'regexp' kindOf(new RegExp('foo')); //=> 'regexp' kindOf(function () {}); //=> 'function' kindOf(function * () {}); //=> 'function' kindOf(new Function()); //=> 'function' kindOf(new Map()); //=> 'map' kindOf(new WeakMap()); //=> 'weakmap' kindOf(new Set()); //=> 'set' kindOf(new WeakSet()); //=> 'weakset' kindOf(Symbol('str')); //=> 'symbol' kindOf(new Int8Array()); //=> 'int8array' kindOf(new Uint8Array()); //=> 'uint8array' kindOf(new Uint8ClampedArray()); //=> 'uint8clampedarray' kindOf(new Int16Array()); //=> 'int16array' kindOf(new Uint16Array()); //=> 'uint16array' kindOf(new Int32Array()); //=> 'int32array' kindOf(new Uint32Array()); //=> 'uint32array' kindOf(new Float32Array()); //=> 'float32array' kindOf(new Float64Array()); //=> 'float64array' ``` ## Benchmarks Benchmarked against [typeof](http://github.com/CodingFu/typeof) and [type-of](https://github.com/ForbesLindesay/type-of). Note that performaces is slower for es6 features `Map`, `WeakMap`, `Set` and `WeakSet`. ```bash #1: array current x 23,329,397 ops/sec ±0.82% (94 runs sampled) lib-type-of x 4,170,273 ops/sec ±0.55% (94 runs sampled) lib-typeof x 9,686,935 ops/sec ±0.59% (98 runs sampled) #2: boolean current x 27,197,115 ops/sec ±0.85% (94 runs sampled) lib-type-of x 3,145,791 ops/sec ±0.73% (97 runs sampled) lib-typeof x 9,199,562 ops/sec ±0.44% (99 runs sampled) #3: date current x 20,190,117 ops/sec ±0.86% (92 runs sampled) lib-type-of x 5,166,970 ops/sec ±0.74% (94 runs sampled) lib-typeof x 9,610,821 ops/sec ±0.50% (96 runs sampled) #4: function current x 23,855,460 ops/sec ±0.60% (97 runs sampled) lib-type-of x 5,667,740 ops/sec ±0.54% (100 runs sampled) lib-typeof x 10,010,644 ops/sec ±0.44% (100 runs sampled) #5: null current x 27,061,047 ops/sec ±0.97% (96 runs sampled) lib-type-of x 13,965,573 ops/sec ±0.62% (97 runs sampled) lib-typeof x 8,460,194 ops/sec ±0.61% (97 runs sampled) #6: number current x 25,075,682 ops/sec ±0.53% (99 runs sampled) lib-type-of x 2,266,405 ops/sec ±0.41% (98 runs sampled) lib-typeof x 9,821,481 ops/sec ±0.45% (99 runs sampled) #7: object current x 3,348,980 ops/sec ±0.49% (99 runs sampled) lib-type-of x 3,245,138 ops/sec ±0.60% (94 runs sampled) lib-typeof x 9,262,952 ops/sec ±0.59% (99 runs sampled) #8: regex current x 21,284,827 ops/sec ±0.72% (96 runs sampled) lib-type-of x 4,689,241 ops/sec ±0.43% (100 runs sampled) lib-typeof x 8,957,593 ops/sec ±0.62% (98 runs sampled) #9: string current x 25,379,234 ops/sec ±0.58% (96 runs sampled) lib-type-of x 3,635,148 ops/sec ±0.76% (93 runs sampled) lib-typeof x 9,494,134 ops/sec ±0.49% (98 runs sampled) #10: undef current x 27,459,221 ops/sec ±1.01% (93 runs sampled) lib-type-of x 14,360,433 ops/sec ±0.52% (99 runs sampled) lib-typeof x 23,202,868 ops/sec ±0.59% (94 runs sampled) ``` ## Optimizations In 7 out of 8 cases, this library is 2x-10x faster than other top libraries included in the benchmarks. There are a few things that lead to this performance advantage, none of them hard and fast rules, but all of them simple and repeatable in almost any code library: 1. Optimize around the fastest and most common use cases first. Of course, this will change from project-to-project, but I took some time to understand how and why `typeof` checks were being used in my own libraries and other libraries I use a lot. 2. Optimize around bottlenecks - In other words, the order in which conditionals are implemented is significant, because each check is only as fast as the failing checks that came before it. Here, the biggest bottleneck by far is checking for plain objects (an object that was created by the `Object` constructor). I opted to make this check happen by process of elimination rather than brute force up front (e.g. by using something like `val.constructor.name`), so that every other type check would not be penalized it. 3. Don't do uneccessary processing - why do `.slice(8, -1).toLowerCase();` just to get the word `regex`? It's much faster to do `if (type === '[object RegExp]') return 'regex'` ## Related projects You might also be interested in these projects: * [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern.… [more](https://www.npmjs.com/package/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob) * [is-number](https://www.npmjs.com/package/is-number): Returns true if the value is a number. comprehensive tests. | [homepage](https://github.com/jonschlinkert/is-number) * [is-primitive](https://www.npmjs.com/package/is-primitive): Returns `true` if the value is a primitive. | [homepage](https://github.com/jonschlinkert/is-primitive) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/kind-of/issues/new). ## Building docs Generate readme and API documentation with [verb](https://github.com/verbose/verb): ```sh $ npm install verb && npm run docs ``` Or, if [verb](https://github.com/verbose/verb) is installed globally: ```sh $ verb ``` ## Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ## Author **Jon Schlinkert** * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert). Released under the [MIT license](https://github.com/jonschlinkert/kind-of/blob/master/LICENSE). *** _This file was generated by [verb](https://github.com/verbose/verb), v0.9.0, on May 03, 2016._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/kind-of/node_modules/is-buffer/README.md","tags":[],"body":"# is-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][npm-url] #### Determine if an object is a [`Buffer`](http://nodejs.org/api/buffer.html) (incl. [browser Buffers](https://github.com/feross/buffer)) [![saucelabs][saucelabs-image]][saucelabs-url] [travis-image]: https://img.shields.io/travis/feross/is-buffer/master.svg [travis-url]: https://travis-ci.org/feross/is-buffer [npm-image]: https://img.shields.io/npm/v/is-buffer.svg [npm-url]: https://npmjs.org/package/is-buffer [downloads-image]: https://img.shields.io/npm/dm/is-buffer.svg [saucelabs-image]: https://saucelabs.com/browser-matrix/is-buffer.svg [saucelabs-url]: https://saucelabs.com/u/is-buffer ## Why not use `Buffer.isBuffer`? This module lets you check if an object is a `Buffer` without using `Buffer.isBuffer` (which includes the whole [buffer](https://github.com/feross/buffer) module in [browserify](http://browserify.org/)). It's future-proof and works in node too! ## install ```bash npm install is-buffer ``` ## usage ```js var isBuffer = require('is-buffer') isBuffer(new Buffer(4)) // true isBuffer(undefined) // false isBuffer(null) // false isBuffer('') // false isBuffer(true) // false isBuffer(false) // false isBuffer(0) // false isBuffer(1) // false isBuffer(1.0) // false isBuffer('string') // false isBuffer({}) // false isBuffer(function foo () {}) // false ``` ## license MIT. Copyright (C) [Feross Aboukhadijeh](http://feross.org)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/normalize-path/README.md","tags":[],"body":"# normalize-path [![NPM version](https://badge.fury.io/js/normalize-path.svg)](http://badge.fury.io/js/normalize-path) [![Build Status](https://travis-ci.org/jonschlinkert/normalize-path.svg)](https://travis-ci.org/jonschlinkert/normalize-path) > Normalize file path slashes to be unix-like forward slashes. Also condenses repeat slashes to a single slash and removes and trailing slashes. ## Install Install with [npm](https://www.npmjs.com/) ```sh $ npm i normalize-path --save ``` ## Usage ```js var normalize = require('normalize-path'); normalize('\\\\foo\\\\bar\\\\baz\\\\'); //=> '/foo/bar/baz' normalize('./foo/bar/baz/'); //=> './foo/bar/baz' ``` Pass `false` as the last argument to **not** strip trailing slashes: ```js normalize('./foo/bar/baz/', false); //=> './foo/bar/baz/' normalize('foo\\\\bar\\\\baz\\\\', false); //=> 'foo/bar/baz/' ``` ## Related Other useful libraries for working with paths in node.js: * [contains-path](https://www.npmjs.com/package/contains-path): Return true if a file path contains the given path. | [homepage](https://github.com/jonschlinkert/contains-path) * [ends-with](https://www.npmjs.com/package/ends-with): Returns `true` if the given `string` or `array` ends with `suffix` using strict equality for… [more](https://www.npmjs.com/package/ends-with) | [homepage](https://github.com/jonschlinkert/ends-with) * [is-absolute](https://www.npmjs.com/package/is-absolute): Returns true if a file path is absolute. | [homepage](https://github.com/jonschlinkert/is-absolute) * [is-relative](https://www.npmjs.com/package/is-relative): Returns `true` if the path appears to be relative. | [homepage](https://github.com/jonschlinkert/is-relative) * [parse-filepath](https://www.npmjs.com/package/parse-filepath): Parse a filepath into an object. Falls back on the native node.js `path.parse` method if… [more](https://www.npmjs.com/package/parse-filepath) | [homepage](https://github.com/jonschlinkert/parse-filepath) * [path-ends-with](https://www.npmjs.com/package/path-ends-with): Return `true` if a file path ends with the given string/suffix. | [homepage](https://github.com/jonschlinkert/path-ends-with) * [path-segments](https://www.npmjs.com/package/path-segments): Get n specific segments of a file path, e.g. first 2, last 3, etc. | [homepage](https://github.com/jonschlinkert/path-segments) * [rewrite-ext](https://www.npmjs.com/package/rewrite-ext): Automatically re-write the destination extension of a filepath based on the source extension. e.g … [more](https://www.npmjs.com/package/rewrite-ext) | [homepage](https://github.com/jonschlinkert/rewrite-ext) * [unixify](https://www.npmjs.com/package/unixify): Convert Windows file paths to unix paths. | [homepage](https://github.com/jonschlinkert/unixify) ## Running tests Install dev dependencies: ```sh $ npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/normalize-path/issues/new). ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2015 Jon Schlinkert Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on November 17, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/object.omit/README.md","tags":[],"body":"# object.omit [![NPM version](https://badge.fury.io/js/object.omit.svg)](http://badge.fury.io/js/object.omit) > Return a copy of an object excluding the given key, or array of keys. Also accepts an optional filter function as the last argument. ## Install ```sh $ npm i object.omit --save-dev ``` ## Usage ```js var omit = require('object.omit'); ``` Pass a string `key` to omit: ```js omit({a: 'a', b: 'b', c: 'c'}, 'a') //=> { b: 'b', c: 'c' } ``` Pass an array of `keys` to omit: ```js omit({a: 'a', b: 'b', c: 'c'}, ['a', 'c']) //=> { b: 'b' } ``` Returns the object if no keys are passed: ```js omit({a: 'a', b: 'b', c: 'c'}) //=> {a: 'a', b: 'b', c: 'c'} ``` Returns an empty object if no value is passed. ```js omit() //=> {} ``` ### Filter function An optional filter function may be passed as the last argument, with or without keys passed on the arguments: **filter on keys** ```js var res = omit({a: 'a', b: 'b', c: 'c'}, function (val, key) { return key === 'a'; }); //=> {a: 'a'} ``` **filter on values** ```js var fn = function() {}; var obj = {a: 'a', b: 'b', c: fn}; var res = omit(obj, ['a'], function (val, key) { return typeof val !== 'function'; }); //=> {b: 'b'} ``` ### Other awesome javascript/node.js utils * [object.filter](https://github.com/jonschlinkert/object.filter): Create a new object filtered to have only properties for which the callback returns true. * [object.pick](https://github.com/jonschlinkert/object.pick): Returns a filtered copy of an object with only the specified keys, like `pick` from… [more](https://github.com/jonschlinkert/object.pick) * [object.pluck](https://github.com/jonschlinkert/object.pluck): Like pluck from underscore / lo-dash, but returns an object composed of specified properties, with… [more](https://github.com/jonschlinkert/object.pluck) * [object.reduce](https://github.com/jonschlinkert/object.reduce): Reduces an object to a value that is the accumulated result of running each property… [more](https://github.com/jonschlinkert/object.reduce) * [object.defaults](https://github.com/jonschlinkert/object.defaults): Like `extend` but only copies missing properties/values to the target object. ## Runing tests Install dev dependencies: ```sh $ npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/object.omit/issues/new) ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2014-2015 Jon Schlinkert Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on July 22, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/object.omit/node_modules/for-own/README.md","tags":[],"body":"# for-own [![NPM version](https://badge.fury.io/js/for-own.svg)](http://badge.fury.io/js/for-own) > Iterate over the own and inherited enumerable properties of an object, and return an object with properties that evaluate to true from the callback. Exit early by returning `false`. ## Install #### Install with [npm](https://www.npmjs.com/): ```bash npm i for-own --save ``` ## Run tests ```bash npm test ``` ## Usage ```js var forOwn = require('for-own'); var obj = {a: 'foo', b: 'bar', c: 'baz'}; var values = []; var keys = []; forOwn(obj, function (value, key, o) { keys.push(key); values.push(value); }); console.log(keys); //=> ['a', 'b', 'c']; console.log(values); //=> ['foo', 'bar', 'baz']; ``` ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright (c) 2014 Jon Schlinkert, contributors. Released under the MIT license *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on September 20, 2014._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/object.omit/node_modules/for-own/node_modules/for-in/README.md","tags":[],"body":"# for-in [![NPM version](https://img.shields.io/npm/v/for-in.svg?style=flat)](https://www.npmjs.com/package/for-in) [![NPM downloads](https://img.shields.io/npm/dm/for-in.svg?style=flat)](https://npmjs.org/package/for-in) [![Build Status](https://img.shields.io/travis/jonschlinkert/for-in.svg?style=flat)](https://travis-ci.org/jonschlinkert/for-in) > Iterate over the own and inherited enumerable properties of an objecte, and return an object with properties that evaluate to true from the callback. Exit early by returning `false`. JavaScript/Node.js ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install for-in --save ``` ## Usage ```js var forIn = require('for-in'); var obj = {a: 'foo', b: 'bar', c: 'baz'}; var values = []; var keys = []; forIn(obj, function (value, key, o) { keys.push(key); values.push(value); }); console.log(keys); //=> ['a', 'b', 'c']; console.log(values); //=> ['foo', 'bar', 'baz']; ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/for-in/issues/new). ## Building docs Generate readme and API documentation with [verb](https://github.com/verbose/verb): ```sh $ npm install verb && npm run docs ``` Or, if [verb](https://github.com/verbose/verb) is installed globally: ```sh $ verb ``` ## Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ## Author **Jon Schlinkert** * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert). Released under the [MIT license](https://github.com/jonschlinkert/for-in/blob/master/LICENSE). *** _This file was generated by [verb](https://github.com/verbose/verb), v, on March 27, 2016._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/object.omit/node_modules/is-extendable/README.md","tags":[],"body":"# is-extendable [![NPM version](https://badge.fury.io/js/is-extendable.svg)](http://badge.fury.io/js/is-extendable) > Returns true if a value is any of the object types: array, regexp, plain object, function or date. This is useful for determining if a value can be extended, e.g. \"can the value have keys?\" ## Install Install with [npm](https://www.npmjs.com/) ```sh $ npm i is-extendable --save ``` ## Usage ```js var isExtendable = require('is-extendable'); ``` Returns true if the value is any of the following: * `array` * `regexp` * `plain object` * `function` * `date` * `error` ## Notes All objects in JavaScript can have keys, but it's a pain to check for this, since we ether need to verify that the value is not `null` or `undefined` and: * the value is not a primitive, or * that the object is an `object`, `function` Also note that an `extendable` object is not the same as an [extensible object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible), which is one that (in es6) is not sealed, frozen, or marked as non-extensible using `preventExtensions`. ## Related projects * [assign-deep](https://github.com/jonschlinkert/assign-deep): Deeply assign the enumerable properties of source objects to a destination object. * [extend-shallow](https://github.com/jonschlinkert/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. * [isobject](https://github.com/jonschlinkert/isobject): Returns true if the value is an object and not an array or null. * [is-plain-object](https://github.com/jonschlinkert/is-plain-object): Returns true if an object was created by the `Object` constructor. * [is-equal-shallow](https://github.com/jonschlinkert/is-equal-shallow): Does a shallow comparison of two objects, returning false if the keys or values differ. * [kind-of](https://github.com/jonschlinkert/kind-of): Get the native type of a value. ## Running tests Install dev dependencies: ```sh $ npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-extendable/issues/new) ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2015 Jon Schlinkert Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on July 04, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/parse-glob/README.md","tags":[],"body":"# parse-glob [![NPM version](https://badge.fury.io/js/parse-glob.svg)](http://badge.fury.io/js/parse-glob) [![Build Status](https://travis-ci.org/jonschlinkert/parse-glob.svg)](https://travis-ci.org/jonschlinkert/parse-glob) > Parse a glob pattern into an object of tokens. **Changes from v1.0.0 to v3.0.4** * all path-related properties are now on the `path` object * all boolean properties are now on the `is` object * adds `base` property See the [properties](#properties) section for details. Install with [npm](https://www.npmjs.com/) ```sh $ npm i parse-glob --save ``` * parses 1,000+ glob patterns in 29ms (2.3 GHz Intel Core i7) * Extensive [unit tests](./test.js) (more than 1,000 lines), covering wildcards, globstars, character classes, brace patterns, extglobs, dotfiles and other complex patterns. See the tests for [hundreds of examples](./test.js). ## Usage ```js var parseGlob = require('parse-glob'); ``` **Example** ```js parseGlob('a/b/c/**/*.{yml,json}'); ``` **Returns:** ```js { orig: 'a/b/c/**/*.{yml,json}', is: { glob: true, negated: false, extglob: false, braces: true, brackets: false, globstar: true, dotfile: false, dotdir: false }, glob: '**/*.{yml,json}', base: 'a/b/c', path: { dirname: 'a/b/c/**/', basename: '*.{yml,json}', filename: '*', extname: '.{yml,json}', ext: '{yml,json}' } } ``` ## Properties The object returned by parseGlob has the following properties: * `orig`: a copy of the original, unmodified glob pattern * `is`: an object with boolean information about the glob: - `glob`: true if the pattern actually a glob pattern - `negated`: true if it's a negation pattern (`!**/foo.js`) - `extglob`: true if it has extglobs (`@(foo|bar)`) - `braces`: true if it has braces (`{1..2}` or `.{txt,md}`) - `brackets`: true if it has POSIX brackets (`[[:alpha:]]`) - `globstar`: true if the pattern has a globstar (double star, `**`) - `dotfile`: true if the pattern should match dotfiles - `dotdir`: true if the pattern should match dot-directories (like `.git`) * `glob`: the glob pattern part of the string, if any * `base`: the non-glob part of the string, if any * `path`: file path segments - `dirname`: directory - `basename`: file name with extension - `filename`: file name without extension - `extname`: file extension with dot - `ext`: file extension without dot ## Related * [glob-base](https://www.npmjs.com/package/glob-base): Returns an object with the (non-glob) base path and the actual pattern. | [homepage](https://github.com/jonschlinkert/glob-base) * [glob-parent](https://www.npmjs.com/package/glob-parent): Strips glob magic from a string to provide the parent path | [homepage](https://github.com/es128/glob-parent) * [glob-path-regex](https://www.npmjs.com/package/glob-path-regex): Regular expression for matching the parts of glob pattern. | [homepage](https://github.com/regexps/glob-path-regex) * [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern. | [homepage](https://github.com/jonschlinkert/is-glob) * [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. Just… [more](https://www.npmjs.com/package/micromatch) | [homepage](https://github.com/jonschlinkert/micromatch) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/parse-glob/issues/new). ## Tests Install dev dependencies: ```sh $ npm i -d && npm test ``` ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2014-2015 Jon Schlinkert Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on September 22, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/parse-glob/node_modules/glob-base/README.md","tags":[],"body":"# glob-base [![NPM version](https://badge.fury.io/js/glob-base.svg)](http://badge.fury.io/js/glob-base) [![Build Status](https://travis-ci.org/jonschlinkert/glob-base.svg)](https://travis-ci.org/jonschlinkert/glob-base) > Returns an object with the (non-glob) base path and the actual pattern. Use [glob-parent](https://github.com/es128/glob-parent) if you just want the base path. ## Install with [npm](npmjs.org) ```bash npm i glob-base --save ``` ## Related projects * [glob-parent](https://github.com/es128/glob-parent): Strips glob magic from a string to provide the parent path * [micromatch](https://github.com/jonschlinkert/micromatch): Glob matching for javascript/node.js. A faster alternative to minimatch (10-45x faster on avg), with all the features you're used to using in your Grunt and gulp tasks. * [parse-glob](https://github.com/jonschlinkert/parse-glob): Parse a glob pattern into an object of tokens. * [is-glob](https://github.com/jonschlinkert/is-glob): Returns `true` if the given string looks like a glob pattern. * [braces](https://github.com/jonschlinkert/braces): Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces specification. * [fill-range](https://github.com/jonschlinkert/fill-range): Fill in a range of numbers or letters, optionally passing an increment or multiplier to use. * [expand-range](https://github.com/jonschlinkert/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See the benchmarks. Used by micromatch. ## Usage ```js var globBase = require('glob-base'); globBase('a/b/.git/'); //=> { base: 'a/b/.git/', isGlob: false, glob: '' }) globBase('a/b/**/e'); //=> { base: 'a/b', isGlob: true, glob: '**/e' } globBase('a/b/*.{foo,bar}'); //=> { base: 'a/b', isGlob: true, glob: '*.{foo,bar}' } globBase('a/b/.git/**'); //=> { base: 'a/b/.git', isGlob: true, glob: '**' } globBase('a/b/c/*.md'); //=> { base: 'a/b/c', isGlob: true, glob: '*.md' } globBase('a/b/c/.*.md'); //=> { base: 'a/b/c', isGlob: true, glob: '.*.md' } globBase('a/b/{c,d}'); //=> { base: 'a/b', isGlob: true, glob: '{c,d}' } globBase('!*.min.js'); //=> { base: '.', isGlob: true, glob: '!*.min.js' } globBase('!foo'); //=> { base: '.', isGlob: true, glob: '!foo' } globBase('!foo/(a|b).min.js'); //=> { base: '.', isGlob: true, glob: '!foo/(a|b).min.js' } globBase(''); //=> { base: '.', isGlob: false, glob: '' } globBase('**/*.md'); //=> { base: '.', isGlob: true, glob: '**/*.md' } globBase('**/*.min.js'); //=> { base: '.', isGlob: true, glob: '**/*.min.js' } globBase('**/.*'); //=> { base: '.', isGlob: true, glob: '**/.*' } globBase('**/d'); //=> { base: '.', isGlob: true, glob: '**/d' } globBase('*.*'); //=> { base: '.', isGlob: true, glob: '*.*' } globBase('*.min.js'); //=> { base: '.', isGlob: true, glob: '*.min.js' } globBase('*/*'); //=> { base: '.', isGlob: true, glob: '*/*' } globBase('*b'); //=> { base: '.', isGlob: true, glob: '*b' } globBase('.'); //=> { base: '.', isGlob: false, glob: '.' } globBase('.*'); //=> { base: '.', isGlob: true, glob: '.*' } globBase('./*'); //=> { base: '.', isGlob: true, glob: '*' } globBase('/a'); //=> { base: '/', isGlob: false, glob: 'a' } globBase('@(a|b)/e.f.g/'); //=> { base: '.', isGlob: true, glob: '@(a|b)/e.f.g/' } globBase('[a-c]b*'); //=> { base: '.', isGlob: true, glob: '[a-c]b*' } globBase('a'); //=> { base: '.', isGlob: false, glob: 'a' } globBase('a.min.js'); //=> { base: '.', isGlob: false, glob: 'a.min.js' } globBase('a/'); //=> { base: 'a/', isGlob: false, glob: '' } globBase('a/**/j/**/z/*.md'); //=> { base: 'a', isGlob: true, glob: '**/j/**/z/*.md' } globBase('a/*/c/*.md'); //=> { base: 'a', isGlob: true, glob: '*/c/*.md' } globBase('a/?/c.md'); //=> { base: 'a', isGlob: true, glob: '?/c.md' } globBase('a/??/c.js'); //=> { base: 'a', isGlob: true, glob: '??/c.js' } globBase('a?b'); //=> { base: '.', isGlob: true, glob: 'a?b' } globBase('bb'); //=> { base: '.', isGlob: false, glob: 'bb' } globBase('c.md'); //=> { base: '.', isGlob: false, glob: 'c.md' } ``` ## Running tests Install dev dependencies. ```bash npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/glob-base/issues) ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright (c) 2015 Jon Schlinkert Released under the MIT license *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on March 08, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/parse-glob/node_modules/glob-base/node_modules/glob-parent/README.md","tags":[],"body":"glob-parent [![Build Status](https://travis-ci.org/es128/glob-parent.svg)](https://travis-ci.org/es128/glob-parent) [![Coverage Status](https://img.shields.io/coveralls/es128/glob-parent.svg)](https://coveralls.io/r/es128/glob-parent?branch=master) ====== Javascript module to extract the non-magic parent path from a glob string. [![NPM](https://nodei.co/npm/glob-parent.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/glob-parent/) [![NPM](https://nodei.co/npm-dl/glob-parent.png?height=3&months=9)](https://nodei.co/npm-dl/glob-parent/) Usage ----- ```sh npm install glob-parent --save ``` ```js var globParent = require('glob-parent'); globParent('path/to/*.js'); // 'path/to' globParent('/root/path/to/*.js'); // '/root/path/to' globParent('/*.js'); // '/' globParent('*.js'); // '.' globParent('**/*.js'); // '.' globParent('path/{to,from}'); // 'path' globParent('path/!(to|from)'); // 'path' globParent('path/?(to|from)'); // 'path' globParent('path/+(to|from)'); // 'path' globParent('path/*(to|from)'); // 'path' globParent('path/@(to|from)'); // 'path' globParent('path/**/*'); // 'path' // if provided a non-glob path, returns the nearest dir globParent('path/foo/bar.js'); // 'path/foo' globParent('path/foo/'); // 'path/foo' globParent('path/foo'); // 'path' (see issue #3 for details) ``` Change Log ---------- [See release notes page on GitHub](https://github.com/es128/glob-parent/releases) License ------- [ISC](https://raw.github.com/es128/glob-parent/master/LICENSE)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/parse-glob/node_modules/is-dotfile/README.md","tags":[],"body":"# is-dotfile [![NPM version](https://badge.fury.io/js/is-dotfile.svg)](http://badge.fury.io/js/is-dotfile) > Return true if a file path is (or has) a dotfile. Returns false if the path is a dot directory. ## Install Install with [npm](https://www.npmjs.com/) ```sh $ npm i is-dotfile --save ``` ## Usage ```js var isDotfile = require('is-dotfile'); ``` **false** All of the following return `false`: ```js isDotfile('a/b/c.js'); isDotfile('/.git/foo'); isDotfile('a/b/c/.git/foo'); //=> false ``` **true** All of the following return `true`: ```js isDotfile('a/b/.gitignore'); isDotfile('.gitignore'); isDotfile('/.gitignore'); //=> true ``` ## Related projects * [dotfile-regex](https://www.npmjs.com/package/dotfile-regex): Regular expresson for matching dotfiles. | [homepage](https://github.com/regexps/dotfile-regex) * [has-glob](https://www.npmjs.com/package/has-glob): Returns `true` if an array has a glob pattern. | [homepage](https://github.com/jonschlinkert/has-glob) * [is-dotdir](https://www.npmjs.com/package/is-dotdir): Returns true if a path is a dot-directory. | [homepage](https://github.com/jonschlinkert/is-dotdir) * [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern.… [more](https://www.npmjs.com/package/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob) ## Running tests Install dev dependencies: ```sh $ npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-dotfile/issues/new). ## Authors **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2015 Jon Schlinkert Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on October 20, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/regex-cache/README.md","tags":[],"body":"# regex-cache [![NPM version](https://img.shields.io/npm/v/regex-cache.svg?style=flat)](https://www.npmjs.com/package/regex-cache) [![NPM downloads](https://img.shields.io/npm/dm/regex-cache.svg?style=flat)](https://npmjs.org/package/regex-cache) [![Build Status](https://img.shields.io/travis/jonschlinkert/regex-cache.svg?style=flat)](https://travis-ci.org/jonschlinkert/regex-cache) > Memoize the results of a call to the RegExp constructor, avoiding repetitious runtime compilation of the same string and options, resulting in suprising performance improvements. ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install regex-cache --save ``` * Read [what this does](#what-this-does). * See [the benchmarks](#benchmarks) ## Usage Wrap a function like this: ```js var cache = require('regex-cache'); var someRegex = cache(require('some-regex-lib')); ``` **Caching a regex** If you want to cache a regex after calling `new RegExp()`, or you're requiring a module that returns a regex, wrap it with a function first: ```js var cache = require('regex-cache'); function yourRegex(str, opts) { // do stuff to str and opts return new RegExp(str, opts.flags); } var regex = cache(yourRegex); ``` ## Recommendations ### Use this when... * **No options are passed** to the function that creates the regex. Regardless of how big or small the regex is, when zero options are passed, caching will be faster than not. * **A few options are passed**, and the values are primitives. The limited benchmarks I did show that caching is beneficial when up to 8 or 9 options are passed. ### Do not use this when... * **The values of options are not primitives**. When non-primitives must be compared for equality, the time to compare the options is most likely as long or longer than the time to just create a new regex. ### Example benchmarks Performance results, with and without regex-cache: ```bash # no args passed (defaults) with-cache x 8,699,231 ops/sec ±0.86% (93 runs sampled) without-cache x 2,777,551 ops/sec ±0.63% (95 runs sampled) # string and six options passed with-cache x 1,885,934 ops/sec ±0.80% (93 runs sampled) without-cache x 1,256,893 ops/sec ±0.65% (97 runs sampled) # string only with-cache x 7,723,256 ops/sec ±0.87% (92 runs sampled) without-cache x 2,303,060 ops/sec ±0.47% (99 runs sampled) # one option passed with-cache x 4,179,877 ops/sec ±0.53% (100 runs sampled) without-cache x 2,198,422 ops/sec ±0.47% (95 runs sampled) # two options passed with-cache x 3,256,222 ops/sec ±0.51% (99 runs sampled) without-cache x 2,121,401 ops/sec ±0.79% (97 runs sampled) # six options passed with-cache x 1,816,018 ops/sec ±1.08% (96 runs sampled) without-cache x 1,157,176 ops/sec ±0.53% (100 runs sampled) # # diminishing returns happen about here # # ten options passed with-cache x 1,210,598 ops/sec ±0.56% (92 runs sampled) without-cache x 1,665,588 ops/sec ±1.07% (100 runs sampled) # twelve options passed with-cache x 1,042,096 ops/sec ±0.68% (92 runs sampled) without-cache x 1,389,414 ops/sec ±0.68% (97 runs sampled) # twenty options passed with-cache x 661,125 ops/sec ±0.80% (93 runs sampled) without-cache x 1,208,757 ops/sec ±0.65% (97 runs sampled) # # when non-primitive values are compared # # single value on the options is an object with-cache x 1,398,313 ops/sec ±1.05% (95 runs sampled) without-cache x 2,228,281 ops/sec ±0.56% (99 runs sampled) ``` ## Run benchmarks Install dev dependencies: ```bash npm i -d && npm run benchmarks ``` ## What this does If you're using `new RegExp('foo')` instead of a regex literal, it's probably because you need to dyamically generate a regex based on user options or some other potentially changing factors. When your function creates a string based on user inputs and passes it to the `RegExp` constructor, regex-cache caches the results. The next time the function is called if the key of a cached regex matches the user input (or no input was given), the cached regex is returned, avoiding unnecessary runtime compilation. Using the RegExp constructor offers a lot of flexibility, but the runtime compilation comes at a price - it's slow. Not specifically because of the call to the RegExp constructor, but **because you have to build up the string before `new RegExp()` is even called**. ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/regex-cache/issues/new). ## Building docs Generate readme and API documentation with [verb](https://github.com/verbose/verb): ```sh $ npm install verb && npm run docs ``` Or, if [verb](https://github.com/verbose/verb) is installed globally: ```sh $ verb ``` ## Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ## Author **Jon Schlinkert** * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert). Released under the [MIT license](https://github.com/jonschlinkert/regex-cache/blob/master/LICENSE). *** _This file was generated by [verb](https://github.com/verbose/verb), v, on April 01, 2016._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/regex-cache/node_modules/is-equal-shallow/README.md","tags":[],"body":"# is-equal-shallow [![NPM version](https://badge.fury.io/js/is-equal-shallow.svg)](http://badge.fury.io/js/is-equal-shallow) [![Build Status](https://travis-ci.org/jonschlinkert/is-equal-shallow.svg)](https://travis-ci.org/jonschlinkert/is-equal-shallow) > Does a shallow comparison of two objects, returning false if the keys or values differ. The purpose of this lib is to do the fastest comparison possible of two objects when the values will predictably be primitives. * only compares objects. * only compares the first level of each object * values must be primitives. If a value is not a primitive, even if the values are the same, `false` is returned. Install with [npm](https://www.npmjs.com/) ```sh $ npm i is-equal-shallow --save ``` ## Usage ```js var equals = require('is-equal-shallow'); equals(object_a, object_b); ``` **Examples** ```js equals({a: true, b: true}, {a: true, b: true}); //=> 'true' equals({a: true, b: false}, {c: false, b: false}); //=> 'false' equals({a: true, b: false}, {a: false, b: false}); //=> 'false' ``` Strict comparison for equality: ```js equals({a: true, b: true}, {a: true, b: 'true'}); //=> 'false' ``` When values are not primitives, `false` is always returned: ```js equals({ b: {}}, { b: {}}); //=> 'false' equals({ b: []}, { b: []}); //=> 'false' ``` ## Related projects Other object utils: * [clone-deep](https://github.com/jonschlinkert/clone-deep): Recursively (deep) clone JavaScript native types, like Object, Array, RegExp, Date as well as primitives. * [for-in](https://github.com/jonschlinkert/for-in): Iterate over the own and inherited enumerable properties of an objecte, and return an object… [more](https://github.com/jonschlinkert/for-in) * [for-own](https://github.com/jonschlinkert/for-own): Iterate over the own enumerable properties of an object, and return an object with properties… [more](https://github.com/jonschlinkert/for-own) * [is-plain-object](https://github.com/jonschlinkert/is-plain-object): Returns true if an object was created by the `Object` constructor. * [isobject](https://github.com/jonschlinkert/isobject): Returns true if the value is an object and not an array or null. ## Running tests Install dev dependencies: ```sh $ npm i -d && npm test ``` ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-equal-shallow/issues/new) ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2015 Jon Schlinkert Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on June 22, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/micromatch/node_modules/regex-cache/node_modules/is-primitive/README.md","tags":[],"body":"# is-primitive [![NPM version](https://badge.fury.io/js/is-primitive.svg)](http://badge.fury.io/js/is-primitive) [![Build Status](https://travis-ci.org/jonschlinkert/is-primitive.svg)](https://travis-ci.org/jonschlinkert/is-primitive) > Returns `true` if the value is a primitive. ## Install with [npm](npmjs.org) ```bash npm i is-primitive --save ``` ## Running tests Install dev dependencies. ```bash npm i -d && npm test ``` ## Usage ```js var isPrimitive = require('is-primitive'); isPrimitive('abc'); //=> true isPrimitive(42); //=> true isPrimitive(false); //=> true isPrimitive(true); //=> true isPrimitive({}); //=> false isPrimitive([]); //=> false isPrimitive(function(){}); //=> false ``` ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright (c) 2014-2015 Jon Schlinkert Released under the MIT license *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on March 16, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/opn/node_modules/object-assign/readme.md","tags":[],"body":"# object-assign [![Build Status](https://travis-ci.org/sindresorhus/object-assign.svg?branch=master)](https://travis-ci.org/sindresorhus/object-assign) > ES2015 [`Object.assign()`](http://www.2ality.com/2014/01/object-assign.html) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save object-assign ``` ## Usage ```js const objectAssign = require('object-assign'); objectAssign({foo: 0}, {bar: 1}); //=> {foo: 0, bar: 1} // multiple sources objectAssign({foo: 0}, {bar: 1}, {baz: 2}); //=> {foo: 0, bar: 1, baz: 2} // overwrites equal keys objectAssign({foo: 0}, {foo: 1}, {foo: 2}); //=> {foo: 2} // ignores null and undefined sources objectAssign({foo: 0}, null, {bar: 1}, undefined); //=> {foo: 0, bar: 1} ``` ## API ### objectAssign(target, source, [source, ...]) Assigns enumerable own properties of `source` objects to the `target` object and returns the `target` object. Additional `source` objects will overwrite previous ones. ## Resources - [ES2015 spec - Object.assign](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign) ## Related - [deep-assign](https://github.com/sindresorhus/deep-assign) - Recursive `Object.assign()` ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/opn/readme.md","tags":[],"body":"# opn > A better [node-open](https://github.com/pwnall/node-open). Opens stuff like websites, files, executables. Cross-platform. #### Why? - Actively maintained - Supports app arguments - Safer as it uses `spawn` instead of `exec` - Fixes most of the open `node-open` issues - Includes the latest [`xdg-open` script](http://cgit.freedesktop.org/xdg/xdg-utils/commit/?id=c55122295c2a480fa721a9614f0e2d42b2949c18) for Linux ## Install ``` $ npm install --save opn ``` ## Usage ```js var opn = require('opn'); opn('unicorn.png'); // opens the image in the default image viewer opn('http://sindresorhus.com'); // opens the url in the default browser opn('http://sindresorhus.com', {app: 'firefox'}); // specify the app to open in opn('http://sindresorhus.com', {app: ['google chrome', '--incognito']}); // specify app arguments ``` ## API Uses the command `open` on OS X, `start` on Windows and `xdg-open` on other platforms. ### opn(target, [options], [callback]) Returns the [spawned child process](https://nodejs.org/api/child_process.html#child_process_class_childprocess). You'd normally not need to use this for anything, but it can be useful if you'd like to attach custom event listeners or perform other operations directly on the spawned process. #### target *Required* Type: `string` The thing you want to open. Can be a URL, file, or executable. Opens in the default app for the file type. Eg. URLs opens in your default browser. #### options Type: `object` ##### wait Type: `boolean` Default: `true` Wait for the opened app to exit before calling the `callback`. If `false` it's called immediately when opening the app. On Windows you have to explicitly specify an app for it to be able to wait. ##### app Type: `string`, `array` Specify the app to open the `target` with, or an array with the app and app arguments. The app name is platform dependent. Don't hard code it in reusable modules. Eg. Chrome is `google chrome` on OS X, `google-chrome` on Linux and `chrome` on Windows. #### callback(error) Type: `function` Called when the opened app exits, or if `wait: false`, immediately when opening. ## Related - [opn-cli](https://github.com/sindresorhus/opn-cli) - CLI for this module ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/portscanner/README.md","tags":[],"body":"# node-portscanner The portscanner module is an asynchronous JavaScript port scanner for Node.js. Portscanner can check a port, or range of ports, for 'open' or 'closed' statuses. ## Install ```bash npm install portscanner ``` ## Usage A brief example: ```javascript var portscanner = require('portscanner') // Checks the status of a single port portscanner.checkPortStatus(3000, '127.0.0.1', function(error, status) { // Status is 'open' if currently in use or 'closed' if available console.log(status) }) // Find the first available port. Asynchronously checks, so first port // determined as available is returned. portscanner.findAPortNotInUse(3000, 3010, '127.0.0.1', function(error, port) { console.log('AVAILABLE PORT AT: ' + port) }) // Find the first port in use or blocked. Asynchronously checks, so first port // to respond is returned. portscanner.findAPortInUse(3000, 3010, '127.0.0.1', function(error, port) { console.log('PORT IN USE AT: ' + port) }) ``` The example directory contains a more detailed example. ## Test There are currently no tests. If you have ideas, please open an issue. ## Future Please create issues or pull requests for port scanning related features you'd like to see included. ## License (MIT) [MIT](LICENSE)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/portscanner/node_modules/async/README.md","tags":[],"body":"# Async.js Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript. Although originally designed for use with [node.js](http://nodejs.org), it can also be used directly in the browser. Async provides around 20 functions that include the usual 'functional' suspects (map, reduce, filter, forEach…) as well as some common patterns for asynchronous control flow (parallel, series, waterfall…). All these functions assume you follow the node.js convention of providing a single callback as the last argument of your async function. ## Quick Examples async.map(['file1','file2','file3'], fs.stat, function(err, results){ // results is now an array of stats for each file }); async.filter(['file1','file2','file3'], path.exists, function(results){ // results now equals an array of the existing files }); async.parallel([ function(){ ... }, function(){ ... } ], callback); async.series([ function(){ ... }, function(){ ... } ]); There are many more functions available so take a look at the docs below for a full list. This module aims to be comprehensive, so if you feel anything is missing please create a GitHub issue for it. ## Download Releases are available for download from [GitHub](http://github.com/caolan/async/downloads). Alternatively, you can install using Node Package Manager (npm): npm install async __Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed __Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped ## In the Browser So far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage: ## Documentation ### Collections * [forEach](#forEach) * [map](#map) * [filter](#filter) * [reject](#reject) * [reduce](#reduce) * [detect](#detect) * [sortBy](#sortBy) * [some](#some) * [every](#every) * [concat](#concat) ### Control Flow * [series](#series) * [parallel](#parallel) * [whilst](#whilst) * [until](#until) * [waterfall](#waterfall) * [queue](#queue) * [auto](#auto) * [iterator](#iterator) * [apply](#apply) * [nextTick](#nextTick) ### Utils * [memoize](#memoize) * [unmemoize](#unmemoize) * [log](#log) * [dir](#dir) * [noConflict](#noConflict) ## Collections ### forEach(arr, iterator, callback) Applies an iterator function to each item in an array, in parallel. The iterator is called with an item from the list and a callback for when it has finished. If the iterator passes an error to this callback, the main callback for the forEach function is immediately called with the error. Note, that since this function applies the iterator to each item in parallel there is no guarantee that the iterator functions will complete in order. __Arguments__ * arr - An array to iterate over. * iterator(item, callback) - A function to apply to each item in the array. The iterator is passed a callback which must be called once it has completed. * callback(err) - A callback which is called after all the iterator functions have finished, or an error has occurred. __Example__ // assuming openFiles is an array of file names and saveFile is a function // to save the modified contents of that file: async.forEach(openFiles, saveFile, function(err){ // if any of the saves produced an error, err would equal that error }); --------------------------------------- ### forEachSeries(arr, iterator, callback) The same as forEach only the iterator is applied to each item in the array in series. The next iterator is only called once the current one has completed processing. This means the iterator functions will complete in order. --------------------------------------- ### forEachLimit(arr, limit, iterator, callback) The same as forEach only the iterator is applied to batches of items in the array, in series. The next batch of iterators is only called once the current one has completed processing. __Arguments__ * arr - An array to iterate over. * limit - How many items should be in each batch. * iterator(item, callback) - A function to apply to each item in the array. The iterator is passed a callback which must be called once it has completed. * callback(err) - A callback which is called after all the iterator functions have finished, or an error has occurred. __Example__ // Assume documents is an array of JSON objects and requestApi is a // function that interacts with a rate-limited REST api. async.forEachLimit(documents, 20, requestApi, function(err){ // if any of the saves produced an error, err would equal that error }); --------------------------------------- ### map(arr, iterator, callback) Produces a new array of values by mapping each value in the given array through the iterator function. The iterator is called with an item from the array and a callback for when it has finished processing. The callback takes 2 arguments, an error and the transformed item from the array. If the iterator passes an error to this callback, the main callback for the map function is immediately called with the error. Note, that since this function applies the iterator to each item in parallel there is no guarantee that the iterator functions will complete in order, however the results array will be in the same order as the original array. __Arguments__ * arr - An array to iterate over. * iterator(item, callback) - A function to apply to each item in the array. The iterator is passed a callback which must be called once it has completed with an error (which can be null) and a transformed item. * callback(err, results) - A callback which is called after all the iterator functions have finished, or an error has occurred. Results is an array of the transformed items from the original array. __Example__ async.map(['file1','file2','file3'], fs.stat, function(err, results){ // results is now an array of stats for each file }); --------------------------------------- ### mapSeries(arr, iterator, callback) The same as map only the iterator is applied to each item in the array in series. The next iterator is only called once the current one has completed processing. The results array will be in the same order as the original. --------------------------------------- ### filter(arr, iterator, callback) __Alias:__ select Returns a new array of all the values which pass an async truth test. _The callback for each iterator call only accepts a single argument of true or false, it does not accept an error argument first!_ This is in-line with the way node libraries work with truth tests like path.exists. This operation is performed in parallel, but the results array will be in the same order as the original. __Arguments__ * arr - An array to iterate over. * iterator(item, callback) - A truth test to apply to each item in the array. The iterator is passed a callback which must be called once it has completed. * callback(results) - A callback which is called after all the iterator functions have finished. __Example__ async.filter(['file1','file2','file3'], path.exists, function(results){ // results now equals an array of the existing files }); --------------------------------------- ### filterSeries(arr, iterator, callback) __alias:__ selectSeries The same as filter only the iterator is applied to each item in the array in series. The next iterator is only called once the current one has completed processing. The results array will be in the same order as the original. --------------------------------------- ### reject(arr, iterator, callback) The opposite of filter. Removes values that pass an async truth test. --------------------------------------- ### rejectSeries(arr, iterator, callback) The same as filter, only the iterator is applied to each item in the array in series. --------------------------------------- ### reduce(arr, memo, iterator, callback) __aliases:__ inject, foldl Reduces a list of values into a single value using an async iterator to return each successive step. Memo is the initial state of the reduction. This function only operates in series. For performance reasons, it may make sense to split a call to this function into a parallel map, then use the normal Array.prototype.reduce on the results. This function is for situations where each step in the reduction needs to be async, if you can get the data before reducing it then its probably a good idea to do so. __Arguments__ * arr - An array to iterate over. * memo - The initial state of the reduction. * iterator(memo, item, callback) - A function applied to each item in the array to produce the next step in the reduction. The iterator is passed a callback which accepts an optional error as its first argument, and the state of the reduction as the second. If an error is passed to the callback, the reduction is stopped and the main callback is immediately called with the error. * callback(err, result) - A callback which is called after all the iterator functions have finished. Result is the reduced value. __Example__ async.reduce([1,2,3], 0, function(memo, item, callback){ // pointless async: process.nextTick(function(){ callback(null, memo + item) }); }, function(err, result){ // result is now equal to the last value of memo, which is 6 }); --------------------------------------- ### reduceRight(arr, memo, iterator, callback) __Alias:__ foldr Same as reduce, only operates on the items in the array in reverse order. --------------------------------------- ### detect(arr, iterator, callback) Returns the first value in a list that passes an async truth test. The iterator is applied in parallel, meaning the first iterator to return true will fire the detect callback with that result. That means the result might not be the first item in the original array (in terms of order) that passes the test. If order within the original array is important then look at detectSeries. __Arguments__ * arr - An array to iterate over. * iterator(item, callback) - A truth test to apply to each item in the array. The iterator is passed a callback which must be called once it has completed. * callback(result) - A callback which is called as soon as any iterator returns true, or after all the iterator functions have finished. Result will be the first item in the array that passes the truth test (iterator) or the value undefined if none passed. __Example__ async.detect(['file1','file2','file3'], path.exists, function(result){ // result now equals the first file in the list that exists }); --------------------------------------- ### detectSeries(arr, iterator, callback) The same as detect, only the iterator is applied to each item in the array in series. This means the result is always the first in the original array (in terms of array order) that passes the truth test. --------------------------------------- ### sortBy(arr, iterator, callback) Sorts a list by the results of running each value through an async iterator. __Arguments__ * arr - An array to iterate over. * iterator(item, callback) - A function to apply to each item in the array. The iterator is passed a callback which must be called once it has completed with an error (which can be null) and a value to use as the sort criteria. * callback(err, results) - A callback which is called after all the iterator functions have finished, or an error has occurred. Results is the items from the original array sorted by the values returned by the iterator calls. __Example__ async.sortBy(['file1','file2','file3'], function(file, callback){ fs.stat(file, function(err, stats){ callback(err, stats.mtime); }); }, function(err, results){ // results is now the original array of files sorted by // modified date }); --------------------------------------- ### some(arr, iterator, callback) __Alias:__ any Returns true if at least one element in the array satisfies an async test. _The callback for each iterator call only accepts a single argument of true or false, it does not accept an error argument first!_ This is in-line with the way node libraries work with truth tests like path.exists. Once any iterator call returns true, the main callback is immediately called. __Arguments__ * arr - An array to iterate over. * iterator(item, callback) - A truth test to apply to each item in the array. The iterator is passed a callback which must be called once it has completed. * callback(result) - A callback which is called as soon as any iterator returns true, or after all the iterator functions have finished. Result will be either true or false depending on the values of the async tests. __Example__ async.some(['file1','file2','file3'], path.exists, function(result){ // if result is true then at least one of the files exists }); --------------------------------------- ### every(arr, iterator, callback) __Alias:__ all Returns true if every element in the array satisfies an async test. _The callback for each iterator call only accepts a single argument of true or false, it does not accept an error argument first!_ This is in-line with the way node libraries work with truth tests like path.exists. __Arguments__ * arr - An array to iterate over. * iterator(item, callback) - A truth test to apply to each item in the array. The iterator is passed a callback which must be called once it has completed. * callback(result) - A callback which is called after all the iterator functions have finished. Result will be either true or false depending on the values of the async tests. __Example__ async.every(['file1','file2','file3'], path.exists, function(result){ // if result is true then every file exists }); --------------------------------------- ### concat(arr, iterator, callback) Applies an iterator to each item in a list, concatenating the results. Returns the concatenated list. The iterators are called in parallel, and the results are concatenated as they return. There is no guarantee that the results array will be returned in the original order of the arguments passed to the iterator function. __Arguments__ * arr - An array to iterate over * iterator(item, callback) - A function to apply to each item in the array. The iterator is passed a callback which must be called once it has completed with an error (which can be null) and an array of results. * callback(err, results) - A callback which is called after all the iterator functions have finished, or an error has occurred. Results is an array containing the concatenated results of the iterator function. __Example__ async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){ // files is now a list of filenames that exist in the 3 directories }); --------------------------------------- ### concatSeries(arr, iterator, callback) Same as async.concat, but executes in series instead of parallel. ## Control Flow ### series(tasks, [callback]) Run an array of functions in series, each one running once the previous function has completed. If any functions in the series pass an error to its callback, no more functions are run and the callback for the series is immediately called with the value of the error. Once the tasks have completed, the results are passed to the final callback as an array. It is also possible to use an object instead of an array. Each property will be run as a function and the results will be passed to the final callback as an object instead of an array. This can be a more readable way of handling results from async.series. __Arguments__ * tasks - An array or object containing functions to run, each function is passed a callback it must call on completion. * callback(err, results) - An optional callback to run once all the functions have completed. This function gets an array of all the arguments passed to the callbacks used in the array. __Example__ async.series([ function(callback){ // do some stuff ... callback(null, 'one'); }, function(callback){ // do some more stuff ... callback(null, 'two'); }, ], // optional callback function(err, results){ // results is now equal to ['one', 'two'] }); // an example using an object instead of an array async.series({ one: function(callback){ setTimeout(function(){ callback(null, 1); }, 200); }, two: function(callback){ setTimeout(function(){ callback(null, 2); }, 100); }, }, function(err, results) { // results is now equal to: {one: 1, two: 2} }); --------------------------------------- ### parallel(tasks, [callback]) Run an array of functions in parallel, without waiting until the previous function has completed. If any of the functions pass an error to its callback, the main callback is immediately called with the value of the error. Once the tasks have completed, the results are passed to the final callback as an array. It is also possible to use an object instead of an array. Each property will be run as a function and the results will be passed to the final callback as an object instead of an array. This can be a more readable way of handling results from async.parallel. __Arguments__ * tasks - An array or object containing functions to run, each function is passed a callback it must call on completion. * callback(err, results) - An optional callback to run once all the functions have completed. This function gets an array of all the arguments passed to the callbacks used in the array. __Example__ async.parallel([ function(callback){ setTimeout(function(){ callback(null, 'one'); }, 200); }, function(callback){ setTimeout(function(){ callback(null, 'two'); }, 100); }, ], // optional callback function(err, results){ // in this case, the results array will equal ['two','one'] // because the functions were run in parallel and the second // function had a shorter timeout before calling the callback. }); // an example using an object instead of an array async.parallel({ one: function(callback){ setTimeout(function(){ callback(null, 1); }, 200); }, two: function(callback){ setTimeout(function(){ callback(null, 2); }, 100); }, }, function(err, results) { // results is now equals to: {one: 1, two: 2} }); --------------------------------------- ### whilst(test, fn, callback) Repeatedly call fn, while test returns true. Calls the callback when stopped, or an error occurs. __Arguments__ * test() - synchronous truth test to perform before each execution of fn. * fn(callback) - A function to call each time the test passes. The function is passed a callback which must be called once it has completed with an optional error as the first argument. * callback(err) - A callback which is called after the test fails and repeated execution of fn has stopped. __Example__ var count = 0; async.whilst( function () { return count ### until(test, fn, callback) Repeatedly call fn, until test returns true. Calls the callback when stopped, or an error occurs. The inverse of async.whilst. --------------------------------------- ### waterfall(tasks, [callback]) Runs an array of functions in series, each passing their results to the next in the array. However, if any of the functions pass an error to the callback, the next function is not executed and the main callback is immediately called with the error. __Arguments__ * tasks - An array of functions to run, each function is passed a callback it must call on completion. * callback(err) - An optional callback to run once all the functions have completed. This function gets passed any error that may have occurred. __Example__ async.waterfall([ function(callback){ callback(null, 'one', 'two'); }, function(arg1, arg2, callback){ callback(null, 'three'); }, function(arg1, callback){ // arg1 now equals 'three' callback(null, 'done'); } ]); --------------------------------------- ### queue(worker, concurrency) Creates a queue object with the specified concurrency. Tasks added to the queue will be processed in parallel (up to the concurrency limit). If all workers are in progress, the task is queued until one is available. Once a worker has completed a task, the task's callback is called. __Arguments__ * worker(task, callback) - An asynchronous function for processing a queued task. * concurrency - An integer for determining how many worker functions should be run in parallel. __Queue objects__ The queue object returned by this function has the following properties and methods: * length() - a function returning the number of items waiting to be processed. * concurrency - an integer for determining how many worker functions should be run in parallel. This property can be changed after a queue is created to alter the concurrency on-the-fly. * push(task, [callback]) - add a new task to the queue, the callback is called once the worker has finished processing the task. * saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued * empty - a callback that is called when the last item from the queue is given to a worker * drain - a callback that is called when the last item from the queue has returned from the worker __Example__ // create a queue object with concurrency 2 var q = async.queue(function (task, callback) { console.log('hello ' + task.name); callback(); }, 2); // assign a callback q.drain = function() { console.log('all items have been processed'); } // add some items to the queue q.push({name: 'foo'}, function (err) { console.log('finished processing foo'); }); q.push({name: 'bar'}, function (err) { console.log('finished processing bar'); }); --------------------------------------- ### auto(tasks, [callback]) Determines the best order for running functions based on their requirements. Each function can optionally depend on other functions being completed first, and each function is run as soon as its requirements are satisfied. If any of the functions pass an error to their callback, that function will not complete (so any other functions depending on it will not run) and the main callback will be called immediately with the error. Functions also receive an object containing the results of functions on which they depend. __Arguments__ * tasks - An object literal containing named functions or an array of requirements, with the function itself the last item in the array. The key used for each function or array is used when specifying requirements. The syntax is easier to understand by looking at the example. * callback(err) - An optional callback which is called when all the tasks have been completed. The callback may receive an error as an argument. __Example__ async.auto({ get_data: function(callback){ // async code to get some data }, make_folder: function(callback){ // async code to create a directory to store a file in // this is run at the same time as getting the data }, write_file: ['get_data', 'make_folder', function(callback){ // once there is some data and the directory exists, // write the data to a file in the directory callback(null, filename); }], email_link: ['write_file', function(callback, results){ // once the file is written let's email a link to it... // results.write_file contains the filename returned by write_file. }] }); This is a fairly trivial example, but to do this using the basic parallel and series functions would look like this: async.parallel([ function(callback){ // async code to get some data }, function(callback){ // async code to create a directory to store a file in // this is run at the same time as getting the data } ], function(results){ async.series([ function(callback){ // once there is some data and the directory exists, // write the data to a file in the directory }, email_link: ['write_file', function(callback){ // once the file is written let's email a link to it... } ]); }); For a complicated series of async tasks using the auto function makes adding new tasks much easier and makes the code more readable. --------------------------------------- ### iterator(tasks) Creates an iterator function which calls the next function in the array, returning a continuation to call the next one after that. Its also possible to 'peek' the next iterator by doing iterator.next(). This function is used internally by the async module but can be useful when you want to manually control the flow of functions in series. __Arguments__ * tasks - An array of functions to run, each function is passed a callback it must call on completion. __Example__ var iterator = async.iterator([ function(){ sys.p('one'); }, function(){ sys.p('two'); }, function(){ sys.p('three'); } ]); node> var iterator2 = iterator(); 'one' node> var iterator3 = iterator2(); 'two' node> iterator3(); 'three' node> var nextfn = iterator2.next(); node> nextfn(); 'three' --------------------------------------- ### apply(function, arguments..) Creates a continuation function with some arguments already applied, a useful shorthand when combined with other control flow functions. Any arguments passed to the returned function are added to the arguments originally passed to apply. __Arguments__ * function - The function you want to eventually apply all arguments to. * arguments... - Any number of arguments to automatically apply when the continuation is called. __Example__ // using apply async.parallel([ async.apply(fs.writeFile, 'testfile1', 'test1'), async.apply(fs.writeFile, 'testfile2', 'test2'), ]); // the same process without using apply async.parallel([ function(callback){ fs.writeFile('testfile1', 'test1', callback); }, function(callback){ fs.writeFile('testfile2', 'test2', callback); }, ]); It's possible to pass any number of additional arguments when calling the continuation: node> var fn = async.apply(sys.puts, 'one'); node> fn('two', 'three'); one two three --------------------------------------- ### nextTick(callback) Calls the callback on a later loop around the event loop. In node.js this just calls process.nextTick, in the browser it falls back to setTimeout(callback, 0), which means other higher priority events may precede the execution of the callback. This is used internally for browser-compatibility purposes. __Arguments__ * callback - The function to call on a later loop around the event loop. __Example__ var call_order = []; async.nextTick(function(){ call_order.push('two'); // call_order now equals ['one','two] }); call_order.push('one') ## Utils ### memoize(fn, [hasher]) Caches the results of an async function. When creating a hash to store function results against, the callback is omitted from the hash and an optional hash function can be used. __Arguments__ * fn - the function you to proxy and cache results from. * hasher - an optional function for generating a custom hash for storing results, it has all the arguments applied to it apart from the callback, and must be synchronous. __Example__ var slow_fn = function (name, callback) { // do something callback(null, result); }; var fn = async.memoize(slow_fn); // fn can now be used as if it were slow_fn fn('some name', function () { // callback }); ### unmemoize(fn) Undoes a memoized function, reverting it to the original, unmemoized form. Comes handy in tests. __Arguments__ * fn - the memoized function ### log(function, arguments) Logs the result of an async function to the console. Only works in node.js or in browsers that support console.log and console.error (such as FF and Chrome). If multiple arguments are returned from the async function, console.log is called on each argument in order. __Arguments__ * function - The function you want to eventually apply all arguments to. * arguments... - Any number of arguments to apply to the function. __Example__ var hello = function(name, callback){ setTimeout(function(){ callback(null, 'hello ' + name); }, 1000); }; node> async.log(hello, 'world'); 'hello world' --------------------------------------- ### dir(function, arguments) Logs the result of an async function to the console using console.dir to display the properties of the resulting object. Only works in node.js or in browsers that support console.dir and console.error (such as FF and Chrome). If multiple arguments are returned from the async function, console.dir is called on each argument in order. __Arguments__ * function - The function you want to eventually apply all arguments to. * arguments... - Any number of arguments to apply to the function. __Example__ var hello = function(name, callback){ setTimeout(function(){ callback(null, {hello: name}); }, 1000); }; node> async.dir(hello, 'world'); {hello: 'world'} --------------------------------------- ### noConflict() Changes the value of async back to its original value, returning a reference to the async object."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/portscanner/node_modules/async/test/test.html","tags":[],"body":"Async.js Test Suite Async.js Test Suite"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/qs/CHANGELOG.md","tags":[],"body":"## [**6.2.0**](https://github.com/ljharb/qs/issues?milestone=36&state=closed) - [New] pass Buffers to the encoder/decoder directly (#161) - [New] add \"encoder\" and \"decoder\" options, for custom param encoding/decoding (#160) - [Fix] fix compacting of nested sparse arrays (#150) ## [**6.1.0**](https://github.com/ljharb/qs/issues?milestone=35&state=closed) - [New] allowDots option for `stringify` (#151) - [Fix] \"sort\" option should work at a depth of 3 or more (#151) - [Fix] Restore `dist` directory; will be removed in v7 (#148) ## [**6.0.2**](https://github.com/ljharb/qs/issues?milestone=33&state=closed) - Revert ES6 requirement and restore support for node down to v0.8. ## [**6.0.1**](https://github.com/ljharb/qs/issues?milestone=32&state=closed) - [**#127**](https://github.com/ljharb/qs/pull/127) Fix engines definition in package.json ## [**6.0.0**](https://github.com/ljharb/qs/issues?milestone=31&state=closed) - [**#124**](https://github.com/ljharb/qs/issues/124) Use ES6 and drop support for node is not a function ## [**2.4.0**](https://github.com/ljharb/qs/issues?milestone=19&state=closed) - [**#70**](https://github.com/ljharb/qs/issues/70) Add arrayFormat option ## [**2.3.3**](https://github.com/ljharb/qs/issues?milestone=18&state=closed) - [**#59**](https://github.com/ljharb/qs/issues/59) make sure array indexes are >= 0, closes #57 - [**#58**](https://github.com/ljharb/qs/issues/58) make qs usable for browser loader ## [**2.3.2**](https://github.com/ljharb/qs/issues?milestone=17&state=closed) - [**#55**](https://github.com/ljharb/qs/issues/55) allow merging a string into an object ## [**2.3.1**](https://github.com/ljharb/qs/issues?milestone=16&state=closed) - [**#52**](https://github.com/ljharb/qs/issues/52) Return \"undefined\" and \"false\" instead of throwing \"TypeError\". ## [**2.3.0**](https://github.com/ljharb/qs/issues?milestone=15&state=closed) - [**#50**](https://github.com/ljharb/qs/issues/50) add option to omit array indices, closes #46 ## [**2.2.5**](https://github.com/ljharb/qs/issues?milestone=14&state=closed) - [**#39**](https://github.com/ljharb/qs/issues/39) Is there an alternative to Buffer.isBuffer? - [**#49**](https://github.com/ljharb/qs/issues/49) refactor utils.merge, fixes #45 - [**#41**](https://github.com/ljharb/qs/issues/41) avoid browserifying Buffer, for #39 ## [**2.2.4**](https://github.com/ljharb/qs/issues?milestone=13&state=closed) - [**#38**](https://github.com/ljharb/qs/issues/38) how to handle object keys beginning with a number ## [**2.2.3**](https://github.com/ljharb/qs/issues?milestone=12&state=closed) - [**#37**](https://github.com/ljharb/qs/issues/37) parser discards first empty value in array - [**#36**](https://github.com/ljharb/qs/issues/36) Update to lab 4.x ## [**2.2.2**](https://github.com/ljharb/qs/issues?milestone=11&state=closed) - [**#33**](https://github.com/ljharb/qs/issues/33) Error when plain object in a value - [**#34**](https://github.com/ljharb/qs/issues/34) use Object.prototype.hasOwnProperty.call instead of obj.hasOwnProperty - [**#24**](https://github.com/ljharb/qs/issues/24) Changelog? Semver? ## [**2.2.1**](https://github.com/ljharb/qs/issues?milestone=10&state=closed) - [**#32**](https://github.com/ljharb/qs/issues/32) account for circular references properly, closes #31 - [**#31**](https://github.com/ljharb/qs/issues/31) qs.parse stackoverflow on circular objects ## [**2.2.0**](https://github.com/ljharb/qs/issues?milestone=9&state=closed) - [**#26**](https://github.com/ljharb/qs/issues/26) Don't use Buffer global if it's not present - [**#30**](https://github.com/ljharb/qs/issues/30) Bug when merging non-object values into arrays - [**#29**](https://github.com/ljharb/qs/issues/29) Don't call Utils.clone at the top of Utils.merge - [**#23**](https://github.com/ljharb/qs/issues/23) Ability to not limit parameters? ## [**2.1.0**](https://github.com/ljharb/qs/issues?milestone=8&state=closed) - [**#22**](https://github.com/ljharb/qs/issues/22) Enable using a RegExp as delimiter ## [**2.0.0**](https://github.com/ljharb/qs/issues?milestone=7&state=closed) - [**#18**](https://github.com/ljharb/qs/issues/18) Why is there arrayLimit? - [**#20**](https://github.com/ljharb/qs/issues/20) Configurable parametersLimit - [**#21**](https://github.com/ljharb/qs/issues/21) make all limits optional, for #18, for #20 ## [**1.2.2**](https://github.com/ljharb/qs/issues?milestone=6&state=closed) - [**#19**](https://github.com/ljharb/qs/issues/19) Don't overwrite null values ## [**1.2.1**](https://github.com/ljharb/qs/issues?milestone=5&state=closed) - [**#16**](https://github.com/ljharb/qs/issues/16) ignore non-string delimiters - [**#15**](https://github.com/ljharb/qs/issues/15) Close code block ## [**1.2.0**](https://github.com/ljharb/qs/issues?milestone=4&state=closed) - [**#12**](https://github.com/ljharb/qs/issues/12) Add optional delim argument - [**#13**](https://github.com/ljharb/qs/issues/13) fix #11: flattened keys in array are now correctly parsed ## [**1.1.0**](https://github.com/ljharb/qs/issues?milestone=3&state=closed) - [**#7**](https://github.com/ljharb/qs/issues/7) Empty values of a POST array disappear after being submitted - [**#9**](https://github.com/ljharb/qs/issues/9) Should not omit equals signs (=) when value is null - [**#6**](https://github.com/ljharb/qs/issues/6) Minor grammar fix in README ## [**1.0.2**](https://github.com/ljharb/qs/issues?milestone=2&state=closed) - [**#5**](https://github.com/ljharb/qs/issues/5) array holes incorrectly copied into object on large index"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/qs/CONTRIBUTING.md","tags":[],"body":"Please view our [hapijs contributing guide](https://github.com/hapijs/hapi/blob/master/CONTRIBUTING.md)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/resp-modifier/README.md","tags":[],"body":"# resp-modifier [![Build Status](https://travis-ci.org/shakyShane/resp-modifier.svg?branch=master)](https://travis-ci.org/shakyShane/resp-modifier) All the good parts from [connect-livereload](https://github.com/intesso/connect-livereload) without the livereload specific bits & with multiple replacements added. ## Contributing In lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Gulp](http://gulpjs.com/). ## Release History _(Nothing yet)_ ## License Copyright (c) 2013 Shane Osbourne Licensed under the MIT license."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/resp-modifier/node_modules/debug/History.md","tags":[],"body":"2.2.0 / 2015-05-09 ================== * package: update \"ms\" to v0.7.1 (#202, @dougwilson) * README: add logging to file example (#193, @DanielOchoa) * README: fixed a typo (#191, @amir-s) * browser: expose `storage` (#190, @stephenmathieson) * Makefile: add a `distclean` target (#189, @stephenmathieson) 2.1.3 / 2015-03-13 ================== * Updated stdout/stderr example (#186) * Updated example/stdout.js to match debug current behaviour * Renamed example/stderr.js to stdout.js * Update Readme.md (#184) * replace high intensity foreground color for bold (#182, #183) 2.1.2 / 2015-03-01 ================== * dist: recompile * update \"ms\" to v0.7.0 * package: update \"browserify\" to v9.0.3 * component: fix \"ms.js\" repo location * changed bower package name * updated documentation about using debug in a browser * fix: security error on safari (#167, #168, @yields) 2.1.1 / 2014-12-29 ================== * browser: use `typeof` to check for `console` existence * browser: check for `console.log` truthiness (fix IE 8/9) * browser: add support for Chrome apps * Readme: added Windows usage remarks * Add `bower.json` to properly support bower install 2.1.0 / 2014-10-15 ================== * node: implement `DEBUG_FD` env variable support * package: update \"browserify\" to v6.1.0 * package: add \"license\" field to package.json (#135, @panuhorsmalahti) 2.0.0 / 2014-09-01 ================== * package: update \"browserify\" to v5.11.0 * node: use stderr rather than stdout for logging (#29, @stephenmathieson) 1.0.4 / 2014-07-15 ================== * dist: recompile * example: remove `console.info()` log usage * example: add \"Content-Type\" UTF-8 header to browser example * browser: place %c marker after the space character * browser: reset the \"content\" color via `color: inherit` * browser: add colors support for Firefox >= v31 * debug: prefer an instance `log()` function over the global one (#119) * Readme: update documentation about styled console logs for FF v31 (#116, @wryk) 1.0.3 / 2014-07-09 ================== * Add support for multiple wildcards in namespaces (#122, @seegno) * browser: fix lint 1.0.2 / 2014-06-10 ================== * browser: update color palette (#113, @gscottolson) * common: make console logging function configurable (#108, @timoxley) * node: fix %o colors on old node <= 0.8.x * Makefile: find node path using shell/which (#109, @timoxley) 1.0.1 / 2014-06-06 ================== * browser: use `removeItem()` to clear localStorage * browser, node: don't set DEBUG if namespaces is undefined (#107, @leedm777) * package: add \"contributors\" section * node: fix comment typo * README: list authors 1.0.0 / 2014-06-04 ================== * make ms diff be global, not be scope * debug: ignore empty strings in enable() * node: make DEBUG_COLORS able to disable coloring * *: export the `colors` array * npmignore: don't publish the `dist` dir * Makefile: refactor to use browserify * package: add \"browserify\" as a dev dependency * Readme: add Web Inspector Colors section * node: reset terminal color for the debug content * node: map \"%o\" to `util.inspect()` * browser: map \"%j\" to `JSON.stringify()` * debug: add custom \"formatters\" * debug: use \"ms\" module for humanizing the diff * Readme: add \"bash\" syntax highlighting * browser: add Firebug color support * browser: add colors for WebKit browsers * node: apply log to `console` * rewrite: abstract common logic for Node & browsers * add .jshintrc file 0.8.1 / 2014-04-14 ================== * package: re-add the \"component\" section 0.8.0 / 2014-03-30 ================== * add `enable()` method for nodejs. Closes #27 * change from stderr to stdout * remove unnecessary index.js file 0.7.4 / 2013-11-13 ================== * remove \"browserify\" key from package.json (fixes something in browserify) 0.7.3 / 2013-10-30 ================== * fix: catch localStorage security error when cookies are blocked (Chrome) * add debug(err) support. Closes #46 * add .browser prop to package.json. Closes #42 0.7.2 / 2013-02-06 ================== * fix package.json * fix: Mobile Safari (private mode) is broken with debug * fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript 0.7.1 / 2013-02-05 ================== * add repository URL to package.json * add DEBUG_COLORED to force colored output * add browserify support * fix component. Closes #24 0.7.0 / 2012-05-04 ================== * Added .component to package.json * Added debug.component.js build 0.6.0 / 2012-03-16 ================== * Added support for \"-\" prefix in DEBUG [Vinay Pulim] * Added `.enabled` flag to the node version [TooTallNate] 0.5.0 / 2012-02-02 ================== * Added: humanize diffs. Closes #8 * Added `debug.disable()` to the CS variant * Removed padding. Closes #10 * Fixed: persist client-side variant again. Closes #9 0.4.0 / 2012-02-01 ================== * Added browser variant support for older browsers [TooTallNate] * Added `debug.enable('project:*')` to browser variant [TooTallNate] * Added padding to diff (moved it to the right) 0.3.0 / 2012-01-26 ================== * Added millisecond diff when isatty, otherwise UTC string 0.2.0 / 2012-01-22 ================== * Added wildcard support 0.1.0 / 2011-12-02 ================== * Added: remove colors unless stderr isatty [TooTallNate] 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/resp-modifier/node_modules/debug/Readme.md","tags":[],"body":"# debug tiny node.js debugging utility modelled after node core's debugging technique. ## Installation ```bash $ npm install debug ``` ## Usage With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you're used to work fine. A unique color is selected per-function for visibility. Example _app.js_: ```js var debug = require('debug')('http') , http = require('http') , name = 'My App'; // fake app debug('booting %s', name); http.createServer(function(req, res){ debug(req.method + ' ' + req.url); res.end('hello\\n'); }).listen(3000, function(){ debug('listening'); }); // fake worker of some kind require('./worker'); ``` Example _worker.js_: ```js var debug = require('debug')('worker'); setInterval(function(){ debug('doing some work'); }, 1000); ``` The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png) ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png) #### Windows note On Windows the environment variable is set using the `set` command. ```cmd set DEBUG=*,-not_this ``` Then, run the program to be debugged as usual. ## Millisecond diff When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls. ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png) When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below: ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png) ## Conventions If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\". ## Wildcards The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`. You can also exclude specific debuggers by prefixing them with a \"-\" character. For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\". ## Browser support Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include: ```js window.myDebug = require(\"debug\"); ``` (\"debug\" is a global object in the browser so we give this object a different name.) When your page is open in the browser, type the following in the console: ```js myDebug.enable(\"worker:*\") ``` Refresh the page. Debug output will continue to be sent to the console until it is disabled by typing `myDebug.disable()` in the console. ```js a = debug('worker:a'); b = debug('worker:b'); setInterval(function(){ a('doing some work'); }, 1000); setInterval(function(){ b('doing some work'); }, 1200); ``` #### Web Inspector Colors Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting option. These are WebKit web inspectors, Firefox ([since version 31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/)) and the Firebug plugin for Firefox (any version). Colored output looks something like: ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png) ### stderr vs stdout You can set an alternative logging method per-namespace by overriding the `log` method on a per-namespace or globally: Example _stdout.js_: ```js var debug = require('debug'); var error = debug('app:error'); // by default stderr is used error('goes to stderr!'); var log = debug('app:log'); // set this namespace to log via console.log log.log = console.log.bind(console); // don't forget to bind to console! log('goes to stdout'); error('still goes to stderr!'); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error('now goes to stdout via console.info'); log('still goes to stdout, but via console.info now'); ``` ### Save debug output to a file You can save all debug statements to a file by piping them. Example: ```bash $ DEBUG_FD=3 node your-app.js 3> whatever.log ``` ## Authors - TJ Holowaychuk - Nathan Rajlich ## License (The MIT License) Copyright (c) 2014 TJ Holowaychuk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/resp-modifier/node_modules/debug/node_modules/ms/History.md","tags":[],"body":"0.7.1 / 2015-04-20 ================== * prevent extraordinary long inputs (@evilpacket) * Fixed broken readme link 0.7.0 / 2014-11-24 ================== * add time abbreviations, updated tests and readme for the new units * fix example in the readme. * add LICENSE file 0.6.2 / 2013-12-05 ================== * Adding repository section to package.json to suppress warning from NPM. 0.6.1 / 2013-05-10 ================== * fix singularization [visionmedia] 0.6.0 / 2013-03-15 ================== * fix minutes 0.5.1 / 2013-02-24 ================== * add component namespace 0.5.0 / 2012-11-09 ================== * add short formatting as default and .long option * add .license property to component.json * add version to component.json 0.4.0 / 2012-10-22 ================== * add rounding to fix crazy decimals 0.3.0 / 2012-09-07 ================== * fix `ms()` [visionmedia] 0.2.0 / 2012-09-03 ================== * add component.json [visionmedia] * add days support [visionmedia] * add hours support [visionmedia] * add minutes support [visionmedia] * add seconds support [visionmedia] * add ms string support [visionmedia] * refactor tests to facilitate ms(number) [visionmedia] 0.1.0 / 2012-03-07 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/resp-modifier/node_modules/debug/node_modules/ms/README.md","tags":[],"body":"# ms.js: miliseconds conversion utility ```js ms('2 days') // 172800000 ms('1d') // 86400000 ms('10h') // 36000000 ms('2.5 hrs') // 9000000 ms('2h') // 7200000 ms('1m') // 60000 ms('5s') // 5000 ms('100') // 100 ``` ```js ms(60000) // \"1m\" ms(2 * 60000) // \"2m\" ms(ms('10 hours')) // \"10h\" ``` ```js ms(60000, { long: true }) // \"1 minute\" ms(2 * 60000, { long: true }) // \"2 minutes\" ms(ms('10 hours'), { long: true }) // \"10 hours\" ``` - Node/Browser compatible. Published as [`ms`](https://www.npmjs.org/package/ms) in [NPM](http://nodejs.org/download). - If a number is supplied to `ms`, a string with a unit is returned. - If a string that contains the number is supplied, it returns it as a number (e.g: it returns `100` for `'100'`). - If you pass a string with a number and a valid unit, the number of equivalent ms is returned. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/resp-modifier/node_modules/minimatch/README.md","tags":[],"body":"# minimatch A minimal matching utility. [![Build Status](https://secure.travis-ci.org/isaacs/minimatch.png)](http://travis-ci.org/isaacs/minimatch) This is the matching library used internally by npm. It works by converting glob expressions into JavaScript `RegExp` objects. ## Usage ```javascript var minimatch = require(\"minimatch\") minimatch(\"bar.foo\", \"*.foo\") // true! minimatch(\"bar.foo\", \"*.bar\") // false! minimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy! ``` ## Features Supports these glob features: * Brace Expansion * Extended glob matching * \"Globstar\" `**` matching See: * `man sh` * `man bash` * `man 3 fnmatch` * `man 5 gitignore` ## Minimatch Class Create a minimatch object by instanting the `minimatch.Minimatch` class. ```javascript var Minimatch = require(\"minimatch\").Minimatch var mm = new Minimatch(pattern, options) ``` ### Properties * `pattern` The original pattern the minimatch object represents. * `options` The options supplied to the constructor. * `set` A 2-dimensional array of regexp or string expressions. Each row in the array corresponds to a brace-expanded pattern. Each item in the row corresponds to a single path-part. For example, the pattern `{a,b/c}/d` would expand to a set of patterns like: [ [ a, d ] , [ b, c, d ] ] If a portion of the pattern doesn't have any \"magic\" in it (that is, it's something like `\"foo\"` rather than `fo*o?`), then it will be left as a string rather than converted to a regular expression. * `regexp` Created by the `makeRe` method. A single regular expression expressing the entire pattern. This is useful in cases where you wish to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled. * `negate` True if the pattern is negated. * `comment` True if the pattern is a comment. * `empty` True if the pattern is `\"\"`. ### Methods * `makeRe` Generate the `regexp` member if necessary, and return it. Will return `false` if the pattern is invalid. * `match(fname)` Return true if the filename matches the pattern, or false otherwise. * `matchOne(fileArray, patternArray, partial)` Take a `/`-split filename, and match it against a single row in the `regExpSet`. This method is mainly for internal use, but is exposed so that it can be used by a glob-walker that needs to avoid excessive filesystem calls. All other methods are internal, and will be called as necessary. ## Functions The top-level exported function has a `cache` property, which is an LRU cache set to store 100 items. So, calling these methods repeatedly with the same pattern and options will use the same Minimatch object, saving the cost of parsing it multiple times. ### minimatch(path, pattern, options) Main export. Tests a path against the pattern using the options. ```javascript var isJS = minimatch(file, \"*.js\", { matchBase: true }) ``` ### minimatch.filter(pattern, options) Returns a function that tests its supplied argument, suitable for use with `Array.filter`. Example: ```javascript var javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true})) ``` ### minimatch.match(list, pattern, options) Match against the list of files, in the style of fnmatch or glob. If nothing is matched, and options.nonull is set, then return a list containing the pattern itself. ```javascript var javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true})) ``` ### minimatch.makeRe(pattern, options) Make a regular expression object from the pattern. ## Options All options are `false` by default. ### debug Dump a ton of stuff to stderr. ### nobrace Do not expand `{a,b}` and `{1..3}` brace sets. ### noglobstar Disable `**` matching against multiple folder names. ### dot Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot. Note that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot` is set. ### noext Disable \"extglob\" style patterns like `+(a|b)`. ### nocase Perform a case-insensitive match. ### nonull When a match is not found by `minimatch.match`, return a list containing the pattern itself if this option is set. When not set, an empty list is returned if there are no matches. ### matchBase If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, `a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`. ### nocomment Suppress the behavior of treating `#` at the start of a pattern as a comment. ### nonegate Suppress the behavior of treating a leading `!` character as negation. ### flipNegate Returns from negate expressions the same as if they were not negated. (Ie, true on a hit, false on a miss.) ## Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between minimatch and other implementations, and are intentional. If the pattern starts with a `!` character, then it is negated. Set the `nonegate` flag to suppress this behavior, and treat leading `!` characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like `!(a|B)`. Multiple `!` characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with `#`, then it is treated as a comment, and will not match anything. Use `\\#` to match a literal `#` at the start of a line, or set the `nocomment` flag to suppress this behavior. The double-star character `**` is supported by default, unless the `noglobstar` flag is set. This is supported in the manner of bsdglob and bash 4.1, where `**` only has special significance if it is the only thing in a path part. That is, `a/**/b` will match `a/x/y/b`, but `a/**b` will not. If an escaped pattern has no matches, and the `nonull` flag is set, then minimatch.match returns the pattern as-provided, rather than interpreting the character escapes. For example, `minimatch.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than `\"*a?\"`. This is akin to setting the `nullglob` option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like `+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded **first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are checked for validity. Since those two are valid, matching proceeds."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/resp-modifier/node_modules/minimatch/node_modules/brace-expansion/README.md","tags":[],"body":"# brace-expansion [Brace expansion](https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html), as known from sh/bash, in JavaScript. [![build status](https://secure.travis-ci.org/juliangruber/brace-expansion.svg)](http://travis-ci.org/juliangruber/brace-expansion) [![downloads](https://img.shields.io/npm/dm/brace-expansion.svg)](https://www.npmjs.org/package/brace-expansion) [![testling badge](https://ci.testling.com/juliangruber/brace-expansion.png)](https://ci.testling.com/juliangruber/brace-expansion) ## Example ```js var expand = require('brace-expansion'); expand('file-{a,b,c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('-v{,,}') // => ['-v', '-v', '-v'] expand('file{0..2}.jpg') // => ['file0.jpg', 'file1.jpg', 'file2.jpg'] expand('file-{a..c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('file{2..0}.jpg') // => ['file2.jpg', 'file1.jpg', 'file0.jpg'] expand('file{0..4..2}.jpg') // => ['file0.jpg', 'file2.jpg', 'file4.jpg'] expand('file-{a..e..2}.jpg') // => ['file-a.jpg', 'file-c.jpg', 'file-e.jpg'] expand('file{00..10..5}.jpg') // => ['file00.jpg', 'file05.jpg', 'file10.jpg'] expand('{{A..C},{a..c}}') // => ['A', 'B', 'C', 'a', 'b', 'c'] expand('ppp{,config,oe{,conf}}') // => ['ppp', 'pppconfig', 'pppoe', 'pppoeconf'] ``` ## API ```js var expand = require('brace-expansion'); ``` ### var expanded = expand(str) Return an array of all possible and valid expansions of `str`. If none are found, `[str]` is returned. Valid expansions are: ```js /^(.*,)+(.+)?$/ // {a,b,...} ``` A comma seperated list of options, like `{a,b}` or `{a,{b,c}}` or `{,a,}`. ```js /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} ``` A numeric sequence from `x` to `y` inclusive, with optional increment. If `x` or `y` start with a leading `0`, all the numbers will be padded to have equal length. Negative numbers and backwards iteration work too. ```js /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} ``` An alphabetic sequence from `x` to `y` inclusive, with optional increment. `x` and `y` must be exactly one character, and if given, `incr` must be a number. For compatibility reasons, the string `${` is not eligible for brace expansion. ## Installation With [npm](https://npmjs.org) do: ```bash npm install brace-expansion ``` ## Contributors - [Julian Gruber](https://github.com/juliangruber) - [Isaac Z. Schlueter](https://github.com/isaacs) ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/resp-modifier/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/LICENSE.md","tags":[],"body":"(MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/resp-modifier/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/README.md","tags":[],"body":"# balanced-match Match balanced string pairs, like `{` and `}` or `` and ``. Supports regular expressions as well! [![build status](https://secure.travis-ci.org/juliangruber/balanced-match.svg)](http://travis-ci.org/juliangruber/balanced-match) [![downloads](https://img.shields.io/npm/dm/balanced-match.svg)](https://www.npmjs.org/package/balanced-match) [![testling badge](https://ci.testling.com/juliangruber/balanced-match.png)](https://ci.testling.com/juliangruber/balanced-match) ## Example Get the first matching pair of braces: ```js var balanced = require('balanced-match'); console.log(balanced('{', '}', 'pre{in{nested}}post')); console.log(balanced('{', '}', 'pre{first}between{second}post')); console.log(balanced(/\\s+\\{\\s+/, /\\s+\\}\\s+/, 'pre { in{nest} } post')); ``` The matches are: ```bash $ node example.js { start: 3, end: 14, pre: 'pre', body: 'in{nested}', post: 'post' } { start: 3, end: 9, pre: 'pre', body: 'first', post: 'between{second}post' } { start: 3, end: 17, pre: 'pre', body: 'in{nest}', post: 'post' } ``` ## API ### var m = balanced(a, b, str) For the first non-nested matching pair of `a` and `b` in `str`, return an object with those keys: * **start** the index of the first match of `a` * **end** the index of the matching `b` * **pre** the preamble, `a` and `b` not included * **body** the match, `a` and `b` not included * **post** the postscript, `a` and `b` not included If there's no match, `undefined` will be returned. If the `str` contains more `a` than `b` / there are unmatched pairs, the first match that was closed will be used. For example, `{{a}` will match `['{', 'a', '']`. ### var r = balanced.range(a, b, str) For the first non-nested matching pair of `a` and `b` in `str`, return an array with indexes: `[ , ]`. If there's no match, `undefined` will be returned. If the `str` contains more `a` than `b` / there are unmatched pairs, the first match that was closed will be used. For example, `{{a}` will match `[ 1, 3 ]`. ## Installation With [npm](https://npmjs.org) do: ```bash npm install balanced-match ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/resp-modifier/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/README.markdown","tags":[],"body":"concat-map ========== Concatenative mapdashery. [![browser support](http://ci.testling.com/substack/node-concat-map.png)](http://ci.testling.com/substack/node-concat-map) [![build status](https://secure.travis-ci.org/substack/node-concat-map.png)](http://travis-ci.org/substack/node-concat-map) example ======= ``` js var concatMap = require('concat-map'); var xs = [ 1, 2, 3, 4, 5, 6 ]; var ys = concatMap(xs, function (x) { return x % 2 ? [ x - 0.1, x, x + 0.1 ] : []; }); console.dir(ys); ``` *** ``` [ 0.9, 1, 1.1, 2.9, 3, 3.1, 4.9, 5, 5.1 ] ``` methods ======= ``` js var concatMap = require('concat-map') ``` concatMap(xs, fn) ----------------- Return an array of concatenated elements by calling `fn(x, i)` for each element `x` and each index `i` in the array `xs`. When `fn(x, i)` returns an array, its result will be concatenated with the result array. If `fn(x, i)` returns anything else, that value will be pushed onto the end of the result array. install ======= With [npm](http://npmjs.org) do: ``` npm install concat-map ``` license ======= MIT notes ===== This module was written while sitting high above the ground in a tree."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/rx/code-of-conduct.md","tags":[],"body":"# Code of Conduct # [_Adapted from the Rust Code of Conduct_](https://github.com/rust-lang/rust/wiki/Note-development-policy#conduct) We are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, disability, ethnicity, religion, or similar personal characteristic. - On any communication medium, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all. - Please be kind and courteous. There's no need to be mean or rude. - Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer. - Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works. - We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We interpret the term \"harassment\" as including the definition in the [Citizen Code of Conduct](http://citizencodeofconduct.org/); if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don't tolerate behavior that excludes people in socially marginalized groups. - Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one the RxJS team immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back. - Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/rx/contributing.md","tags":[],"body":"# Contributing to RxJS # Want to contribute to the Reactive Extensions for JavaScript (RxJS)? There are many ways of helping whether contributing code, documentation, examples, podcasts, videos and presentations. # Get Involved! In [the issue tracker](https://github.com/Reactive-Extensions/RxJS/issues), bugs can only be assigned to people who have commit access. Also, we aspire to make as many bugs as possible \"owned\" by assigning them to a core Rx contributor. Therefore, just because a bug is assigned doesn't mean it's being actively worked on. We (the core contributors) are all busy, and welcome help from the community. If you see a bug you'd like to work on that's assigned but appears to be dormant, communicate with the bug's owner with an @-reply in a comment on the issue page. If you see a bug you'd like to work on that's unassigned, it's fair game: comment to say you'd like to work on it so that we know it's getting attention. # Pull Requests To make a pull request, you will need a GitHub account; if you're unclear on this process, see GitHub's documentation on [forking](https://help.github.com/articles/fork-a-repo/) and [pull requests](https://help.github.com/articles/using-pull-requests). Pull requests should be targeted at RxJS's master branch. Before pushing to your Github repo and issuing the pull request, please do two things: 1. Rebase your local changes against the master branch. Resolve any conflicts that arise. 2. Run the full RxJS test suite by running `grunt` in the root of the repository. Pull requests will be treated as \"review requests\", and we will give feedback we expect to see corrected on style and substance before pulling. Changes contributed via pull request should focus on a single issue at a time, like any other. We will not look kindly on pull-requests that try to \"sneak\" unrelated changes in. Note for bug fixes, regression tests should be included, denoted by Issue Number so that we have full traceability. # What Are We Looking For? For documentation, we are looking for the following: - API Documentation that is missing or out of date - \"How Do I?\" examples - Comparison to other libraries - Comparison to Promises - Introduction material - Tutorials For coding, we have strict standards that must be adhere to when working on RxJS. In order for us to accept pull requests, they must abide by the following: - [Coding Standard](#coding-standard) - [Tests](#tests) - [Documentation](#documentation) ## Coding Standard For RxJS, we follow the [Google JavaScript Style Guide](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml) and adhere to it strictly in areas such as documentation using JSDoc. The only exception to extending native prototypes is to polyfill behavior which may not exist in all browsers yet, for example, many of the [Array#extras](http://blogs.msdn.com/b/ie/archive/2010/12/13/ecmascript-5-part-2-array-extras.aspx) are implemented in compatibility builds. We also strictly follow [our design guidelines](https://github.com/Reactive-Extensions/RxJS/tree/master/doc/designguidelines) as well. ### Supporting Multiple Platforms RxJS runs on a number of platforms and supports many styles of programming. RxJS supports [Universal Module Definition (UMD)](https://github.com/umdjs/umd) which allows the library to work in a number of environments such as [Asynchronous Module Definition (AMD)](https://github.com/amdjs/amdjs-api/wiki/AMD), [CommonJS](http://wiki.commonjs.org/wiki/CommonJS), [Node.js](http://nodejs.org), [RingoJS](http://ringojs.org/), [Narwhal](https://github.com/280north/narwhal), the browser and other environments such as [Windows Script Host (WSH)](http://msdn.microsoft.com/en-us/library/9bbdkx3k.aspx) and embedded devices such as [Tessel](http://tessel.io). RxJS is committed to using the latest JavaScript standards as they start to arrive, for example, supporting generators, Maps, Sets, and Observable versions of new Array methods. We also are committed to supporting legacy code as well through compatibility builds, even supporting browsers back to IE6, Firefox 3, and older versions of Node.js. Should behavior not exist in those platforms, that behavior must be polyfilled, and made available in `*.compat.js` files only. For example, we have `rx.lite.js` which supports modern browsers greater than or equal to IE9, and `rx.lite.compat.js` for older browsers before IE9 and modern Firefox builds. In special cases such as event handling is different, we must provide a mainstream version of the file as well as a compat file, the latter which is included in the compat file. ### Implementing Custom Operators We welcome custom operators to RxJS if they make sense in the core RxJS, as opposed to belonging in user land. There are a number of rules that must be adhered to when implementing a custom operator including: - Prefer composition over implementing a totally new operator from scratch - If the operator introduces any notion of concurrency, then a scheduler must introduced. Usage of concurrency primitives such as `setTimeout`, `setInterval`, etc are forbidden. This is to ensure easy testability. - The scheduler must be optional with the appropriate default picked - `Rx.Scheduler.immediate` for any immediate blocking operations - `Rx.Scheduler.currentThread` for any immediate blocking operators that require re-entrant behavior such as recursive scheduling. - `Rx.Scheduler.timeout` for any operator that has a notion of time To make this concrete, let's implement a custom operator such as an implementation of `_.reject` from [Underscore.js](http://underscorejs.org/) / [Lo-Dash](http://lodash.com/). ```js /** * The opposite of _.filter this method returns the elements of a collection that the callback does **not** return truthy for. * @param {Function} [callback] The function called per iteration. * @param {Any} [thisArg] The this binding of callback. * @returns {Observable} An Observable sequence which contains items that the callback does not return truthy for. */ Rx.Observable.prototype.reject = function (callback, thisArg) { callback || (callback = Rx.helpers.identity); var source = this; return new Rx.AnonymousObservable(function (observer) { var i = 0; return source.subscribe( function (x) { var noYield = true; try { noYield = callback.call(thisArg, x, i++, source); } catch (e) { observer.onError(e); return; } if (!noYield) { observer.onNext(x); } }, observer.onError.bind(observer), observer.onCompleted.bind(observer) ); }); }; ``` Of course, we could have implemented this using composition as well, such as using `Rx.Observable.prototype.filter`. ```js /** * The opposite of _.filter this method returns the elements of a collection that the callback does **not** return truthy for. * @param {Function} [callback] The function called per iteration. * @param {Any} [thisArg] The this binding of callback. * @returns {Observable} An Observable sequence which contains items that the callback does not return truthy for. */ Rx.Observable.prototype.reject = function (callback, thisArg) { callback || (callback = Rx.helpers.identity); return this.filter(function (x, i, o) { return !callback.call(thisArg, x, i o); }); }; ``` To show an operator that introduces a level of concurrency, let's implement a custom operator such as an implementation of `_.pairs` from [Underscore.js](http://underscorejs.org/) / [Lo-Dash](http://lodash.com/). Note that since this requires recursion to implement properly, we'll use the `Rx.Scheduler.currentThread` scheduler. ```js var keysFunction = Object.keys || someKeysPolyfill; /** * Creates an Observable with an of an object’s key-value pairs. * @param {Object} obj The object to inspect. * @returns {Observable} An Observable with an of an object’s key-value pairs. */ Rx.Observable.pairs = function (obj, scheduler) { scheduler || (scheduler = Rx.Scheduler.currentThread); return new Rx.AnonymousObservable(function (observer) { var keys = keysFunction(object), i = 0, len = keys.length; return scheduler.scheduleRecursive(function (self) { if (i < len) { var key = keys[i++], value = obj[key]; observer.onNext([key, value]); self(); } else { observer.onCompleted(); } }); }); }; ``` Note that all operators must have the documentation and must be split out into its own file. This allows us to be able to put it in different files, or make it available in custom builds. ## Tests When a new operator is written for RxJS, in order to accepted, must be accompanied by tests. RxJS currently uses [QUnit](http://qunitjs.com/) as a straight forward way to test our code. These tests are automatically executed by our [Grunt](http://gruntjs.com/) setup to concatenate files, minimize, create source maps, and finally run all the tests in the [tests folder](https://github.com/Reactive-Extensions/RxJS/tree/master/tests). Each file that we produce, for example, `rx.js` has an accompanying test file such as `rx.html`, which includes tests for all operators included in that file. Each operator under test must be in its own file to cover the following cases: - Never - Empty - Single/Multiple Values - Error in the sequence - Never ending sequences - Early disposal in sequences If the operator has a callback, then it must cover the following cases: - Success with all values in the callback - Success with the context, if any allowed in the operator signature - If an error is thrown To get a good feeling on what kind of rigor is required for testing, check out the following examples: - [`concatMap`](https://github.com/Reactive-Extensions/RxJS/blob/master/tests/observable/concatmap.js) - [`from`](https://github.com/Reactive-Extensions/RxJS/blob/master/tests/observable/from.js) ## Documentation Documentation is also a must, as all external operators and types must be documented and put in the [API Folder](https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api). Each operator on an Observable must have its own file in the [Operators Folder](https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators). For operators, they must be linked from the [`Observable`](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md) API document. In addition, each operator must be listed in which file it belongs in the [Libraries Folder](https://github.com/Reactive-Extensions/RxJS/tree/master/doc/libraries). The standard format of operators must be such as the [`of`](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/of.md) operator which includes: - File Location - Method signature - Method description - List of Arguments - Return type (if there is one) - An example - File Distribution(s) - NuGet Distribution - NPM Distribution - Unit Tests"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/rx/readme.md","tags":[],"body":"[![Build Status](https://travis-ci.org/Reactive-Extensions/RxJS.svg)](https://travis-ci.org/Reactive-Extensions/RxJS) [![GitHub version](https://img.shields.io/github/tag/reactive-extensions/rxjs.svg)](https://github.com/Reactive-Extensions/RxJS) [![NPM version](https://img.shields.io/npm/v/rx.svg)](https://www.npmjs.com/package/rx) [![Downloads](https://img.shields.io/npm/dm/rx.svg)](https://www.npmjs.com/package/rx) [![Bower](https://img.shields.io/bower/v/rxjs.svg)](http://bower.io/search/?q=rxjs) [![NuGet](https://img.shields.io/nuget/v/RxJS-All.svg)](http://www.nuget.org/packages/RxJS-All/) [![Join the chat at https://gitter.im/Reactive-Extensions/RxJS](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Reactive-Extensions/RxJS?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) **[The Need to go Reactive](#the-need-to-go-reactive)** | **[About the Reactive Extensions](#about-the-reactive-extensions)** | **[Batteries Included](#batteries-included)** | **[Why RxJS?](#why-rxjs)** | **[Dive In!](#dive-in)** | **[Resources](#resources)** | **[Getting Started](#getting-started)** | **[What about my libraries?](#what-about-my-libraries)** | **[Compatibility](#compatibility)** | **[Contributing](#contributing)** | **[License](#license)** # The Reactive Extensions for JavaScript (RxJS) 4.0... # *...is a set of libraries to compose asynchronous and event-based programs using observable collections and [Array#extras](http://blogs.msdn.com/b/ie/archive/2010/12/13/ecmascript-5-part-2-array-extras.aspx) style composition in JavaScript* The project is actively developed by [Microsoft](https://microsoft.com/), in collaboration with a community of open source developers. ## The Need to go Reactive ## Applications, especially on the web have changed over the years from being a simple static page, to DHTML with animations, to the Ajax revolution. Each time, we're adding more complexity, more data, and asynchronous behavior to our applications. How do we manage it all? How do we scale it? By moving towards \"Reactive Architectures\" which are event-driven, resilient and responsive. With the Reactive Extensions, you have all the tools you need to help build these systems. ## About the Reactive Extensions ## The Reactive Extensions for JavaScript (RxJS) is a set of libraries for composing asynchronous and event-based programs using observable sequences and fluent query operators that many of you already know by [Array#extras](http://blogs.msdn.com/b/ie/archive/2010/12/13/ecmascript-5-part-2-array-extras.aspx) in JavaScript. Using RxJS, developers represent asynchronous data streams with Observables, query asynchronous data streams using our many operators, and parameterize the concurrency in the asynchronous data streams using Schedulers. Simply put, RxJS = Observables + Operators + Schedulers. Whether you are authoring a web-based application in JavaScript or a server-side application in Node.js, you have to deal with asynchronous and event-based programming. Although some patterns are emerging such as the Promise pattern, handling exceptions, cancellation, and synchronization is difficult and error-prone. Using RxJS, you can represent multiple asynchronous data streams (that come from diverse sources, e.g., stock quote, tweets, computer events, web service requests, etc.), and subscribe to the event stream using the Observer object. The Observable notifies the subscribed Observer instance whenever an event occurs. Because observable sequences are data streams, you can query them using standard query operators implemented by the Observable type. Thus you can filter, project, aggregate, compose and perform time-based operations on multiple events easily by using these operators. In addition, there are a number of other reactive stream specific operators that allow powerful queries to be written. Cancellation, exceptions, and synchronization are also handled gracefully by using the methods on the Observable object. But the best news of all is that you already know how to program like this. Take for example the following JavaScript code, where we get some stock data and then manipulate and iterate the results. ```js /* Get stock data somehow */ const source = getAsyncStockData(); const subscription = source .filter(quote => quote.price > 30) .map(quote => quote.price) .forEach(price => console.log(`Prices higher than $30: ${price}`); ``` Now what if this data were to come as some sort of event, for example a stream, such as a WebSocket? Then we could pretty much write the same query to iterate our data, with very little change. ```js /* Get stock data somehow */ const source = getAsyncStockData(); const subscription = source .filter(quote => quote.price > 30) .map(quote => quote.price) .subscribe( price => console.log(`Prices higher than $30: ${price}`), err => console.log(`Something went wrong: ${err.message}`); ); /* When we're done */ subscription.dispose(); ``` The only difference is that we can handle the errors inline with our subscription. And when we're no longer interested in receiving the data as it comes streaming in, we call `dispose` on our subscription. Note the use of `subscribe` instead of `forEach`. We could also use `forEach` which is an alias for `subscribe` but we highly suggest you use `subscribe`. ## Batteries Included ## Sure, there are a lot of libraries to get started with RxJS. Confused on where to get started? Start out with the complete set of operators with [`rx.all.js`](doc/libraries/main/rx.complete.md), then you can reduce it to the number of operators that you really need, and perhaps stick with something as small as [`rx.lite.js`](doc/libraries/lite/rx.lite.md). If you're an implementor of RxJS, then you can start out with [`rx.core.js`](doc/libraries/core/rx.core.md). This set of libraries include: ### The complete library: - [`rx.all.js`](doc/libraries/main/rx.complete.md) ### Main Libraries: - [`rx.js`](doc/libraries/main/rx.md) - [`rx.aggregates.js`](doc/libraries/main/rx.aggregates.md) - [`rx.async.js`](doc/libraries/main/rx.async.md) - [`rx.binding.js`](doc/libraries/main/rx.binding.md) - [`rx.coincidence.js`](doc/libraries/main/rx.coincidence.md) - [`rx.experimental.js`](doc/libraries/main/rx.experimental.md) - [`rx.joinpatterns.js`](doc/libraries/main/rx.joinpatterns.md) - [`rx.testing.js`](doc/libraries/main/rx.testing.md) - [`rx.time.js`](doc/libraries/main/rx.time.md) - [`rx.virtualtime.js`](doc/libraries/main/rx.virtualtime.md) ### Lite Libraries: - [`rx.lite.js`](doc/libraries/lite/rx.lite.md) - [`rx.lite.extras.js`](doc/libraries/lite/rx.lite.extras.md) - [`rx.lite.aggregates.js`](doc/libraries/lite/rx.lite.aggregates.md) - [`rx.lite.async.js`](doc/libraries/lite/rx.lite.async.md) - [`rx.lite.coincidence.js`](doc/libraries/lite/rx.lite.coincidence.md) - [`rx.lite.experimental.js`](doc/libraries/lite/rx.lite.experimental.md) - [`rx.lite.joinpatterns.js`](doc/libraries/lite/rx.lite.joinpatterns.md) - [`rx.lite.testing.js`](doc/libraries/lite/rx.lite.testing.md) - [`rx.lite.time.js`](doc/libraries/lite/rx.lite.time.md) - [`rx.lite.virtualtime.js`](doc/libraries/lite/rx.lite.virtualtime.md) ### Core Libraries: - [`rx.core.js`](doc/libraries/core/rx.core.md) - [`rx.core.binding.js`](doc/libraries/core/rx.core.binding.md) - [`rx.core.testing.js`](doc/libraries/core/rx.core.testing.md) ## Why RxJS? ## One question you may ask yourself is why RxJS? What about Promises? Promises are good for solving asynchronous operations such as querying a service with an XMLHttpRequest, where the expected behavior is one value and then completion. Reactive Extensions for JavaScript unify both the world of Promises, callbacks as well as evented data such as DOM Input, Web Workers, and Web Sockets. Unifying these concepts enables rich composition. To give you an idea about rich composition, we can create an autocompletion service which takes user input from a text input and then throttles queries a service (to avoid flooding the service with calls for every key stroke). First, we'll reference the JavaScript files, including jQuery, although RxJS has no dependencies on jQuery... ```html ``` Next, we'll get the user input from an input, listening to the keyup event by using the `Rx.Observable.fromEvent` method. This will either use the event binding from [jQuery](http://jquery.com), [Zepto](http://zeptojs.com/), [AngularJS](https://angularjs.org/), [Backbone.js](http://backbonejs.org/) and [Ember.js](http://emberjs.com/) if available, and if not, falls back to the native event binding. This gives you consistent ways of thinking of events depending on your framework, so there are no surprises. ```js const $input = $('#input'); const $results = $('#results'); /* Only get the value from each key up */ var keyups = Rx.Observable.fromEvent($input, 'keyup') .pluck('target', 'value') .filter(text => text.length > 2 ); /* Now debounce the input for 500ms */ var debounced = keyups .debounce(500 /* ms */); /* Now get only distinct values, so we eliminate the arrows and other control characters */ var distinct = debounced .distinctUntilChanged(); ``` Now, let's query Wikipedia! In RxJS, we can instantly bind to any [Promises A+](https://github.com/promises-aplus/promises-spec) implementation through the `Rx.Observable.fromPromise` method. Or, directly return it and RxJS will wrap it for you. ```js function searchWikipedia (term) { return $.ajax({ url: 'https://en.wikipedia.org/w/api.php', dataType: 'jsonp', data: { action: 'opensearch', format: 'json', search: term } }).promise(); } ``` Once that is created, we can tie together the distinct throttled input and query the service. In this case, we'll call `flatMapLatest` to get the value and ensure we're not introducing any out of order sequence calls. ```js var suggestions = distinct .flatMapLatest(searchWikipedia); ``` Finally, we call the `subscribe` method on our observable sequence to start pulling data. ```js suggestions.subscribe( data => { $results .empty() .append($.map(data[1], value => $('').text(value))) }, error=> { $results .empty() .append($('')) .text('Error:' + error); }); ``` And there you have it! ## Dive In! ## Please check out: - [Our Code of Conduct](https://github.com/Reactive-Extensions/RxJS/tree/master/code-of-conduct.md) - [The full documentation](https://github.com/Reactive-Extensions/RxJS/tree/master/doc) - [Our many great examples](https://github.com/Reactive-Extensions/RxJS/tree/master/examples) - [Our design guidelines](https://github.com/Reactive-Extensions/RxJS/tree/master/doc/designguidelines) - [Our contribution guidelines](https://github.com/Reactive-Extensions/RxJS/tree/master/contributing.md) - [Our complete Unit Tests](https://github.com/Reactive-Extensions/RxJS/tree/master/tests) - [Our recipes](https://github.com/Reactive-Extensions/RxJS/wiki/Recipes) ## Resources - Contact us - [Twitter @ReactiveX](https://twitter.com/ReactiveX) - [Gitter.im](https://gitter.im/Reactive-Extensions/RxJS) - [StackOverflow rxjs](http://stackoverflow.com/questions/tagged/rxjs) - Tutorials - [The introduction to Reactive Programming you've been missing](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754) - [2 minute introduction to Rx](https://medium.com/@andrestaltz/2-minute-introduction-to-rx-24c8ca793877) - [Learn RxJS - @jhusain](https://github.com/jhusain/learnrx) - [RxJS Koans](https://github.com/Reactive-Extensions/RxJSKoans) - [RxJS Workshop from BuildStuff 2014](https://github.com/Reactive-Extensions/BuildStuffWorkshop) - [Rx Workshop](http://rxworkshop.codeplex.com/) - [Reactive Programming and MVC](http://aaronstacy.com/writings/reactive-programming-and-mvc/) - [RxJS lessons - egghead.io](https://egghead.io/technologies/rx) - [RxJS Training - @andrestaltz](https://github.com/staltz/rxjs-training) - Reference Material - [Rx Marbles](http://rxmarbles.com/) - [RxJS GitBook](http://xgrommx.github.io/rx-book//) - [Intro to Rx](http://introtorx.com/) - [101 Rx Samples Wiki](http://rxwiki.wikidot.com/101samples) - [RxJS Design Guidelines](https://github.com/Reactive-Extensions/RxJS/tree/master/doc/designguidelines) - [Visualizing Reactive Streams](http://jaredforsyth.com/2015/03/06/visualizing-reactive-streams-hot-and-cold/) - [Your Mouse is a Database](http://queue.acm.org/detail.cfm?id=2169076) - Essential tools - [RxVision](http://jaredforsyth.com/rxvision/) - [Percussion](https://github.com/grisendo/Percussion) - Books - [RxJS](http://xgrommx.github.io/rx-book/) - [Intro to Rx](http://www.amazon.com/Introduction-to-Rx-ebook/dp/B008GM3YPM/) - [Programming Reactive Extensions and LINQ](http://www.amazon.com/Programming-Reactive-Extensions-Jesse-Liberty/dp/1430237473/) - [Reactive Programming with RxJS](https://pragprog.com/book/smreactjs/reactive-programming-with-rxjs) - [Community Examples](examples/community.md) - [Presentations](examples/presentations.md) - [Videos and Podcasts](examples/videos.md) ## Getting Started There are a number of ways to get started with RxJS. The files are available on [cdnjs](http://cdnjs.com/libraries/rxjs/) and [jsDelivr](http://www.jsdelivr.com/#!rxjs). ### Download the Source ```bash git clone https://github.com/Reactive-Extensions/rxjs.git cd ./rxjs ``` ### Installing with [NPM](https://www.npmjs.com/) ```bash` $ npm install rx $ npm install -g rx ``` ### Using with Node.js and Ringo.js ```js var Rx = require('rx'); ``` ### Installing with [Bower](http://bower.io/) ```bash $ bower install rxjs ``` ### Installing with [Jam](http://jamjs.org/) ```bash $ jam install rx ``` ### Installing All of RxJS via [NuGet](http://www.nuget.org/) ```bash $ Install-Package RxJS-All ``` ### Install individual packages via [NuGet](http://www.nuget.org/): Install-Package RxJS-All Install-Package RxJS-Lite Install-Package RxJS-Main Install-Package RxJS-Aggregates Install-Package RxJS-Async Install-Package RxJS-BackPressure Install-Package RxJS-Binding Install-Package RxJS-Coincidence Install-Package RxJS-Experimental Install-Package RxJS-JoinPatterns Install-Package RxJS-Testing Install-Package RxJS-Time ### In a Browser: ```html ``` ### Along with a number of our extras for RxJS: ```html ``` ### Using RxJS with an AMD loader such as Require.js ```js require({ 'paths': { 'rx': 'path/to/rx-lite.js' } }, ['rx'], (Rx) => { const obs = Rx.Observable.of(42); obs.forEach(x => console.log(x)); }); ``` ## What about my libraries? ## The Reactive Extensions for JavaScript have no external dependencies on any library, so they'll work well with just about any library. We provide bridges and support for various libraries including: - [Node.js](https://www.npmjs.com/package/rx-node) - [React](http://facebook.github.io/react/) - [Rx-React](https://github.com/fdecampredon/rx-react) - [RxReact](https://github.com/AlexMost/RxReact) - [cycle-react](https://github.com/pH200/cycle-react) - [Flux](http://facebook.github.io/flux/) - [Rx-Flux](https://github.com/fdecampredon/rx-flux) - [ReactiveFlux](https://github.com/codesuki/reactive-flux) - [Thundercats.js](https://github.com/ThunderCatsJS/thundercats) - [Flurx](https://github.com/qwtel/flurx) - [RR](https://github.com/winsonwq/RR) - [Ember](http://emberjs.com/) - [RxEmber](https://github.com/blesh/RxEmber) - [AngularJS](https://github.com/Reactive-Extensions/rx.angular.js) - [HTML DOM](https://github.com/Reactive-Extensions/RxJS-DOM) - [jQuery (1.4+)](https://github.com/Reactive-Extensions/RxJS-jQuery) - [MooTools](https://github.com/Reactive-Extensions/RxJS-MooTools) - [Dojo 1.7+](https://github.com/Reactive-Extensions/RxJS-Dojo) - [ExtJS](https://github.com/Reactive-Extensions/RxJS-ExtJS) ## Compatibility ## RxJS has been thoroughly tested against all major browsers and supports IE6+, Chrome 4+, FireFox 1+, and Node.js v0.4+. ## Contributing ## There are lots of ways to contribute to the project, and we appreciate our [contributors](https://github.com/Reactive-Extensions/RxJS/wiki/Contributors). If you wish to contribute, check out our [style guide]((https://github.com/Reactive-Extensions/RxJS/tree/master/doc/contributing)). You can contribute by reviewing and sending feedback on code checkins, suggesting and trying out new features as they are implemented, submit bugs and help us verify fixes as they are checked in, as well as submit code fixes or code contributions of your own. Note that all code submissions will be rigorously reviewed and tested by the Rx Team, and only those that meet an extremely high bar for both quality and design/roadmap appropriateness will be merged into the source. First-time contributors must sign a [Contribution License Agreement](https://cla.microsoft.com/). If your Pull Request has the label [cla-required](https://github.com/Reactive-Extensions/RxJS/labels/cla-required), this is an indication that you haven't yet signed such an agreement. ## License ## Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. Microsoft Open Technologies would like to thank its contributors, a list of whom are at https://github.com/Reactive-Extensions/RxJS/wiki/Contributors. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/HISTORY.md","tags":[],"body":"1.7.3 / 2016-01-24 ================== * deps: accepts@~1.2.13 - deps: mime-types@~2.1.6 * deps: batch@0.5.3 - Fix invalid dependency for browserify * deps: escape-html@~1.0.3 - perf: enable strict mode - perf: optimize string replacement - perf: use faster string coercion * deps: mime-types@~2.1.9 - Add new mime types * deps: parseurl@~1.3.1 - perf: enable strict mode 1.7.2 / 2015-07-30 ================== * deps: accepts@~1.2.12 - deps: mime-types@~2.1.4 * deps: mime-types@~2.1.4 - Add new mime types 1.7.1 / 2015-07-05 ================== * deps: accepts@~1.2.10 - deps: mime-types@~2.1.2 * deps: mime-types@~2.1.2 - Add new mime types 1.7.0 / 2015-06-15 ================== * Accept `function` value for `template` option * Send non-chunked response for `OPTIONS` * Stat parent directory when necessary * Use `Date.prototype.toLocaleDateString` to format date * deps: accepts@~1.2.9 - deps: mime-types@~2.1.1 - deps: negotiator@0.5.3 - perf: avoid argument reassignment & argument slice - perf: avoid negotiator recursive construction - perf: enable strict mode - perf: remove unnecessary bitwise operator * deps: escape-html@1.0.2 * deps: mime-types@~2.1.1 - Add new mime types * perf: enable strict mode * perf: remove argument reassignment 1.6.4 / 2015-05-12 ================== * deps: accepts@~1.2.7 - deps: mime-types@~2.0.11 - deps: negotiator@0.5.3 * deps: debug@~2.2.0 - deps: ms@0.7.1 * deps: mime-types@~2.0.11 - Add new mime types 1.6.3 / 2015-03-13 ================== * Properly escape file names in HTML * deps: accepts@~1.2.5 - deps: mime-types@~2.0.10 * deps: debug@~2.1.3 - Fix high intensity foreground color for bold - deps: ms@0.7.0 * deps: escape-html@1.0.1 * deps: mime-types@~2.0.10 - Add new mime types 1.6.2 / 2015-02-16 ================== * deps: accepts@~1.2.4 - deps: mime-types@~2.0.9 - deps: negotiator@0.5.1 * deps: http-errors@~1.3.1 - Construct errors using defined constructors from `createError` - Fix error names that are not identifiers - Set a meaningful `name` property on constructed errors * deps: mime-types@~2.0.9 - Add new mime types - deps: mime-db@~1.7.0 1.6.1 / 2015-01-31 ================== * deps: accepts@~1.2.3 - deps: mime-types@~2.0.8 * deps: mime-types@~2.0.8 - Add new mime types - deps: mime-db@~1.6.0 1.6.0 / 2015-01-01 ================== * Add link to root directory * deps: accepts@~1.2.2 - deps: mime-types@~2.0.7 - deps: negotiator@0.5.0 * deps: batch@0.5.2 * deps: debug@~2.1.1 * deps: mime-types@~2.0.7 - Add new mime types - Fix missing extensions - Fix various invalid MIME type entries - Remove example template MIME types - deps: mime-db@~1.5.0 1.5.3 / 2014-12-10 ================== * deps: accepts@~1.1.4 - deps: mime-types@~2.0.4 * deps: http-errors@~1.2.8 - Fix stack trace from exported function * deps: mime-types@~2.0.4 - Add new mime types - deps: mime-db@~1.3.0 1.5.2 / 2014-12-03 ================== * Fix icon name background alignment on mobile view 1.5.1 / 2014-11-22 ================== * deps: accepts@~1.1.3 - deps: mime-types@~2.0.3 * deps: mime-types@~2.0.3 - Add new mime types - deps: mime-db@~1.2.0 1.5.0 / 2014-10-16 ================== * Create errors with `http-errors` * deps: debug@~2.1.0 - Implement `DEBUG_FD` env variable support * deps: mime-types@~2.0.2 - deps: mime-db@~1.1.0 1.4.1 / 2014-10-15 ================== * deps: accepts@~1.1.2 - Fix error when media type has invalid parameter - deps: negotiator@0.4.9 1.4.0 / 2014-10-03 ================== * Add `dir` argument to `filter` function * Support using tokens multiple times 1.3.1 / 2014-10-01 ================== * Fix incorrect 403 on Windows and Node.js 0.11 * deps: accepts@~1.1.1 - deps: mime-types@~2.0.2 - deps: negotiator@0.4.8 1.3.0 / 2014-09-20 ================== * Add icon for mkv files * Lookup icon by mime type for greater icon support 1.2.1 / 2014-09-05 ================== * deps: accepts@~1.1.0 * deps: debug@~2.0.0 1.2.0 / 2014-08-25 ================== * Add `debug` messages * Resolve relative paths at middleware setup 1.1.6 / 2014-08-10 ================== * Fix URL parsing * deps: parseurl@~1.3.0 1.1.5 / 2014-07-27 ================== * Fix Content-Length calculation for multi-byte file names * deps: accepts@~1.0.7 - deps: negotiator@0.4.7 1.1.4 / 2014-06-20 ================== * deps: accepts@~1.0.5 1.1.3 / 2014-06-20 ================== * deps: accepts@~1.0.4 - use `mime-types` 1.1.2 / 2014-06-19 ================== * deps: batch@0.5.1 1.1.1 / 2014-06-11 ================== * deps: accepts@1.0.3 1.1.0 / 2014-05-29 ================== * Fix content negotiation when no `Accept` header * Properly support all HTTP methods * Support vanilla node.js http servers * Treat `ENAMETOOLONG` as code 414 * Use accepts for negotiation 1.0.3 / 2014-05-20 ================== * Fix error from non-statable files in HTML view 1.0.2 / 2014-04-28 ================== * Add `stylesheet` option * deps: negotiator@0.4.3 1.0.1 / 2014-03-05 ================== * deps: negotiator@0.4.2 1.0.0 / 2014-03-05 ================== * Genesis from connect"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/README.md","tags":[],"body":"# serve-index [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Linux Build][travis-image]][travis-url] [![Windows Build][appveyor-image]][appveyor-url] [![Test Coverage][coveralls-image]][coveralls-url] [![Gratipay][gratipay-image]][gratipay-url] Serves pages that contain directory listings for a given path. ## Install ```sh $ npm install serve-index ``` ## API ```js var serveIndex = require('serve-index') ``` ### serveIndex(path, options) Returns middlware that serves an index of the directory in the given `path`. The `path` is based off the `req.url` value, so a `req.url` of `'/some/dir` with a `path` of `'public'` will look at `'public/some/dir'`. If you are using something like `express`, you can change the URL \"base\" with `app.use` (see the express example). #### Options Serve index accepts these properties in the options object. ##### filter Apply this filter function to files. Defaults to `false`. The `filter` function is called for each file, with the signature `filter(filename, index, files, dir)` where `filename` is the name of the file, `index` is the array index, `files` is the array of files and `dir` is the absolute path the file is located (and thus, the directory the listing is for). ##### hidden Display hidden (dot) files. Defaults to `false`. ##### icons Display icons. Defaults to `false`. ##### stylesheet Optional path to a CSS stylesheet. Defaults to a built-in stylesheet. ##### template Optional path to an HTML template or a function that will render a HTML string. Defaults to a built-in template. When given a string, the string is used as a file path to load and then the following tokens are replaced in templates: * `{directory}` with the name of the directory. * `{files}` with the HTML of an unordered list of file links. * `{linked-path}` with the HTML of a link to the directory. * `{style}` with the specified stylesheet and embedded images. When given as a function, the function is called as `template(locals, callback)` and it needs to invoke `callback(error, htmlString)`. The following are the provided locals: * `directory` is the directory being displayed (where `/` is the root). * `displayIcons` is a Boolean for if icons should be rendered or not. * `fileList` is a sorted array of files in the directory. The array contains objects with the following properties: - `name` is the relative name for the file. - `stat` is a `fs.Stats` object for the file. * `path` is the full filesystem path to `directory`. * `style` is the default stylesheet or the contents of the `stylesheet` option. * `viewName` is the view name provided by the `view` option. ##### view Display mode. `tiles` and `details` are available. Defaults to `tiles`. ## Examples ### Serve directory indexes with vanilla node.js http server ```js var finalhandler = require('finalhandler') var http = require('http') var serveIndex = require('serve-index') var serveStatic = require('serve-static') // Serve directory indexes for public/ftp folder (with icons) var index = serveIndex('public/ftp', {'icons': true}) // Serve up public/ftp folder files var serve = serveStatic('public/ftp') // Create server var server = http.createServer(function onRequest(req, res){ var done = finalhandler(req, res) serve(req, res, function onNext(err) { if (err) return done(err) index(req, res, done) }) }) // Listen server.listen(3000) ``` ### Serve directory indexes with express ```js var express = require('express') var serveIndex = require('serve-index') var app = express() // Serve URLs like /ftp/thing as public/ftp/thing app.use('/ftp', serveIndex('public/ftp', {'icons': true})) app.listen() ``` ## License [MIT](LICENSE). The [Silk](http://www.famfamfam.com/lab/icons/silk/) icons are created by/copyright of [FAMFAMFAM](http://www.famfamfam.com/). [npm-image]: https://img.shields.io/npm/v/serve-index.svg [npm-url]: https://npmjs.org/package/serve-index [travis-image]: https://img.shields.io/travis/expressjs/serve-index/master.svg?label=linux [travis-url]: https://travis-ci.org/expressjs/serve-index [appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/serve-index/master.svg?label=windows [appveyor-url]: https://ci.appveyor.com/project/dougwilson/serve-index [coveralls-image]: https://img.shields.io/coveralls/expressjs/serve-index/master.svg [coveralls-url]: https://coveralls.io/r/expressjs/serve-index?branch=master [downloads-image]: https://img.shields.io/npm/dm/serve-index.svg [downloads-url]: https://npmjs.org/package/serve-index [gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg [gratipay-url]: https://www.gratipay.com/dougwilson/"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/accepts/HISTORY.md","tags":[],"body":"1.2.13 / 2015-09-06 =================== * deps: mime-types@~2.1.6 - deps: mime-db@~1.18.0 1.2.12 / 2015-07-30 =================== * deps: mime-types@~2.1.4 - deps: mime-db@~1.16.0 1.2.11 / 2015-07-16 =================== * deps: mime-types@~2.1.3 - deps: mime-db@~1.15.0 1.2.10 / 2015-07-01 =================== * deps: mime-types@~2.1.2 - deps: mime-db@~1.14.0 1.2.9 / 2015-06-08 ================== * deps: mime-types@~2.1.1 - perf: fix deopt during mapping 1.2.8 / 2015-06-07 ================== * deps: mime-types@~2.1.0 - deps: mime-db@~1.13.0 * perf: avoid argument reassignment & argument slice * perf: avoid negotiator recursive construction * perf: enable strict mode * perf: remove unnecessary bitwise operator 1.2.7 / 2015-05-10 ================== * deps: negotiator@0.5.3 - Fix media type parameter matching to be case-insensitive 1.2.6 / 2015-05-07 ================== * deps: mime-types@~2.0.11 - deps: mime-db@~1.9.1 * deps: negotiator@0.5.2 - Fix comparing media types with quoted values - Fix splitting media types with quoted commas 1.2.5 / 2015-03-13 ================== * deps: mime-types@~2.0.10 - deps: mime-db@~1.8.0 1.2.4 / 2015-02-14 ================== * Support Node.js 0.6 * deps: mime-types@~2.0.9 - deps: mime-db@~1.7.0 * deps: negotiator@0.5.1 - Fix preference sorting to be stable for long acceptable lists 1.2.3 / 2015-01-31 ================== * deps: mime-types@~2.0.8 - deps: mime-db@~1.6.0 1.2.2 / 2014-12-30 ================== * deps: mime-types@~2.0.7 - deps: mime-db@~1.5.0 1.2.1 / 2014-12-30 ================== * deps: mime-types@~2.0.5 - deps: mime-db@~1.3.1 1.2.0 / 2014-12-19 ================== * deps: negotiator@0.5.0 - Fix list return order when large accepted list - Fix missing identity encoding when q=0 exists - Remove dynamic building of Negotiator class 1.1.4 / 2014-12-10 ================== * deps: mime-types@~2.0.4 - deps: mime-db@~1.3.0 1.1.3 / 2014-11-09 ================== * deps: mime-types@~2.0.3 - deps: mime-db@~1.2.0 1.1.2 / 2014-10-14 ================== * deps: negotiator@0.4.9 - Fix error when media type has invalid parameter 1.1.1 / 2014-09-28 ================== * deps: mime-types@~2.0.2 - deps: mime-db@~1.1.0 * deps: negotiator@0.4.8 - Fix all negotiations to be case-insensitive - Stable sort preferences of same quality according to client order 1.1.0 / 2014-09-02 ================== * update `mime-types` 1.0.7 / 2014-07-04 ================== * Fix wrong type returned from `type` when match after unknown extension 1.0.6 / 2014-06-24 ================== * deps: negotiator@0.4.7 1.0.5 / 2014-06-20 ================== * fix crash when unknown extension given 1.0.4 / 2014-06-19 ================== * use `mime-types` 1.0.3 / 2014-06-11 ================== * deps: negotiator@0.4.6 - Order by specificity when quality is the same 1.0.2 / 2014-05-29 ================== * Fix interpretation when header not in request * deps: pin negotiator@0.4.5 1.0.1 / 2014-01-18 ================== * Identity encoding isn't always acceptable * deps: negotiator@~0.4.0 1.0.0 / 2013-12-27 ================== * Genesis"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/accepts/README.md","tags":[],"body":"# accepts [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Higher level content negotiation based on [negotiator](https://www.npmjs.com/package/negotiator). Extracted from [koa](https://www.npmjs.com/package/koa) for general use. In addition to negotiator, it allows: - Allows types as an array or arguments list, ie `(['text/html', 'application/json'])` as well as `('text/html', 'application/json')`. - Allows type shorthands such as `json`. - Returns `false` when no types match - Treats non-existent headers as `*` ## Installation ```sh npm install accepts ``` ## API ```js var accepts = require('accepts') ``` ### accepts(req) Create a new `Accepts` object for the given `req`. #### .charset(charsets) Return the first accepted charset. If nothing in `charsets` is accepted, then `false` is returned. #### .charsets() Return the charsets that the request accepts, in the order of the client's preference (most preferred first). #### .encoding(encodings) Return the first accepted encoding. If nothing in `encodings` is accepted, then `false` is returned. #### .encodings() Return the encodings that the request accepts, in the order of the client's preference (most preferred first). #### .language(languages) Return the first accepted language. If nothing in `languages` is accepted, then `false` is returned. #### .languages() Return the languages that the request accepts, in the order of the client's preference (most preferred first). #### .type(types) Return the first accepted type (and it is returned as the same text as what appears in the `types` array). If nothing in `types` is accepted, then `false` is returned. The `types` array can contain full MIME types or file extensions. Any value that is not a full MIME types is passed to `require('mime-types').lookup`. #### .types() Return the types that the request accepts, in the order of the client's preference (most preferred first). ## Examples ### Simple type negotiation This simple example shows how to use `accepts` to return a different typed respond body based on what the client wants to accept. The server lists it's preferences in order and will get back the best match between the client and server. ```js var accepts = require('accepts') var http = require('http') function app(req, res) { var accept = accepts(req) // the order of this list is significant; should be server preferred order switch(accept.type(['json', 'html'])) { case 'json': res.setHeader('Content-Type', 'application/json') res.write('{\"hello\":\"world!\"}') break case 'html': res.setHeader('Content-Type', 'text/html') res.write('hello, world!') break default: // the fallback is text/plain, so no need to specify it above res.setHeader('Content-Type', 'text/plain') res.write('hello, world!') break } res.end() } http.createServer(app).listen(3000) ``` You can test this out with the cURL program: ```sh curl -I -H'Accept: text/html' http://localhost:3000/ ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/accepts.svg [npm-url]: https://npmjs.org/package/accepts [node-version-image]: https://img.shields.io/node/v/accepts.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/accepts/master.svg [travis-url]: https://travis-ci.org/jshttp/accepts [coveralls-image]: https://img.shields.io/coveralls/jshttp/accepts/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/accepts [downloads-image]: https://img.shields.io/npm/dm/accepts.svg [downloads-url]: https://npmjs.org/package/accepts"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/accepts/node_modules/negotiator/HISTORY.md","tags":[],"body":"0.5.3 / 2015-05-10 ================== * Fix media type parameter matching to be case-insensitive 0.5.2 / 2015-05-06 ================== * Fix comparing media types with quoted values * Fix splitting media types with quoted commas 0.5.1 / 2015-02-14 ================== * Fix preference sorting to be stable for long acceptable lists 0.5.0 / 2014-12-18 ================== * Fix list return order when large accepted list * Fix missing identity encoding when q=0 exists * Remove dynamic building of Negotiator class 0.4.9 / 2014-10-14 ================== * Fix error when media type has invalid parameter 0.4.8 / 2014-09-28 ================== * Fix all negotiations to be case-insensitive * Stable sort preferences of same quality according to client order * Support Node.js 0.6 0.4.7 / 2014-06-24 ================== * Handle invalid provided languages * Handle invalid provided media types 0.4.6 / 2014-06-11 ================== * Order by specificity when quality is the same 0.4.5 / 2014-05-29 ================== * Fix regression in empty header handling 0.4.4 / 2014-05-29 ================== * Fix behaviors when headers are not present 0.4.3 / 2014-04-16 ================== * Handle slashes on media params correctly 0.4.2 / 2014-02-28 ================== * Fix media type sorting * Handle media types params strictly 0.4.1 / 2014-01-16 ================== * Use most specific matches 0.4.0 / 2014-01-09 ================== * Remove preferred prefix from methods"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/accepts/node_modules/negotiator/README.md","tags":[],"body":"# negotiator [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] An HTTP content negotiator for Node.js ## Installation ```sh $ npm install negotiator ``` ## API ```js var Negotiator = require('negotiator') ``` ### Accept Negotiation ```js availableMediaTypes = ['text/html', 'text/plain', 'application/json'] // The negotiator constructor receives a request object negotiator = new Negotiator(request) // Let's say Accept header is 'text/html, application/*;q=0.2, image/jpeg;q=0.8' negotiator.mediaTypes() // -> ['text/html', 'image/jpeg', 'application/*'] negotiator.mediaTypes(availableMediaTypes) // -> ['text/html', 'application/json'] negotiator.mediaType(availableMediaTypes) // -> 'text/html' ``` You can check a working example at `examples/accept.js`. #### Methods ##### mediaType() Returns the most preferred media type from the client. ##### mediaType(availableMediaType) Returns the most preferred media type from a list of available media types. ##### mediaTypes() Returns an array of preferred media types ordered by the client preference. ##### mediaTypes(availableMediaTypes) Returns an array of preferred media types ordered by priority from a list of available media types. ### Accept-Language Negotiation ```js negotiator = new Negotiator(request) availableLanguages = 'en', 'es', 'fr' // Let's say Accept-Language header is 'en;q=0.8, es, pt' negotiator.languages() // -> ['es', 'pt', 'en'] negotiator.languages(availableLanguages) // -> ['es', 'en'] language = negotiator.language(availableLanguages) // -> 'es' ``` You can check a working example at `examples/language.js`. #### Methods ##### language() Returns the most preferred language from the client. ##### language(availableLanguages) Returns the most preferred language from a list of available languages. ##### languages() Returns an array of preferred languages ordered by the client preference. ##### languages(availableLanguages) Returns an array of preferred languages ordered by priority from a list of available languages. ### Accept-Charset Negotiation ```js availableCharsets = ['utf-8', 'iso-8859-1', 'iso-8859-5'] negotiator = new Negotiator(request) // Let's say Accept-Charset header is 'utf-8, iso-8859-1;q=0.8, utf-7;q=0.2' negotiator.charsets() // -> ['utf-8', 'iso-8859-1', 'utf-7'] negotiator.charsets(availableCharsets) // -> ['utf-8', 'iso-8859-1'] negotiator.charset(availableCharsets) // -> 'utf-8' ``` You can check a working example at `examples/charset.js`. #### Methods ##### charset() Returns the most preferred charset from the client. ##### charset(availableCharsets) Returns the most preferred charset from a list of available charsets. ##### charsets() Returns an array of preferred charsets ordered by the client preference. ##### charsets(availableCharsets) Returns an array of preferred charsets ordered by priority from a list of available charsets. ### Accept-Encoding Negotiation ```js availableEncodings = ['identity', 'gzip'] negotiator = new Negotiator(request) // Let's say Accept-Encoding header is 'gzip, compress;q=0.2, identity;q=0.5' negotiator.encodings() // -> ['gzip', 'identity', 'compress'] negotiator.encodings(availableEncodings) // -> ['gzip', 'identity'] negotiator.encoding(availableEncodings) // -> 'gzip' ``` You can check a working example at `examples/encoding.js`. #### Methods ##### encoding() Returns the most preferred encoding from the client. ##### encoding(availableEncodings) Returns the most preferred encoding from a list of available encodings. ##### encodings() Returns an array of preferred encodings ordered by the client preference. ##### encodings(availableEncodings) Returns an array of preferred encodings ordered by priority from a list of available encodings. ## See Also The [accepts](https://npmjs.org/package/accepts#readme) module builds on this module and provides an alternative interface, mime type validation, and more. ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/negotiator.svg [npm-url]: https://npmjs.org/package/negotiator [node-version-image]: https://img.shields.io/node/v/negotiator.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/negotiator/master.svg [travis-url]: https://travis-ci.org/jshttp/negotiator [coveralls-image]: https://img.shields.io/coveralls/jshttp/negotiator/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/negotiator?branch=master [downloads-image]: https://img.shields.io/npm/dm/negotiator.svg [downloads-url]: https://npmjs.org/package/negotiator"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/batch/History.md","tags":[],"body":"0.5.1 / 2014-06-19 ================== * add repository field to readme (exciting) 0.5.0 / 2013-07-29 ================== * add `.throws(true)` to opt-in to responding with an array of error objects * make `new` optional 0.4.0 / 2013-06-05 ================== * add catching of immediate callback errors 0.3.2 / 2013-03-15 ================== * remove Emitter call in constructor 0.3.1 / 2013-03-13 ================== * add Emitter() mixin for client. Closes #8 0.3.0 / 2013-03-13 ================== * add component.json * add result example * add .concurrency support * add concurrency example * add parallel example 0.2.1 / 2012-11-08 ================== * add .start, .end, and .duration properties * change dependencies to devDependencies 0.2.0 / 2012-10-04 ================== * add progress events. Closes #5 (__BREAKING CHANGE__) 0.1.1 / 2012-07-03 ================== * change \"complete\" event to \"progress\" 0.1.0 / 2012-07-03 ================== * add Emitter inheritance and emit \"complete\" [burcu] 0.0.3 / 2012-06-02 ================== * Callback results should be in the order of the queued functions. 0.0.2 / 2012-02-12 ================== * any node 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/batch/Readme.md","tags":[],"body":"# batch Simple async batch with concurrency control and progress reporting. ## Installation ``` $ npm install batch ``` ## API ```js var Batch = require('batch') , batch = new Batch; batch.concurrency(4); ids.forEach(function(id){ batch.push(function(done){ User.get(id, done); }); }); batch.on('progress', function(e){ }); batch.end(function(err, users){ }); ``` ### Progress events Contain the \"job\" index, response value, duration information, and completion data. ```js { index: 1, value: 'bar', pending: 2, total: 3, complete: 2, percent: 66, start: Thu Oct 04 2012 12:25:53 GMT-0700 (PDT), end: Thu Oct 04 2012 12:25:53 GMT-0700 (PDT), duration: 0 } ``` ## License (The MIT License) Copyright (c) 2013 TJ Holowaychuk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/debug/History.md","tags":[],"body":"2.2.0 / 2015-05-09 ================== * package: update \"ms\" to v0.7.1 (#202, @dougwilson) * README: add logging to file example (#193, @DanielOchoa) * README: fixed a typo (#191, @amir-s) * browser: expose `storage` (#190, @stephenmathieson) * Makefile: add a `distclean` target (#189, @stephenmathieson) 2.1.3 / 2015-03-13 ================== * Updated stdout/stderr example (#186) * Updated example/stdout.js to match debug current behaviour * Renamed example/stderr.js to stdout.js * Update Readme.md (#184) * replace high intensity foreground color for bold (#182, #183) 2.1.2 / 2015-03-01 ================== * dist: recompile * update \"ms\" to v0.7.0 * package: update \"browserify\" to v9.0.3 * component: fix \"ms.js\" repo location * changed bower package name * updated documentation about using debug in a browser * fix: security error on safari (#167, #168, @yields) 2.1.1 / 2014-12-29 ================== * browser: use `typeof` to check for `console` existence * browser: check for `console.log` truthiness (fix IE 8/9) * browser: add support for Chrome apps * Readme: added Windows usage remarks * Add `bower.json` to properly support bower install 2.1.0 / 2014-10-15 ================== * node: implement `DEBUG_FD` env variable support * package: update \"browserify\" to v6.1.0 * package: add \"license\" field to package.json (#135, @panuhorsmalahti) 2.0.0 / 2014-09-01 ================== * package: update \"browserify\" to v5.11.0 * node: use stderr rather than stdout for logging (#29, @stephenmathieson) 1.0.4 / 2014-07-15 ================== * dist: recompile * example: remove `console.info()` log usage * example: add \"Content-Type\" UTF-8 header to browser example * browser: place %c marker after the space character * browser: reset the \"content\" color via `color: inherit` * browser: add colors support for Firefox >= v31 * debug: prefer an instance `log()` function over the global one (#119) * Readme: update documentation about styled console logs for FF v31 (#116, @wryk) 1.0.3 / 2014-07-09 ================== * Add support for multiple wildcards in namespaces (#122, @seegno) * browser: fix lint 1.0.2 / 2014-06-10 ================== * browser: update color palette (#113, @gscottolson) * common: make console logging function configurable (#108, @timoxley) * node: fix %o colors on old node <= 0.8.x * Makefile: find node path using shell/which (#109, @timoxley) 1.0.1 / 2014-06-06 ================== * browser: use `removeItem()` to clear localStorage * browser, node: don't set DEBUG if namespaces is undefined (#107, @leedm777) * package: add \"contributors\" section * node: fix comment typo * README: list authors 1.0.0 / 2014-06-04 ================== * make ms diff be global, not be scope * debug: ignore empty strings in enable() * node: make DEBUG_COLORS able to disable coloring * *: export the `colors` array * npmignore: don't publish the `dist` dir * Makefile: refactor to use browserify * package: add \"browserify\" as a dev dependency * Readme: add Web Inspector Colors section * node: reset terminal color for the debug content * node: map \"%o\" to `util.inspect()` * browser: map \"%j\" to `JSON.stringify()` * debug: add custom \"formatters\" * debug: use \"ms\" module for humanizing the diff * Readme: add \"bash\" syntax highlighting * browser: add Firebug color support * browser: add colors for WebKit browsers * node: apply log to `console` * rewrite: abstract common logic for Node & browsers * add .jshintrc file 0.8.1 / 2014-04-14 ================== * package: re-add the \"component\" section 0.8.0 / 2014-03-30 ================== * add `enable()` method for nodejs. Closes #27 * change from stderr to stdout * remove unnecessary index.js file 0.7.4 / 2013-11-13 ================== * remove \"browserify\" key from package.json (fixes something in browserify) 0.7.3 / 2013-10-30 ================== * fix: catch localStorage security error when cookies are blocked (Chrome) * add debug(err) support. Closes #46 * add .browser prop to package.json. Closes #42 0.7.2 / 2013-02-06 ================== * fix package.json * fix: Mobile Safari (private mode) is broken with debug * fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript 0.7.1 / 2013-02-05 ================== * add repository URL to package.json * add DEBUG_COLORED to force colored output * add browserify support * fix component. Closes #24 0.7.0 / 2012-05-04 ================== * Added .component to package.json * Added debug.component.js build 0.6.0 / 2012-03-16 ================== * Added support for \"-\" prefix in DEBUG [Vinay Pulim] * Added `.enabled` flag to the node version [TooTallNate] 0.5.0 / 2012-02-02 ================== * Added: humanize diffs. Closes #8 * Added `debug.disable()` to the CS variant * Removed padding. Closes #10 * Fixed: persist client-side variant again. Closes #9 0.4.0 / 2012-02-01 ================== * Added browser variant support for older browsers [TooTallNate] * Added `debug.enable('project:*')` to browser variant [TooTallNate] * Added padding to diff (moved it to the right) 0.3.0 / 2012-01-26 ================== * Added millisecond diff when isatty, otherwise UTC string 0.2.0 / 2012-01-22 ================== * Added wildcard support 0.1.0 / 2011-12-02 ================== * Added: remove colors unless stderr isatty [TooTallNate] 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/debug/Readme.md","tags":[],"body":"# debug tiny node.js debugging utility modelled after node core's debugging technique. ## Installation ```bash $ npm install debug ``` ## Usage With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you're used to work fine. A unique color is selected per-function for visibility. Example _app.js_: ```js var debug = require('debug')('http') , http = require('http') , name = 'My App'; // fake app debug('booting %s', name); http.createServer(function(req, res){ debug(req.method + ' ' + req.url); res.end('hello\\n'); }).listen(3000, function(){ debug('listening'); }); // fake worker of some kind require('./worker'); ``` Example _worker.js_: ```js var debug = require('debug')('worker'); setInterval(function(){ debug('doing some work'); }, 1000); ``` The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png) ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png) #### Windows note On Windows the environment variable is set using the `set` command. ```cmd set DEBUG=*,-not_this ``` Then, run the program to be debugged as usual. ## Millisecond diff When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls. ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png) When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below: ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png) ## Conventions If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\". ## Wildcards The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`. You can also exclude specific debuggers by prefixing them with a \"-\" character. For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\". ## Browser support Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include: ```js window.myDebug = require(\"debug\"); ``` (\"debug\" is a global object in the browser so we give this object a different name.) When your page is open in the browser, type the following in the console: ```js myDebug.enable(\"worker:*\") ``` Refresh the page. Debug output will continue to be sent to the console until it is disabled by typing `myDebug.disable()` in the console. ```js a = debug('worker:a'); b = debug('worker:b'); setInterval(function(){ a('doing some work'); }, 1000); setInterval(function(){ b('doing some work'); }, 1200); ``` #### Web Inspector Colors Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting option. These are WebKit web inspectors, Firefox ([since version 31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/)) and the Firebug plugin for Firefox (any version). Colored output looks something like: ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png) ### stderr vs stdout You can set an alternative logging method per-namespace by overriding the `log` method on a per-namespace or globally: Example _stdout.js_: ```js var debug = require('debug'); var error = debug('app:error'); // by default stderr is used error('goes to stderr!'); var log = debug('app:log'); // set this namespace to log via console.log log.log = console.log.bind(console); // don't forget to bind to console! log('goes to stdout'); error('still goes to stderr!'); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error('now goes to stdout via console.info'); log('still goes to stdout, but via console.info now'); ``` ### Save debug output to a file You can save all debug statements to a file by piping them. Example: ```bash $ DEBUG_FD=3 node your-app.js 3> whatever.log ``` ## Authors - TJ Holowaychuk - Nathan Rajlich ## License (The MIT License) Copyright (c) 2014 TJ Holowaychuk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/debug/node_modules/ms/History.md","tags":[],"body":"0.7.1 / 2015-04-20 ================== * prevent extraordinary long inputs (@evilpacket) * Fixed broken readme link 0.7.0 / 2014-11-24 ================== * add time abbreviations, updated tests and readme for the new units * fix example in the readme. * add LICENSE file 0.6.2 / 2013-12-05 ================== * Adding repository section to package.json to suppress warning from NPM. 0.6.1 / 2013-05-10 ================== * fix singularization [visionmedia] 0.6.0 / 2013-03-15 ================== * fix minutes 0.5.1 / 2013-02-24 ================== * add component namespace 0.5.0 / 2012-11-09 ================== * add short formatting as default and .long option * add .license property to component.json * add version to component.json 0.4.0 / 2012-10-22 ================== * add rounding to fix crazy decimals 0.3.0 / 2012-09-07 ================== * fix `ms()` [visionmedia] 0.2.0 / 2012-09-03 ================== * add component.json [visionmedia] * add days support [visionmedia] * add hours support [visionmedia] * add minutes support [visionmedia] * add seconds support [visionmedia] * add ms string support [visionmedia] * refactor tests to facilitate ms(number) [visionmedia] 0.1.0 / 2012-03-07 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/debug/node_modules/ms/README.md","tags":[],"body":"# ms.js: miliseconds conversion utility ```js ms('2 days') // 172800000 ms('1d') // 86400000 ms('10h') // 36000000 ms('2.5 hrs') // 9000000 ms('2h') // 7200000 ms('1m') // 60000 ms('5s') // 5000 ms('100') // 100 ``` ```js ms(60000) // \"1m\" ms(2 * 60000) // \"2m\" ms(ms('10 hours')) // \"10h\" ``` ```js ms(60000, { long: true }) // \"1 minute\" ms(2 * 60000, { long: true }) // \"2 minutes\" ms(ms('10 hours'), { long: true }) // \"10 hours\" ``` - Node/Browser compatible. Published as [`ms`](https://www.npmjs.org/package/ms) in [NPM](http://nodejs.org/download). - If a number is supplied to `ms`, a string with a unit is returned. - If a string that contains the number is supplied, it returns it as a number (e.g: it returns `100` for `'100'`). - If you pass a string with a number and a valid unit, the number of equivalent ms is returned. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/escape-html/Readme.md","tags":[],"body":"# escape-html Escape string for use in HTML ## Example ```js var escape = require('escape-html'); var html = escape('foo & bar'); // -> foo & bar ``` ## Benchmark ``` $ npm run-script bench > escape-html@1.0.3 bench nodejs-escape-html > node benchmark/index.js http_parser@1.0 node@0.10.33 v8@3.14.5.9 ares@1.9.0-DEV uv@0.10.29 zlib@1.2.3 modules@11 openssl@1.0.1j 1 test completed. 2 tests completed. 3 tests completed. no special characters x 19,435,271 ops/sec ±0.85% (187 runs sampled) single special character x 6,132,421 ops/sec ±0.67% (194 runs sampled) many special characters x 3,175,826 ops/sec ±0.65% (193 runs sampled) ``` ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/http-errors/HISTORY.md","tags":[],"body":"2015-02-02 / 1.3.1 ================== * Fix regression where status can be overwritten in `createError` `props` 2015-02-01 / 1.3.0 ================== * Construct errors using defined constructors from `createError` * Fix error names that are not identifiers - `createError[\"I'mateapot\"]` is now `createError.ImATeapot` * Set a meaningful `name` property on constructed errors 2014-12-09 / 1.2.8 ================== * Fix stack trace from exported function * Remove `arguments.callee` usage 2014-10-14 / 1.2.7 ================== * Remove duplicate line 2014-10-02 / 1.2.6 ================== * Fix `expose` to be `true` for `ClientError` constructor 2014-09-28 / 1.2.5 ================== * deps: statuses@1 2014-09-21 / 1.2.4 ================== * Fix dependency version to work with old `npm`s 2014-09-21 / 1.2.3 ================== * deps: statuses@~1.1.0 2014-09-21 / 1.2.2 ================== * Fix publish error 2014-09-21 / 1.2.1 ================== * Support Node.js 0.6 * Use `inherits` instead of `util` 2014-09-09 / 1.2.0 ================== * Fix the way inheriting functions * Support `expose` being provided in properties argument 2014-09-08 / 1.1.0 ================== * Default status to 500 * Support provided `error` to extend 2014-09-08 / 1.0.1 ================== * Fix accepting string message 2014-09-08 / 1.0.0 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/http-errors/README.md","tags":[],"body":"# http-errors [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Create HTTP errors for Express, Koa, Connect, etc. with ease. ## Example ```js var createError = require('http-errors'); app.use(function (req, res, next) { if (!req.user) return next(createError(401, 'Please login to view this page.')); next(); }) ``` ## API This is the current API, currently extracted from Koa and subject to change. ### Error Properties - `message` - `status` and `statusCode` - the status code of the error, defaulting to `500` ### createError([status], [message], [properties]) ```js var err = createError(404, 'This video does not exist!'); ``` - `status: 500` - the status code as a number - `message` - the message of the error, defaulting to node's text for that status code. - `properties` - custom properties to attach to the object ### new createError\\[code || name\\](\\[msg]\\)) ```js var err = new createError.NotFound(); ``` - `code` - the status code as a number - `name` - the name of the error as a \"bumpy case\", i.e. `NotFound` or `InternalServerError`. ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/http-errors.svg?style=flat [npm-url]: https://npmjs.org/package/http-errors [node-version-image]: https://img.shields.io/node/v/http-errors.svg?style=flat [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/http-errors.svg?style=flat [travis-url]: https://travis-ci.org/jshttp/http-errors [coveralls-image]: https://img.shields.io/coveralls/jshttp/http-errors.svg?style=flat [coveralls-url]: https://coveralls.io/r/jshttp/http-errors [downloads-image]: https://img.shields.io/npm/dm/http-errors.svg?style=flat [downloads-url]: https://npmjs.org/package/http-errors"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/http-errors/node_modules/inherits/README.md","tags":[],"body":"Browser-friendly inheritance fully compatible with standard node.js [inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor). This package exports standard `inherits` from node.js `util` module in node environment, but also provides alternative browser-friendly implementation through [browser field](https://gist.github.com/shtylman/4339901). Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of `util`. It also has a shim for old browsers with no `Object.create` support. While keeping you sure you are using standard `inherits` implementation in node.js environment, it allows bundlers such as [browserify](https://github.com/substack/node-browserify) to not include full `util` package to your client code if all you need is just `inherits` function. It worth, because browser shim for `util` package is large and `inherits` is often the single function you need from it. It's recommended to use this package instead of `require('util').inherits` for any code that has chances to be used not only in node.js but in browser too. ## usage ```js var inherits = require('inherits'); // then use exactly as the standard one ``` ## note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js `inherits`. If you are using version ~1.0 and planning to switch to ~2.0, be careful: * new version uses `super_` instead of `super` for referencing superclass * new version overwrites current prototype while old one preserves any existing fields on it"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/http-errors/node_modules/statuses/HISTORY.md","tags":[],"body":"1.3.0 / 2016-05-17 ================== * Add `421 Misdirected Request` * perf: enable strict mode 1.2.1 / 2015-02-01 ================== * Fix message for status 451 - `451 Unavailable For Legal Reasons` 1.2.0 / 2014-09-28 ================== * Add `208 Already Repored` * Add `226 IM Used` * Add `306 (Unused)` * Add `415 Unable For Legal Reasons` * Add `508 Loop Detected` 1.1.1 / 2014-09-24 ================== * Add missing 308 to `codes.json` 1.1.0 / 2014-09-21 ================== * Add `codes.json` for universal support 1.0.4 / 2014-08-20 ================== * Package cleanup 1.0.3 / 2014-06-08 ================== * Add 308 to `.redirect` category 1.0.2 / 2014-03-13 ================== * Add `.retry` category 1.0.1 / 2014-03-12 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/http-errors/node_modules/statuses/README.md","tags":[],"body":"# Statuses [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] HTTP status utility for node. ## API ```js var status = require('statuses') ``` ### var code = status(Integer || String) If `Integer` or `String` is a valid HTTP code or status message, then the appropriate `code` will be returned. Otherwise, an error will be thrown. ```js status(403) // => 403 status('403') // => 403 status('forbidden') // => 403 status('Forbidden') // => 403 status(306) // throws, as it's not supported by node.js ``` ### status.codes Returns an array of all the status codes as `Integer`s. ### var msg = status[code] Map of `code` to `status message`. `undefined` for invalid `code`s. ```js status[404] // => 'Not Found' ``` ### var code = status[msg] Map of `status message` to `code`. `msg` can either be title-cased or lower-cased. `undefined` for invalid `status message`s. ```js status['not found'] // => 404 status['Not Found'] // => 404 ``` ### status.redirect[code] Returns `true` if a status code is a valid redirect status. ```js status.redirect[200] // => undefined status.redirect[301] // => true ``` ### status.empty[code] Returns `true` if a status code expects an empty body. ```js status.empty[200] // => undefined status.empty[204] // => true status.empty[304] // => true ``` ### status.retry[code] Returns `true` if you should retry the rest. ```js status.retry[501] // => undefined status.retry[503] // => true ``` ### statuses/codes.json ```js var codes = require('statuses/codes.json') ``` This is a JSON file of the status codes taken from `require('http').STATUS_CODES`. This is saved so that codes are consistent even in older node.js versions. For example, `308` will be added in v0.12. ## Adding Status Codes The status codes are primarily sourced from http://www.iana.org/assignments/http-status-codes/http-status-codes-1.csv. Additionally, custom codes are added from http://en.wikipedia.org/wiki/List_of_HTTP_status_codes. These are added manually in the `lib/*.json` files. If you would like to add a status code, add it to the appropriate JSON file. To rebuild `codes.json`, run the following: ```bash # update src/iana.json npm run fetch # build codes.json npm run build ``` [npm-image]: https://img.shields.io/npm/v/statuses.svg [npm-url]: https://npmjs.org/package/statuses [node-version-image]: https://img.shields.io/badge/node.js-%3E%3D_0.6-brightgreen.svg [node-version-url]: https://nodejs.org/en/download [travis-image]: https://img.shields.io/travis/jshttp/statuses.svg [travis-url]: https://travis-ci.org/jshttp/statuses [coveralls-image]: https://img.shields.io/coveralls/jshttp/statuses.svg [coveralls-url]: https://coveralls.io/r/jshttp/statuses?branch=master [downloads-image]: https://img.shields.io/npm/dm/statuses.svg [downloads-url]: https://npmjs.org/package/statuses"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/mime-types/HISTORY.md","tags":[],"body":"2.1.11 / 2016-05-01 =================== * deps: mime-db@~1.23.0 - Add new mime types 2.1.10 / 2016-02-15 =================== * deps: mime-db@~1.22.0 - Add new mime types - Fix extension of `application/dash+xml` - Update primary extension for `audio/mp4` 2.1.9 / 2016-01-06 ================== * deps: mime-db@~1.21.0 - Add new mime types 2.1.8 / 2015-11-30 ================== * deps: mime-db@~1.20.0 - Add new mime types 2.1.7 / 2015-09-20 ================== * deps: mime-db@~1.19.0 - Add new mime types 2.1.6 / 2015-09-03 ================== * deps: mime-db@~1.18.0 - Add new mime types 2.1.5 / 2015-08-20 ================== * deps: mime-db@~1.17.0 - Add new mime types 2.1.4 / 2015-07-30 ================== * deps: mime-db@~1.16.0 - Add new mime types 2.1.3 / 2015-07-13 ================== * deps: mime-db@~1.15.0 - Add new mime types 2.1.2 / 2015-06-25 ================== * deps: mime-db@~1.14.0 - Add new mime types 2.1.1 / 2015-06-08 ================== * perf: fix deopt during mapping 2.1.0 / 2015-06-07 ================== * Fix incorrectly treating extension-less file name as extension - i.e. `'path/to/json'` will no longer return `application/json` * Fix `.charset(type)` to accept parameters * Fix `.charset(type)` to match case-insensitive * Improve generation of extension to MIME mapping * Refactor internals for readability and no argument reassignment * Prefer `application/*` MIME types from the same source * Prefer any type over `application/octet-stream` * deps: mime-db@~1.13.0 - Add nginx as a source - Add new mime types 2.0.14 / 2015-06-06 =================== * deps: mime-db@~1.12.0 - Add new mime types 2.0.13 / 2015-05-31 =================== * deps: mime-db@~1.11.0 - Add new mime types 2.0.12 / 2015-05-19 =================== * deps: mime-db@~1.10.0 - Add new mime types 2.0.11 / 2015-05-05 =================== * deps: mime-db@~1.9.1 - Add new mime types 2.0.10 / 2015-03-13 =================== * deps: mime-db@~1.8.0 - Add new mime types 2.0.9 / 2015-02-09 ================== * deps: mime-db@~1.7.0 - Add new mime types - Community extensions ownership transferred from `node-mime` 2.0.8 / 2015-01-29 ================== * deps: mime-db@~1.6.0 - Add new mime types 2.0.7 / 2014-12-30 ================== * deps: mime-db@~1.5.0 - Add new mime types - Fix various invalid MIME type entries 2.0.6 / 2014-12-30 ================== * deps: mime-db@~1.4.0 - Add new mime types - Fix various invalid MIME type entries - Remove example template MIME types 2.0.5 / 2014-12-29 ================== * deps: mime-db@~1.3.1 - Fix missing extensions 2.0.4 / 2014-12-10 ================== * deps: mime-db@~1.3.0 - Add new mime types 2.0.3 / 2014-11-09 ================== * deps: mime-db@~1.2.0 - Add new mime types 2.0.2 / 2014-09-28 ================== * deps: mime-db@~1.1.0 - Add new mime types - Add additional compressible - Update charsets 2.0.1 / 2014-09-07 ================== * Support Node.js 0.6 2.0.0 / 2014-09-02 ================== * Use `mime-db` * Remove `.define()` 1.0.2 / 2014-08-04 ================== * Set charset=utf-8 for `text/javascript` 1.0.1 / 2014-06-24 ================== * Add `text/jsx` type 1.0.0 / 2014-05-12 ================== * Return `false` for unknown types * Set charset=utf-8 for `application/json` 0.1.0 / 2014-05-02 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/mime-types/README.md","tags":[],"body":"# mime-types [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] The ultimate javascript content-type utility. Similar to [node-mime](https://github.com/broofa/node-mime), except: - __No fallbacks.__ Instead of naively returning the first available type, `mime-types` simply returns `false`, so do `var type = mime.lookup('unrecognized') || 'application/octet-stream'`. - No `new Mime()` business, so you could do `var lookup = require('mime-types').lookup`. - Additional mime types are added such as jade and stylus via [mime-db](https://github.com/jshttp/mime-db) - No `.define()` functionality Otherwise, the API is compatible. ## Install ```sh $ npm install mime-types ``` ## Adding Types All mime types are based on [mime-db](https://github.com/jshttp/mime-db), so open a PR there if you'd like to add mime types. ## API ```js var mime = require('mime-types') ``` All functions return `false` if input is invalid or not found. ### mime.lookup(path) Lookup the content-type associated with a file. ```js mime.lookup('json') // 'application/json' mime.lookup('.md') // 'text/x-markdown' mime.lookup('file.html') // 'text/html' mime.lookup('folder/file.js') // 'application/javascript' mime.lookup('folder/.htaccess') // false mime.lookup('cats') // false ``` ### mime.contentType(type) Create a full content-type header given a content-type or extension. ```js mime.contentType('markdown') // 'text/x-markdown; charset=utf-8' mime.contentType('file.json') // 'application/json; charset=utf-8' // from a full path mime.contentType(path.extname('/path/to/file.json')) // 'application/json; charset=utf-8' ``` ### mime.extension(type) Get the default extension for a content-type. ```js mime.extension('application/octet-stream') // 'bin' ``` ### mime.charset(type) Lookup the implied default charset of a content-type. ```js mime.charset('text/x-markdown') // 'UTF-8' ``` ### var type = mime.types[extension] A map of content-types by extension. ### [extensions...] = mime.extensions[type] A map of extensions by content-type. ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/mime-types.svg [npm-url]: https://npmjs.org/package/mime-types [node-version-image]: https://img.shields.io/node/v/mime-types.svg [node-version-url]: https://nodejs.org/en/download/ [travis-image]: https://img.shields.io/travis/jshttp/mime-types/master.svg [travis-url]: https://travis-ci.org/jshttp/mime-types [coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-types/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/mime-types [downloads-image]: https://img.shields.io/npm/dm/mime-types.svg [downloads-url]: https://npmjs.org/package/mime-types"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/mime-types/node_modules/mime-db/HISTORY.md","tags":[],"body":"1.23.0 / 2016-05-01 =================== * Add `application/efi` * Add `application/vnd.3gpp.sms+xml` * Add `application/vnd.3lightssoftware.imagescal` * Add `application/vnd.coreos.ignition+json` * Add `application/vnd.desmume.movie` * Add `application/vnd.onepager` * Add `application/vnd.vel+json` * Add `text/prs.prop.logic` * Add `video/encaprtp` * Add `video/h265` * Add `video/iso.segment` * Add `video/raptorfec` * Add `video/rtploopback` * Add `video/vnd.radgamettools.bink` * Add `video/vnd.radgamettools.smacker` * Add `video/vp8` * Add extension `.3gpp` to `audio/3gpp` 1.22.0 / 2016-02-15 =================== * Add `application/ppsp-tracker+json` * Add `application/problem+json` * Add `application/problem+xml` * Add `application/vnd.hdt` * Add `application/vnd.ms-printschematicket+xml` * Add `model/vnd.rosette.annotated-data-model` * Add `text/slim` * Add extension `.rng` to `application/xml` * Fix extension of `application/dash+xml` to be `.mpd` * Update primary extension to `.m4a` for `audio/mp4` 1.21.0 / 2016-01-06 =================== * Add `application/emergencycalldata.comment+xml` * Add `application/emergencycalldata.deviceinfo+xml` * Add `application/emergencycalldata.providerinfo+xml` * Add `application/emergencycalldata.serviceinfo+xml` * Add `application/emergencycalldata.subscriberinfo+xml` * Add `application/vnd.filmit.zfc` * Add `application/vnd.google-apps.document` * Add `application/vnd.google-apps.presentation` * Add `application/vnd.google-apps.spreadsheet` * Add `application/vnd.mapbox-vector-tile` * Add `application/vnd.ms-printdevicecapabilities+xml` * Add `application/vnd.ms-windows.devicepairing` * Add `application/vnd.ms-windows.nwprinting.oob` * Add `application/vnd.tml` * Add `audio/evs` 1.20.0 / 2015-11-10 =================== * Add `application/cdni` * Add `application/csvm+json` * Add `application/rfc+xml` * Add `application/vnd.3gpp.access-transfer-events+xml` * Add `application/vnd.3gpp.srvcc-ext+xml` * Add `application/vnd.ms-windows.wsd.oob` * Add `application/vnd.oxli.countgraph` * Add `application/vnd.pagerduty+json` * Add `text/x-suse-ymp` 1.19.0 / 2015-09-17 =================== * Add `application/vnd.3gpp-prose-pc3ch+xml` * Add `application/vnd.3gpp.srvcc-info+xml` * Add `application/vnd.apple.pkpass` * Add `application/vnd.drive+json` 1.18.0 / 2015-09-03 =================== * Add `application/pkcs12` * Add `application/vnd.3gpp-prose+xml` * Add `application/vnd.3gpp.mid-call+xml` * Add `application/vnd.3gpp.state-and-event-info+xml` * Add `application/vnd.anki` * Add `application/vnd.firemonkeys.cloudcell` * Add `application/vnd.openblox.game+xml` * Add `application/vnd.openblox.game-binary` 1.17.0 / 2015-08-13 =================== * Add `application/x-msdos-program` * Add `audio/g711-0` * Add `image/vnd.mozilla.apng` * Add extension `.exe` to `application/x-msdos-program` 1.16.0 / 2015-07-29 =================== * Add `application/vnd.uri-map` 1.15.0 / 2015-07-13 =================== * Add `application/x-httpd-php` 1.14.0 / 2015-06-25 =================== * Add `application/scim+json` * Add `application/vnd.3gpp.ussd+xml` * Add `application/vnd.biopax.rdf+xml` * Add `text/x-processing` 1.13.0 / 2015-06-07 =================== * Add nginx as a source * Add `application/x-cocoa` * Add `application/x-java-archive-diff` * Add `application/x-makeself` * Add `application/x-perl` * Add `application/x-pilot` * Add `application/x-redhat-package-manager` * Add `application/x-sea` * Add `audio/x-m4a` * Add `audio/x-realaudio` * Add `image/x-jng` * Add `text/mathml` 1.12.0 / 2015-06-05 =================== * Add `application/bdoc` * Add `application/vnd.hyperdrive+json` * Add `application/x-bdoc` * Add extension `.rtf` to `text/rtf` 1.11.0 / 2015-05-31 =================== * Add `audio/wav` * Add `audio/wave` * Add extension `.litcoffee` to `text/coffeescript` * Add extension `.sfd-hdstx` to `application/vnd.hydrostatix.sof-data` * Add extension `.n-gage` to `application/vnd.nokia.n-gage.symbian.install` 1.10.0 / 2015-05-19 =================== * Add `application/vnd.balsamiq.bmpr` * Add `application/vnd.microsoft.portable-executable` * Add `application/x-ns-proxy-autoconfig` 1.9.1 / 2015-04-19 ================== * Remove `.json` extension from `application/manifest+json` - This is causing bugs downstream 1.9.0 / 2015-04-19 ================== * Add `application/manifest+json` * Add `application/vnd.micro+json` * Add `image/vnd.zbrush.pcx` * Add `image/x-ms-bmp` 1.8.0 / 2015-03-13 ================== * Add `application/vnd.citationstyles.style+xml` * Add `application/vnd.fastcopy-disk-image` * Add `application/vnd.gov.sk.xmldatacontainer+xml` * Add extension `.jsonld` to `application/ld+json` 1.7.0 / 2015-02-08 ================== * Add `application/vnd.gerber` * Add `application/vnd.msa-disk-image` 1.6.1 / 2015-02-05 ================== * Community extensions ownership transferred from `node-mime` 1.6.0 / 2015-01-29 ================== * Add `application/jose` * Add `application/jose+json` * Add `application/json-seq` * Add `application/jwk+json` * Add `application/jwk-set+json` * Add `application/jwt` * Add `application/rdap+json` * Add `application/vnd.gov.sk.e-form+xml` * Add `application/vnd.ims.imsccv1p3` 1.5.0 / 2014-12-30 ================== * Add `application/vnd.oracle.resource+json` * Fix various invalid MIME type entries - `application/mbox+xml` - `application/oscp-response` - `application/vwg-multiplexed` - `audio/g721` 1.4.0 / 2014-12-21 ================== * Add `application/vnd.ims.imsccv1p2` * Fix various invalid MIME type entries - `application/vnd-acucobol` - `application/vnd-curl` - `application/vnd-dart` - `application/vnd-dxr` - `application/vnd-fdf` - `application/vnd-mif` - `application/vnd-sema` - `application/vnd-wap-wmlc` - `application/vnd.adobe.flash-movie` - `application/vnd.dece-zip` - `application/vnd.dvb_service` - `application/vnd.micrografx-igx` - `application/vnd.sealed-doc` - `application/vnd.sealed-eml` - `application/vnd.sealed-mht` - `application/vnd.sealed-ppt` - `application/vnd.sealed-tiff` - `application/vnd.sealed-xls` - `application/vnd.sealedmedia.softseal-html` - `application/vnd.sealedmedia.softseal-pdf` - `application/vnd.wap-slc` - `application/vnd.wap-wbxml` - `audio/vnd.sealedmedia.softseal-mpeg` - `image/vnd-djvu` - `image/vnd-svf` - `image/vnd-wap-wbmp` - `image/vnd.sealed-png` - `image/vnd.sealedmedia.softseal-gif` - `image/vnd.sealedmedia.softseal-jpg` - `model/vnd-dwf` - `model/vnd.parasolid.transmit-binary` - `model/vnd.parasolid.transmit-text` - `text/vnd-a` - `text/vnd-curl` - `text/vnd.wap-wml` * Remove example template MIME types - `application/example` - `audio/example` - `image/example` - `message/example` - `model/example` - `multipart/example` - `text/example` - `video/example` 1.3.1 / 2014-12-16 ================== * Fix missing extensions - `application/json5` - `text/hjson` 1.3.0 / 2014-12-07 ================== * Add `application/a2l` * Add `application/aml` * Add `application/atfx` * Add `application/atxml` * Add `application/cdfx+xml` * Add `application/dii` * Add `application/json5` * Add `application/lxf` * Add `application/mf4` * Add `application/vnd.apache.thrift.compact` * Add `application/vnd.apache.thrift.json` * Add `application/vnd.coffeescript` * Add `application/vnd.enphase.envoy` * Add `application/vnd.ims.imsccv1p1` * Add `text/csv-schema` * Add `text/hjson` * Add `text/markdown` * Add `text/yaml` 1.2.0 / 2014-11-09 ================== * Add `application/cea` * Add `application/dit` * Add `application/vnd.gov.sk.e-form+zip` * Add `application/vnd.tmd.mediaflex.api+xml` * Type `application/epub+zip` is now IANA-registered 1.1.2 / 2014-10-23 ================== * Rebuild database for `application/x-www-form-urlencoded` change 1.1.1 / 2014-10-20 ================== * Mark `application/x-www-form-urlencoded` as compressible. 1.1.0 / 2014-09-28 ================== * Add `application/font-woff2` 1.0.3 / 2014-09-25 ================== * Fix engine requirement in package 1.0.2 / 2014-09-25 ================== * Add `application/coap-group+json` * Add `application/dcd` * Add `application/vnd.apache.thrift.binary` * Add `image/vnd.tencent.tap` * Mark all JSON-derived types as compressible * Update `text/vtt` data 1.0.1 / 2014-08-30 ================== * Fix extension ordering 1.0.0 / 2014-08-30 ================== * Add `application/atf` * Add `application/merge-patch+json` * Add `multipart/x-mixed-replace` * Add `source: 'apache'` metadata * Add `source: 'iana'` metadata * Remove badly-assumed charset data"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/mime-types/node_modules/mime-db/README.md","tags":[],"body":"# mime-db [![NPM Version][npm-version-image]][npm-url] [![NPM Downloads][npm-downloads-image]][npm-url] [![Node.js Version][node-image]][node-url] [![Build Status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url] This is a database of all mime types. It consists of a single, public JSON file and does not include any logic, allowing it to remain as un-opinionated as possible with an API. It aggregates data from the following sources: - http://www.iana.org/assignments/media-types/media-types.xhtml - http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types - http://hg.nginx.org/nginx/raw-file/default/conf/mime.types ## Installation ```bash npm install mime-db ``` ### Database Download If you're crazy enough to use this in the browser, you can just grab the JSON file using [RawGit](https://rawgit.com/). It is recommended to replace `master` with [a release tag](https://github.com/jshttp/mime-db/tags) as the JSON format may change in the future. ``` https://cdn.rawgit.com/jshttp/mime-db/master/db.json ``` ## Usage ```js var db = require('mime-db'); // grab data on .js files var data = db['application/javascript']; ``` ## Data Structure The JSON file is a map lookup for lowercased mime types. Each mime type has the following properties: - `.source` - where the mime type is defined. If not set, it's probably a custom media type. - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types) - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml) - `nginx` - [nginx media types](http://hg.nginx.org/nginx/raw-file/default/conf/mime.types) - `.extensions[]` - known extensions associated with this mime type. - `.compressible` - whether a file of this type can be gzipped. - `.charset` - the default charset associated with this type, if any. If unknown, every property could be `undefined`. ## Contributing To edit the database, only make PRs against `src/custom.json` or `src/custom-suffix.json`. To update the build, run `npm run build`. ## Adding Custom Media Types The best way to get new media types included in this library is to register them with the IANA. The community registration procedure is outlined in [RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types registered with the IANA are automatically pulled into this library. [npm-version-image]: https://img.shields.io/npm/v/mime-db.svg [npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg [npm-url]: https://npmjs.org/package/mime-db [travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg [travis-url]: https://travis-ci.org/jshttp/mime-db [coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master [node-image]: https://img.shields.io/node/v/mime-db.svg [node-url]: http://nodejs.org/download/"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/parseurl/HISTORY.md","tags":[],"body":"1.3.1 / 2016-01-17 ================== * perf: enable strict mode 1.3.0 / 2014-08-09 ================== * Add `parseurl.original` for parsing `req.originalUrl` with fallback * Return `undefined` if `req.url` is `undefined` 1.2.0 / 2014-07-21 ================== * Cache URLs based on original value * Remove no-longer-needed URL mis-parse work-around * Simplify the \"fast-path\" `RegExp` 1.1.3 / 2014-07-08 ================== * Fix typo 1.1.2 / 2014-07-08 ================== * Seriously fix Node.js 0.8 compatibility 1.1.1 / 2014-07-08 ================== * Fix Node.js 0.8 compatibility 1.1.0 / 2014-07-08 ================== * Incorporate URL href-only parse fast-path 1.0.1 / 2014-03-08 ================== * Add missing `require` 1.0.0 / 2014-03-08 ================== * Genesis from `connect`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/node_modules/parseurl/README.md","tags":[],"body":"# parseurl [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Parse a URL with memoization. ## Install ```bash $ npm install parseurl ``` ## API ```js var parseurl = require('parseurl') ``` ### parseurl(req) Parse the URL of the given request object (looks at the `req.url` property) and return the result. The result is the same as `url.parse` in Node.js core. Calling this function multiple times on the same `req` where `req.url` does not change will return a cached parsed object, rather than parsing again. ### parseurl.original(req) Parse the original URL of the given request object and return the result. This works by trying to parse `req.originalUrl` if it is a string, otherwise parses `req.url`. The result is the same as `url.parse` in Node.js core. Calling this function multiple times on the same `req` where `req.originalUrl` does not change will return a cached parsed object, rather than parsing again. ## Benchmark ```bash $ npm run-script bench > parseurl@1.3.1 bench nodejs-parseurl > node benchmark/index.js > node benchmark/fullurl.js Parsing URL \"http://localhost:8888/foo/bar?user=tj&pet=fluffy\" 1 test completed. 2 tests completed. 3 tests completed. fasturl x 1,290,780 ops/sec ±0.46% (195 runs sampled) nativeurl x 56,401 ops/sec ±0.22% (196 runs sampled) parseurl x 55,231 ops/sec ±0.22% (194 runs sampled) > node benchmark/pathquery.js Parsing URL \"/foo/bar?user=tj&pet=fluffy\" 1 test completed. 2 tests completed. 3 tests completed. fasturl x 1,986,668 ops/sec ±0.27% (190 runs sampled) nativeurl x 98,740 ops/sec ±0.21% (195 runs sampled) parseurl x 2,628,171 ops/sec ±0.36% (195 runs sampled) > node benchmark/samerequest.js Parsing URL \"/foo/bar?user=tj&pet=fluffy\" on same request object 1 test completed. 2 tests completed. 3 tests completed. fasturl x 2,184,468 ops/sec ±0.40% (194 runs sampled) nativeurl x 99,437 ops/sec ±0.71% (194 runs sampled) parseurl x 10,498,005 ops/sec ±0.61% (186 runs sampled) > node benchmark/simplepath.js Parsing URL \"/foo/bar\" 1 test completed. 2 tests completed. 3 tests completed. fasturl x 4,535,825 ops/sec ±0.27% (191 runs sampled) nativeurl x 98,769 ops/sec ±0.54% (191 runs sampled) parseurl x 4,164,865 ops/sec ±0.34% (192 runs sampled) > node benchmark/slash.js Parsing URL \"/\" 1 test completed. 2 tests completed. 3 tests completed. fasturl x 4,908,405 ops/sec ±0.42% (191 runs sampled) nativeurl x 100,945 ops/sec ±0.59% (188 runs sampled) parseurl x 4,333,208 ops/sec ±0.27% (194 runs sampled) ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/parseurl.svg [npm-url]: https://npmjs.org/package/parseurl [node-version-image]: https://img.shields.io/node/v/parseurl.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/pillarjs/parseurl/master.svg [travis-url]: https://travis-ci.org/pillarjs/parseurl [coveralls-image]: https://img.shields.io/coveralls/pillarjs/parseurl/master.svg [coveralls-url]: https://coveralls.io/r/pillarjs/parseurl?branch=master [downloads-image]: https://img.shields.io/npm/dm/parseurl.svg [downloads-url]: https://npmjs.org/package/parseurl"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-index/public/directory.html","tags":[],"body":"listing directory {directory} ~{linked-path} {files}"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/HISTORY.md","tags":[],"body":"1.10.3 / 2016-05-30 =================== * deps: send@0.13.2 - Fix invalid `Content-Type` header when `send.mime.default_type` unset 1.10.2 / 2016-01-19 =================== * deps: parseurl@~1.3.1 - perf: enable strict mode 1.10.1 / 2016-01-16 =================== * deps: escape-html@~1.0.3 - perf: enable strict mode - perf: optimize string replacement - perf: use faster string coercion * deps: send@0.13.1 - deps: depd@~1.1.0 - deps: destroy@~1.0.4 - deps: escape-html@~1.0.3 - deps: range-parser@~1.0.3 1.10.0 / 2015-06-17 =================== * Add `fallthrough` option - Allows declaring this middleware is the final destination - Provides better integration with Express patterns * Fix reading options from options prototype * Improve the default redirect response headers * deps: escape-html@1.0.2 * deps: send@0.13.0 - Allow Node.js HTTP server to set `Date` response header - Fix incorrectly removing `Content-Location` on 304 response - Improve the default redirect response headers - Send appropriate headers on default error response - Use `http-errors` for standard emitted errors - Use `statuses` instead of `http` module for status messages - deps: escape-html@1.0.2 - deps: etag@~1.7.0 - deps: fresh@0.3.0 - deps: on-finished@~2.3.0 - perf: enable strict mode - perf: remove unnecessary array allocations * perf: enable strict mode * perf: remove argument reassignment 1.9.3 / 2015-05-14 ================== * deps: send@0.12.3 - deps: debug@~2.2.0 - deps: depd@~1.0.1 - deps: etag@~1.6.0 - deps: ms@0.7.1 - deps: on-finished@~2.2.1 1.9.2 / 2015-03-14 ================== * deps: send@0.12.2 - Throw errors early for invalid `extensions` or `index` options - deps: debug@~2.1.3 1.9.1 / 2015-02-17 ================== * deps: send@0.12.1 - Fix regression sending zero-length files 1.9.0 / 2015-02-16 ================== * deps: send@0.12.0 - Always read the stat size from the file - Fix mutating passed-in `options` - deps: mime@1.3.4 1.8.1 / 2015-01-20 ================== * Fix redirect loop in Node.js 0.11.14 * deps: send@0.11.1 - Fix root path disclosure 1.8.0 / 2015-01-05 ================== * deps: send@0.11.0 - deps: debug@~2.1.1 - deps: etag@~1.5.1 - deps: ms@0.7.0 - deps: on-finished@~2.2.0 1.7.2 / 2015-01-02 ================== * Fix potential open redirect when mounted at root 1.7.1 / 2014-10-22 ================== * deps: send@0.10.1 - deps: on-finished@~2.1.1 1.7.0 / 2014-10-15 ================== * deps: send@0.10.0 - deps: debug@~2.1.0 - deps: depd@~1.0.0 - deps: etag@~1.5.0 1.6.5 / 2015-02-04 ================== * Fix potential open redirect when mounted at root - Back-ported from v1.7.2 1.6.4 / 2014-10-08 ================== * Fix redirect loop when index file serving disabled 1.6.3 / 2014-09-24 ================== * deps: send@0.9.3 - deps: etag@~1.4.0 1.6.2 / 2014-09-15 ================== * deps: send@0.9.2 - deps: depd@0.4.5 - deps: etag@~1.3.1 - deps: range-parser@~1.0.2 1.6.1 / 2014-09-07 ================== * deps: send@0.9.1 - deps: fresh@0.2.4 1.6.0 / 2014-09-07 ================== * deps: send@0.9.0 - Add `lastModified` option - Use `etag` to generate `ETag` header - deps: debug@~2.0.0 1.5.4 / 2014-09-04 ================== * deps: send@0.8.5 - Fix a path traversal issue when using `root` - Fix malicious path detection for empty string path 1.5.3 / 2014-08-17 ================== * deps: send@0.8.3 1.5.2 / 2014-08-14 ================== * deps: send@0.8.2 - Work around `fd` leak in Node.js 0.10 for `fs.ReadStream` 1.5.1 / 2014-08-09 ================== * Fix parsing of weird `req.originalUrl` values * deps: parseurl@~1.3.0 * deps: utils-merge@1.0.0 1.5.0 / 2014-08-05 ================== * deps: send@0.8.1 - Add `extensions` option 1.4.4 / 2014-08-04 ================== * deps: send@0.7.4 - Fix serving index files without root dir 1.4.3 / 2014-07-29 ================== * deps: send@0.7.3 - Fix incorrect 403 on Windows and Node.js 0.11 1.4.2 / 2014-07-27 ================== * deps: send@0.7.2 - deps: depd@0.4.4 1.4.1 / 2014-07-26 ================== * deps: send@0.7.1 - deps: depd@0.4.3 1.4.0 / 2014-07-21 ================== * deps: parseurl@~1.2.0 - Cache URLs based on original value - Remove no-longer-needed URL mis-parse work-around - Simplify the \"fast-path\" `RegExp` * deps: send@0.7.0 - Add `dotfiles` option - deps: debug@1.0.4 - deps: depd@0.4.2 1.3.2 / 2014-07-11 ================== * deps: send@0.6.0 - Cap `maxAge` value to 1 year - deps: debug@1.0.3 1.3.1 / 2014-07-09 ================== * deps: parseurl@~1.1.3 - faster parsing of href-only URLs 1.3.0 / 2014-06-28 ================== * Add `setHeaders` option * Include HTML link in redirect response * deps: send@0.5.0 - Accept string for `maxAge` (converted by `ms`) 1.2.3 / 2014-06-11 ================== * deps: send@0.4.3 - Do not throw un-catchable error on file open race condition - Use `escape-html` for HTML escaping - deps: debug@1.0.2 - deps: finished@1.2.2 - deps: fresh@0.2.2 1.2.2 / 2014-06-09 ================== * deps: send@0.4.2 - fix \"event emitter leak\" warnings - deps: debug@1.0.1 - deps: finished@1.2.1 1.2.1 / 2014-06-02 ================== * use `escape-html` for escaping * deps: send@0.4.1 - Send `max-age` in `Cache-Control` in correct format 1.2.0 / 2014-05-29 ================== * deps: send@0.4.0 - Calculate ETag with md5 for reduced collisions - Fix wrong behavior when index file matches directory - Ignore stream errors after request ends - Skip directories in index file search - deps: debug@0.8.1 1.1.0 / 2014-04-24 ================== * Accept options directly to `send` module * deps: send@0.3.0 1.0.4 / 2014-04-07 ================== * Resolve relative paths at middleware setup * Use parseurl to parse the URL from request 1.0.3 / 2014-03-20 ================== * Do not rely on connect-like environments 1.0.2 / 2014-03-06 ================== * deps: send@0.2.0 1.0.1 / 2014-03-05 ================== * Add mime export for back-compat 1.0.0 / 2014-03-05 ================== * Genesis from `connect`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/README.md","tags":[],"body":"# serve-static [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Linux Build][travis-image]][travis-url] [![Windows Build][appveyor-image]][appveyor-url] [![Test Coverage][coveralls-image]][coveralls-url] [![Gratipay][gratipay-image]][gratipay-url] ## Install ```sh $ npm install serve-static ``` ## API ```js var serveStatic = require('serve-static') ``` ### serveStatic(root, options) Create a new middleware function to serve files from within a given root directory. The file to serve will be determined by combining `req.url` with the provided root directory. When a file is not found, instead of sending a 404 response, this module will instead call `next()` to move on to the next middleware, allowing for stacking and fall-backs. #### Options ##### dotfiles Set how \"dotfiles\" are treated when encountered. A dotfile is a file or directory that begins with a dot (\".\"). Note this check is done on the path itself without checking if the path actually exists on the disk. If `root` is specified, only the dotfiles above the root are checked (i.e. the root itself can be within a dotfile when set to \"deny\"). - `'allow'` No special treatment for dotfiles. - `'deny'` Deny a request for a dotfile and 403/`next()`. - `'ignore'` Pretend like the dotfile does not exist and 404/`next()`. The default value is similar to `'ignore'`, with the exception that this default will not ignore the files within a directory that begins with a dot. ##### etag Enable or disable etag generation, defaults to true. ##### extensions Set file extension fallbacks. When set, if a file is not found, the given extensions will be added to the file name and search for. The first that exists will be served. Example: `['html', 'htm']`. The default value is `false`. ##### fallthrough Set the middleware to have client errors fall-through as just unhandled requests, otherwise forward a client error. The difference is that client errors like a bad request or a request to a non-existent file will cause this middleware to simply `next()` to your next middleware when this value is `true`. When this value is `false`, these errors (even 404s), will invoke `next(err)`. Typically `true` is desired such that multiple physical directories can be mapped to the same web address or for routes to fill in non-existent files. The value `false` can be used if this middleware is mounted at a path that is designed to be strictly a single file system directory, which allows for short-circuiting 404s for less overhead. This middleware will also reply to all methods. The default value is `true`. ##### index By default this module will send \"index.html\" files in response to a request on a directory. To disable this set `false` or to supply a new index pass a string or an array in preferred order. ##### lastModified Enable or disable `Last-Modified` header, defaults to true. Uses the file system's last modified value. ##### maxAge Provide a max-age in milliseconds for http caching, defaults to 0. This can also be a string accepted by the [ms](https://www.npmjs.org/package/ms#readme) module. ##### redirect Redirect to trailing \"/\" when the pathname is a dir. Defaults to `true`. ##### setHeaders Function to set custom headers on response. Alterations to the headers need to occur synchronously. The function is called as `fn(res, path, stat)`, where the arguments are: - `res` the response object - `path` the file path that is being sent - `stat` the stat object of the file that is being sent ## Examples ### Serve files with vanilla node.js http server ```js var finalhandler = require('finalhandler') var http = require('http') var serveStatic = require('serve-static') // Serve up public/ftp folder var serve = serveStatic('public/ftp', {'index': ['index.html', 'index.htm']}) // Create server var server = http.createServer(function(req, res){ var done = finalhandler(req, res) serve(req, res, done) }) // Listen server.listen(3000) ``` ### Serve all files as downloads ```js var contentDisposition = require('content-disposition') var finalhandler = require('finalhandler') var http = require('http') var serveStatic = require('serve-static') // Serve up public/ftp folder var serve = serveStatic('public/ftp', { 'index': false, 'setHeaders': setHeaders }) // Set header to force download function setHeaders(res, path) { res.setHeader('Content-Disposition', contentDisposition(path)) } // Create server var server = http.createServer(function(req, res){ var done = finalhandler(req, res) serve(req, res, done) }) // Listen server.listen(3000) ``` ### Serving using express #### Simple This is a simple example of using Express. ```js var express = require('express') var serveStatic = require('serve-static') var app = express() app.use(serveStatic('public/ftp', {'index': ['default.html', 'default.htm']})) app.listen(3000) ``` #### Multiple roots This example shows a simple way to search through multiple directories. Files are look for in `public-optimized/` first, then `public/` second as a fallback. ```js var express = require('express') var serveStatic = require('serve-static') var app = express() app.use(serveStatic(__dirname + '/public-optimized')) app.use(serveStatic(__dirname + '/public')) app.listen(3000) ``` #### Different settings for paths This example shows how to set a different max age depending on the served file type. In this example, HTML files are not cached, while everything else is for 1 day. ```js var express = require('express') var serveStatic = require('serve-static') var app = express() app.use(serveStatic(__dirname + '/public', { maxAge: '1d', setHeaders: setCustomCacheControl })) app.listen(3000) function setCustomCacheControl(res, path) { if (serveStatic.mime.lookup(path) === 'text/html') { // Custom Cache-Control for HTML files res.setHeader('Cache-Control', 'public, max-age=0') } } ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/serve-static.svg [npm-url]: https://npmjs.org/package/serve-static [travis-image]: https://img.shields.io/travis/expressjs/serve-static/master.svg?label=linux [travis-url]: https://travis-ci.org/expressjs/serve-static [appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/serve-static/master.svg?label=windows [appveyor-url]: https://ci.appveyor.com/project/dougwilson/serve-static [coveralls-image]: https://img.shields.io/coveralls/expressjs/serve-static/master.svg [coveralls-url]: https://coveralls.io/r/expressjs/serve-static [downloads-image]: https://img.shields.io/npm/dm/serve-static.svg [downloads-url]: https://npmjs.org/package/serve-static [gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg [gratipay-url]: https://gratipay.com/dougwilson/"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/escape-html/Readme.md","tags":[],"body":"# escape-html Escape string for use in HTML ## Example ```js var escape = require('escape-html'); var html = escape('foo & bar'); // -> foo & bar ``` ## Benchmark ``` $ npm run-script bench > escape-html@1.0.3 bench nodejs-escape-html > node benchmark/index.js http_parser@1.0 node@0.10.33 v8@3.14.5.9 ares@1.9.0-DEV uv@0.10.29 zlib@1.2.3 modules@11 openssl@1.0.1j 1 test completed. 2 tests completed. 3 tests completed. no special characters x 19,435,271 ops/sec ±0.85% (187 runs sampled) single special character x 6,132,421 ops/sec ±0.67% (194 runs sampled) many special characters x 3,175,826 ops/sec ±0.65% (193 runs sampled) ``` ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/parseurl/HISTORY.md","tags":[],"body":"1.3.1 / 2016-01-17 ================== * perf: enable strict mode 1.3.0 / 2014-08-09 ================== * Add `parseurl.original` for parsing `req.originalUrl` with fallback * Return `undefined` if `req.url` is `undefined` 1.2.0 / 2014-07-21 ================== * Cache URLs based on original value * Remove no-longer-needed URL mis-parse work-around * Simplify the \"fast-path\" `RegExp` 1.1.3 / 2014-07-08 ================== * Fix typo 1.1.2 / 2014-07-08 ================== * Seriously fix Node.js 0.8 compatibility 1.1.1 / 2014-07-08 ================== * Fix Node.js 0.8 compatibility 1.1.0 / 2014-07-08 ================== * Incorporate URL href-only parse fast-path 1.0.1 / 2014-03-08 ================== * Add missing `require` 1.0.0 / 2014-03-08 ================== * Genesis from `connect`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/parseurl/README.md","tags":[],"body":"# parseurl [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Parse a URL with memoization. ## Install ```bash $ npm install parseurl ``` ## API ```js var parseurl = require('parseurl') ``` ### parseurl(req) Parse the URL of the given request object (looks at the `req.url` property) and return the result. The result is the same as `url.parse` in Node.js core. Calling this function multiple times on the same `req` where `req.url` does not change will return a cached parsed object, rather than parsing again. ### parseurl.original(req) Parse the original URL of the given request object and return the result. This works by trying to parse `req.originalUrl` if it is a string, otherwise parses `req.url`. The result is the same as `url.parse` in Node.js core. Calling this function multiple times on the same `req` where `req.originalUrl` does not change will return a cached parsed object, rather than parsing again. ## Benchmark ```bash $ npm run-script bench > parseurl@1.3.1 bench nodejs-parseurl > node benchmark/index.js > node benchmark/fullurl.js Parsing URL \"http://localhost:8888/foo/bar?user=tj&pet=fluffy\" 1 test completed. 2 tests completed. 3 tests completed. fasturl x 1,290,780 ops/sec ±0.46% (195 runs sampled) nativeurl x 56,401 ops/sec ±0.22% (196 runs sampled) parseurl x 55,231 ops/sec ±0.22% (194 runs sampled) > node benchmark/pathquery.js Parsing URL \"/foo/bar?user=tj&pet=fluffy\" 1 test completed. 2 tests completed. 3 tests completed. fasturl x 1,986,668 ops/sec ±0.27% (190 runs sampled) nativeurl x 98,740 ops/sec ±0.21% (195 runs sampled) parseurl x 2,628,171 ops/sec ±0.36% (195 runs sampled) > node benchmark/samerequest.js Parsing URL \"/foo/bar?user=tj&pet=fluffy\" on same request object 1 test completed. 2 tests completed. 3 tests completed. fasturl x 2,184,468 ops/sec ±0.40% (194 runs sampled) nativeurl x 99,437 ops/sec ±0.71% (194 runs sampled) parseurl x 10,498,005 ops/sec ±0.61% (186 runs sampled) > node benchmark/simplepath.js Parsing URL \"/foo/bar\" 1 test completed. 2 tests completed. 3 tests completed. fasturl x 4,535,825 ops/sec ±0.27% (191 runs sampled) nativeurl x 98,769 ops/sec ±0.54% (191 runs sampled) parseurl x 4,164,865 ops/sec ±0.34% (192 runs sampled) > node benchmark/slash.js Parsing URL \"/\" 1 test completed. 2 tests completed. 3 tests completed. fasturl x 4,908,405 ops/sec ±0.42% (191 runs sampled) nativeurl x 100,945 ops/sec ±0.59% (188 runs sampled) parseurl x 4,333,208 ops/sec ±0.27% (194 runs sampled) ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/parseurl.svg [npm-url]: https://npmjs.org/package/parseurl [node-version-image]: https://img.shields.io/node/v/parseurl.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/pillarjs/parseurl/master.svg [travis-url]: https://travis-ci.org/pillarjs/parseurl [coveralls-image]: https://img.shields.io/coveralls/pillarjs/parseurl/master.svg [coveralls-url]: https://coveralls.io/r/pillarjs/parseurl?branch=master [downloads-image]: https://img.shields.io/npm/dm/parseurl.svg [downloads-url]: https://npmjs.org/package/parseurl"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/HISTORY.md","tags":[],"body":"0.13.2 / 2016-03-05 =================== * Fix invalid `Content-Type` header when `send.mime.default_type` unset 0.13.1 / 2016-01-16 =================== * deps: depd@~1.1.0 - Support web browser loading - perf: enable strict mode * deps: destroy@~1.0.4 - perf: enable strict mode * deps: escape-html@~1.0.3 - perf: enable strict mode - perf: optimize string replacement - perf: use faster string coercion * deps: range-parser@~1.0.3 - perf: enable strict mode 0.13.0 / 2015-06-16 =================== * Allow Node.js HTTP server to set `Date` response header * Fix incorrectly removing `Content-Location` on 304 response * Improve the default redirect response headers * Send appropriate headers on default error response * Use `http-errors` for standard emitted errors * Use `statuses` instead of `http` module for status messages * deps: escape-html@1.0.2 * deps: etag@~1.7.0 - Improve stat performance by removing hashing * deps: fresh@0.3.0 - Add weak `ETag` matching support * deps: on-finished@~2.3.0 - Add defined behavior for HTTP `CONNECT` requests - Add defined behavior for HTTP `Upgrade` requests - deps: ee-first@1.1.1 * perf: enable strict mode * perf: remove unnecessary array allocations 0.12.3 / 2015-05-13 =================== * deps: debug@~2.2.0 - deps: ms@0.7.1 * deps: depd@~1.0.1 * deps: etag@~1.6.0 - Improve support for JXcore - Support \"fake\" stats objects in environments without `fs` * deps: ms@0.7.1 - Prevent extraordinarily long inputs * deps: on-finished@~2.2.1 0.12.2 / 2015-03-13 =================== * Throw errors early for invalid `extensions` or `index` options * deps: debug@~2.1.3 - Fix high intensity foreground color for bold - deps: ms@0.7.0 0.12.1 / 2015-02-17 =================== * Fix regression sending zero-length files 0.12.0 / 2015-02-16 =================== * Always read the stat size from the file * Fix mutating passed-in `options` * deps: mime@1.3.4 0.11.1 / 2015-01-20 =================== * Fix `root` path disclosure 0.11.0 / 2015-01-05 =================== * deps: debug@~2.1.1 * deps: etag@~1.5.1 - deps: crc@3.2.1 * deps: ms@0.7.0 - Add `milliseconds` - Add `msecs` - Add `secs` - Add `mins` - Add `hrs` - Add `yrs` * deps: on-finished@~2.2.0 0.10.1 / 2014-10-22 =================== * deps: on-finished@~2.1.1 - Fix handling of pipelined requests 0.10.0 / 2014-10-15 =================== * deps: debug@~2.1.0 - Implement `DEBUG_FD` env variable support * deps: depd@~1.0.0 * deps: etag@~1.5.0 - Improve string performance - Slightly improve speed for weak ETags over 1KB 0.9.3 / 2014-09-24 ================== * deps: etag@~1.4.0 - Support \"fake\" stats objects 0.9.2 / 2014-09-15 ================== * deps: depd@0.4.5 * deps: etag@~1.3.1 * deps: range-parser@~1.0.2 0.9.1 / 2014-09-07 ================== * deps: fresh@0.2.4 0.9.0 / 2014-09-07 ================== * Add `lastModified` option * Use `etag` to generate `ETag` header * deps: debug@~2.0.0 0.8.5 / 2014-09-04 ================== * Fix malicious path detection for empty string path 0.8.4 / 2014-09-04 ================== * Fix a path traversal issue when using `root` 0.8.3 / 2014-08-16 ================== * deps: destroy@1.0.3 - renamed from dethroy * deps: on-finished@2.1.0 0.8.2 / 2014-08-14 ================== * Work around `fd` leak in Node.js 0.10 for `fs.ReadStream` * deps: dethroy@1.0.2 0.8.1 / 2014-08-05 ================== * Fix `extensions` behavior when file already has extension 0.8.0 / 2014-08-05 ================== * Add `extensions` option 0.7.4 / 2014-08-04 ================== * Fix serving index files without root dir 0.7.3 / 2014-07-29 ================== * Fix incorrect 403 on Windows and Node.js 0.11 0.7.2 / 2014-07-27 ================== * deps: depd@0.4.4 - Work-around v8 generating empty stack traces 0.7.1 / 2014-07-26 ================== * deps: depd@0.4.3 - Fix exception when global `Error.stackTraceLimit` is too low 0.7.0 / 2014-07-20 ================== * Deprecate `hidden` option; use `dotfiles` option * Add `dotfiles` option * deps: debug@1.0.4 * deps: depd@0.4.2 - Add `TRACE_DEPRECATION` environment variable - Remove non-standard grey color from color output - Support `--no-deprecation` argument - Support `--trace-deprecation` argument 0.6.0 / 2014-07-11 ================== * Deprecate `from` option; use `root` option * Deprecate `send.etag()` -- use `etag` in `options` * Deprecate `send.hidden()` -- use `hidden` in `options` * Deprecate `send.index()` -- use `index` in `options` * Deprecate `send.maxage()` -- use `maxAge` in `options` * Deprecate `send.root()` -- use `root` in `options` * Cap `maxAge` value to 1 year * deps: debug@1.0.3 - Add support for multiple wildcards in namespaces 0.5.0 / 2014-06-28 ================== * Accept string for `maxAge` (converted by `ms`) * Add `headers` event * Include link in default redirect response * Use `EventEmitter.listenerCount` to count listeners 0.4.3 / 2014-06-11 ================== * Do not throw un-catchable error on file open race condition * Use `escape-html` for HTML escaping * deps: debug@1.0.2 - fix some debugging output colors on node.js 0.8 * deps: finished@1.2.2 * deps: fresh@0.2.2 0.4.2 / 2014-06-09 ================== * fix \"event emitter leak\" warnings * deps: debug@1.0.1 * deps: finished@1.2.1 0.4.1 / 2014-06-02 ================== * Send `max-age` in `Cache-Control` in correct format 0.4.0 / 2014-05-27 ================== * Calculate ETag with md5 for reduced collisions * Fix wrong behavior when index file matches directory * Ignore stream errors after request ends - Goodbye `EBADF, read` * Skip directories in index file search * deps: debug@0.8.1 0.3.0 / 2014-04-24 ================== * Fix sending files with dots without root set * Coerce option types * Accept API options in options object * Set etags to \"weak\" * Include file path in etag * Make \"Can't set headers after they are sent.\" catchable * Send full entity-body for multi range requests * Default directory access to 403 when index disabled * Support multiple index paths * Support \"If-Range\" header * Control whether to generate etags * deps: mime@1.2.11 0.2.0 / 2014-01-29 ================== * update range-parser and fresh 0.1.4 / 2013-08-11 ================== * update fresh 0.1.3 / 2013-07-08 ================== * Revert \"Fix fd leak\" 0.1.2 / 2013-07-03 ================== * Fix fd leak 0.1.0 / 2012-08-25 ================== * add options parameter to send() that is passed to fs.createReadStream() [kanongil] 0.0.4 / 2012-08-16 ================== * allow custom \"Accept-Ranges\" definition 0.0.3 / 2012-07-16 ================== * fix normalization of the root directory. Closes #3 0.0.2 / 2012-07-09 ================== * add passing of req explicitly for now (YUCK) 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/README.md","tags":[],"body":"# send [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Linux Build][travis-image]][travis-url] [![Windows Build][appveyor-image]][appveyor-url] [![Test Coverage][coveralls-image]][coveralls-url] [![Gratipay][gratipay-image]][gratipay-url] Send is a library for streaming files from the file system as a http response supporting partial responses (Ranges), conditional-GET negotiation, high test coverage, and granular events which may be leveraged to take appropriate actions in your application or framework. Looking to serve up entire folders mapped to URLs? Try [serve-static](https://www.npmjs.org/package/serve-static). ## Installation ```bash $ npm install send ``` ## API ```js var send = require('send') ``` ### send(req, path, [options]) Create a new `SendStream` for the given path to send to a `res`. The `req` is the Node.js HTTP request and the `path` is a urlencoded path to send (urlencoded, not the actual file-system path). #### Options ##### dotfiles Set how \"dotfiles\" are treated when encountered. A dotfile is a file or directory that begins with a dot (\".\"). Note this check is done on the path itself without checking if the path actually exists on the disk. If `root` is specified, only the dotfiles above the root are checked (i.e. the root itself can be within a dotfile when when set to \"deny\"). - `'allow'` No special treatment for dotfiles. - `'deny'` Send a 403 for any request for a dotfile. - `'ignore'` Pretend like the dotfile does not exist and 404. The default value is _similar_ to `'ignore'`, with the exception that this default will not ignore the files within a directory that begins with a dot, for backward-compatibility. ##### end Byte offset at which the stream ends, defaults to the length of the file minus 1. The end is inclusive in the stream, meaning `end: 3` will include the 4th byte in the stream. ##### etag Enable or disable etag generation, defaults to true. ##### extensions If a given file doesn't exist, try appending one of the given extensions, in the given order. By default, this is disabled (set to `false`). An example value that will serve extension-less HTML files: `['html', 'htm']`. This is skipped if the requested file already has an extension. ##### index By default send supports \"index.html\" files, to disable this set `false` or to supply a new index pass a string or an array in preferred order. ##### lastModified Enable or disable `Last-Modified` header, defaults to true. Uses the file system's last modified value. ##### maxAge Provide a max-age in milliseconds for http caching, defaults to 0. This can also be a string accepted by the [ms](https://www.npmjs.org/package/ms#readme) module. ##### root Serve files relative to `path`. ##### start Byte offset at which the stream starts, defaults to 0. The start is inclusive, meaning `start: 2` will include the 3rd byte in the stream. #### Events The `SendStream` is an event emitter and will emit the following events: - `error` an error occurred `(err)` - `directory` a directory was requested - `file` a file was requested `(path, stat)` - `headers` the headers are about to be set on a file `(res, path, stat)` - `stream` file streaming has started `(stream)` - `end` streaming has completed #### .pipe The `pipe` method is used to pipe the response into the Node.js HTTP response object, typically `send(req, path, options).pipe(res)`. ### .mime The `mime` export is the global instance of of the [`mime` npm module](https://www.npmjs.com/package/mime). This is used to configure the MIME types that are associated with file extensions as well as other options for how to resolve the MIME type of a file (like the default type to use for an unknown file extension). ## Error-handling By default when no `error` listeners are present an automatic response will be made, otherwise you have full control over the response, aka you may show a 5xx page etc. ## Caching It does _not_ perform internal caching, you should use a reverse proxy cache such as Varnish for this, or those fancy things called CDNs. If your application is small enough that it would benefit from single-node memory caching, it's small enough that it does not need caching at all ;). ## Debugging To enable `debug()` instrumentation output export __DEBUG__: ``` $ DEBUG=send node app ``` ## Running tests ``` $ npm install $ npm test ``` ## Examples ### Small example ```js var http = require('http'); var send = require('send'); var app = http.createServer(function(req, res){ send(req, req.url).pipe(res); }).listen(3000); ``` ### Custom file types ```js var http = require('http'); var send = require('send'); // Default unknown types to text/plain send.mime.default_type = 'text/plain'; // Add a custom type send.mime.define({ 'application/x-my-type': ['x-mt', 'x-mtt'] }); var app = http.createServer(function(req, res){ send(req, req.url).pipe(res); }).listen(3000); ``` ### Serving from a root directory with custom error-handling ```js var http = require('http'); var send = require('send'); var url = require('url'); var app = http.createServer(function(req, res){ // your custom error-handling logic: function error(err) { res.statusCode = err.status || 500; res.end(err.message); } // your custom headers function headers(res, path, stat) { // serve all files for download res.setHeader('Content-Disposition', 'attachment'); } // your custom directory handling logic: function redirect() { res.statusCode = 301; res.setHeader('Location', req.url + '/'); res.end('Redirecting to ' + req.url + '/'); } // transfer arbitrary files from within // /www/example.com/public/* send(req, url.parse(req.url).pathname, {root: '/www/example.com/public'}) .on('error', error) .on('directory', redirect) .on('headers', headers) .pipe(res); }).listen(3000); ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/send.svg [npm-url]: https://npmjs.org/package/send [travis-image]: https://img.shields.io/travis/pillarjs/send/master.svg?label=linux [travis-url]: https://travis-ci.org/pillarjs/send [appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/send/master.svg?label=windows [appveyor-url]: https://ci.appveyor.com/project/dougwilson/send [coveralls-image]: https://img.shields.io/coveralls/pillarjs/send/master.svg [coveralls-url]: https://coveralls.io/r/pillarjs/send?branch=master [downloads-image]: https://img.shields.io/npm/dm/send.svg [downloads-url]: https://npmjs.org/package/send [gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg [gratipay-url]: https://www.gratipay.com/dougwilson/"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/debug/History.md","tags":[],"body":"2.2.0 / 2015-05-09 ================== * package: update \"ms\" to v0.7.1 (#202, @dougwilson) * README: add logging to file example (#193, @DanielOchoa) * README: fixed a typo (#191, @amir-s) * browser: expose `storage` (#190, @stephenmathieson) * Makefile: add a `distclean` target (#189, @stephenmathieson) 2.1.3 / 2015-03-13 ================== * Updated stdout/stderr example (#186) * Updated example/stdout.js to match debug current behaviour * Renamed example/stderr.js to stdout.js * Update Readme.md (#184) * replace high intensity foreground color for bold (#182, #183) 2.1.2 / 2015-03-01 ================== * dist: recompile * update \"ms\" to v0.7.0 * package: update \"browserify\" to v9.0.3 * component: fix \"ms.js\" repo location * changed bower package name * updated documentation about using debug in a browser * fix: security error on safari (#167, #168, @yields) 2.1.1 / 2014-12-29 ================== * browser: use `typeof` to check for `console` existence * browser: check for `console.log` truthiness (fix IE 8/9) * browser: add support for Chrome apps * Readme: added Windows usage remarks * Add `bower.json` to properly support bower install 2.1.0 / 2014-10-15 ================== * node: implement `DEBUG_FD` env variable support * package: update \"browserify\" to v6.1.0 * package: add \"license\" field to package.json (#135, @panuhorsmalahti) 2.0.0 / 2014-09-01 ================== * package: update \"browserify\" to v5.11.0 * node: use stderr rather than stdout for logging (#29, @stephenmathieson) 1.0.4 / 2014-07-15 ================== * dist: recompile * example: remove `console.info()` log usage * example: add \"Content-Type\" UTF-8 header to browser example * browser: place %c marker after the space character * browser: reset the \"content\" color via `color: inherit` * browser: add colors support for Firefox >= v31 * debug: prefer an instance `log()` function over the global one (#119) * Readme: update documentation about styled console logs for FF v31 (#116, @wryk) 1.0.3 / 2014-07-09 ================== * Add support for multiple wildcards in namespaces (#122, @seegno) * browser: fix lint 1.0.2 / 2014-06-10 ================== * browser: update color palette (#113, @gscottolson) * common: make console logging function configurable (#108, @timoxley) * node: fix %o colors on old node <= 0.8.x * Makefile: find node path using shell/which (#109, @timoxley) 1.0.1 / 2014-06-06 ================== * browser: use `removeItem()` to clear localStorage * browser, node: don't set DEBUG if namespaces is undefined (#107, @leedm777) * package: add \"contributors\" section * node: fix comment typo * README: list authors 1.0.0 / 2014-06-04 ================== * make ms diff be global, not be scope * debug: ignore empty strings in enable() * node: make DEBUG_COLORS able to disable coloring * *: export the `colors` array * npmignore: don't publish the `dist` dir * Makefile: refactor to use browserify * package: add \"browserify\" as a dev dependency * Readme: add Web Inspector Colors section * node: reset terminal color for the debug content * node: map \"%o\" to `util.inspect()` * browser: map \"%j\" to `JSON.stringify()` * debug: add custom \"formatters\" * debug: use \"ms\" module for humanizing the diff * Readme: add \"bash\" syntax highlighting * browser: add Firebug color support * browser: add colors for WebKit browsers * node: apply log to `console` * rewrite: abstract common logic for Node & browsers * add .jshintrc file 0.8.1 / 2014-04-14 ================== * package: re-add the \"component\" section 0.8.0 / 2014-03-30 ================== * add `enable()` method for nodejs. Closes #27 * change from stderr to stdout * remove unnecessary index.js file 0.7.4 / 2013-11-13 ================== * remove \"browserify\" key from package.json (fixes something in browserify) 0.7.3 / 2013-10-30 ================== * fix: catch localStorage security error when cookies are blocked (Chrome) * add debug(err) support. Closes #46 * add .browser prop to package.json. Closes #42 0.7.2 / 2013-02-06 ================== * fix package.json * fix: Mobile Safari (private mode) is broken with debug * fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript 0.7.1 / 2013-02-05 ================== * add repository URL to package.json * add DEBUG_COLORED to force colored output * add browserify support * fix component. Closes #24 0.7.0 / 2012-05-04 ================== * Added .component to package.json * Added debug.component.js build 0.6.0 / 2012-03-16 ================== * Added support for \"-\" prefix in DEBUG [Vinay Pulim] * Added `.enabled` flag to the node version [TooTallNate] 0.5.0 / 2012-02-02 ================== * Added: humanize diffs. Closes #8 * Added `debug.disable()` to the CS variant * Removed padding. Closes #10 * Fixed: persist client-side variant again. Closes #9 0.4.0 / 2012-02-01 ================== * Added browser variant support for older browsers [TooTallNate] * Added `debug.enable('project:*')` to browser variant [TooTallNate] * Added padding to diff (moved it to the right) 0.3.0 / 2012-01-26 ================== * Added millisecond diff when isatty, otherwise UTC string 0.2.0 / 2012-01-22 ================== * Added wildcard support 0.1.0 / 2011-12-02 ================== * Added: remove colors unless stderr isatty [TooTallNate] 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/debug/Readme.md","tags":[],"body":"# debug tiny node.js debugging utility modelled after node core's debugging technique. ## Installation ```bash $ npm install debug ``` ## Usage With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you're used to work fine. A unique color is selected per-function for visibility. Example _app.js_: ```js var debug = require('debug')('http') , http = require('http') , name = 'My App'; // fake app debug('booting %s', name); http.createServer(function(req, res){ debug(req.method + ' ' + req.url); res.end('hello\\n'); }).listen(3000, function(){ debug('listening'); }); // fake worker of some kind require('./worker'); ``` Example _worker.js_: ```js var debug = require('debug')('worker'); setInterval(function(){ debug('doing some work'); }, 1000); ``` The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png) ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png) #### Windows note On Windows the environment variable is set using the `set` command. ```cmd set DEBUG=*,-not_this ``` Then, run the program to be debugged as usual. ## Millisecond diff When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls. ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png) When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below: ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png) ## Conventions If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\". ## Wildcards The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`. You can also exclude specific debuggers by prefixing them with a \"-\" character. For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\". ## Browser support Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include: ```js window.myDebug = require(\"debug\"); ``` (\"debug\" is a global object in the browser so we give this object a different name.) When your page is open in the browser, type the following in the console: ```js myDebug.enable(\"worker:*\") ``` Refresh the page. Debug output will continue to be sent to the console until it is disabled by typing `myDebug.disable()` in the console. ```js a = debug('worker:a'); b = debug('worker:b'); setInterval(function(){ a('doing some work'); }, 1000); setInterval(function(){ b('doing some work'); }, 1200); ``` #### Web Inspector Colors Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting option. These are WebKit web inspectors, Firefox ([since version 31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/)) and the Firebug plugin for Firefox (any version). Colored output looks something like: ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png) ### stderr vs stdout You can set an alternative logging method per-namespace by overriding the `log` method on a per-namespace or globally: Example _stdout.js_: ```js var debug = require('debug'); var error = debug('app:error'); // by default stderr is used error('goes to stderr!'); var log = debug('app:log'); // set this namespace to log via console.log log.log = console.log.bind(console); // don't forget to bind to console! log('goes to stdout'); error('still goes to stderr!'); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error('now goes to stdout via console.info'); log('still goes to stdout, but via console.info now'); ``` ### Save debug output to a file You can save all debug statements to a file by piping them. Example: ```bash $ DEBUG_FD=3 node your-app.js 3> whatever.log ``` ## Authors - TJ Holowaychuk - Nathan Rajlich ## License (The MIT License) Copyright (c) 2014 TJ Holowaychuk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/depd/History.md","tags":[],"body":"1.1.0 / 2015-09-14 ================== * Enable strict mode in more places * Support io.js 3.x * Support io.js 2.x * Support web browser loading - Requires bundler like Browserify or webpack 1.0.1 / 2015-04-07 ================== * Fix `TypeError`s when under `'use strict'` code * Fix useless type name on auto-generated messages * Support io.js 1.x * Support Node.js 0.12 1.0.0 / 2014-09-17 ================== * No changes 0.4.5 / 2014-09-09 ================== * Improve call speed to functions using the function wrapper * Support Node.js 0.6 0.4.4 / 2014-07-27 ================== * Work-around v8 generating empty stack traces 0.4.3 / 2014-07-26 ================== * Fix exception when global `Error.stackTraceLimit` is too low 0.4.2 / 2014-07-19 ================== * Correct call site for wrapped functions and properties 0.4.1 / 2014-07-19 ================== * Improve automatic message generation for function properties 0.4.0 / 2014-07-19 ================== * Add `TRACE_DEPRECATION` environment variable * Remove non-standard grey color from color output * Support `--no-deprecation` argument * Support `--trace-deprecation` argument * Support `deprecate.property(fn, prop, message)` 0.3.0 / 2014-06-16 ================== * Add `NO_DEPRECATION` environment variable 0.2.0 / 2014-06-15 ================== * Add `deprecate.property(obj, prop, message)` * Remove `supports-color` dependency for node.js 0.8 0.1.0 / 2014-06-15 ================== * Add `deprecate.function(fn, message)` * Add `process.on('deprecation', fn)` emitter * Automatically generate message when omitted from `deprecate()` 0.0.1 / 2014-06-15 ================== * Fix warning for dynamic calls at singe call site 0.0.0 / 2014-06-15 ================== * Initial implementation"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/depd/Readme.md","tags":[],"body":"# depd [![NPM Version][npm-version-image]][npm-url] [![NPM Downloads][npm-downloads-image]][npm-url] [![Node.js Version][node-image]][node-url] [![Linux Build][travis-image]][travis-url] [![Windows Build][appveyor-image]][appveyor-url] [![Coverage Status][coveralls-image]][coveralls-url] [![Gratipay][gratipay-image]][gratipay-url] Deprecate all the things > With great modules comes great responsibility; mark things deprecated! ## Install This module is installed directly using `npm`: ```sh $ npm install depd ``` This module can also be bundled with systems like [Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/), though by default this module will alter it's API to no longer display or track deprecations. ## API ```js var deprecate = require('depd')('my-module') ``` This library allows you to display deprecation messages to your users. This library goes above and beyond with deprecation warnings by introspection of the call stack (but only the bits that it is interested in). Instead of just warning on the first invocation of a deprecated function and never again, this module will warn on the first invocation of a deprecated function per unique call site, making it ideal to alert users of all deprecated uses across the code base, rather than just whatever happens to execute first. The deprecation warnings from this module also include the file and line information for the call into the module that the deprecated function was in. **NOTE** this library has a similar interface to the `debug` module, and this module uses the calling file to get the boundary for the call stacks, so you should always create a new `deprecate` object in each file and not within some central file. ### depd(namespace) Create a new deprecate function that uses the given namespace name in the messages and will display the call site prior to the stack entering the file this function was called from. It is highly suggested you use the name of your module as the namespace. ### deprecate(message) Call this function from deprecated code to display a deprecation message. This message will appear once per unique caller site. Caller site is the first call site in the stack in a different file from the caller of this function. If the message is omitted, a message is generated for you based on the site of the `deprecate()` call and will display the name of the function called, similar to the name displayed in a stack trace. ### deprecate.function(fn, message) Call this function to wrap a given function in a deprecation message on any call to the function. An optional message can be supplied to provide a custom message. ### deprecate.property(obj, prop, message) Call this function to wrap a given property on object in a deprecation message on any accessing or setting of the property. An optional message can be supplied to provide a custom message. The method must be called on the object where the property belongs (not inherited from the prototype). If the property is a data descriptor, it will be converted to an accessor descriptor in order to display the deprecation message. ### process.on('deprecation', fn) This module will allow easy capturing of deprecation errors by emitting the errors as the type \"deprecation\" on the global `process`. If there are no listeners for this type, the errors are written to STDERR as normal, but if there are any listeners, nothing will be written to STDERR and instead only emitted. From there, you can write the errors in a different format or to a logging source. The error represents the deprecation and is emitted only once with the same rules as writing to STDERR. The error has the following properties: - `message` - This is the message given by the library - `name` - This is always `'DeprecationError'` - `namespace` - This is the namespace the deprecation came from - `stack` - This is the stack of the call to the deprecated thing Example `error.stack` output: ``` DeprecationError: my-cool-module deprecated oldfunction at Object. ([eval]-wrapper:6:22) at Module._compile (module.js:456:26) at evalScript (node.js:532:25) at startup (node.js:80:7) at node.js:902:3 ``` ### process.env.NO_DEPRECATION As a user of modules that are deprecated, the environment variable `NO_DEPRECATION` is provided as a quick solution to silencing deprecation warnings from being output. The format of this is similar to that of `DEBUG`: ```sh $ NO_DEPRECATION=my-module,othermod node app.js ``` This will suppress deprecations from being output for \"my-module\" and \"othermod\". The value is a list of comma-separated namespaces. To suppress every warning across all namespaces, use the value `*` for a namespace. Providing the argument `--no-deprecation` to the `node` executable will suppress all deprecations (only available in Node.js 0.8 or higher). **NOTE** This will not suppress the deperecations given to any \"deprecation\" event listeners, just the output to STDERR. ### process.env.TRACE_DEPRECATION As a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION` is provided as a solution to getting more detailed location information in deprecation warnings by including the entire stack trace. The format of this is the same as `NO_DEPRECATION`: ```sh $ TRACE_DEPRECATION=my-module,othermod node app.js ``` This will include stack traces for deprecations being output for \"my-module\" and \"othermod\". The value is a list of comma-separated namespaces. To trace every warning across all namespaces, use the value `*` for a namespace. Providing the argument `--trace-deprecation` to the `node` executable will trace all deprecations (only available in Node.js 0.8 or higher). **NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`. ## Display ![message](files/message.png) When a user calls a function in your library that you mark deprecated, they will see the following written to STDERR (in the given colors, similar colors and layout to the `debug` module): ``` bright cyan bright yellow | | reset cyan | | | | ▼ ▼ ▼ ▼ my-cool-module deprecated oldfunction [eval]-wrapper:6:22 ▲ ▲ ▲ ▲ | | | | namespace | | location of mycoolmod.oldfunction() call | deprecation message the word \"deprecated\" ``` If the user redirects their STDERR to a file or somewhere that does not support colors, they see (similar layout to the `debug` module): ``` Sun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22 ▲ ▲ ▲ ▲ ▲ | | | | | timestamp of message namespace | | location of mycoolmod.oldfunction() call | deprecation message the word \"deprecated\" ``` ## Examples ### Deprecating all calls to a function This will display a deprecated message about \"oldfunction\" being deprecated from \"my-module\" on STDERR. ```js var deprecate = require('depd')('my-cool-module') // message automatically derived from function name // Object.oldfunction exports.oldfunction = deprecate.function(function oldfunction() { // all calls to function are deprecated }) // specific message exports.oldfunction = deprecate.function(function () { // all calls to function are deprecated }, 'oldfunction') ``` ### Conditionally deprecating a function call This will display a deprecated message about \"weirdfunction\" being deprecated from \"my-module\" on STDERR when called with less than 2 arguments. ```js var deprecate = require('depd')('my-cool-module') exports.weirdfunction = function () { if (arguments.length = 0.10') ``` ## License [MIT](LICENSE) [npm-version-image]: https://img.shields.io/npm/v/depd.svg [npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg [npm-url]: https://npmjs.org/package/depd [travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux [travis-url]: https://travis-ci.org/dougwilson/nodejs-depd [appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows [appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd [coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg [coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master [node-image]: https://img.shields.io/node/v/depd.svg [node-url]: http://nodejs.org/download/ [gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg [gratipay-url]: https://www.gratipay.com/dougwilson/"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/destroy/README.md","tags":[],"body":"# Destroy [![NPM version][npm-image]][npm-url] [![Build status][travis-image]][travis-url] [![Test coverage][coveralls-image]][coveralls-url] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url] [![Gittip][gittip-image]][gittip-url] Destroy a stream. This module is meant to ensure a stream gets destroyed, handling different APIs and Node.js bugs. ## API ```js var destroy = require('destroy') ``` ### destroy(stream) Destroy the given stream. In most cases, this is identical to a simple `stream.destroy()` call. The rules are as follows for a given stream: 1. If the `stream` is an instance of `ReadStream`, then call `stream.destroy()` and add a listener to the `open` event to call `stream.close()` if it is fired. This is for a Node.js bug that will leak a file descriptor if `.destroy()` is called before `open`. 2. If the `stream` is not an instance of `Stream`, then nothing happens. 3. If the `stream` has a `.destroy()` method, then call it. The function returns the `stream` passed in as the argument. ## Example ```js var destroy = require('destroy') var fs = require('fs') var stream = fs.createReadStream('package.json') // ... and later destroy(stream) ``` [npm-image]: https://img.shields.io/npm/v/destroy.svg?style=flat-square [npm-url]: https://npmjs.org/package/destroy [github-tag]: http://img.shields.io/github/tag/stream-utils/destroy.svg?style=flat-square [github-url]: https://github.com/stream-utils/destroy/tags [travis-image]: https://img.shields.io/travis/stream-utils/destroy.svg?style=flat-square [travis-url]: https://travis-ci.org/stream-utils/destroy [coveralls-image]: https://img.shields.io/coveralls/stream-utils/destroy.svg?style=flat-square [coveralls-url]: https://coveralls.io/r/stream-utils/destroy?branch=master [license-image]: http://img.shields.io/npm/l/destroy.svg?style=flat-square [license-url]: LICENSE.md [downloads-image]: http://img.shields.io/npm/dm/destroy.svg?style=flat-square [downloads-url]: https://npmjs.org/package/destroy [gittip-image]: https://img.shields.io/gittip/jonathanong.svg?style=flat-square [gittip-url]: https://www.gittip.com/jonathanong/"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/etag/HISTORY.md","tags":[],"body":"1.7.0 / 2015-06-08 ================== * Always include entity length in ETags for hash length extensions * Generate non-Stats ETags using MD5 only (no longer CRC32) * Improve stat performance by removing hashing * Remove base64 padding in ETags to shorten * Use MD5 instead of MD4 in weak ETags over 1KB 1.6.0 / 2015-05-10 ================== * Improve support for JXcore * Remove requirement of `atime` in the stats object * Support \"fake\" stats objects in environments without `fs` 1.5.1 / 2014-11-19 ================== * deps: crc@3.2.1 - Minor fixes 1.5.0 / 2014-10-14 ================== * Improve string performance * Slightly improve speed for weak ETags over 1KB 1.4.0 / 2014-09-21 ================== * Support \"fake\" stats objects * Support Node.js 0.6 1.3.1 / 2014-09-14 ================== * Use the (new and improved) `crc` for crc32 1.3.0 / 2014-08-29 ================== * Default strings to strong ETags * Improve speed for weak ETags over 1KB 1.2.1 / 2014-08-29 ================== * Use the (much faster) `buffer-crc32` for crc32 1.2.0 / 2014-08-24 ================== * Add support for file stat objects 1.1.0 / 2014-08-24 ================== * Add fast-path for empty entity * Add weak ETag generation * Shrink size of generated ETags 1.0.1 / 2014-08-24 ================== * Fix behavior of string containing Unicode 1.0.0 / 2014-05-18 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/etag/README.md","tags":[],"body":"# etag [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Create simple ETags ## Installation ```sh $ npm install etag ``` ## API ```js var etag = require('etag') ``` ### etag(entity, [options]) Generate a strong ETag for the given entity. This should be the complete body of the entity. Strings, `Buffer`s, and `fs.Stats` are accepted. By default, a strong ETag is generated except for `fs.Stats`, which will generate a weak ETag (this can be overwritten by `options.weak`). ```js res.setHeader('ETag', etag(body)) ``` #### Options `etag` accepts these properties in the options object. ##### weak Specifies if the generated ETag will include the weak validator mark (that is, the leading `W/`). The actual entity tag is the same. The default value is `false`, unless the `entity` is `fs.Stats`, in which case it is `true`. ## Testing ```sh $ npm test ``` ## Benchmark ```bash $ npm run-script bench > etag@1.6.0 bench nodejs-etag > node benchmark/index.js http_parser@1.0 node@0.10.33 v8@3.14.5.9 ares@1.9.0-DEV uv@0.10.29 zlib@1.2.3 modules@11 openssl@1.0.1j > node benchmark/body0-100b.js 100B body 1 test completed. 2 tests completed. 3 tests completed. 4 tests completed. * buffer - strong x 289,198 ops/sec ±1.09% (190 runs sampled) * buffer - weak x 287,838 ops/sec ±0.91% (189 runs sampled) * string - strong x 284,586 ops/sec ±1.05% (192 runs sampled) * string - weak x 287,439 ops/sec ±0.82% (192 runs sampled) > node benchmark/body1-1kb.js 1KB body 1 test completed. 2 tests completed. 3 tests completed. 4 tests completed. * buffer - strong x 212,423 ops/sec ±0.75% (193 runs sampled) * buffer - weak x 211,871 ops/sec ±0.74% (194 runs sampled) string - strong x 205,291 ops/sec ±0.86% (194 runs sampled) string - weak x 208,463 ops/sec ±0.79% (192 runs sampled) > node benchmark/body2-5kb.js 5KB body 1 test completed. 2 tests completed. 3 tests completed. 4 tests completed. * buffer - strong x 92,901 ops/sec ±0.58% (195 runs sampled) * buffer - weak x 93,045 ops/sec ±0.65% (192 runs sampled) string - strong x 89,621 ops/sec ±0.68% (194 runs sampled) string - weak x 90,070 ops/sec ±0.70% (196 runs sampled) > node benchmark/body3-10kb.js 10KB body 1 test completed. 2 tests completed. 3 tests completed. 4 tests completed. * buffer - strong x 54,220 ops/sec ±0.85% (192 runs sampled) * buffer - weak x 54,069 ops/sec ±0.83% (191 runs sampled) string - strong x 53,078 ops/sec ±0.53% (194 runs sampled) string - weak x 53,849 ops/sec ±0.47% (197 runs sampled) > node benchmark/body4-100kb.js 100KB body 1 test completed. 2 tests completed. 3 tests completed. 4 tests completed. * buffer - strong x 6,673 ops/sec ±0.15% (197 runs sampled) * buffer - weak x 6,716 ops/sec ±0.12% (198 runs sampled) string - strong x 6,357 ops/sec ±0.14% (197 runs sampled) string - weak x 6,344 ops/sec ±0.21% (197 runs sampled) > node benchmark/stats.js stats 1 test completed. 2 tests completed. 3 tests completed. 4 tests completed. * real - strong x 1,671,989 ops/sec ±0.13% (197 runs sampled) * real - weak x 1,681,297 ops/sec ±0.12% (198 runs sampled) fake - strong x 927,063 ops/sec ±0.14% (198 runs sampled) fake - weak x 914,461 ops/sec ±0.41% (191 runs sampled) ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/etag.svg [npm-url]: https://npmjs.org/package/etag [node-version-image]: https://img.shields.io/node/v/etag.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/etag/master.svg [travis-url]: https://travis-ci.org/jshttp/etag [coveralls-image]: https://img.shields.io/coveralls/jshttp/etag/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/etag?branch=master [downloads-image]: https://img.shields.io/npm/dm/etag.svg [downloads-url]: https://npmjs.org/package/etag"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/fresh/HISTORY.md","tags":[],"body":"0.3.0 / 2015-05-12 ================== * Add weak `ETag` matching support 0.2.4 / 2014-09-07 ================== * Support Node.js 0.6 0.2.3 / 2014-09-07 ================== * Move repository to jshttp 0.2.2 / 2014-02-19 ================== * Revert \"Fix for blank page on Safari reload\" 0.2.1 / 2014-01-29 ================== * Fix for blank page on Safari reload 0.2.0 / 2013-08-11 ================== * Return stale for `Cache-Control: no-cache` 0.1.0 / 2012-06-15 ================== * Add `If-None-Match: *` support 0.0.1 / 2012-06-10 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/fresh/README.md","tags":[],"body":"# fresh [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] HTTP response freshness testing ## Installation ``` $ npm install fresh ``` ## API ```js var fresh = require('fresh') ``` ### fresh(req, res) Check freshness of `req` and `res` headers. When the cache is \"fresh\" __true__ is returned, otherwise __false__ is returned to indicate that the cache is now stale. ## Example ```js var req = { 'if-none-match': 'tobi' }; var res = { 'etag': 'luna' }; fresh(req, res); // => false var req = { 'if-none-match': 'tobi' }; var res = { 'etag': 'tobi' }; fresh(req, res); // => true ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/fresh.svg [npm-url]: https://npmjs.org/package/fresh [node-version-image]: https://img.shields.io/node/v/fresh.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/fresh/master.svg [travis-url]: https://travis-ci.org/jshttp/fresh [coveralls-image]: https://img.shields.io/coveralls/jshttp/fresh/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/fresh?branch=master [downloads-image]: https://img.shields.io/npm/dm/fresh.svg [downloads-url]: https://npmjs.org/package/fresh"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/http-errors/HISTORY.md","tags":[],"body":"2015-02-02 / 1.3.1 ================== * Fix regression where status can be overwritten in `createError` `props` 2015-02-01 / 1.3.0 ================== * Construct errors using defined constructors from `createError` * Fix error names that are not identifiers - `createError[\"I'mateapot\"]` is now `createError.ImATeapot` * Set a meaningful `name` property on constructed errors 2014-12-09 / 1.2.8 ================== * Fix stack trace from exported function * Remove `arguments.callee` usage 2014-10-14 / 1.2.7 ================== * Remove duplicate line 2014-10-02 / 1.2.6 ================== * Fix `expose` to be `true` for `ClientError` constructor 2014-09-28 / 1.2.5 ================== * deps: statuses@1 2014-09-21 / 1.2.4 ================== * Fix dependency version to work with old `npm`s 2014-09-21 / 1.2.3 ================== * deps: statuses@~1.1.0 2014-09-21 / 1.2.2 ================== * Fix publish error 2014-09-21 / 1.2.1 ================== * Support Node.js 0.6 * Use `inherits` instead of `util` 2014-09-09 / 1.2.0 ================== * Fix the way inheriting functions * Support `expose` being provided in properties argument 2014-09-08 / 1.1.0 ================== * Default status to 500 * Support provided `error` to extend 2014-09-08 / 1.0.1 ================== * Fix accepting string message 2014-09-08 / 1.0.0 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/http-errors/README.md","tags":[],"body":"# http-errors [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Create HTTP errors for Express, Koa, Connect, etc. with ease. ## Example ```js var createError = require('http-errors'); app.use(function (req, res, next) { if (!req.user) return next(createError(401, 'Please login to view this page.')); next(); }) ``` ## API This is the current API, currently extracted from Koa and subject to change. ### Error Properties - `message` - `status` and `statusCode` - the status code of the error, defaulting to `500` ### createError([status], [message], [properties]) ```js var err = createError(404, 'This video does not exist!'); ``` - `status: 500` - the status code as a number - `message` - the message of the error, defaulting to node's text for that status code. - `properties` - custom properties to attach to the object ### new createError\\[code || name\\](\\[msg]\\)) ```js var err = new createError.NotFound(); ``` - `code` - the status code as a number - `name` - the name of the error as a \"bumpy case\", i.e. `NotFound` or `InternalServerError`. ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/http-errors.svg?style=flat [npm-url]: https://npmjs.org/package/http-errors [node-version-image]: https://img.shields.io/node/v/http-errors.svg?style=flat [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/http-errors.svg?style=flat [travis-url]: https://travis-ci.org/jshttp/http-errors [coveralls-image]: https://img.shields.io/coveralls/jshttp/http-errors.svg?style=flat [coveralls-url]: https://coveralls.io/r/jshttp/http-errors [downloads-image]: https://img.shields.io/npm/dm/http-errors.svg?style=flat [downloads-url]: https://npmjs.org/package/http-errors"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/http-errors/node_modules/inherits/README.md","tags":[],"body":"Browser-friendly inheritance fully compatible with standard node.js [inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor). This package exports standard `inherits` from node.js `util` module in node environment, but also provides alternative browser-friendly implementation through [browser field](https://gist.github.com/shtylman/4339901). Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of `util`. It also has a shim for old browsers with no `Object.create` support. While keeping you sure you are using standard `inherits` implementation in node.js environment, it allows bundlers such as [browserify](https://github.com/substack/node-browserify) to not include full `util` package to your client code if all you need is just `inherits` function. It worth, because browser shim for `util` package is large and `inherits` is often the single function you need from it. It's recommended to use this package instead of `require('util').inherits` for any code that has chances to be used not only in node.js but in browser too. ## usage ```js var inherits = require('inherits'); // then use exactly as the standard one ``` ## note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js `inherits`. If you are using version ~1.0 and planning to switch to ~2.0, be careful: * new version uses `super_` instead of `super` for referencing superclass * new version overwrites current prototype while old one preserves any existing fields on it"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/mime/README.md","tags":[],"body":"# mime Comprehensive MIME type mapping API based on mime-db module. ## Install Install with [npm](http://github.com/isaacs/npm): npm install mime ## Contributing / Testing npm run test ## Command Line mime [path_string] E.g. > mime scripts/jquery.js application/javascript ## API - Queries ### mime.lookup(path) Get the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.'). E.g. ```js var mime = require('mime'); mime.lookup('/path/to/file.txt'); // => 'text/plain' mime.lookup('file.txt'); // => 'text/plain' mime.lookup('.TXT'); // => 'text/plain' mime.lookup('htm'); // => 'text/html' ``` ### mime.default_type Sets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.) ### mime.extension(type) Get the default extension for `type` ```js mime.extension('text/html'); // => 'html' mime.extension('application/octet-stream'); // => 'bin' ``` ### mime.charsets.lookup() Map mime-type to charset ```js mime.charsets.lookup('text/plain'); // => 'UTF-8' ``` (The logic for charset lookups is pretty rudimentary. Feel free to suggest improvements.) ## API - Defining Custom Types Custom type mappings can be added on a per-project basis via the following APIs. ### mime.define() Add custom mime/extension mappings ```js mime.define({ 'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'], 'application/x-my-type': ['x-mt', 'x-mtt'], // etc ... }); mime.lookup('x-sft'); // => 'text/x-some-format' ``` The first entry in the extensions array is returned by `mime.extension()`. E.g. ```js mime.extension('text/x-some-format'); // => 'x-sf' ``` ### mime.load(filepath) Load mappings from an Apache \".types\" format file ```js mime.load('./my_project.types'); ``` The .types file format is simple - See the `types` dir for examples."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/ms/History.md","tags":[],"body":"0.7.1 / 2015-04-20 ================== * prevent extraordinary long inputs (@evilpacket) * Fixed broken readme link 0.7.0 / 2014-11-24 ================== * add time abbreviations, updated tests and readme for the new units * fix example in the readme. * add LICENSE file 0.6.2 / 2013-12-05 ================== * Adding repository section to package.json to suppress warning from NPM. 0.6.1 / 2013-05-10 ================== * fix singularization [visionmedia] 0.6.0 / 2013-03-15 ================== * fix minutes 0.5.1 / 2013-02-24 ================== * add component namespace 0.5.0 / 2012-11-09 ================== * add short formatting as default and .long option * add .license property to component.json * add version to component.json 0.4.0 / 2012-10-22 ================== * add rounding to fix crazy decimals 0.3.0 / 2012-09-07 ================== * fix `ms()` [visionmedia] 0.2.0 / 2012-09-03 ================== * add component.json [visionmedia] * add days support [visionmedia] * add hours support [visionmedia] * add minutes support [visionmedia] * add seconds support [visionmedia] * add ms string support [visionmedia] * refactor tests to facilitate ms(number) [visionmedia] 0.1.0 / 2012-03-07 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/ms/README.md","tags":[],"body":"# ms.js: miliseconds conversion utility ```js ms('2 days') // 172800000 ms('1d') // 86400000 ms('10h') // 36000000 ms('2.5 hrs') // 9000000 ms('2h') // 7200000 ms('1m') // 60000 ms('5s') // 5000 ms('100') // 100 ``` ```js ms(60000) // \"1m\" ms(2 * 60000) // \"2m\" ms(ms('10 hours')) // \"10h\" ``` ```js ms(60000, { long: true }) // \"1 minute\" ms(2 * 60000, { long: true }) // \"2 minutes\" ms(ms('10 hours'), { long: true }) // \"10 hours\" ``` - Node/Browser compatible. Published as [`ms`](https://www.npmjs.org/package/ms) in [NPM](http://nodejs.org/download). - If a number is supplied to `ms`, a string with a unit is returned. - If a string that contains the number is supplied, it returns it as a number (e.g: it returns `100` for `'100'`). - If you pass a string with a number and a valid unit, the number of equivalent ms is returned. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/on-finished/HISTORY.md","tags":[],"body":"2.3.0 / 2015-05-26 ================== * Add defined behavior for HTTP `CONNECT` requests * Add defined behavior for HTTP `Upgrade` requests * deps: ee-first@1.1.1 2.2.1 / 2015-04-22 ================== * Fix `isFinished(req)` when data buffered 2.2.0 / 2014-12-22 ================== * Add message object to callback arguments 2.1.1 / 2014-10-22 ================== * Fix handling of pipelined requests 2.1.0 / 2014-08-16 ================== * Check if `socket` is detached * Return `undefined` for `isFinished` if state unknown 2.0.0 / 2014-08-16 ================== * Add `isFinished` function * Move to `jshttp` organization * Remove support for plain socket argument * Rename to `on-finished` * Support both `req` and `res` as arguments * deps: ee-first@1.0.5 1.2.2 / 2014-06-10 ================== * Reduce listeners added to emitters - avoids \"event emitter leak\" warnings when used multiple times on same request 1.2.1 / 2014-06-08 ================== * Fix returned value when already finished 1.2.0 / 2014-06-05 ================== * Call callback when called on already-finished socket 1.1.4 / 2014-05-27 ================== * Support node.js 0.8 1.1.3 / 2014-04-30 ================== * Make sure errors passed as instanceof `Error` 1.1.2 / 2014-04-18 ================== * Default the `socket` to passed-in object 1.1.1 / 2014-01-16 ================== * Rename module to `finished` 1.1.0 / 2013-12-25 ================== * Call callback when called on already-errored socket 1.0.1 / 2013-12-20 ================== * Actually pass the error to the callback 1.0.0 / 2013-12-20 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/on-finished/README.md","tags":[],"body":"# on-finished [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Execute a callback when a HTTP request closes, finishes, or errors. ## Install ```sh $ npm install on-finished ``` ## API ```js var onFinished = require('on-finished') ``` ### onFinished(res, listener) Attach a listener to listen for the response to finish. The listener will be invoked only once when the response finished. If the response finished to an error, the first argument will contain the error. If the response has already finished, the listener will be invoked. Listening to the end of a response would be used to close things associated with the response, like open files. Listener is invoked as `listener(err, res)`. ```js onFinished(res, function (err, res) { // clean up open fds, etc. // err contains the error is request error'd }) ``` ### onFinished(req, listener) Attach a listener to listen for the request to finish. The listener will be invoked only once when the request finished. If the request finished to an error, the first argument will contain the error. If the request has already finished, the listener will be invoked. Listening to the end of a request would be used to know when to continue after reading the data. Listener is invoked as `listener(err, req)`. ```js var data = '' req.setEncoding('utf8') res.on('data', function (str) { data += str }) onFinished(req, function (err, req) { // data is read unless there is err }) ``` ### onFinished.isFinished(res) Determine if `res` is already finished. This would be useful to check and not even start certain operations if the response has already finished. ### onFinished.isFinished(req) Determine if `req` is already finished. This would be useful to check and not even start certain operations if the request has already finished. ## Special Node.js requests ### HTTP CONNECT method The meaning of the `CONNECT` method from RFC 7231, section 4.3.6: > The CONNECT method requests that the recipient establish a tunnel to > the destination origin server identified by the request-target and, > if successful, thereafter restrict its behavior to blind forwarding > of packets, in both directions, until the tunnel is closed. Tunnels > are commonly used to create an end-to-end virtual connection, through > one or more proxies, which can then be secured using TLS (Transport > Layer Security, [RFC5246]). In Node.js, these request objects come from the `'connect'` event on the HTTP server. When this module is used on a HTTP `CONNECT` request, the request is considered \"finished\" immediately, **due to limitations in the Node.js interface**. This means if the `CONNECT` request contains a request entity, the request will be considered \"finished\" even before it has been read. There is no such thing as a response object to a `CONNECT` request in Node.js, so there is no support for for one. ### HTTP Upgrade request The meaning of the `Upgrade` header from RFC 7230, section 6.1: > The \"Upgrade\" header field is intended to provide a simple mechanism > for transitioning from HTTP/1.1 to some other protocol on the same > connection. In Node.js, these request objects come from the `'upgrade'` event on the HTTP server. When this module is used on a HTTP request with an `Upgrade` header, the request is considered \"finished\" immediately, **due to limitations in the Node.js interface**. This means if the `Upgrade` request contains a request entity, the request will be considered \"finished\" even before it has been read. There is no such thing as a response object to a `Upgrade` request in Node.js, so there is no support for for one. ## Example The following code ensures that file descriptors are always closed once the response finishes. ```js var destroy = require('destroy') var http = require('http') var onFinished = require('on-finished') http.createServer(function onRequest(req, res) { var stream = fs.createReadStream('package.json') stream.pipe(res) onFinished(res, function (err) { destroy(stream) }) }) ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/on-finished.svg [npm-url]: https://npmjs.org/package/on-finished [node-version-image]: https://img.shields.io/node/v/on-finished.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/on-finished/master.svg [travis-url]: https://travis-ci.org/jshttp/on-finished [coveralls-image]: https://img.shields.io/coveralls/jshttp/on-finished/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/on-finished?branch=master [downloads-image]: https://img.shields.io/npm/dm/on-finished.svg [downloads-url]: https://npmjs.org/package/on-finished"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/on-finished/node_modules/ee-first/README.md","tags":[],"body":"# EE First [![NPM version][npm-image]][npm-url] [![Build status][travis-image]][travis-url] [![Test coverage][coveralls-image]][coveralls-url] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url] [![Gittip][gittip-image]][gittip-url] Get the first event in a set of event emitters and event pairs, then clean up after itself. ## Install ```sh $ npm install ee-first ``` ## API ```js var first = require('ee-first') ``` ### first(arr, listener) Invoke `listener` on the first event from the list specified in `arr`. `arr` is an array of arrays, with each array in the format `[ee, ...event]`. `listener` will be called only once, the first time any of the given events are emitted. If `error` is one of the listened events, then if that fires first, the `listener` will be given the `err` argument. The `listener` is invoked as `listener(err, ee, event, args)`, where `err` is the first argument emitted from an `error` event, if applicable; `ee` is the event emitter that fired; `event` is the string event name that fired; and `args` is an array of the arguments that were emitted on the event. ```js var ee1 = new EventEmitter() var ee2 = new EventEmitter() first([ [ee1, 'close', 'end', 'error'], [ee2, 'error'] ], function (err, ee, event, args) { // listener invoked }) ``` #### .cancel() The group of listeners can be cancelled before being invoked and have all the event listeners removed from the underlying event emitters. ```js var thunk = first([ [ee1, 'close', 'end', 'error'], [ee2, 'error'] ], function (err, ee, event, args) { // listener invoked }) // cancel and clean up thunk.cancel() ``` [npm-image]: https://img.shields.io/npm/v/ee-first.svg?style=flat-square [npm-url]: https://npmjs.org/package/ee-first [github-tag]: http://img.shields.io/github/tag/jonathanong/ee-first.svg?style=flat-square [github-url]: https://github.com/jonathanong/ee-first/tags [travis-image]: https://img.shields.io/travis/jonathanong/ee-first.svg?style=flat-square [travis-url]: https://travis-ci.org/jonathanong/ee-first [coveralls-image]: https://img.shields.io/coveralls/jonathanong/ee-first.svg?style=flat-square [coveralls-url]: https://coveralls.io/r/jonathanong/ee-first?branch=master [license-image]: http://img.shields.io/npm/l/ee-first.svg?style=flat-square [license-url]: LICENSE.md [downloads-image]: http://img.shields.io/npm/dm/ee-first.svg?style=flat-square [downloads-url]: https://npmjs.org/package/ee-first [gittip-image]: https://img.shields.io/gittip/jonathanong.svg?style=flat-square [gittip-url]: https://www.gittip.com/jonathanong/"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/range-parser/HISTORY.md","tags":[],"body":"unreleased ========== * perf: enable strict mode 1.0.2 / 2014-09-08 ================== * Support Node.js 0.6 1.0.1 / 2014-09-07 ================== * Move repository to jshttp 1.0.0 / 2013-12-11 ================== * Add repository to package.json * Add MIT license 0.0.4 / 2012-06-17 ================== * Change ret -1 for unsatisfiable and -2 when invalid 0.0.3 / 2012-06-17 ================== * Fix last-byte-pos default to len - 1 0.0.2 / 2012-06-14 ================== * Add `.type` 0.0.1 / 2012-06-11 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/range-parser/README.md","tags":[],"body":"# range-parser [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Range header field parser. ## Installation ``` $ npm install range-parser ``` ## API ```js var parseRange = require('range-parser') ``` ### parseRange(size, header) Parse the given `header` string where `size` is the maximum size of the resource. An array of ranges will be returned or negative numbers indicating an error parsing. * `-2` signals a malformed header string * `-1` signals an invalid range ```js // parse header from request var range = parseRange(req.headers.range) // the type of the range if (range.type === 'bytes') { // the ranges range.forEach(function (r) { // do something with r.start and r.end }) } ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/range-parser.svg [npm-url]: https://npmjs.org/package/range-parser [node-version-image]: https://img.shields.io/node/v/range-parser.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/range-parser.svg [travis-url]: https://travis-ci.org/jshttp/range-parser [coveralls-image]: https://img.shields.io/coveralls/jshttp/range-parser.svg [coveralls-url]: https://coveralls.io/r/jshttp/range-parser [downloads-image]: https://img.shields.io/npm/dm/range-parser.svg [downloads-url]: https://npmjs.org/package/range-parser"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/serve-static/node_modules/send/node_modules/statuses/README.md","tags":[],"body":"# Statuses [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] HTTP status utility for node. ## API ```js var status = require('statuses'); ``` ### var code = status(Integer || String) If `Integer` or `String` is a valid HTTP code or status message, then the appropriate `code` will be returned. Otherwise, an error will be thrown. ```js status(403) // => 'Forbidden' status('403') // => 'Forbidden' status('forbidden') // => 403 status('Forbidden') // => 403 status(306) // throws, as it's not supported by node.js ``` ### status.codes Returns an array of all the status codes as `Integer`s. ### var msg = status[code] Map of `code` to `status message`. `undefined` for invalid `code`s. ```js status[404] // => 'Not Found' ``` ### var code = status[msg] Map of `status message` to `code`. `msg` can either be title-cased or lower-cased. `undefined` for invalid `status message`s. ```js status['not found'] // => 404 status['Not Found'] // => 404 ``` ### status.redirect[code] Returns `true` if a status code is a valid redirect status. ```js status.redirect[200] // => undefined status.redirect[301] // => true ``` ### status.empty[code] Returns `true` if a status code expects an empty body. ```js status.empty[200] // => undefined status.empty[204] // => true status.empty[304] // => true ``` ### status.retry[code] Returns `true` if you should retry the rest. ```js status.retry[501] // => undefined status.retry[503] // => true ``` ### statuses/codes.json ```js var codes = require('statuses/codes.json'); ``` This is a JSON file of the status codes taken from `require('http').STATUS_CODES`. This is saved so that codes are consistent even in older node.js versions. For example, `308` will be added in v0.12. ## Adding Status Codes The status codes are primarily sourced from http://www.iana.org/assignments/http-status-codes/http-status-codes-1.csv. Additionally, custom codes are added from http://en.wikipedia.org/wiki/List_of_HTTP_status_codes. These are added manually in the `lib/*.json` files. If you would like to add a status code, add it to the appropriate JSON file. To rebuild `codes.json`, run the following: ```bash # update src/iana.json npm run update # build codes.json npm run build ``` [npm-image]: https://img.shields.io/npm/v/statuses.svg?style=flat [npm-url]: https://npmjs.org/package/statuses [node-version-image]: http://img.shields.io/badge/node.js-%3E%3D_0.6-brightgreen.svg?style=flat [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/statuses.svg?style=flat [travis-url]: https://travis-ci.org/jshttp/statuses [coveralls-image]: https://img.shields.io/coveralls/jshttp/statuses.svg?style=flat [coveralls-url]: https://coveralls.io/r/jshttp/statuses?branch=master [downloads-image]: http://img.shields.io/npm/dm/statuses.svg?style=flat [downloads-url]: https://npmjs.org/package/statuses"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/server-destroy/README.md","tags":[],"body":"# server-destroy Enable destroying a server, and all currently open connections. ## Usage ```javascript var enableDestroy = require('server-destroy'); var server = http.createServer(function(req, res) { // do stuff, blah blah blah }); server.listen(PORT); // enhance with a 'destroy' function enableDestroy(server); // some time later... server.destroy(); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/History.md","tags":[],"body":"1.4.6 / 2016-05-02 ================== * package: bump engine.io 1.4.5 / 2016-01-26 ================== * fix closing the underlying `http.Server` 1.4.4 / 2016-01-10 ================== * package: bump `engine.io` 1.4.3 / 2016-01-08 ================== * bump `socket.io-client` 1.4.2 / 2016-01-07 ================== * bump `engine.io` 1.4.1 / 2016-01-07 ================== * version bump 1.4.0 / 2015-11-28 ================== * socket.io: increase large binary data test timeout * package: bump `engine.io` for release * trigger callback even when joining an already joined room * package: bump parser * namespace: clear rooms flag after a clients call (fixes #1978) * package: bump `socket.io-parser` * fixed tests with large data * fixed a typo in the example code * package: bump mocha * package: bump `has-binary` and `zuul-ngrok` * package: bump `engine.io` and `socket.io-client` * README: clarified documentation of Socket.in * README: fixed up legacy repo links * test: better timeout for stress test * socket: don't set request property which has a getter * removed proxy index file * support flags on namespace * improve Socket#packet and Client#packet * socket: warn node_redis-style about missing `error` * test: added failing test * test: increase timeout for large binary data test * package: bump `has-binary` to work with all objects (fixes #1955) * fix origin verification default https port [evanlucas] * support compression [nkzawa] * changed type of `Client#sockets`, `Namespace#sockets` and `Socket#rooms` to maps (instead of arrays) 1.3.7 / 2015-09-21 ================== * package: bump `socket.io-client` for node4 compatibility * package: bump `engine.io` for node4 compatibility 1.3.6 / 2015-07-14 ================== * package: bump `engine.io` to fix build on windows 1.3.5 / 2015-03-03 ================== * package: bump `socket.io-parser` 1.3.4 / 2015-02-14 ================== * package: bump `socket.io-client` 1.3.3 / 2015-02-03 ================== * socket: warn node_redis-style about missing `error` * package: bump parser to better handle bad binary packets 1.3.2 / 2015-01-19 ================== * no change on this release 1.3.1 / 2015-01-19 ================== * no change on this release * package: bump `engine.io` 1.3.0 / 2015-01-19 ================== * package: bump `engine.io` * add test for reconnection after server restarts [rase-] * update license with up-to-date year range [fay-jai] * fix leaving unknown rooms [defunctzombie] * allow null origins when allowed origins is a function [drewblaisdell] * fix tests on node 0.11 * package: fix `npm test` to run on windows * package: bump `debug` v2.1.0 [coderaiser] * added tests for volatile [rase-] 1.2.1 / 2014-11-21 ================== * fix protocol violations and improve error handling (GH-1880) * package: bump `engine.io` for websocket leak fix [3rd-Eden] * style tweaks 1.2.0 / 2014-10-27 ================== * package: bump `engine.io` * downloads badge * add test to check that empty rooms are autopruned * added Server#origins(v:Function) description for dynamic CORS * added test coverage for Server#origins(function) for dynamic CORS * added optional Server#origins(function) for dynamic CORS * fix usage example for Server#close * package: fix main file for example application 'chat' * package: bump `socket.io-parser` * update README http ctor to createServer() * bump adapter with a lot of fixes for room bookkeeping 1.1.0 / 2014-09-04 ================== * examples: minor fix of escaping * testing for equivalence of namespaces starting with / or without * update index.js * added relevant tests * take \"\" and \"/\" as equivalent namespaces on server * use svg instead of png to get better image quality in readme * make CI build faster * fix splice arguments and `socket.rooms` value update in `socket.leaveAll`. * client cannot connect to non-existing namespaces * bump engine.io version to get the cached IP address * fixed handshake object address property and made the test case more strict. * package: bump `engine.io` * fixed the failing test where server crashes on disconnect involving connectBuffer * npmignore: ignore `.gitignore` (fixes #1607) * test: added failing case for `socket.disconnect` and nsps * fix repo in package.json * improve Close documentation * use ephemeral ports * fix: We should use the standard http protocol to handler the etag header. * override default browser font-family for inputs * update has-binary-data to 1.0.3 * add close specs * add ability to stop the http server even if not created inside socket.io * make sure server gets close * Add test case for checking that reconnect_failed is fired only once upon failure * package: bump `socket.io-parser` for `component-emitter` dep fix 1.0.6 / 2014-06-19 ================== * package: bump `socket.io-client` 1.0.5 / 2014-06-16 ================== * package: bump `engine.io` to fix jsonp `\\n` bug and CORS warnings * index: fix typo [yanatan16] * add `removeListener` to blacklisted events * examples: clearer instructions to install chat example * index: fix namespace `connectBuffer` issue 1.0.4 / 2014-06-02 ================== * package: bump socket.io-client 1.0.3 / 2014-05-31 ================== * package: bump `socket.io-client` * package: bump `socket.io-parser` for binary ACK fix * package: bump `engine.io` for binary UTF8 fix * example: fix XSS in chat example 1.0.2 / 2014-05-28 ================== * package: bump `socket.io-parser` for windows fix 1.0.1 / 2014-05-28 ================== * bump due to bad npm tag 1.0.0 / 2014-05-28 ================== * stable release 1.0.0-pre5 / 2014-05-22 ======================= * package: bump `socket.io-client` for parser fixes * package: bump `engine.io` 1.0.0-pre4 / 2014-05-19 ======================= * package: bump client 1.0.0-pre3 / 2014-05-17 ======================= * package: bump parser * package: bump engine.io 1.0.0-pre2 / 2014-04-27 ======================= * package: bump `engine.io` * added backwards compatible of engine.io maxHttpBufferSize * added test that server and client using same protocol * added support for setting allowed origins * added information about logging * the set function in server can be used to set some attributes for BC * fix error in callback call 'done' instead of 'next' in docs * package: bump `socket.io-parser` * package: bump `expect.js` * added some new tests, including binary with acks 1.0.0-pre / 2014-03-14 ====================== * implemented `engine.io` * implemented `socket.io-adapter` * implemented `socket.io-protocol` * implemented `debug` and improved instrumentation * added binary support * added new `require('io')(srv)` signature * simplified `socket.io-client` serving 0.9.14 / 2013-03-29 =================== * manager: fix memory leak with SSL [jpallen] 0.9.13 / 2012-12-13 =================== * package: fixed `base64id` requirement 0.9.12 / 2012-12-13 =================== * manager: fix for latest node which is returning a clone with `listeners` [viirya] 0.9.11 / 2012-11-02 =================== * package: move redis to optionalDependenices [3rd-Eden] * bumped client 0.9.10 / 2012-08-10 =================== * Don't lowercase log messages * Always set the HTTP response in case an error should be returned to the client * Create or destroy the flash policy server on configuration change * Honour configuration to disable flash policy server * Add express 3.0 instructions on Readme.md * Bump client 0.9.9 / 2012-08-01 ================== * Fixed sync disconnect xhrs handling * Put license text in its own file (#965) * Add warning to .listen() to ease the migration to Express 3.x * Restored compatibility with node 0.4.x 0.9.8 / 2012-07-24 ================== * Bumped client. 0.9.7 / 2012-07-24 ================== * Prevent crash when socket leaves a room twice. * Corrects unsafe usage of for..in * Fix for node 0.8 with `gzip compression` [vadimi] * Update redis to support Node 0.8.x * Made ID generation securely random * Fix Redis Store race condition in manager onOpen unsubscribe callback * Fix for EventEmitters always reusing the same Array instance for listeners 0.9.6 / 2012-04-17 ================== * Fixed XSS in jsonp-polling. 0.9.5 / 2012-04-05 ================== * Added test for polling and socket close. * Ensure close upon request close. * Fix disconnection reason being lost for polling transports. * Ensure that polling transports work with Connection: close. * Log disconnection reason. 0.9.4 / 2012-04-01 ================== * Disconnecting from namespace improvement (#795) [DanielBaulig] * Bumped client with polling reconnection loop (#438) 0.9.3 / 2012-03-28 ================== * Fix \"Syntax error\" on FF Web Console with XHR Polling [mikito] 0.9.2 / 2012-03-13 ================== * More sensible close `timeout default` (fixes disconnect issue) 0.9.1-1 / 2012-03-02 ==================== * Bumped client with NPM dependency fix. 0.9.1 / 2012-03-02 ================== * Changed heartbeat timeout and interval defaults (60 and 25 seconds) * Make tests work both on 0.4 and 0.6 * Updated client (improvements + bug fixes). 0.9.0 / 2012-02-26 ================== * Make it possible to use a regexp to match the socket.io resource URL. We need this because we have to prefix the socket.io URL with a variable ID. * Supplemental fix to gavinuhma/authfix, it looks like the same Access-Control-Origin logic is needed in the http and xhr-polling transports * Updated express dep for windows compatibility. * Combine two substr calls into one in decodePayload to improve performance * Minor documentation fix * Minor. Conform to style of other files. * Switching setting to 'match origin protocol' * Revert \"Fixes leaking Redis subscriptions for #663. The local flag was not getting passed through onClientDisconnect().\" * Revert \"Handle leaked dispatch:[id] subscription.\" * Merge pull request #667 from dshaw/patch/redis-disconnect * Handle leaked dispatch:[id] subscription. * Fixes leaking Redis subscriptions for #663. The local flag was not getting passed through onClientDisconnect(). * Prevent memory leaking on uncompleted requests & add max post size limitation * Fix for testcase * Set Access-Control-Allow-Credentials true, regardless of cookie * Remove assertvarnish from package as it breaks on 0.6 * Correct irc channel * Added proper return after reserved field error * Fixes manager.js failure to close connection after transport error has happened * Added implicit port 80 for origin checks. fixes #638 * Fixed bug #432 in 0.8.7 * Set Access-Control-Allow-Origin header to origin to enable withCredentials * Adding configuration variable matchOriginProtocol * Fixes location mismatch error in Safari. * Use tty to detect if we should add colors or not by default. * Updated the package location. 0.8.7 / 2011-11-05 ================== * Fixed memory leaks in closed clients. * Fixed memory leaks in namespaces. * Fixed websocket handling for malformed requests from proxies. [einaros] * Node 0.6 compatibility. [einaros] [3rd-Eden] * Adapted tests and examples. 0.8.6 / 2011-10-27 ================== * Added JSON decoding on jsonp-polling transport. * Fixed README example. * Major speed optimizations [3rd-Eden] [einaros] [visionmedia] * Added decode/encode benchmarks [visionmedia] * Added support for black-listing client sent events. * Fixed logging options, closes #540 [3rd-Eden] * Added vary header for gzip [3rd-Eden] * Properly cleaned up async websocket / flashsocket tests, after patching node-websocket-client * Patched to properly shut down when a finishClose call is made during connection establishment * Added support for socket.io version on url and far-future Expires [3rd-Eden] [getify] * Began IE10 compatibility [einaros] [tbranyen] * Misc WebSocket fixes [einaros] * Added UTF8 to respone headers for htmlfile [3rd-Eden] 0.8.5 / 2011-10-07 ================== * Added websocket draft HyBi-16 support. [einaros] * Fixed websocket continuation bugs. [einaros] * Fixed flashsocket transport name. * Fixed websocket tests. * Ensured `parser#decodePayload` doesn't choke. * Added http referrer verification to manager verifyOrigin. * Added access control for cross domain xhr handshakes [3rd-Eden] * Added support for automatic generation of socket.io files [3rd-Eden] * Added websocket binary support [einaros] * Added gzip support for socket.io.js [3rd-Eden] * Expose socket.transport [3rd-Eden] * Updated client. 0.8.4 / 2011-09-06 ================== * Client build 0.8.3 / 2011-09-03 ================== * Fixed `\\n` parsing for non-JSON packets (fixes #479). * Fixed parsing of certain unicode characters (fixes #451). * Fixed transport message packet logging. * Fixed emission of `error` event resulting in an uncaught exception if unhandled (fixes #476). * Fixed; allow for falsy values as the configuration value of `log level` (fixes #491). * Fixed repository URI in `package.json`. Fixes #504. * Added text/plain content-type to handshake responses [einaros] * Improved single byte writes [einaros] * Updated socket.io-flashsocket default port from 843 to 10843 [3rd-Eden] * Updated client. 0.8.2 / 2011-08-29 ================== * Updated client. 0.8.1 / 2011-08-29 ================== * Fixed utf8 bug in send framing in websocket [einaros] * Fixed typo in docs [Znarkus] * Fixed bug in send framing for over 64kB of data in websocket [einaros] * Corrected ping handling in websocket transport [einaros] 0.8.0 / 2011-08-28 ================== * Updated to work with two-level websocket versioning. [einaros] * Added hybi07 support. [einaros] * Added hybi10 support. [einaros] * Added http referrer verification to manager.js verifyOrigin. [einaors] 0.7.11 / 2011-08-27 =================== * Updated socket.io-client. 0.7.10 / 2011-08-27 =================== * Updated socket.io-client. 0.7.9 / 2011-08-12 ================== * Updated socket.io-client. * Make sure we only do garbage collection when the server we receive is actually run. 0.7.8 / 2011-08-08 ================== * Changed; make sure sio#listen passes options to both HTTP server and socket.io manager. * Added docs for sio#listen. * Added options parameter support for Manager constructor. * Added memory leaks tests and test-leaks Makefile task. * Removed auto npm-linking from make test. * Make sure that you can disable heartbeats. [3rd-Eden] * Fixed rooms memory leak [3rd-Eden] * Send response once we got all POST data, not immediately [Pita] * Fixed onLeave behavior with missing clientsk [3rd-Eden] * Prevent duplicate references in rooms. * Added alias for `to` to `in` and `in` to `to`. * Fixed roomClients definition. * Removed dependency on redis for installation without npm [3rd-Eden] * Expose path and querystring in handshakeData [3rd-Eden] 0.7.7 / 2011-07-12 ================== * Fixed double dispatch handling with emit to closed clients. * Added test for emitting to closed clients to prevent regression. * Fixed race condition in redis test. * Changed Transport#end instrumentation. * Leveraged $emit instead of emit internally. * Made tests faster. * Fixed double disconnect events. * Fixed disconnect logic * Simplified remote events handling in Socket. * Increased testcase timeout. * Fixed unknown room emitting (GH-291). [3rd-Eden] * Fixed `address` in handshakeData. [3rd-Eden] * Removed transports definition in chat example. * Fixed room cleanup * Fixed; make sure the client is cleaned up after booting. * Make sure to mark the client as non-open if the connection is closed. * Removed unneeded `buffer` declarations. * Fixed; make sure to clear socket handlers and subscriptions upon transport close. 0.7.6 / 2011-06-30 ================== * Fixed general dispatching when a client has closed. 0.7.5 / 2011-06-30 ================== * Fixed dispatching to clients that are disconnected. 0.7.4 / 2011-06-30 ================== * Fixed; only clear handlers if they were set. [level09] 0.7.3 / 2011-06-30 ================== * Exposed handshake data to clients. * Refactored dispatcher interface. * Changed; Moved id generation method into the manager. * Added sub-namespace authorization. [3rd-Eden] * Changed; normalized SocketNamespace local eventing [dvv] * Changed; Use packet.reason or default to 'packet' [3rd-Eden] * Changed console.error to console.log. * Fixed; bind both servers at the same time do that the test never times out. * Added 304 support. * Removed `Transport#name` for abstract interface. * Changed; lazily require http and https module only when needed. [3rd-Eden] 0.7.2 / 2011-06-22 ================== * Make sure to write a packet (of type `noop`) when closing a poll. This solves a problem with cross-domain requests being flagged as aborted and reconnection being triggered. * Added `noop` message type. 0.7.1 / 2011-06-21 ================== * Fixed cross-domain XHR. * Added CORS test to xhr-polling suite. 0.7.0 / 2010-06-21 ================== * http://socket.io/announcement.html"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/Readme.md","tags":[],"body":"# socket.io [![Build Status](https://secure.travis-ci.org/socketio/socket.io.svg)](https://travis-ci.org/socketio/socket.io) [![Dependency Status](https://david-dm.org/socketio/socket.io.svg)](https://david-dm.org/socketio/socket.io) [![devDependency Status](https://david-dm.org/socketio/socket.io/dev-status.svg)](https://david-dm.org/socketio/socket.io#info=devDependencies) ![NPM version](https://badge.fury.io/js/socket.io.svg) ![Downloads](https://img.shields.io/npm/dm/socket.io.svg?style=flat) [![](http://slack.socket.io/badge.svg?)](http://slack.socket.io) ## How to use The following example attaches socket.io to a plain Node.JS HTTP server listening on port `3000`. ```js var server = require('http').createServer(); var io = require('socket.io')(server); io.on('connection', function(socket){ socket.on('event', function(data){}); socket.on('disconnect', function(){}); }); server.listen(3000); ``` ### Standalone ```js var io = require('socket.io')(); io.on('connection', function(socket){}); io.listen(3000); ``` ### In conjunction with Express Starting with **3.0**, express applications have become request handler functions that you pass to `http` or `http` `Server` instances. You need to pass the `Server` to `socket.io`, and not the express application function. ```js var app = require('express')(); var server = require('http').createServer(app); var io = require('socket.io')(server); io.on('connection', function(){ /* … */ }); server.listen(3000); ``` ### In conjunction with Koa Like Express.JS, Koa works by exposing an application as a request handler function, but only by calling the `callback` method. ```js var app = require('koa')(); var server = require('http').createServer(app.callback()); var io = require('socket.io')(server); io.on('connection', function(){ /* … */ }); server.listen(3000); ``` ## API ### Server Exposed by `require('socket.io')`. ### Server() Creates a new `Server`. Works with and without `new`: ```js var io = require('socket.io')(); // or var Server = require('socket.io'); var io = new Server(); ``` ### Server(opts:Object) Optionally, the first or second argument (see below) of the `Server` constructor can be an options object. The following options are supported: - `serveClient` sets the value for Server#serveClient() - `path` sets the value for Server#path() The same options passed to socket.io are always passed to the `engine.io` `Server` that gets created. See engine.io [options](https://github.com/socketio/engine.io#methods-1) as reference. ### Server(srv:http#Server, opts:Object) Creates a new `Server` and attaches it to the given `srv`. Optionally `opts` can be passed. ### Server(port:Number, opts:Object) Binds socket.io to a new `http.Server` that listens on `port`. ### Server#serveClient(v:Boolean):Server If `v` is `true` the attached server (see `Server#attach`) will serve the client files. Defaults to `true`. This method has no effect after `attach` is called. ```js // pass a server and the `serveClient` option var io = require('socket.io')(http, { serveClient: false }); // or pass no server and then you can call the method var io = require('socket.io')(); io.serveClient(false); io.attach(http); ``` If no arguments are supplied this method returns the current value. ### Server#path(v:String):Server Sets the path `v` under which `engine.io` and the static files will be served. Defaults to `/socket.io`. If no arguments are supplied this method returns the current value. ### Server#adapter(v:Adapter):Server Sets the adapter `v`. Defaults to an instance of the `Adapter` that ships with socket.io which is memory based. See [socket.io-adapter](https://github.com/socketio/socket.io-adapter). If no arguments are supplied this method returns the current value. ### Server#origins(v:String):Server Sets the allowed origins `v`. Defaults to any origins being allowed. If no arguments are supplied this method returns the current value. ### Server#origins(v:Function):Server Sets the allowed origins as dynamic function. Function takes two arguments `origin:String` and `callback(error, success)`, where `success` is a boolean value indicating whether origin is allowed or not. __Potential drawbacks__: * in some situations, when it is not possible to determine `origin` it may have value of `*` * As this function will be executed for every request, it is advised to make this function work as fast as possible * If `socket.io` is used together with `Express`, the CORS headers will be affected only for `socket.io` requests. For Express can use [cors](https://github.com/expressjs/cors) ### Server#sockets:Namespace The default (`/`) namespace. ### Server#attach(srv:http#Server, opts:Object):Server Attaches the `Server` to an engine.io instance on `srv` with the supplied `opts` (optionally). ### Server#attach(port:Number, opts:Object):Server Attaches the `Server` to an engine.io instance that is bound to `port` with the given `opts` (optionally). ### Server#listen Synonym of `Server#attach`. ### Server#bind(srv:engine#Server):Server Advanced use only. Binds the server to a specific engine.io `Server` (or compatible API) instance. ### Server#onconnection(socket:engine#Socket):Server Advanced use only. Creates a new `socket.io` client from the incoming engine.io (or compatible API) `socket`. ### Server#of(nsp:String):Namespace Initializes and retrieves the given `Namespace` by its pathname identifier `nsp`. If the namespace was already initialized it returns it right away. ### Server#emit Emits an event to all connected clients. The following two are equivalent: ```js var io = require('socket.io')(); io.sockets.emit('an event sent to all connected clients'); io.emit('an event sent to all connected clients'); ``` For other available methods, see `Namespace` below. ### Server#close Closes socket server ```js var Server = require('socket.io'); var PORT = 3030; var server = require('http').Server(); var io = Server(PORT); io.close(); // Close current server server.listen(PORT); // PORT is free to use io = Server(server); ``` ### Server#use See `Namespace#use` below. ### Namespace Represents a pool of sockets connected under a given scope identified by a pathname (eg: `/chat`). By default the client always connects to `/`. #### Events - `connection` / `connect`. Fired upon a connection. Parameters: - `Socket` the incoming socket. ### Namespace#name:String The namespace identifier property. ### Namespace#connected:Object Hash of `Socket` objects that are connected to this namespace indexed by `id`. ### Namespace#clients(fn:Function) Gets a list of client IDs connected to this namespace (across all nodes if applicable). An example to get all clients in a namespace: ```js var io = require('socket.io')(); io.of('/chat').clients(function(error, clients){ if (error) throw error; console.log(clients); // => [PZDoMHjiu8PYfRiKAAAF, Anw2LatarvGVVXEIAAAD] }); ``` An example to get all clients in namespace's room: ```js var io = require('socket.io')(); io.of('/chat').in('general').clients(function(error, clients){ if (error) throw error; console.log(clients); // => [Anw2LatarvGVVXEIAAAD] }); ``` As with broadcasting, the default is all clients from the default namespace ('/'): ```js var io = require('socket.io')(); io.clients(function(error, clients){ if (error) throw error; console.log(clients); // => [6em3d4TJP8Et9EMNAAAA, G5p55dHhGgUnLUctAAAB] }); ``` ### Namespace#use(fn:Function):Namespace Registers a middleware, which is a function that gets executed for every incoming `Socket` and receives as parameter the socket and a function to optionally defer execution to the next registered middleware. ```js var io = require('socket.io')(); io.use(function(socket, next){ if (socket.request.headers.cookie) return next(); next(new Error('Authentication error')); }); ``` Errors passed to middleware callbacks are sent as special `error` packets to clients. ### Socket A `Socket` is the fundamental class for interacting with browser clients. A `Socket` belongs to a certain `Namespace` (by default `/`) and uses an underlying `Client` to communicate. ### Socket#rooms:Object A hash of strings identifying the rooms this socket is in, indexed by room name. ### Socket#client:Client A reference to the underlying `Client` object. ### Socket#conn:Socket A reference to the underlying `Client` transport connection (engine.io `Socket` object). ### Socket#request:Request A getter proxy that returns the reference to the `request` that originated the underlying engine.io `Client`. Useful for accessing request headers such as `Cookie` or `User-Agent`. ### Socket#id:String A unique identifier for the socket session, that comes from the underlying `Client`. ### Socket#emit(name:String[, …]):Socket Emits an event to the socket identified by the string `name`. Any other parameters can be included. All datastructures are supported, including `Buffer`. JavaScript functions can't be serialized/deserialized. ```js var io = require('socket.io')(); io.on('connection', function(socket){ socket.emit('an event', { some: 'data' }); }); ``` ### Socket#join(name:String[, fn:Function]):Socket Adds the socket to the `room`, and fires optionally a callback `fn` with `err` signature (if any). The socket is automatically a member of a room identified with its session id (see `Socket#id`). The mechanics of joining rooms are handled by the `Adapter` that has been configured (see `Server#adapter` above), defaulting to [socket.io-adapter](https://github.com/socketio/socket.io-adapter). ### Socket#leave(name:String[, fn:Function]):Socket Removes the socket from `room`, and fires optionally a callback `fn` with `err` signature (if any). **Rooms are left automatically upon disconnection**. The mechanics of leaving rooms are handled by the `Adapter` that has been configured (see `Server#adapter` above), defaulting to [socket.io-adapter](https://github.com/socketio/socket.io-adapter). ### Socket#to(room:String):Socket Sets a modifier for a subsequent event emission that the event will only be _broadcasted_ to sockets that have joined the given `room`. To emit to multiple rooms, you can call `to` several times. ```js var io = require('socket.io')(); io.on('connection', function(socket){ socket.to('others').emit('an event', { some: 'data' }); }); ``` ### Socket#in(room:String):Socket Same as `Socket#to` ### Socket#compress(v:Boolean):Socket Sets a modifier for a subsequent event emission that the event data will only be _compressed_ if the value is `true`. Defaults to `true` when you don't call the method. ```js var io = require('socket.io')(); io.on('connection', function(socket){ socket.compress(false).emit('an event', { some: 'data' }); }); ``` ### Client The `Client` class represents an incoming transport (engine.io) connection. A `Client` can be associated with many multiplexed `Socket` that belong to different `Namespace`s. ### Client#conn A reference to the underlying `engine.io` `Socket` connection. ### Client#request A getter proxy that returns the reference to the `request` that originated the engine.io connection. Useful for accessing request headers such as `Cookie` or `User-Agent`. ## Debug / logging Socket.IO is powered by [debug](https://github.com/visionmedia/debug). In order to see all the debug output, run your app with the environment variable `DEBUG` including the desired scope. To see the output from all of Socket.IO's debugging scopes you can use: ``` DEBUG=socket.io* node myapp ``` ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/debug/History.md","tags":[],"body":"2.2.0 / 2015-05-09 ================== * package: update \"ms\" to v0.7.1 (#202, @dougwilson) * README: add logging to file example (#193, @DanielOchoa) * README: fixed a typo (#191, @amir-s) * browser: expose `storage` (#190, @stephenmathieson) * Makefile: add a `distclean` target (#189, @stephenmathieson) 2.1.3 / 2015-03-13 ================== * Updated stdout/stderr example (#186) * Updated example/stdout.js to match debug current behaviour * Renamed example/stderr.js to stdout.js * Update Readme.md (#184) * replace high intensity foreground color for bold (#182, #183) 2.1.2 / 2015-03-01 ================== * dist: recompile * update \"ms\" to v0.7.0 * package: update \"browserify\" to v9.0.3 * component: fix \"ms.js\" repo location * changed bower package name * updated documentation about using debug in a browser * fix: security error on safari (#167, #168, @yields) 2.1.1 / 2014-12-29 ================== * browser: use `typeof` to check for `console` existence * browser: check for `console.log` truthiness (fix IE 8/9) * browser: add support for Chrome apps * Readme: added Windows usage remarks * Add `bower.json` to properly support bower install 2.1.0 / 2014-10-15 ================== * node: implement `DEBUG_FD` env variable support * package: update \"browserify\" to v6.1.0 * package: add \"license\" field to package.json (#135, @panuhorsmalahti) 2.0.0 / 2014-09-01 ================== * package: update \"browserify\" to v5.11.0 * node: use stderr rather than stdout for logging (#29, @stephenmathieson) 1.0.4 / 2014-07-15 ================== * dist: recompile * example: remove `console.info()` log usage * example: add \"Content-Type\" UTF-8 header to browser example * browser: place %c marker after the space character * browser: reset the \"content\" color via `color: inherit` * browser: add colors support for Firefox >= v31 * debug: prefer an instance `log()` function over the global one (#119) * Readme: update documentation about styled console logs for FF v31 (#116, @wryk) 1.0.3 / 2014-07-09 ================== * Add support for multiple wildcards in namespaces (#122, @seegno) * browser: fix lint 1.0.2 / 2014-06-10 ================== * browser: update color palette (#113, @gscottolson) * common: make console logging function configurable (#108, @timoxley) * node: fix %o colors on old node <= 0.8.x * Makefile: find node path using shell/which (#109, @timoxley) 1.0.1 / 2014-06-06 ================== * browser: use `removeItem()` to clear localStorage * browser, node: don't set DEBUG if namespaces is undefined (#107, @leedm777) * package: add \"contributors\" section * node: fix comment typo * README: list authors 1.0.0 / 2014-06-04 ================== * make ms diff be global, not be scope * debug: ignore empty strings in enable() * node: make DEBUG_COLORS able to disable coloring * *: export the `colors` array * npmignore: don't publish the `dist` dir * Makefile: refactor to use browserify * package: add \"browserify\" as a dev dependency * Readme: add Web Inspector Colors section * node: reset terminal color for the debug content * node: map \"%o\" to `util.inspect()` * browser: map \"%j\" to `JSON.stringify()` * debug: add custom \"formatters\" * debug: use \"ms\" module for humanizing the diff * Readme: add \"bash\" syntax highlighting * browser: add Firebug color support * browser: add colors for WebKit browsers * node: apply log to `console` * rewrite: abstract common logic for Node & browsers * add .jshintrc file 0.8.1 / 2014-04-14 ================== * package: re-add the \"component\" section 0.8.0 / 2014-03-30 ================== * add `enable()` method for nodejs. Closes #27 * change from stderr to stdout * remove unnecessary index.js file 0.7.4 / 2013-11-13 ================== * remove \"browserify\" key from package.json (fixes something in browserify) 0.7.3 / 2013-10-30 ================== * fix: catch localStorage security error when cookies are blocked (Chrome) * add debug(err) support. Closes #46 * add .browser prop to package.json. Closes #42 0.7.2 / 2013-02-06 ================== * fix package.json * fix: Mobile Safari (private mode) is broken with debug * fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript 0.7.1 / 2013-02-05 ================== * add repository URL to package.json * add DEBUG_COLORED to force colored output * add browserify support * fix component. Closes #24 0.7.0 / 2012-05-04 ================== * Added .component to package.json * Added debug.component.js build 0.6.0 / 2012-03-16 ================== * Added support for \"-\" prefix in DEBUG [Vinay Pulim] * Added `.enabled` flag to the node version [TooTallNate] 0.5.0 / 2012-02-02 ================== * Added: humanize diffs. Closes #8 * Added `debug.disable()` to the CS variant * Removed padding. Closes #10 * Fixed: persist client-side variant again. Closes #9 0.4.0 / 2012-02-01 ================== * Added browser variant support for older browsers [TooTallNate] * Added `debug.enable('project:*')` to browser variant [TooTallNate] * Added padding to diff (moved it to the right) 0.3.0 / 2012-01-26 ================== * Added millisecond diff when isatty, otherwise UTC string 0.2.0 / 2012-01-22 ================== * Added wildcard support 0.1.0 / 2011-12-02 ================== * Added: remove colors unless stderr isatty [TooTallNate] 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/debug/Readme.md","tags":[],"body":"# debug tiny node.js debugging utility modelled after node core's debugging technique. ## Installation ```bash $ npm install debug ``` ## Usage With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you're used to work fine. A unique color is selected per-function for visibility. Example _app.js_: ```js var debug = require('debug')('http') , http = require('http') , name = 'My App'; // fake app debug('booting %s', name); http.createServer(function(req, res){ debug(req.method + ' ' + req.url); res.end('hello\\n'); }).listen(3000, function(){ debug('listening'); }); // fake worker of some kind require('./worker'); ``` Example _worker.js_: ```js var debug = require('debug')('worker'); setInterval(function(){ debug('doing some work'); }, 1000); ``` The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png) ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png) #### Windows note On Windows the environment variable is set using the `set` command. ```cmd set DEBUG=*,-not_this ``` Then, run the program to be debugged as usual. ## Millisecond diff When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls. ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png) When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below: ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png) ## Conventions If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\". ## Wildcards The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`. You can also exclude specific debuggers by prefixing them with a \"-\" character. For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\". ## Browser support Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include: ```js window.myDebug = require(\"debug\"); ``` (\"debug\" is a global object in the browser so we give this object a different name.) When your page is open in the browser, type the following in the console: ```js myDebug.enable(\"worker:*\") ``` Refresh the page. Debug output will continue to be sent to the console until it is disabled by typing `myDebug.disable()` in the console. ```js a = debug('worker:a'); b = debug('worker:b'); setInterval(function(){ a('doing some work'); }, 1000); setInterval(function(){ b('doing some work'); }, 1200); ``` #### Web Inspector Colors Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting option. These are WebKit web inspectors, Firefox ([since version 31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/)) and the Firebug plugin for Firefox (any version). Colored output looks something like: ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png) ### stderr vs stdout You can set an alternative logging method per-namespace by overriding the `log` method on a per-namespace or globally: Example _stdout.js_: ```js var debug = require('debug'); var error = debug('app:error'); // by default stderr is used error('goes to stderr!'); var log = debug('app:log'); // set this namespace to log via console.log log.log = console.log.bind(console); // don't forget to bind to console! log('goes to stdout'); error('still goes to stderr!'); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error('now goes to stdout via console.info'); log('still goes to stdout, but via console.info now'); ``` ### Save debug output to a file You can save all debug statements to a file by piping them. Example: ```bash $ DEBUG_FD=3 node your-app.js 3> whatever.log ``` ## Authors - TJ Holowaychuk - Nathan Rajlich ## License (The MIT License) Copyright (c) 2014 TJ Holowaychuk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/debug/node_modules/ms/History.md","tags":[],"body":"0.7.1 / 2015-04-20 ================== * prevent extraordinary long inputs (@evilpacket) * Fixed broken readme link 0.7.0 / 2014-11-24 ================== * add time abbreviations, updated tests and readme for the new units * fix example in the readme. * add LICENSE file 0.6.2 / 2013-12-05 ================== * Adding repository section to package.json to suppress warning from NPM. 0.6.1 / 2013-05-10 ================== * fix singularization [visionmedia] 0.6.0 / 2013-03-15 ================== * fix minutes 0.5.1 / 2013-02-24 ================== * add component namespace 0.5.0 / 2012-11-09 ================== * add short formatting as default and .long option * add .license property to component.json * add version to component.json 0.4.0 / 2012-10-22 ================== * add rounding to fix crazy decimals 0.3.0 / 2012-09-07 ================== * fix `ms()` [visionmedia] 0.2.0 / 2012-09-03 ================== * add component.json [visionmedia] * add days support [visionmedia] * add hours support [visionmedia] * add minutes support [visionmedia] * add seconds support [visionmedia] * add ms string support [visionmedia] * refactor tests to facilitate ms(number) [visionmedia] 0.1.0 / 2012-03-07 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/debug/node_modules/ms/README.md","tags":[],"body":"# ms.js: miliseconds conversion utility ```js ms('2 days') // 172800000 ms('1d') // 86400000 ms('10h') // 36000000 ms('2.5 hrs') // 9000000 ms('2h') // 7200000 ms('1m') // 60000 ms('5s') // 5000 ms('100') // 100 ``` ```js ms(60000) // \"1m\" ms(2 * 60000) // \"2m\" ms(ms('10 hours')) // \"10h\" ``` ```js ms(60000, { long: true }) // \"1 minute\" ms(2 * 60000, { long: true }) // \"2 minutes\" ms(ms('10 hours'), { long: true }) // \"10 hours\" ``` - Node/Browser compatible. Published as [`ms`](https://www.npmjs.org/package/ms) in [NPM](http://nodejs.org/download). - If a number is supplied to `ms`, a string with a unit is returned. - If a string that contains the number is supplied, it returns it as a number (e.g: it returns `100` for `'100'`). - If you pass a string with a number and a valid unit, the number of equivalent ms is returned. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/History.md","tags":[],"body":"1.6.9 / 2016-05-02 ================== * bump version 1.6.8 / 2016-01-25 ================== * fix graceful close [nkzawa] * polling: don't set the `closeTimeoutTimer` if the transport is upgraded 1.6.7 / 2016-01-10 ================== * bump version 1.6.6 / 2016-01-07 ================== * bump version 1.6.5 / 2016-01-05 ================== * package: upgrade ws for sec advisory * server: catch websocket errors before upgrade 1.6.4 / 2015-12-04 ================== * package: bump parser for arraybuffer base64 fix 1.6.3 / 2015-12-01 ================== * restore testing on 0.8 * improve X-XSS-Protection header definition [nkzawa] * add threshold for permessage-deflate [nkzawa] 1.6.2 / 2015-11-30 ================== * don't compress control packets 1.6.1 / 2015-11-28 ================== * package: bump `engine.io-client` for `ws` options fix * fix `latency` example 1.6.0 / 2015-11-28 ================== * add support for environments that extend `Object.prototype` * remove listeners upon `clearTransport` * support for all versions of node * fix lingering sockets that can stay open when upgrade failed * ensure sockets are closed on error * bump `ws` for several improvements * fix for a rare race condition on some error scenarios * support custom socket id * use container-based infrastructure for faster build * fix package.json wrongly referrering to self * allow overriding the `cookiePath` * fix potential encoding errors under certain conditions * support compression 1.5.4 / 2015-09-09 ================== * package: bump `engine.io-parser` 1.5.3 / 2015-09-09 ================== * package: bump `ws` to fix node 4.0.0 1.5.2 / 2015-07-09 ================== * package: bump `ws` to fix build issues 1.5.1 / 2015-01-19 ================== * no change on this release * package: bump `engine.io-client` 1.5.0 / 2015-01-18 ================== * package: bump `engine.io-parser` * polling: correctly abort the ongoing data request when closing [lpinca] * add cert-related client tests [rase-] 1.4.3 / 2014-11-21 ================== * package: bump `ws` to fix fd leaks * socket: flush the write buffer before closing the socket [lpinca] * polling: close the pending poll request when closing transport [lpinca] 1.4.2 / 2014-10-08 ================== * add iframe onload handling to jsonp tests [rase-] 1.4.1 / 2014-10-03 ================== * socket: allow upgrades if the socket is still in closing state * README: fix typo 1.4.0 / 2014-09-03 ================== * readme: fix formatting for goals numbering * server: ref fix by @nicokaiser * server: fix ws memory leak (fixes #268) * cache remote address in handshake since it might be lost later. * correct git ref * update client to commit with bumped parser * package: bump parser * npmignore: ignore `.gitignore` * package: bump `debug` * package: bump `engine.io-parser` for memleak fix 1.3.1 / 2014-06-19 ================== * package: bump `engine.io-client` 1.3.0 / 2014-06-13 ================== * update example to use v1.2.2 * fixed newline parsing in jsonp * make require('engine.io')() return a new Server instance [defunctzombie] * add Server.attach method [defunctzombie] * fix GH-211, set CORS headers when sending error message [mokesmokes] 1.2.2 / 2014-05-30 ================== * package: bump `engine.io-parser` for binary utf8 fix 1.2.1 / 2014-05-22 ================== * package: bump engine.io-client 1.2.0 / 2014-05-18 ================== * removed flashsocket, moving to userland 1.1.1 / 2014-05-14 ================== * test: reduce packet size * package: bump parser 1.1.0 / 2014-04-27 ================== * socket: removed unneeded `clearTimeout` (fixes #250) * made the request verification process async * package: bump `engine.io-parser` * use _query instead of query, fixes compat with restify * added a maximum buffer size to received data from polling * fixing looping array via for in to normal loop 1.0.5 / 2014-03-18 ================== * package: bump `engine.io-parser` and `engine.io-client` 1.0.4 / 2014-03-14 ================== * package: bump `engine.io-client` 1.0.3 / 2014-03-12 ================== * package: bump `engine.io-client` 1.0.2 / 2014-03-12 ================== * bump engine.io-client 1.0.1 / 2014-03-06 ================== * package: bump `engine.io-parser` * transports: fix jshint warnings and style 1.0.0 / 2014-03-06 ================== * polling-xhr: added `OPTIONS` support, fixes CORS * close() properly when triggered in connection handler * fix DDOS vector by setting up too many intervals * binary support 0.9.0 / 2014-02-09 ================== * Prevent errors with connections behind proxies without WS support like Squid [nicklagrow, samaanghani, davidhcummings] * Socket#request a simple property [mokesmokes] * Changed `Socket`'s `upgrade` event to happen after upgrade [mokesmokes] * Document `Socket#id` [mokesmokes] 0.8.2 / 2014-01-18 ================== * package: bump `engine.io-client` 0.8.1 / 2014-01-17 ================== * package: bump `engine.io-client` * package: pin dev deps * examples: fix port output * fix latency example 0.8.0 / 2014-01-05 ================== * package: bump `engine.io-client` to `0.8.0` * test: fix syntax, remove globals 0.7.14 / 2014-01-01 =================== * package: bump `engine.io-client` to `0.7.14` 0.7.13 / 2013-12-20 =================== * package: bump `engine.io-client` * transports: added support for XSS filters on IE [guille, 3rd-eden] 0.7.12 / 2013-11-11 =================== * package: bump `engine.io-client` 0.7.11 / 2013-11-06 =================== * package: bump engine.io-client * fix GH-198 0.7.10 / 2013-10-28 =================== * package: bump `engine.io-client` * package: update \"ws\" to v0.4.31 0.7.9 / 2013-08-30 ================== * package: bump `engine.io-client` 0.7.8 / 2013-08-30 ================== * package: bump `engine.io-client` * package: bump ws 0.7.7 / 2013-08-30 ================== * package: bump `engine.io-client` 0.7.6 / 2013-08-30 ================== * package: bump engine.io-client 0.7.5 / 2013-08-30 ================== * package: bump engine.io-client 0.7.4 / 2013-08-25 ================== * package: bump `engine.io-client` 0.7.3 / 2013-08-23 ================== * package: bump engine.io-client (noop) * package: fix regresison in upgrade cause by ws update 0.7.2 / 2013-08-23 ================== * package: bump `engine.io-client` for `WebSocket` browser fix 0.7.1 / 2013-08-23 ================== * package: bump engine.io-client for ws fix 0.7.0 / 2013-08-23 ================== * package: bump engine.io-client * updated example * inline merge * added support node version 0.10 to .travis.yml * fixed respond to flash policy request test. Closes #184 * fixed upgrade with timeout test. Closes #185 * engine.io: don't use __proto__, closes #170 0.6.3 / 2013-06-21 ================== * package: bumped `engine.io-client` to `0.6.3` 0.6.2 / 2013-06-15 ================== * fix upgrade stalling edge case introduced with #174 fix * remove unneeded client code related to iOS * added test for `engine.io-client` `0.6.1` 0.6.1 / 2013-06-06 ================== * package: bumped `engine.io-client` to `0.6.1` 0.6.0 / 2013-05-31 ================== * socket: clear timer after sending one noop packet (fixes #174) * clear all timers on socket close * sending error on transport creation upon a bad request * added test for client-side buffer cleanup * changed flushComplete to flush * ended support for node 0.6 0.5.0 / 2013-03-16 ================== * polling: implemented new parser * test writeBuffer isn't cleared onError, removed 'closing' check in .flush() * fixed bug89 and added tests: writeBuffer not flushed until nextTick 0.4.3 / 2013-02-08 ================== * package: bumped `engine.io-client` to `0.4.3` 0.4.2 / 2013-02-08 ================== * Only end upgrade socket connections if unhandled * Fix websocket dependency * Close socket if upgrade is received and socket.readyState != open 0.4.1 / 2013-01-18 ================== * package: bumped versions * Fixed bugs in previous send callback fix and updated test cases * Added a test case which makes the code before the send callback fix fail * socket: emit `data` event (synonym with `message`) * socket: added `Socket#write` * engine.io: cleanup * engine.io: deprecated `resource` * `npm docs engine.io` works now 0.3.10 / 2012-12-03 =================== * package: bumped `engine.io-client` with `close` fixes * add packetCreate event [jxck] * add packet event to socket [jxck] * transport: remove `Connection` headers and let node handle it * server: send validation failure reason to clients * engine: invoking as a function causes attach * socket: reset `writeBuffer` before send 0.3.9 / 2012-10-23 ================== * package: bumped `engine.io-client` 0.3.8 / 2012-10-23 ================== * package: bumped engine.io-client * examples: added first example 0.3.7 / 2012-10-21 ================== * package: bumped `engine.io-client` 0.3.6 / 2012-10-21 ================== [skipped] 0.3.5 / 2012-10-14 ================== * package: reverted last commit - we use the parser from the client 0.3.4 / 2012-10-14 ================== * package: `engine.io-client` moved to `devDependencies` * socket: added missing jsdoc 0.3.3 / 2012-10-10 ================== * socket: fixed check interval clearing [joewalnes] * transports: improved instrumentation 0.3.2 / 2012-10-08 ================== * socket: improve check interval for upgrade 0.3.1 / 2012-10-08 ================== * socket: faster upgrades (we perform a check immediately) * server: don't assume sid is numeric 0.3.0 / 2012-10-04 ================== * socket: `writeBuffer` now gets sliced, and is recoverable after `close` [afshinm] * server: expect ping from client and send interval with handshake [cadorn] * polling-jsonp: prevent client breakage with utf8 whitespace * socket: fix `flush` and `drain` events * socket: add `send` callback [afshinm] * transport: avoid unhandled error events for stale transports * README: documentation improvements [EugenDueck] 0.2.2 / 2012-08-26 ================== * server: remove buffering for flash policy requests * transport: avoid unhandled error events for stale transports (fixes #69) * readme: documented `toString` behavior on `send` [EugenDueck] 0.2.1 / 2012-08-13 ================== * polling-xhr: skip Keep-Alive when it's implied [EugenDueck] * polling-jsonp: skip Keep-Alive when it's implied [EugenDueck] * README: added plugins list with engine.io-conflation * socket: added flush/drain events (fixes #56) * server: avoid passing websocket to non-websocket transports (fixes #24) 0.2.0 / 2012-08-06 ================== * Bumped client * test: added closing connection test * server: implemented stronger id generator with collision detection 0.1.2 / 2012-08-02 ================== * Fixed a jsonp bug in Nokia mobile phones and potentially other UAs. 0.1.1 / 2012-08-01 ================== * Fixed errors when a socket is closed while upgrade probe is happening. * Improved WS error handling * Replaced websocket.io with ws, now that it supports older drafts * README fixes 0.1.0 / 2012-07-03 ================== * Initial release."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/README.md","tags":[],"body":"# Engine.IO: the realtime engine [![Build Status](https://secure.travis-ci.org/socketio/engine.io.svg)](http://travis-ci.org/socketio/engine.io) [![NPM version](https://badge.fury.io/js/engine.io.svg)](http://badge.fury.io/js/engine.io) `Engine.IO` is the implementation of transport-based cross-browser/cross-device bi-directional communication layer for [Socket.IO](http://github.com/socketio/socket.io). ## How to use ### Server #### (A) Listening on a port ```js var engine = require('engine.io'); var server = engine.listen(80); server.on('connection', function(socket){ socket.send('utf 8 string'); socket.send(new Buffer([0, 1, 2, 3, 4, 5])); // binary data }); ``` #### (B) Intercepting requests for a http.Server ```js var engine = require('engine.io'); var http = require('http').createServer().listen(3000); var server = engine.attach(http); server.on('connection', function (socket) { socket.on('message', function(data){ }); socket.on('close', function(){ }); }); ``` #### (C) Passing in requests ```js var engine = require('engine.io'); var server = new engine.Server(); server.on('connection', function(socket){ socket.send('hi'); }); // … httpServer.on('upgrade', function(req, socket, head){ server.handleUpgrade(req, socket, head); }); httpServer.on('request', function(req, res){ server.handleRequest(req, res); }); ``` ### Client ```html ``` For more information on the client refer to the [engine-client](http://github.com/learnboost/engine.io-client) repository. ## What features does it have? - **Maximum reliability**. Connections are established even in the presence of: - proxies and load balancers. - personal firewall and antivirus software. - for more information refer to **Goals** and **Architecture** sections - **Minimal client size** aided by: - lazy loading of flash transports. - lack of redundant transports. - **Scalable** - load balancer friendly - **Future proof** - **100% Node.JS core style** - No API sugar (left for higher level projects) - Written in readable vanilla JavaScript ## API ### Server #### Top-level These are exposed by `require('engine.io')`: ##### Events - `flush` - Called when a socket buffer is being flushed. - **Arguments** - `Socket`: socket being flushed - `Array`: write buffer - `drain` - Called when a socket buffer is drained - **Arguments** - `Socket`: socket being flushed ##### Properties - `protocol` _(Number)_: protocol revision number - `Server`: Server class constructor - `Socket`: Socket class constructor - `Transport` _(Function)_: transport constructor - `transports` _(Object)_: map of available transports ##### Methods - `()` - Returns a new `Server` instance. If the first argument is an `http.Server` then the new `Server` instance will be attached to it. Otherwise, the arguments are passed directly to the `Server` constructor. - **Parameters** - `http.Server`: optional, server to attach to. - `Object`: optional, options object (see `Server#constructor` api docs below) The following are identical ways to instantiate a server and then attach it. ```js var httpServer; // previously created with `http.createServer();` from node.js api. // create a server first, and then attach var eioServer = require('engine.io').Server(); eioServer.attach(httpServer); // or call the module as a function to get `Server` var eioServer = require('engine.io')(); eioServer.attach(httpServer); // immediately attach var eioServer = require('engine.io')(httpServer); ``` - `listen` - Creates an `http.Server` which listens on the given port and attaches WS to it. It returns `501 Not Implemented` for regular http requests. - **Parameters** - `Number`: port to listen on. - `Object`: optional, options object - `Function`: callback for `listen`. - **Options** - All options from `Server.attach` method, documented below. - **Additionally** See Server `constructor` below for options you can pass for creating the new Server - **Returns** `Server` - `attach` - Captures `upgrade` requests for a `http.Server`. In other words, makes a regular http.Server WebSocket-compatible. - **Parameters** - `http.Server`: server to attach to. - `Object`: optional, options object - **Options** - All options from `Server.attach` method, documented below. - **Additionally** See Server `constructor` below for options you can pass for creating the new Server - **Returns** `Server` a new Server instance. #### Server The main server/manager. _Inherits from EventEmitter_. ##### Events - `connection` - Fired when a new connection is established. - **Arguments** - `Socket`: a Socket object ##### Properties **Important**: if you plan to use Engine.IO in a scalable way, please keep in mind the properties below will only reflect the clients connected to a single process. - `clients` _(Object)_: hash of connected clients by id. - `clientsCount` _(Number)_: number of connected clients. ##### Methods - **constructor** - Initializes the server - **Parameters** - `Object`: optional, options object - **Options** - `pingTimeout` (`Number`): how many ms without a pong packet to consider the connection closed (`60000`) - `pingInterval` (`Number`): how many ms before sending a new ping packet (`25000`) - `maxHttpBufferSize` (`Number`): how many bytes or characters a message can be when polling, before closing the session (to avoid DoS). Default value is `10E7`. - `allowRequest` (`Function`): A function that receives a given handshake or upgrade request as its first parameter, and can decide whether to continue or not. The second argument is a function that needs to be called with the decided information: `fn(err, success)`, where `success` is a boolean value where false means that the request is rejected, and err is an error code. - `transports` (` String`): transports to allow connections to (`['polling', 'websocket']`) - `allowUpgrades` (`Boolean`): whether to allow transport upgrades (`true`) - `perMessageDeflate` (`Object|Boolean`): parameters of the WebSocket permessage-deflate extension (see [ws module](https://github.com/einaros/ws) api docs). Set to `false` to disable. (`true`) - `threshold` (`Number`): data is compressed only if the byte size is above this value (`1024`) - `httpCompression` (`Object|Boolean`): parameters of the http compression for the polling transports (see [zlib](http://nodejs.org/api/zlib.html#zlib_options) api docs). Set to `false` to disable. (`true`) - `threshold` (`Number`): data is compressed only if the byte size is above this value (`1024`) - `cookie` (`String|Boolean`): name of the HTTP cookie that contains the client sid to send as part of handshake response headers. Set to `false` to not send one. (`io`) - `cookiePath` (`String|Boolean`): path of the above `cookie` option. If false, no path will be sent, which means browsers will only send the cookie on the engine.io attached path (`/engine.io`). Set this to `/` to send the io cookie on all requests. (`false`) - `close` - Closes all clients - **Returns** `Server` for chaining - `handleRequest` - Called internally when a `Engine` request is intercepted. - **Parameters** - `http.ServerRequest`: a node request object - `http.ServerResponse`: a node response object - **Returns** `Server` for chaining - `handleUpgrade` - Called internally when a `Engine` ws upgrade is intercepted. - **Parameters** (same as `upgrade` event) - `http.ServerRequest`: a node request object - `net.Stream`: TCP socket for the request - `Buffer`: legacy tail bytes - **Returns** `Server` for chaining - `attach` - Attach this Server instance to an `http.Server` - Captures `upgrade` requests for a `http.Server`. In other words, makes a regular http.Server WebSocket-compatible. - **Parameters** - `http.Server`: server to attach to. - `Object`: optional, options object - **Options** - `path` (`String`): name of the path to capture (`/engine.io`). - `destroyUpgrade` (`Boolean`): destroy unhandled upgrade requests (`true`) - `destroyUpgradeTimeout` (`Number`): milliseconds after which unhandled requests are ended (`1000`) - `generateId` - Generate a socket id. - Overwrite this method to generate your custom socket id. - **Parameters** - `http.ServerRequest`: a node request object - **Returns** A socket id for connected client. #### Socket A representation of a client. _Inherits from EventEmitter_. ##### Events - `close` - Fired when the client is disconnected. - **Arguments** - `String`: reason for closing - `Object`: description object (optional) - `message` - Fired when the client sends a message. - **Arguments** - `String` or `Buffer`: Unicode string or Buffer with binary contents - `error` - Fired when an error occurs. - **Arguments** - `Error`: error object - `flush` - Called when the write buffer is being flushed. - **Arguments** - `Array`: write buffer - `drain` - Called when the write buffer is drained - `packet` - Called when a socket received a packet (`message`, `ping`) - **Arguments** - `type`: packet type - `data`: packet data (if type is message) - `packetCreate` - Called before a socket sends a packet (`message`, `pong`) - **Arguments** - `type`: packet type - `data`: packet data (if type is message) ##### Properties - `id` _(String)_: unique identifier - `server` _(Server)_: engine parent reference - `request` _(http.ServerRequest)_: request that originated the Socket - `upgraded` _(Boolean)_: whether the transport has been upgraded - `readyState` _(String)_: opening|open|closing|closed - `transport` _(Transport)_: transport reference ##### Methods - `send`: - Sends a message, performing `message = toString(arguments[0])` unless sending binary data, which is sent as is. - **Parameters** - `String` | `Buffer` | `ArrayBuffer` | `ArrayBufferView`: a string or any object implementing `toString()`, with outgoing data, or a Buffer or ArrayBuffer with binary data. Also any ArrayBufferView can be sent as is. - `Object`: optional, options object - `Function`: optional, a callback executed when the message gets flushed out by the transport - **Options** - `compress` (`Boolean`): whether to compress sending data. This option might be ignored and forced to be `true` when using polling. (`true`) - **Returns** `Socket` for chaining - `close` - Disconnects the client - **Returns** `Socket` for chaining ### Client Exposed in the `eio` global namespace (in the browser), or by `require('engine.io-client')` (in Node.JS). For the client API refer to the [engine-client](http://github.com/learnboost/engine.io-client) repository. ## Debug / logging Engine.IO is powered by [debug](http://github.com/visionmedia/debug). In order to see all the debug output, run your app with the environment variable `DEBUG` including the desired scope. To see the output from all of Engine.IO's debugging scopes you can use: ``` DEBUG=engine* node myapp ``` ## Transports - `polling`: XHR / JSONP polling transport. - `websocket`: WebSocket transport. ## Plugins - [engine.io-conflation](https://github.com/EugenDueck/engine.io-conflation): Makes **conflation and aggregation** of messages straightforward. ## Support The support channels for `engine.io` are the same as `socket.io`: - irc.freenode.net **#socket.io** - [Google Groups](http://groups.google.com/group/socket_io) - [Website](http://socket.io) ## Development To contribute patches, run tests or benchmarks, make sure to clone the repository: ``` git clone git://github.com/LearnBoost/engine.io.git ``` Then: ``` cd engine.io npm install ``` ## Tests Tests run with `make test`. It runs the server tests that are aided by the usage of `engine.io-client`. Make sure `npm install` is run first. ## Goals The main goal of `Engine` is ensuring the most reliable realtime communication. Unlike the previous Socket.IO core, it always establishes a long-polling connection first, then tries to upgrade to better transports that are \"tested\" on the side. During the lifetime of the Socket.IO projects, we've found countless drawbacks to relying on `HTML5 WebSocket` or `Flash Socket` as the first connection mechanisms. Both are clearly the _right way_ of establishing a bidirectional communication, with HTML5 WebSocket being the way of the future. However, to answer most business needs, alternative traditional HTTP 1.1 mechanisms are just as good as delivering the same solution. WebSocket based connections have two fundamental benefits: 1. **Better server performance** - _A: Load balancers_ Load balancing a long polling connection poses a serious architectural nightmare since requests can come from any number of open sockets by the user agent, but they all need to be routed to the process and computer that owns the `Engine` connection. This negatively impacts RAM and CPU usage. - _B: Network traffic_ WebSocket is designed around the premise that each message frame has to be surrounded by the least amount of data. In HTTP 1.1 transports, each message frame is surrounded by HTTP headers and chunked encoding frames. If you try to send the message _\"Hello world\"_ with xhr-polling, the message ultimately becomes larger than if you were to send it with WebSocket. - _C: Lightweight parser_ As an effect of **B**, the server has to do a lot more work to parse the network data and figure out the message when traditional HTTP requests are used (as in long polling). This means that another advantage of WebSocket is less server CPU usage. 2. **Better user experience** Due to the reasons stated in point **1**, the most important effect of being able to establish a WebSocket connection is raw data transfer speed, which translates in _some_ cases in better user experience. Applications with heavy realtime interaction (such as games) will benefit greatly, whereas applications like realtime chat (Gmail/Facebook), newsfeeds (Facebook) or timelines (Twitter) will have negligible user experience improvements. Having said this, attempting to establish a WebSocket connection directly so far has proven problematic: 1. **Proxies** Many corporate proxies block WebSocket traffic. 2. **Personal firewall and antivirus software** As a result of our research, we've found that at least 3 personal security applications block WebSocket traffic. 3. **Cloud application platforms** Platforms like Heroku or No.de have had trouble keeping up with the fast-paced nature of the evolution of the WebSocket protocol. Applications therefore end up inevitably using long polling, but the seamless installation experience of Socket.IO we strive for (_\"require() it and it just works\"_) disappears. Some of these problems have solutions. In the case of proxies and personal programs, however, the solutions many times involve upgrading software. Experience has shown that relying on client software upgrades to deliver a business solution is fruitless: the very existence of this project has to do with a fragmented panorama of user agent distribution, with clients connecting with latest versions of the most modern user agents (Chrome, Firefox and Safari), but others with versions as low as IE 5.5. From the user perspective, an unsuccessful WebSocket connection can translate in up to at least 10 seconds of waiting for the realtime application to begin exchanging data. This **perceptively** hurts user experience. To summarize, **Engine** focuses on reliability and user experience first, marginal potential UX improvements and increased server performance second. `Engine` is the result of all the lessons learned with WebSocket in the wild. ## Architecture The main premise of `Engine`, and the core of its existence, is the ability to swap transports on the fly. A connection starts as xhr-polling, but it can switch to WebSocket. The central problem this poses is: how do we switch transports without losing messages? `Engine` only switches from polling to another transport in between polling cycles. Since the server closes the connection after a certain timeout when there's no activity, and the polling transport implementation buffers messages in between connections, this ensures no message loss and optimal performance. Another benefit of this design is that we workaround almost all the limitations of **Flash Socket**, such as slow connection times, increased file size (we can safely lazy load it without hurting user experience), etc. ## FAQ ### Can I use engine without Socket.IO ? Absolutely. Although the recommended framework for building realtime applications is Socket.IO, since it provides fundamental features for real-world applications such as multiplexing, reconnection support, etc. `Engine` is to Socket.IO what Connect is to Express. An essential piece for building realtime frameworks, but something you _probably_ won't be using for building actual applications. ### Does the server serve the client? No. The main reason is that `Engine` is meant to be bundled with frameworks. Socket.IO includes `Engine`, therefore serving two clients is not necessary. If you use Socket.IO, including ```html ``` has you covered. ### Can I implement `Engine` in other languages? Absolutely. The [engine.io-protocol](https://github.com/LearnBoost/engine.io-protocol) repository contains the most up to date description of the specification at all times, and the parser implementation in JavaScript. ## License (The MIT License) Copyright (c) 2014 Guillermo Rauch Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/accepts/HISTORY.md","tags":[],"body":"1.1.4 / 2014-12-10 ================== * deps: mime-types@~2.0.4 - deps: mime-db@~1.3.0 1.1.3 / 2014-11-09 ================== * deps: mime-types@~2.0.3 - deps: mime-db@~1.2.0 1.1.2 / 2014-10-14 ================== * deps: negotiator@0.4.9 - Fix error when media type has invalid parameter 1.1.1 / 2014-09-28 ================== * deps: mime-types@~2.0.2 - deps: mime-db@~1.1.0 * deps: negotiator@0.4.8 - Fix all negotiations to be case-insensitive - Stable sort preferences of same quality according to client order 1.1.0 / 2014-09-02 ================== * update `mime-types` 1.0.7 / 2014-07-04 ================== * Fix wrong type returned from `type` when match after unknown extension 1.0.6 / 2014-06-24 ================== * deps: negotiator@0.4.7 1.0.5 / 2014-06-20 ================== * fix crash when unknown extension given 1.0.4 / 2014-06-19 ================== * use `mime-types` 1.0.3 / 2014-06-11 ================== * deps: negotiator@0.4.6 - Order by specificity when quality is the same 1.0.2 / 2014-05-29 ================== * Fix interpretation when header not in request * deps: pin negotiator@0.4.5 1.0.1 / 2014-01-18 ================== * Identity encoding isn't always acceptable * deps: negotiator@~0.4.0 1.0.0 / 2013-12-27 ================== * Genesis"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/accepts/README.md","tags":[],"body":"# accepts [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] Higher level content negotation based on [negotiator](https://github.com/federomero/negotiator). Extracted from [koa](https://github.com/koajs/koa) for general use. In addition to negotatior, it allows: - Allows types as an array or arguments list, ie `(['text/html', 'application/json'])` as well as `('text/html', 'application/json')`. - Allows type shorthands such as `json`. - Returns `false` when no types match - Treats non-existent headers as `*` ## API ### var accept = new Accepts(req) ```js var accepts = require('accepts') http.createServer(function (req, res) { var accept = accepts(req) }) ``` ### accept\\[property\\]\\(\\) Returns all the explicitly accepted content property as an array in descending priority. - `accept.types()` - `accept.encodings()` - `accept.charsets()` - `accept.languages()` They are also aliased in singular form such as `accept.type()`. `accept.languages()` is also aliased as `accept.langs()`, etc. Note: you should almost never do this in a real app as it defeats the purpose of content negotiation. Example: ```js // in Google Chrome var encodings = accept.encodings() // -> ['sdch', 'gzip', 'deflate'] ``` Since you probably don't support `sdch`, you should just supply the encodings you support: ```js var encoding = accept.encodings('gzip', 'deflate') // -> 'gzip', probably ``` ### accept\\[property\\]\\(values, ...\\) You can either have `values` be an array or have an argument list of values. If the client does not accept any `values`, `false` will be returned. If the client accepts any `values`, the preferred `value` will be return. For `accept.types()`, shorthand mime types are allowed. Example: ```js // req.headers.accept = 'application/json' accept.types('json') // -> 'json' accept.types('html', 'json') // -> 'json' accept.types('html') // -> false // req.headers.accept = '' // which is equivalent to `*` accept.types() // -> [], no explicit types accept.types('text/html', 'text/json') // -> 'text/html', since it was first ``` ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/accepts.svg?style=flat [npm-url]: https://npmjs.org/package/accepts [node-version-image]: https://img.shields.io/node/v/accepts.svg?style=flat [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/accepts.svg?style=flat [travis-url]: https://travis-ci.org/jshttp/accepts [coveralls-image]: https://img.shields.io/coveralls/jshttp/accepts.svg?style=flat [coveralls-url]: https://coveralls.io/r/jshttp/accepts [downloads-image]: https://img.shields.io/npm/dm/accepts.svg?style=flat [downloads-url]: https://npmjs.org/package/accepts"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/accepts/node_modules/mime-types/HISTORY.md","tags":[],"body":"2.0.14 / 2015-06-06 =================== * deps: mime-db@~1.12.0 - Add new mime types 2.0.13 / 2015-05-31 =================== * deps: mime-db@~1.11.0 - Add new mime types 2.0.12 / 2015-05-19 =================== * deps: mime-db@~1.10.0 - Add new mime types 2.0.11 / 2015-05-05 =================== * deps: mime-db@~1.9.1 - Add new mime types 2.0.10 / 2015-03-13 =================== * deps: mime-db@~1.8.0 - Add new mime types 2.0.9 / 2015-02-09 ================== * deps: mime-db@~1.7.0 - Add new mime types - Community extensions ownership transferred from `node-mime` 2.0.8 / 2015-01-29 ================== * deps: mime-db@~1.6.0 - Add new mime types 2.0.7 / 2014-12-30 ================== * deps: mime-db@~1.5.0 - Add new mime types - Fix various invalid MIME type entries 2.0.6 / 2014-12-30 ================== * deps: mime-db@~1.4.0 - Add new mime types - Fix various invalid MIME type entries - Remove example template MIME types 2.0.5 / 2014-12-29 ================== * deps: mime-db@~1.3.1 - Fix missing extensions 2.0.4 / 2014-12-10 ================== * deps: mime-db@~1.3.0 - Add new mime types 2.0.3 / 2014-11-09 ================== * deps: mime-db@~1.2.0 - Add new mime types 2.0.2 / 2014-09-28 ================== * deps: mime-db@~1.1.0 - Add new mime types - Add additional compressible - Update charsets 2.0.1 / 2014-09-07 ================== * Support Node.js 0.6 2.0.0 / 2014-09-02 ================== * Use `mime-db` * Remove `.define()` 1.0.2 / 2014-08-04 ================== * Set charset=utf-8 for `text/javascript` 1.0.1 / 2014-06-24 ================== * Add `text/jsx` type 1.0.0 / 2014-05-12 ================== * Return `false` for unknown types * Set charset=utf-8 for `application/json` 0.1.0 / 2014-05-02 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/accepts/node_modules/mime-types/README.md","tags":[],"body":"# mime-types [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] The ultimate javascript content-type utility. Similar to [node-mime](https://github.com/broofa/node-mime), except: - __No fallbacks.__ Instead of naively returning the first available type, `mime-types` simply returns `false`, so do `var type = mime.lookup('unrecognized') || 'application/octet-stream'`. - No `new Mime()` business, so you could do `var lookup = require('mime-types').lookup`. - Additional mime types are added such as jade and stylus via [mime-db](https://github.com/jshttp/mime-db) - No `.define()` functionality Otherwise, the API is compatible. ## Install ```sh $ npm install mime-types ``` ## Adding Types All mime types are based on [mime-db](https://github.com/jshttp/mime-db), so open a PR there if you'd like to add mime types. ## API ```js var mime = require('mime-types') ``` All functions return `false` if input is invalid or not found. ### mime.lookup(path) Lookup the content-type associated with a file. ```js mime.lookup('json') // 'application/json' mime.lookup('.md') // 'text/x-markdown' mime.lookup('file.html') // 'text/html' mime.lookup('folder/file.js') // 'application/javascript' mime.lookup('cats') // false ``` ### mime.contentType(type) Create a full content-type header given a content-type or extension. ```js mime.contentType('markdown') // 'text/x-markdown; charset=utf-8' mime.contentType('file.json') // 'application/json; charset=utf-8' // from a full path mime.contentType(path.extname('/path/to/file.json')) // 'application/json; charset=utf-8' ``` ### mime.extension(type) Get the default extension for a content-type. ```js mime.extension('application/octet-stream') // 'bin' ``` ### mime.charset(type) Lookup the implied default charset of a content-type. ```js mime.charset('text/x-markdown') // 'UTF-8' ``` ### var type = mime.types[extension] A map of content-types by extension. ### [extensions...] = mime.extensions[type] A map of extensions by content-type. ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/mime-types.svg [npm-url]: https://npmjs.org/package/mime-types [node-version-image]: https://img.shields.io/node/v/mime-types.svg [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/mime-types/master.svg [travis-url]: https://travis-ci.org/jshttp/mime-types [coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-types/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/mime-types [downloads-image]: https://img.shields.io/npm/dm/mime-types.svg [downloads-url]: https://npmjs.org/package/mime-types"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/HISTORY.md","tags":[],"body":"1.12.0 / 2015-06-05 =================== * Add `application/bdoc` * Add `application/vnd.hyperdrive+json` * Add `application/x-bdoc` * Add extension `.rtf` to `text/rtf` 1.11.0 / 2015-05-31 =================== * Add `audio/wav` * Add `audio/wave` * Add extension `.litcoffee` to `text/coffeescript` * Add extension `.sfd-hdstx` to `application/vnd.hydrostatix.sof-data` * Add extension `.n-gage` to `application/vnd.nokia.n-gage.symbian.install` 1.10.0 / 2015-05-19 =================== * Add `application/vnd.balsamiq.bmpr` * Add `application/vnd.microsoft.portable-executable` * Add `application/x-ns-proxy-autoconfig` 1.9.1 / 2015-04-19 ================== * Remove `.json` extension from `application/manifest+json` - This is causing bugs downstream 1.9.0 / 2015-04-19 ================== * Add `application/manifest+json` * Add `application/vnd.micro+json` * Add `image/vnd.zbrush.pcx` * Add `image/x-ms-bmp` 1.8.0 / 2015-03-13 ================== * Add `application/vnd.citationstyles.style+xml` * Add `application/vnd.fastcopy-disk-image` * Add `application/vnd.gov.sk.xmldatacontainer+xml` * Add extension `.jsonld` to `application/ld+json` 1.7.0 / 2015-02-08 ================== * Add `application/vnd.gerber` * Add `application/vnd.msa-disk-image` 1.6.1 / 2015-02-05 ================== * Community extensions ownership transferred from `node-mime` 1.6.0 / 2015-01-29 ================== * Add `application/jose` * Add `application/jose+json` * Add `application/json-seq` * Add `application/jwk+json` * Add `application/jwk-set+json` * Add `application/jwt` * Add `application/rdap+json` * Add `application/vnd.gov.sk.e-form+xml` * Add `application/vnd.ims.imsccv1p3` 1.5.0 / 2014-12-30 ================== * Add `application/vnd.oracle.resource+json` * Fix various invalid MIME type entries - `application/mbox+xml` - `application/oscp-response` - `application/vwg-multiplexed` - `audio/g721` 1.4.0 / 2014-12-21 ================== * Add `application/vnd.ims.imsccv1p2` * Fix various invalid MIME type entries - `application/vnd-acucobol` - `application/vnd-curl` - `application/vnd-dart` - `application/vnd-dxr` - `application/vnd-fdf` - `application/vnd-mif` - `application/vnd-sema` - `application/vnd-wap-wmlc` - `application/vnd.adobe.flash-movie` - `application/vnd.dece-zip` - `application/vnd.dvb_service` - `application/vnd.micrografx-igx` - `application/vnd.sealed-doc` - `application/vnd.sealed-eml` - `application/vnd.sealed-mht` - `application/vnd.sealed-ppt` - `application/vnd.sealed-tiff` - `application/vnd.sealed-xls` - `application/vnd.sealedmedia.softseal-html` - `application/vnd.sealedmedia.softseal-pdf` - `application/vnd.wap-slc` - `application/vnd.wap-wbxml` - `audio/vnd.sealedmedia.softseal-mpeg` - `image/vnd-djvu` - `image/vnd-svf` - `image/vnd-wap-wbmp` - `image/vnd.sealed-png` - `image/vnd.sealedmedia.softseal-gif` - `image/vnd.sealedmedia.softseal-jpg` - `model/vnd-dwf` - `model/vnd.parasolid.transmit-binary` - `model/vnd.parasolid.transmit-text` - `text/vnd-a` - `text/vnd-curl` - `text/vnd.wap-wml` * Remove example template MIME types - `application/example` - `audio/example` - `image/example` - `message/example` - `model/example` - `multipart/example` - `text/example` - `video/example` 1.3.1 / 2014-12-16 ================== * Fix missing extensions - `application/json5` - `text/hjson` 1.3.0 / 2014-12-07 ================== * Add `application/a2l` * Add `application/aml` * Add `application/atfx` * Add `application/atxml` * Add `application/cdfx+xml` * Add `application/dii` * Add `application/json5` * Add `application/lxf` * Add `application/mf4` * Add `application/vnd.apache.thrift.compact` * Add `application/vnd.apache.thrift.json` * Add `application/vnd.coffeescript` * Add `application/vnd.enphase.envoy` * Add `application/vnd.ims.imsccv1p1` * Add `text/csv-schema` * Add `text/hjson` * Add `text/markdown` * Add `text/yaml` 1.2.0 / 2014-11-09 ================== * Add `application/cea` * Add `application/dit` * Add `application/vnd.gov.sk.e-form+zip` * Add `application/vnd.tmd.mediaflex.api+xml` * Type `application/epub+zip` is now IANA-registered 1.1.2 / 2014-10-23 ================== * Rebuild database for `application/x-www-form-urlencoded` change 1.1.1 / 2014-10-20 ================== * Mark `application/x-www-form-urlencoded` as compressible. 1.1.0 / 2014-09-28 ================== * Add `application/font-woff2` 1.0.3 / 2014-09-25 ================== * Fix engine requirement in package 1.0.2 / 2014-09-25 ================== * Add `application/coap-group+json` * Add `application/dcd` * Add `application/vnd.apache.thrift.binary` * Add `image/vnd.tencent.tap` * Mark all JSON-derived types as compressible * Update `text/vtt` data 1.0.1 / 2014-08-30 ================== * Fix extension ordering 1.0.0 / 2014-08-30 ================== * Add `application/atf` * Add `application/merge-patch+json` * Add `multipart/x-mixed-replace` * Add `source: 'apache'` metadata * Add `source: 'iana'` metadata * Remove badly-assumed charset data"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/README.md","tags":[],"body":"# mime-db [![NPM Version][npm-version-image]][npm-url] [![NPM Downloads][npm-downloads-image]][npm-url] [![Node.js Version][node-image]][node-url] [![Build Status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url] This is a database of all mime types. It consists of a single, public JSON file and does not include any logic, allowing it to remain as un-opinionated as possible with an API. It aggregates data from the following sources: - http://www.iana.org/assignments/media-types/media-types.xhtml - http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types ## Installation ```bash npm install mime-db ``` If you're crazy enough to use this in the browser, you can just grab the JSON file: ``` https://cdn.rawgit.com/jshttp/mime-db/master/db.json ``` ## Usage ```js var db = require('mime-db'); // grab data on .js files var data = db['application/javascript']; ``` ## Data Structure The JSON file is a map lookup for lowercased mime types. Each mime type has the following properties: - `.source` - where the mime type is defined. If not set, it's probably a custom media type. - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types) - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml) - `.extensions[]` - known extensions associated with this mime type. - `.compressible` - whether a file of this type is can be gzipped. - `.charset` - the default charset associated with this type, if any. If unknown, every property could be `undefined`. ## Contributing To edit the database, only make PRs against `src/custom.json` or `src/custom-suffix.json`. To update the build, run `npm run update`. ## Adding Custom Media Types The best way to get new media types included in this library is to register them with the IANA. The community registration procedure is outlined in [RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types registered with the IANA are automatically pulled into this library. [npm-version-image]: https://img.shields.io/npm/v/mime-db.svg [npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg [npm-url]: https://npmjs.org/package/mime-db [travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg [travis-url]: https://travis-ci.org/jshttp/mime-db [coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg [coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master [node-image]: https://img.shields.io/node/v/mime-db.svg [node-url]: http://nodejs.org/download/"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/accepts/node_modules/negotiator/README.md","tags":[],"body":"# negotiator [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Node.js Version][node-version-image]][node-version-url] [![Build Status][travis-image]][travis-url] [![Test Coverage][coveralls-image]][coveralls-url] An HTTP content negotiator for Node.js ## Installation ```sh $ npm install negotiator ``` ## API ```js var Negotiator = require('negotiator') ``` ### Accept Negotiation ```js availableMediaTypes = ['text/html', 'text/plain', 'application/json'] // The negotiator constructor receives a request object negotiator = new Negotiator(request) // Let's say Accept header is 'text/html, application/*;q=0.2, image/jpeg;q=0.8' negotiator.mediaTypes() // -> ['text/html', 'image/jpeg', 'application/*'] negotiator.mediaTypes(availableMediaTypes) // -> ['text/html', 'application/json'] negotiator.mediaType(availableMediaTypes) // -> 'text/html' ``` You can check a working example at `examples/accept.js`. #### Methods ##### mediaTypes(availableMediaTypes): Returns an array of preferred media types ordered by priority from a list of available media types. ##### mediaType(availableMediaType): Returns the top preferred media type from a list of available media types. ### Accept-Language Negotiation ```js negotiator = new Negotiator(request) availableLanguages = 'en', 'es', 'fr' // Let's say Accept-Language header is 'en;q=0.8, es, pt' negotiator.languages() // -> ['es', 'pt', 'en'] negotiator.languages(availableLanguages) // -> ['es', 'en'] language = negotiator.language(availableLanguages) // -> 'es' ``` You can check a working example at `examples/language.js`. #### Methods ##### languages(availableLanguages): Returns an array of preferred languages ordered by priority from a list of available languages. ##### language(availableLanguages): Returns the top preferred language from a list of available languages. ### Accept-Charset Negotiation ```js availableCharsets = ['utf-8', 'iso-8859-1', 'iso-8859-5'] negotiator = new Negotiator(request) // Let's say Accept-Charset header is 'utf-8, iso-8859-1;q=0.8, utf-7;q=0.2' negotiator.charsets() // -> ['utf-8', 'iso-8859-1', 'utf-7'] negotiator.charsets(availableCharsets) // -> ['utf-8', 'iso-8859-1'] negotiator.charset(availableCharsets) // -> 'utf-8' ``` You can check a working example at `examples/charset.js`. #### Methods ##### charsets(availableCharsets): Returns an array of preferred charsets ordered by priority from a list of available charsets. ##### charset(availableCharsets): Returns the top preferred charset from a list of available charsets. ### Accept-Encoding Negotiation ```js availableEncodings = ['identity', 'gzip'] negotiator = new Negotiator(request) // Let's say Accept-Encoding header is 'gzip, compress;q=0.2, identity;q=0.5' negotiator.encodings() // -> ['gzip', 'identity', 'compress'] negotiator.encodings(availableEncodings) // -> ['gzip', 'identity'] negotiator.encoding(availableEncodings) // -> 'gzip' ``` You can check a working example at `examples/encoding.js`. #### Methods ##### encodings(availableEncodings): Returns an array of preferred encodings ordered by priority from a list of available encodings. ##### encoding(availableEncodings): Returns the top preferred encoding from a list of available encodings. ## License [MIT](LICENSE) [npm-image]: https://img.shields.io/npm/v/negotiator.svg?style=flat [npm-url]: https://npmjs.org/package/negotiator [node-version-image]: https://img.shields.io/node/v/negotiator.svg?style=flat [node-version-url]: http://nodejs.org/download/ [travis-image]: https://img.shields.io/travis/jshttp/negotiator.svg?style=flat [travis-url]: https://travis-ci.org/jshttp/negotiator [coveralls-image]: https://img.shields.io/coveralls/jshttp/negotiator.svg?style=flat [coveralls-url]: https://coveralls.io/r/jshttp/negotiator?branch=master [downloads-image]: https://img.shields.io/npm/dm/negotiator.svg?style=flat [downloads-url]: https://npmjs.org/package/negotiator"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/base64id/README.md","tags":[],"body":"base64id ======== Node.js module that generates a base64 id. Uses crypto.randomBytes when available, falls back to unsafe methods for node.js <= 0.4. To increase performance, random bytes are buffered to minimize the number of synchronous calls to crypto.randomBytes. ## Installation $ npm install mongoose ## Usage var base64id = require('base64id'); var id = base64id.generateId();"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/History.md","tags":[],"body":"1.2.4 / 2015-12-04 ================== * fix `ArrayBuffer` encoding in base64 string 1.2.3 / 2015-11-28 ================== * fix encoding blob as base64 1.2.2 / 2015-09-09 ================== * fixes for iojs/node 1.2.1 / 2015-01-17 ================== * pass has-binary result to encodePacket [rase-] * Fix parse error [rase-] 1.2.0 / 2015-01-11 ================== * fix return type for decodePacket * README fixes * use travis matrix for better test runs * encode into binary only if needed * add test cases for base64 object encoding. * add encodeBase64Object to encoder for browser * avoid sending Blobs on PhantomJS (as on Android) * test that utf8 encoding is not on by default but can be switched on manually 1.1.0 / 2014-07-16 ================== * make utf8 encoding/decoding optional 1.0.8 / 2014-07-16 ================== * adjust protocol revision * handle invalid utf8 errors gracefully * fix memory leak on browser 1.0.7 / 2014-06-24 ================== * fix decodePayloadAsBinary memory leak [christophwitzko] * README improvements 1.0.6 / 2014-05-30 ================== * utf8 fixes when using binary encoding [nkzawa] 1.0.5 / 2014-05-06 ================== * fix range error 1.0.4 / 2014-04-13 ================== * fix `encodePayloadAsBinary` method encodes packets to base64 1.0.3 / 2014-04-10 ================== * Fix length calculation when encoding as binary [binlain] 1.0.2 / 2014-03-16 ================== * fix binary for android due to a bug in Blob XHR2 implementation [Rase-] 1.0.1 / 2014-03-06 ================== * implement `blob` module to simplify code * bump `arraybuffer.slice` * style fixes 1.0.0 / 2014-02-18 ================== * parser: added binary encoding [Rase-] * parser: switched to an async interface [Rase-] 0.3.0 / 2013-03-16 ================== * parser: if callback returns `false` ignore rest of payload * test: fixed all broken tests 0.2.1 / 2013-03-16 ================== * added protocol version to index.js [albertyfwu] 0.2.0 / 2013-02-26 ================== * Changed `decodePayload` to use a callback instead of returning an array [sweetieSong, albertyfwu] 0.1.1 / 2013-01-26 ================== * package.json fixes 0.1.0 / 2013-01-19 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/Readme.md","tags":[],"body":"# engine.io-parser [![Build Status](https://secure.travis-ci.org/socketio/engine.io-parser.svg)](http://travis-ci.org/socketio/engine.io-parser) [![NPM version](https://badge.fury.io/js/engine.io-parser.svg)](http://badge.fury.io/js/engine.io-parser) This is the JavaScript parser for the engine.io protocol encoding, shared by both [engine.io-client](https://github.com/socketio/engine.io-client) and [engine.io](https://github.com/socketio/engine.io). ## How to use ### Standalone The parser can encode/decode packets, payloads, and payloads as binary with the following methods: `encodePacket`, `decodePacket`, `encodePayload`, `decodePayload`, `encodePayloadAsBinary`, `decodePayloadAsBinary`. The browser-side parser also includes `encodePayloadAsArrayBuffer` and `encodePayloadAsBlob`. Example: ```js var parser = require('engine.io-parser'); var data = new Buffer(5); for (var i = 0; i bundle.js ``` 1. include on your page ```html ``` ## Features - Runs on browser and node.js seamlessly - Runs inside HTML5 WebWorker - Can encode and decode packets - Encodes from/to ArrayBuffer or Blob when in browser, and Buffer or ArrayBuffer in Node ## API Note: `cb(type)` means the type is a callback function that contains a parameter of type `type` when called. ### Node - `encodePacket` - Encodes a packet. - **Parameters** - `Object`: the packet to encode, has `type` and `data`. - `data`: can be a `String`, `Number`, `Buffer`, `ArrayBuffer` - `Boolean`: optional, binary support - `Function`: callback, returns the encoded packet (`cb(String)`) - `decodePacket` - Decodes a packet. Data also available as an ArrayBuffer if requested. - Returns data as `String` or (`Blob` on browser, `ArrayBuffer` on Node) - **Parameters** - `String` | `ArrayBuffer`: the packet to decode, has `type` and `data` - `String`: optional, the binary type - `encodeBase64Packet` - Encodes a packet with binary data in a base64 string (`String`) - **Parameters** - `Object`: the packet to encode, has `type` and `data` - `Function`: callback, returns the base64 encoded message (`cb(String)`) - `decodeBase64Packet` - Decodes a packet encoded in a base64 string. - **Parameters** - `String`: the base64 encoded message - `String`: optional, the binary type - `encodePayload` - Encodes multiple messages (payload). - If any contents are binary, they will be encoded as base64 strings. Base64 encoded strings are marked with a b before the length specifier - **Parameters** - `Array`: an array of packets - `Boolean`: optional, binary support - `Function`: callback, returns the encoded payload (`cb(String)`) - `decodePayload` - Decodes data when a payload is maybe expected. Possible binary contents are decoded from their base64 representation. - **Parameters** - `String`: the payload - `String`: optional, the binary type - `Function`: callback, returns (cb(`Object`: packet, `Number`:packet index, `Number`:packet total)) - `encodePayloadAsBinary` - Encodes multiple messages (payload) as binary. - **Parameters** - `Array`: an array of packets - `Function`: callback, returns the encoded payload (`cb(Buffer)`) - `decodePayloadAsBinary` - Decodes data when a payload is maybe expected. Strings are decoded by interpreting each byte as a key code for entries marked to start with 0. See description of encodePayloadAsBinary. - **Parameters** - `Buffer`: the buffer - `String`: optional, the binary type - `Function`: callback, returns the decoded packet (`cb(Object)`) ### Browser - `encodePayloadAsArrayBuffer` - Encodes multiple messages (payload) as binary. - **Parameters** - `Array`: an array of packets - `Function`: callback, returns the encoded payload (`cb(ArrayBuffer)`) - `encodePayloadAsBlob` - Encodes multiple messages (payload) as blob. - **Parameters** - `Array`: an array of packets - `Function`: callback, returns the encoded payload (`cb(Blob)`) ## Tests Standalone tests can be run with `make test` which will run both node.js and browser tests. Browser tests are run using [zuul](https://github.com/defunctzombie/zuul). (You must have zuul setup with a saucelabs account.) You can run the tests locally using the following command: ``` ./node_modules/.bin/zuul --local 8080 -- test/index.js ``` ## Support The support channels for `engine.io-parser` are the same as `socket.io`: - irc.freenode.net **#socket.io** - [Google Groups](http://groups.google.com/group/socket_io) - [Website](http://socket.io) ## Development To contribute patches, run tests or benchmarks, make sure to clone the repository: ```bash git clone git://github.com/LearnBoost/engine.io-parser.git ``` Then: ```bash cd engine.io-parser npm install ``` See the `Tests` section above for how to run tests before submitting any patches. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/after/README.md","tags":[],"body":"# After [![Build Status][1]][2] Invoke callback after n calls ## Status: production ready ## Example var after = require(\"after\") , next = after(3, logItWorks) next() next() next() // it works function logItWorks() { console.log(\"it works!\") } ## Example with error handling var after = require(\"after\") , next = after(3, logError) next() next(new Error(\"oops\")) // logs oops next() // does nothing function logError(err) { console.log(err) } ## After < 0.6.0 Older versions of after had iterators and flows in them. These have been replaced with seperate modules - [iterators][8] - [composite][9] ## Installation `npm install after` ## Tests `npm test` ## Blog post - [Flow control in node.js][3] ## Examples : - [Determining the end of asynchronous operations][4] - [In javascript what are best practices for executing multiple asynchronous functions][5] - [JavaScript performance long running tasks][6] - [Synchronous database queries with node.js][7] ## Contributors - Raynos ## MIT Licenced [1]: https://secure.travis-ci.org/Raynos/after.png [2]: http://travis-ci.org/Raynos/after [3]: http://raynos.org/blog/2/Flow-control-in-node.js [4]: http://stackoverflow.com/questions/6852059/determining-the-end-of-asynchronous-operations-javascript/6852307#6852307 [5]: http://stackoverflow.com/questions/6869872/in-javascript-what-are-best-practices-for-executing-multiple-asynchronous-functi/6870031#6870031 [6]: http://stackoverflow.com/questions/6864397/javascript-performance-long-running-tasks/6889419#6889419 [7]: http://stackoverflow.com/questions/6597493/synchronous-database-queries-with-node-js/6620091#6620091 [8]: http://github.com/Raynos/iterators [9]: http://github.com/Raynos/composite"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/arraybuffer.slice/README.md","tags":[],"body":"# How to ```javascript var sliceBuffer = require('arraybuffer.slice'); var ab = (new Int8Array(5)).buffer; var sliced = sliceBuffer(ab, 1, 3); sliced = sliceBuffer(ab, 1); ``` # Licence (MIT) Copyright (C) 2013 Rase- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/base64-arraybuffer/README.md","tags":[],"body":"# base64-arraybuffer [![Build Status](https://travis-ci.org/niklasvh/base64-arraybuffer.png)](https://travis-ci.org/niklasvh/base64-arraybuffer) Encode/decode base64 data into ArrayBuffers ## Getting Started Install the module with: `npm install base64-arraybuffer` ## API The library encodes and decodes base64 to and from ArrayBuffers - __encode(buffer)__ - Encodes `ArrayBuffer` into base64 string - __decode(str)__ - Decodes base64 string to `ArrayBuffer` ## Release History - 0.1.2 - Fix old format of typed arrays - 0.1.0 - Initial version, basic decode/encode base64 to and from ArrayBuffer ## License Copyright (c) 2012 Niklas von Hertzen Licensed under the MIT license."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/blob/README.md","tags":[],"body":"Blob ==== A module that exports a constructor that uses window.Blob when available, and a BlobBuilder with any vendor prefix in other cases. If neither is available, it exports undefined. Usage: ```javascript var Blob = require('blob'); var b = new Blob(['hi', 'constructing', 'a', 'blob']); ``` ## Licence MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/has-binary/History.md","tags":[],"body":"0.1.6 / 2015-01-24 ================== * fix \"undefined function\" bug when iterating an object created with Object.create(null) [gunta] 0.1.5 / 2014-09-04 ================== * prevent browserify from bundling `Buffer`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/has-binary/README.md","tags":[],"body":"has-binarydata.js ================= Simple module to test if an object contains binary data"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/has-binary/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/utf8/README.md","tags":[],"body":"# utf8.js [![Build status](https://travis-ci.org/mathiasbynens/utf8.js.svg?branch=master)](https://travis-ci.org/mathiasbynens/utf8.js) [![Code coverage status](http://img.shields.io/coveralls/mathiasbynens/utf8.js/master.svg)](https://coveralls.io/r/mathiasbynens/utf8.js) [![Dependency status](https://gemnasium.com/mathiasbynens/utf8.js.svg)](https://gemnasium.com/mathiasbynens/utf8.js) _utf8.js_ is a well-tested UTF-8 encoder/decoder written in JavaScript. Unlike many other JavaScript solutions, it is designed to be a _proper_ UTF-8 encoder/decoder: it can encode/decode any scalar Unicode code point values, as per [the Encoding Standard](https://encoding.spec.whatwg.org/#utf-8). [Here’s an online demo.](https://mothereff.in/utf-8) Feel free to fork if you see possible improvements! ## Installation Via [npm](https://www.npmjs.org/): ```bash npm install utf8 ``` Via [Bower](http://bower.io/): ```bash bower install utf8 ``` Via [Component](https://github.com/component/component): ```bash component install mathiasbynens/utf8.js ``` In a browser: ```html ``` In [Narwhal](http://narwhaljs.org/), [Node.js](https://nodejs.org/), and [RingoJS ≥ v0.8.0](http://ringojs.org/): ```js var utf8 = require('utf8'); ``` In [Rhino](http://www.mozilla.org/rhino/): ```js load('utf8.js'); ``` Using an AMD loader like [RequireJS](http://requirejs.org/): ```js require( { 'paths': { 'utf8': 'path/to/utf8' } }, ['utf8'], function(utf8) { console.log(utf8); } ); ``` ## API ### `utf8.encode(string)` Encodes any given JavaScript string (`string`) as UTF-8, and returns the UTF-8-encoded version of the string. It throws an error if the input string contains a non-scalar value, i.e. a lone surrogate. (If you need to be able to encode non-scalar values as well, use [WTF-8](https://mths.be/wtf8) instead.) ```js // U+00A9 COPYRIGHT SIGN; see http://codepoints.net/U+00A9 utf8.encode('\\xA9'); // → '\\xC2\\xA9' // U+10001 LINEAR B SYLLABLE B038 E; see http://codepoints.net/U+10001 utf8.encode('\\uD800\\uDC01'); // → '\\xF0\\x90\\x80\\x81' ``` ### `utf8.decode(byteString)` Decodes any given UTF-8-encoded string (`byteString`) as UTF-8, and returns the UTF-8-decoded version of the string. It throws an error when malformed UTF-8 is detected. (If you need to be able to decode encoded non-scalar values as well, use [WTF-8](https://mths.be/wtf8) instead.) ```js utf8.decode('\\xC2\\xA9'); // → '\\xA9' utf8.decode('\\xF0\\x90\\x80\\x81'); // → '\\uD800\\uDC01' // → U+10001 LINEAR B SYLLABLE B038 E ``` ### `utf8.version` A string representing the semantic version number. ## Support utf8.js has been tested in at least Chrome 27-39, Firefox 3-34, Safari 4-8, Opera 10-28, IE 6-11, Node.js v0.10.0, Narwhal 0.3.2, RingoJS 0.8-0.11, PhantomJS 1.9.0, and Rhino 1.7RC4. ## Unit tests & code coverage After cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`. Once that’s done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, PhantomJS, and web browsers as well, use `grunt test`. To generate the code coverage report, use `grunt cover`. ## FAQ ### Why is the first release named v2.0.0? Haven’t you heard of [semantic versioning](http://semver.org/)? Long before utf8.js was created, the `utf8` module on npm was registered and used by another (slightly buggy) library. @ryanmcgrath was kind enough to give me access to the `utf8` package on npm when I told him about utf8.js. Since there has already been a v1.0.0 release of the old library, and to avoid breaking backwards compatibility with projects that rely on the `utf8` npm package, I decided the tag the first release of utf8.js as v2.0.0 and take it from there. ## Author | [![twitter/mathias](https://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias \"Follow @mathias on Twitter\") | |---| | [Mathias Bynens](https://mathiasbynens.be/) | ## License utf8.js is available under the [MIT](https://mths.be/mit) license."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/engine.io-parser/node_modules/utf8/tests/index.html","tags":[],"body":"utf8.js test suite"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/ws/README.md","tags":[],"body":"# ws: a node.js websocket library [![Build Status](https://travis-ci.org/websockets/ws.svg?branch=master)](https://travis-ci.org/websockets/ws) `ws` is a simple to use WebSocket implementation, up-to-date against RFC-6455, and [probably the fastest WebSocket library for node.js][archive]. Passes the quite extensive Autobahn test suite. See http://websockets.github.com/ws for the full reports. ## Protocol support * **Hixie draft 76** (Old and deprecated, but still in use by Safari and Opera. Added to ws version 0.4.2, but server only. Can be disabled by setting the `disableHixie` option to true.) * **HyBi drafts 07-12** (Use the option `protocolVersion: 8`) * **HyBi drafts 13-17** (Current default, alternatively option `protocolVersion: 13`) ### Installing ``` npm install --save ws ``` ### Opt-in for performance There are 2 optional modules that can be installed along side with the `ws` module. These modules are binary addons which improve certain operations, but as they are binary addons they require compilation which can fail if no c++ compiler is installed on the host system. - `npm install --save bufferutil`: Improves internal buffer operations which allows for faster processing of masked WebSocket frames and general buffer operations. - `npm install --save utf-8-validate`: The specification requires validation of invalid UTF-8 chars, some of these validations could not be done in JavaScript hence the need for a binary addon. In most cases you will already be validating the input that you receive for security purposes leading to double validation. But if you want to be 100% spec conform and fast validation of UTF-8 then this module is a must. ### Sending and receiving text data ```js var WebSocket = require('ws'); var ws = new WebSocket('ws://www.host.com/path'); ws.on('open', function open() { ws.send('something'); }); ws.on('message', function(data, flags) { // flags.binary will be set if a binary data is received. // flags.masked will be set if the data was masked. }); ``` ### Sending binary data ```js var WebSocket = require('ws'); var ws = new WebSocket('ws://www.host.com/path'); ws.on('open', function open() { var array = new Float32Array(5); for (var i = 0; i Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. [archive]: http://web.archive.org/web/20130314230536/http://hobbycoding.posterous.com/the-fastest-websocket-module-for-nodejs"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/ws/node_modules/options/README.md","tags":[],"body":"# options.js # A very light-weight in-code option parsers for node.js. ## Usage ## ``` js var Options = require(\"options\"); // Create an Options object function foo(options) { var default_options = { foo : \"bar\" }; // Create an option object with default value var opts = new Options(default_options); // Merge options opts = opts.merge(options); // Reset to default value opts.reset(); // Copy selected attributes out var seled_att = opts.copy(\"foo\"); // Read json options from a file. opts.read(\"options.file\"); // Sync opts.read(\"options.file\", function(err){ // Async if(err){ // If error occurs console.log(\"File error.\"); }else{ // No error } }); // Attributes defined or not opts.isDefinedAndNonNull(\"foobar\"); opts.isDefined(\"foobar\"); } ``` ## License ## (The MIT License) Copyright (c) 2012 Einar Otto Stangvik Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/engine.io/node_modules/ws/node_modules/ultron/README.md","tags":[],"body":"# Ultron [![Made by unshift](https://img.shields.io/badge/made%20by-unshift-00ffcc.svg?style=flat-square)](http://unshift.io)[![Version npm](http://img.shields.io/npm/v/ultron.svg?style=flat-square)](http://browsenpm.org/package/ultron)[![Build Status](http://img.shields.io/travis/unshiftio/ultron/master.svg?style=flat-square)](https://travis-ci.org/unshiftio/ultron)[![Dependencies](https://img.shields.io/david/unshiftio/ultron.svg?style=flat-square)](https://david-dm.org/unshiftio/ultron)[![Coverage Status](http://img.shields.io/coveralls/unshiftio/ultron/master.svg?style=flat-square)](https://coveralls.io/r/unshiftio/ultron?branch=master)[![IRC channel](http://img.shields.io/badge/IRC-irc.freenode.net%23unshift-00a8ff.svg?style=flat-square)](http://webchat.freenode.net/?channels=unshift) Ultron is a high-intelligence robot. It gathers intelligence so it can start improving upon his rudimentary design. It will learn your event emitting patterns and find ways to exterminate them. Allowing you to remove only the event emitters that **you** assigned and not the ones that your users or developers assigned. This can prevent race conditions, memory leaks and even file descriptor leaks from ever happening as you won't remove clean up processes. ## Installation The module is designed to be used in browsers using browserify and in Node.js. You can install the module through the public npm registry by running the following command in CLI: ``` npm install --save ultron ``` ## Usage In all examples we assume that you've required the library as following: ```js 'use strict'; var Ultron = require('ultron'); ``` Now that we've required the library we can construct our first `Ultron` instance. The constructor requires one argument which should be the `EventEmitter` instance that we need to operate upon. This can be the `EventEmitter` module that ships with Node.js or `EventEmitter3` or anything else as long as it follow the same API and internal structure as these 2. So with that in mind we can create the instance: ```js // // For the sake of this example we're going to construct an empty EventEmitter // var EventEmitter = require('events').EventEmitter; // or require('eventmitter3'); var events = new EventEmitter(); var ultron = new Ultron(events); ``` You can now use the following API's from the Ultron instance: ### Ultron.on Register a new event listener for the given event. It follows the exact same API as `EventEmitter.on` but it will return itself instead of returning the EventEmitter instance. If you are using EventEmitter3 it also supports the context param: ```js ultron.on('event-name', handler, { custom: 'function context' }); ``` ### Ultron.once Exactly the same as the [Ultron.on](#ultronon) but it only allows the execution once. ### Ultron.remove This is where all the magic happens and the safe removal starts. This function accepts different argument styles: - No arguments, assume that all events need to be removed so it will work as `removeAllListeners()` API. - 1 argument, when it's a string it will be split on ` ` and `,` to create a list of events that need to be cleared. - Multiple arguments, we assume that they are all names of events that need to be cleared. ```js ultron.remove('foo, bar baz'); // Removes foo, bar and baz. ultron.remove('foo', 'bar', 'baz'); // Removes foo, bar and baz. ultron.remove(); // Removes everything. ``` If you just want to remove a single event listener using a function reference you can still use the EventEmitter's `removeListener(event, fn)` API: ```js function foo() {} ulton.on('foo', foo); events.removeListener('foo', foo); ``` ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/has-binary/History.md","tags":[],"body":"0.1.7 / 2015-11-18 ================== * fix toJSON [@jderuere] * fix `global.isBuffer` usage [@tonetheman] * fix tests on modern versions of node * bump mocha 0.1.6 / 2015-01-24 ================== * fix \"undefined function\" bug when iterating an object created with Object.create(null) [gunta] 0.1.5 / 2014-09-04 ================== * prevent browserify from bundling `Buffer`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/has-binary/README.md","tags":[],"body":"has-binarydata.js ================= Simple module to test if an object contains binary data"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/has-binary/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-adapter/History.md","tags":[],"body":"0.4.0 / 2015-12-03 ================== * package: bump `debug` * use a `Room` class to efficiently track room size * allow `clients(fn)` * call the callback on `delAll` 0.3.1 / 2014-10-27 ================== * bump parser version * fix room autopruning * add autoprunning of empty rooms * rooms are now created as objects * added the repository field. * updated the debug dependency. 0.3.0 / 2014-05-30 ================== * bump `socket.io-parser` for binary ack fix 0.2.0 / 2014-03-14 ================== * upgraded faster parser 0.1.0 / 2014-03-07 ================== * initial commit"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-adapter/Readme.md","tags":[],"body":"# socket.io-adapter Default socket.io in-memory adapter class. ## How to use This module is not intended for end-user usage, but can be used as an interface to inheirt from from other adapters you might want to build. As an example of an adapter that builds on top of this, please take a look at [socket.io-redis](https://github.com/learnboost/socket.io-redis). ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/History.md","tags":[],"body":"2.2.2 / 2014-09-04 ================== * prevent direct `Buffer` reference that breaks browserify * binary: reuse `isBuf` helper 2.2.1 / 2014-06-20 ================== * added benchmarking [kevin-roark] * upgrade component-emitter to 1.1.2 [kevin-roark] * update protocol version [kevin-roark] * less indentation and a small optimization [kevin-roark] 2.2.0 / 2014-05-30 ================== * added a BINARY_ACK type [kevin-roark] 2.1.5 / 2014-05-24 ================== * don't iterate keys of `Date` objects [Rase-] 2.1.4 / 2014-05-17 ================== * fix null reconstruction bug [kevin-roark] 2.1.3 / 2014-04-27 ================== * bump zuul version * updated protocol version 2.1.2 / 2014-03-06 ================== * added support for binary in ACK packets 2.1.1 / 2014-03-04 ================== * removed has-binary-data dependency * fixed the object check in binary.removeBlobs 2.1.0 / 2014-03-01 ================== * faster and smaller binary parser and protocol [kevin-roark] 2.0.0 / 2014-02-19 ================== * binary support [kevin-roark] 1.1.2 / 2014-02-11 ================== * package: bump `json3` to fix IE6-7 1.1.1 / 2014-02-10 ================== * package: bump debug to fix browserify issues 1.1.0 / 2013-12-25 ================== * index: use `json3` 1.0.3 / 2012-12-18 ================== * index: added instrumentation through `debug` * index: make sure decoded `id` is a `Number` 1.0.2 / 2012-12-18 ================== * index: allow for falsy values in `id` and `data` 1.0.1 / 2012-12-10 ================== * Revision 1"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/Readme.md","tags":[],"body":"# socket.io-parser [![Build Status](https://secure.travis-ci.org/Automattic/socket.io-parser.svg)](http://travis-ci.org/Automattic/socket.io-parser) [![NPM version](https://badge.fury.io/js/socket.io-parser.svg)](http://badge.fury.io/js/socket.io-parser) A socket.io encoder and decoder written in JavaScript complying with version `3` of [socket.io-protocol](https://github.com/learnboost/socket.io-protocol). Used by [socket.io](https://github.com/learnboost/socket.io) and [socket.io-client](https://github.com/learnboost/socket.io-client). ## Parser API socket.io-parser is the reference implementation of socket.io-protocol. Read the full API here: [socket.io-protocol](https://github.com/learnboost/socket.io-protocol). ## Example Usage ### Encoding and decoding a packet ```js var parser = require('socket.io-parser'); var encoder = new parser.Encoder(); var packet = { type: parser.EVENT, data: 'test-packet', id: 13 }; encoder.encode(packet, function(encodedPackets) { var decoder = new parser.Decoder(); decoder.on('decoded', function(decodedPacket) { // decodedPacket.type == parser.EVENT // decodedPacket.data == 'test-packet' // decodedPacket.id == 13 }); for (var i = 0; i < encodedPackets.length; i++) { decoder.add(encodedPackets[i]); } }); ``` ### Encoding and decoding a packet with binary data ```js var parser = require('socket.io-parser'); var encoder = new parser.Encoder(); var packet = { type: parser.BINARY_EVENT, data: {i: new Buffer(1234), j: new Blob([new ArrayBuffer(2)])} id: 15 }; encoder.encode(packet, function(encodedPackets) { var decoder = new parser.Decoder(); decoder.on('decoded', function(decodedPacket) { // decodedPacket.type == parser.BINARY_EVENTEVENT // Buffer.isBuffer(decodedPacket.data.i) == true // Buffer.isBuffer(decodedPacket.data.j) == true // decodedPacket.id == 15 }); for (var i = 0; i < encodedPackets.length; i++) { decoder.add(encodedPackets[i]); } }); ``` See the test suite for more examples of how socket.io-parser is used. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/node_modules/benchmark/README.md","tags":[],"body":"# Benchmark.js v1.0.0 A [robust](http://calendar.perfplanet.com/2010/bulletproof-javascript-benchmarks/ \"Bulletproof JavaScript benchmarks\") benchmarking library that works on nearly all JavaScript platforms1, supports high-resolution timers, and returns statistically significant results. As seen on [jsPerf](http://jsperf.com/). ## BestieJS Benchmark.js is part of the BestieJS *\"Best in Class\"* module collection. This means we promote solid browser/environment support, ES5 precedents, unit testing, and plenty of documentation. ## Documentation The documentation for Benchmark.js can be viewed here: For a list of upcoming features, check out our [roadmap](https://github.com/bestiejs/benchmark.js/wiki/Roadmap). ## Support Benchmark.js has been tested in at least Adobe AIR 3.1, Chrome 5-21, Firefox 1.5-13, IE 6-9, Opera 9.25-12.01, Safari 3-6, Node.js 0.8.6, Narwhal 0.3.2, RingoJS 0.8, and Rhino 1.7RC5. ## Installation and usage In a browser or Adobe AIR: ~~~ html ~~~ Optionally, expose Java’s nanosecond timer by adding the `nano` applet to the ``: ~~~ html ~~~ Or enable Chrome’s microsecond timer by using the [command line switch](http://peter.sh/experiments/chromium-command-line-switches/#enable-benchmarking): --enable-benchmarking Via [npm](http://npmjs.org/): ~~~ bash npm install benchmark ~~~ In [Node.js](http://nodejs.org/) and [RingoJS v0.8.0+](http://ringojs.org/): ~~~ js var Benchmark = require('benchmark'); ~~~ Optionally, use the [microtime module](https://github.com/wadey/node-microtime) by Wade Simmons: ~~~ bash npm install microtime ~~~ In [RingoJS v0.7.0-](http://ringojs.org/): ~~~ js var Benchmark = require('benchmark').Benchmark; ~~~ In [Rhino](http://www.mozilla.org/rhino/): ~~~ js load('benchmark.js'); ~~~ In an AMD loader like [RequireJS](http://requirejs.org/): ~~~ js require({ 'paths': { 'benchmark': 'path/to/benchmark' } }, ['benchmark'], function(Benchmark) { console.log(Benchmark.version); }); // or with platform.js // https://github.com/bestiejs/platform.js require({ 'paths': { 'benchmark': 'path/to/benchmark', 'platform': 'path/to/platform' } }, ['benchmark', 'platform'], function(Benchmark, platform) { Benchmark.platform = platform; console.log(Benchmark.platform.name); }); ~~~ Usage example: ~~~ js var suite = new Benchmark.Suite; // add tests suite.add('RegExp#test', function() { /o/.test('Hello World!'); }) .add('String#indexOf', function() { 'Hello World!'.indexOf('o') > -1; }) // add listeners .on('cycle', function(event) { console.log(String(event.target)); }) .on('complete', function() { console.log('Fastest is ' + this.filter('fastest').pluck('name')); }) // run async .run({ 'async': true }); // logs: // > RegExp#test x 4,161,532 +-0.99% (59 cycles) // > String#indexOf x 6,139,623 +-1.00% (131 cycles) // > Fastest is String#indexOf ~~~ ## Authors * [Mathias Bynens](http://mathiasbynens.be/) [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias \"Follow @mathias on Twitter\") * [John-David Dalton](http://allyoucanleet.com/) [![twitter/jdalton](http://gravatar.com/avatar/299a3d891ff1920b69c364d061007043?s=70)](https://twitter.com/jdalton \"Follow @jdalton on Twitter\") ## Contributors * [Kit Cambridge](http://kitcambridge.github.com/) [![twitter/kitcambridge](http://gravatar.com/avatar/6662a1d02f351b5ef2f8b4d815804661?s=70)](https://twitter.com/kitcambridge \"Follow @kitcambridge on Twitter\")"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/node_modules/benchmark/doc/README.md","tags":[],"body":"# Benchmark.js v1.0.0 ## `Benchmark` * [`Benchmark`](#benchmarkname-fn--options) * [`Benchmark.version`](#benchmarkversion) * [`Benchmark.deepClone`](#benchmarkdeepclonevalue) * [`Benchmark.each`](#benchmarkeachobject-callback-thisarg) * [`Benchmark.extend`](#benchmarkextenddestination--source) * [`Benchmark.filter`](#benchmarkfilterarray-callback-thisarg) * [`Benchmark.forEach`](#benchmarkforeacharray-callback-thisarg) * [`Benchmark.formatNumber`](#benchmarkformatnumbernumber) * [`Benchmark.forOwn`](#benchmarkforownobject-callback-thisarg) * [`Benchmark.hasKey`](#benchmarkhaskeyobject-key) * [`Benchmark.indexOf`](#benchmarkindexofarray-value--fromindex0) * [`Benchmark.interpolate`](#benchmarkinterpolatestring-object) * [`Benchmark.invoke`](#benchmarkinvokebenches-name--arg1-arg2-) * [`Benchmark.join`](#benchmarkjoinobject--separator1--separator2:) * [`Benchmark.map`](#benchmarkmaparray-callback-thisarg) * [`Benchmark.pluck`](#benchmarkpluckarray-property) * [`Benchmark.reduce`](#benchmarkreducearray-callback-accumulator) ## `Benchmark.prototype` * [`Benchmark.prototype.aborted`](#benchmarkprototypeaborted) * [`Benchmark.prototype.compiled`](#benchmarkprototypecompiled) * [`Benchmark.prototype.count`](#benchmarkprototypecount) * [`Benchmark.prototype.cycles`](#benchmarkprototypecycles) * [`Benchmark.prototype.fn`](#benchmarkprototypefn) * [`Benchmark.prototype.hz`](#benchmarkprototypehz) * [`Benchmark.prototype.running`](#benchmarkprototyperunning) * [`Benchmark.prototype.setup`](#benchmarkprototypesetup) * [`Benchmark.prototype.teardown`](#benchmarkprototypeteardown) * [`Benchmark.prototype.abort`](#benchmarkprototypeabort) * [`Benchmark.prototype.clone`](#benchmarkprototypecloneoptions) * [`Benchmark.prototype.compare`](#benchmarkprototypecompareother) * [`Benchmark.prototype.emit`](#benchmarkprototypeemittype) * [`Benchmark.prototype.listeners`](#benchmarkprototypelistenerstype) * [`Benchmark.prototype.off`](#benchmarkprototypeofftype-listener) * [`Benchmark.prototype.on`](#benchmarkprototypeontype-listener) * [`Benchmark.prototype.reset`](#benchmarkprototypereset) * [`Benchmark.prototype.run`](#benchmarkprototyperunoptions) * [`Benchmark.prototype.toString`](#benchmarkprototypetostring) ## `Benchmark.options` * [`Benchmark.options`](#benchmarkoptions) * [`Benchmark.options.async`](#benchmarkoptionsasync) * [`Benchmark.options.defer`](#benchmarkoptionsdefer) * [`Benchmark.options.delay`](#benchmarkoptionsdelay) * [`Benchmark.options.id`](#benchmarkoptionsid) * [`Benchmark.options.initCount`](#benchmarkoptionsinitcount) * [`Benchmark.options.maxTime`](#benchmarkoptionsmaxtime) * [`Benchmark.options.minSamples`](#benchmarkoptionsminsamples) * [`Benchmark.options.minTime`](#benchmarkoptionsmintime) * [`Benchmark.options.name`](#benchmarkoptionsname) * [`Benchmark.options.onAbort`](#benchmarkoptionsonabort) * [`Benchmark.options.onComplete`](#benchmarkoptionsoncomplete) * [`Benchmark.options.onCycle`](#benchmarkoptionsoncycle) * [`Benchmark.options.onError`](#benchmarkoptionsonerror) * [`Benchmark.options.onReset`](#benchmarkoptionsonreset) * [`Benchmark.options.onStart`](#benchmarkoptionsonstart) ## `Benchmark.platform` * [`Benchmark.platform`](#benchmarkplatform) * [`Benchmark.platform.description`](#benchmarkplatformdescription) * [`Benchmark.platform.layout`](#benchmarkplatformlayout) * [`Benchmark.platform.manufacturer`](#benchmarkplatformmanufacturer) * [`Benchmark.platform.name`](#benchmarkplatformname) * [`Benchmark.platform.os`](#benchmarkplatformos) * [`Benchmark.platform.prerelease`](#benchmarkplatformprerelease) * [`Benchmark.platform.product`](#benchmarkplatformproduct) * [`Benchmark.platform.version`](#benchmarkplatformversion) * [`Benchmark.platform.toString`](#benchmarkplatformtostring) ## `Benchmark.support` * [`Benchmark.support`](#benchmarksupport) * [`Benchmark.support.air`](#benchmarksupportair) * [`Benchmark.support.argumentsClass`](#benchmarksupportargumentsclass) * [`Benchmark.support.browser`](#benchmarksupportbrowser) * [`Benchmark.support.charByIndex`](#benchmarksupportcharbyindex) * [`Benchmark.support.charByOwnIndex`](#benchmarksupportcharbyownindex) * [`Benchmark.support.decompilation`](#benchmarksupportdecompilation) * [`Benchmark.support.descriptors`](#benchmarksupportdescriptors) * [`Benchmark.support.getAllKeys`](#benchmarksupportgetallkeys) * [`Benchmark.support.iteratesOwnLast`](#benchmarksupportiteratesownfirst) * [`Benchmark.support.java`](#benchmarksupportjava) * [`Benchmark.support.nodeClass`](#benchmarksupportnodeclass) * [`Benchmark.support.timeout`](#benchmarksupporttimeout) ## `Benchmark.prototype.error` * [`Benchmark.prototype.error`](#benchmarkprototypeerror) ## `Benchmark.prototype.stats` * [`Benchmark.prototype.stats`](#benchmarkprototypestats) * [`Benchmark.prototype.stats.deviation`](#benchmark-statsdeviation) * [`Benchmark.prototype.stats.mean`](#benchmark-statsmean) * [`Benchmark.prototype.stats.moe`](#benchmark-statsmoe) * [`Benchmark.prototype.stats.rme`](#benchmark-statsrme) * [`Benchmark.prototype.stats.sample`](#benchmark-statssample) * [`Benchmark.prototype.stats.sem`](#benchmark-statssem) * [`Benchmark.prototype.stats.variance`](#benchmark-statsvariance) ## `Benchmark.prototype.times` * [`Benchmark.prototype.times`](#benchmarkprototypetimes) * [`Benchmark.prototype.times.cycle`](#benchmark-timescycle) * [`Benchmark.prototype.times.elapsed`](#benchmark-timeselapsed) * [`Benchmark.prototype.times.period`](#benchmark-timesperiod) * [`Benchmark.prototype.times.timeStamp`](#benchmark-timestimestamp) ## `Benchmark.Deferred` * [`Benchmark.Deferred`](#benchmarkdeferredclone) ## `Benchmark.Deferred.prototype` * [`Benchmark.Deferred.prototype.benchmark`](#benchmarkdeferredprototypebenchmark) * [`Benchmark.Deferred.prototype.cycles`](#benchmarkdeferredprototypecycles) * [`Benchmark.Deferred.prototype.elapsed`](#benchmarkdeferredprototypeelapsed) * [`Benchmark.Deferred.prototype.resolve`](#benchmarkdeferredprototyperesolve) * [`Benchmark.Deferred.prototype.timeStamp`](#benchmarkdeferredprototypetimestamp) ## `Benchmark.Event` * [`Benchmark.Event`](#benchmarkeventtype) ## `Benchmark.Event.prototype` * [`Benchmark.Event.prototype.aborted`](#benchmarkeventprototypeaborted) * [`Benchmark.Event.prototype.cancelled`](#benchmarkeventprototypecancelled) * [`Benchmark.Event.prototype.result`](#benchmarkeventprototyperesult) * [`Benchmark.Event.prototype.timeStamp`](#benchmarkeventprototypetimestamp) * [`Benchmark.Event.prototype.type`](#benchmarkeventprototypetype) ## `Benchmark.Event.prototype.currentTarget` * [`Benchmark.Event.prototype.currentTarget`](#benchmarkeventprototypecurrenttarget) ## `Benchmark.Event.prototype.target` * [`Benchmark.Event.prototype.target`](#benchmarkeventprototypetarget) ## `Benchmark.Suite` * [`Benchmark.Suite`](#benchmarksuitename--options) ## `Benchmark.Suite.prototype` * [`Benchmark.Suite.prototype.aborted`](#benchmarksuiteprototypeaborted) * [`Benchmark.Suite.prototype.length`](#benchmarksuiteprototypelength) * [`Benchmark.Suite.prototype.running`](#benchmarksuiteprototyperunning) * [`Benchmark.Suite.prototype.abort`](#benchmarksuiteprototypeabort) * [`Benchmark.Suite.prototype.add`](#benchmarksuiteprototypeaddname-fn--options) * [`Benchmark.Suite.prototype.clone`](#benchmarksuiteprototypecloneoptions) * [`Benchmark.Suite.prototype.emit`](#benchmarkprototypeemittype) * [`Benchmark.Suite.prototype.filter`](#benchmarksuiteprototypefiltercallback) * [`Benchmark.Suite.prototype.forEach`](#benchmarksuiteprototypeforeachcallback) * [`Benchmark.Suite.prototype.indexOf`](#benchmarksuiteprototypeindexofvalue) * [`Benchmark.Suite.prototype.invoke`](#benchmarksuiteprototypeinvokename--arg1-arg2-) * [`Benchmark.Suite.prototype.join`](#benchmarksuiteprototypejoinseparator-) * [`Benchmark.Suite.prototype.listeners`](#benchmarkprototypelistenerstype) * [`Benchmark.Suite.prototype.map`](#benchmarksuiteprototypemapcallback) * [`Benchmark.Suite.prototype.off`](#benchmarkprototypeofftype-listener) * [`Benchmark.Suite.prototype.on`](#benchmarkprototypeontype-listener) * [`Benchmark.Suite.prototype.pluck`](#benchmarksuiteprototypepluckproperty) * [`Benchmark.Suite.prototype.pop`](#benchmarksuiteprototypepop) * [`Benchmark.Suite.prototype.push`](#benchmarksuiteprototypepush) * [`Benchmark.Suite.prototype.reduce`](#benchmarksuiteprototypereducecallback-accumulator) * [`Benchmark.Suite.prototype.reset`](#benchmarksuiteprototypereset) * [`Benchmark.Suite.prototype.reverse`](#benchmarksuiteprototypereverse) * [`Benchmark.Suite.prototype.run`](#benchmarksuiteprototyperunoptions) * [`Benchmark.Suite.prototype.shift`](#benchmarksuiteprototypeshift) * [`Benchmark.Suite.prototype.slice`](#benchmarksuiteprototypeslicestart-end) * [`Benchmark.Suite.prototype.sort`](#benchmarksuiteprototypesortcomparefnnull) * [`Benchmark.Suite.prototype.splice`](#benchmarksuiteprototypesplicestart-deletecount--val1-val2-) * [`Benchmark.Suite.prototype.unshift`](#benchmarksuiteprototypeunshift) ## `Benchmark.Suite.options` * [`Benchmark.Suite.options`](#benchmarksuiteoptions) * [`Benchmark.Suite.options.name`](#benchmarksuiteoptionsname) ## `Benchmark` ### `Benchmark(name, fn [, options={}])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L404 \"View in source\") [Ⓣ][1] The Benchmark constructor. #### Arguments 1. `name` *(String)*: A name to identify the benchmark. 2. `fn` *(Function|String)*: The test to benchmark. 3. `[options={}]` *(Object)*: Options object. #### Example ~~~ js // basic usage (the `new` operator is optional) var bench = new Benchmark(fn); // or using a name first var bench = new Benchmark('foo', fn); // or with options var bench = new Benchmark('foo', fn, { // displayed by Benchmark#toString if `name` is not available 'id': 'xyz', // called when the benchmark starts running 'onStart': onStart, // called after each run cycle 'onCycle': onCycle, // called when aborted 'onAbort': onAbort, // called when a test errors 'onError': onError, // called when reset 'onReset': onReset, // called when the benchmark completes running 'onComplete': onComplete, // compiled/called before the test loop 'setup': setup, // compiled/called after the test loop 'teardown': teardown }); // or name and options var bench = new Benchmark('foo', { // a flag to indicate the benchmark is deferred 'defer': true, // benchmark test function 'fn': function(deferred) { // call resolve() when the deferred test is finished deferred.resolve(); } }); // or options only var bench = new Benchmark({ // benchmark name 'name': 'foo', // benchmark test as a string 'fn': '[1,2,3,4].sort()' }); // a test's `this` binding is set to the benchmark instance var bench = new Benchmark('foo', function() { 'My name is '.concat(this.name); // My name is foo }); ~~~ * * * ### `Benchmark.version` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3267 \"View in source\") [Ⓣ][1] *(String)*: The semantic version number. * * * ### `Benchmark.deepClone(value)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1225 \"View in source\") [Ⓣ][1] A deep clone utility. #### Arguments 1. `value` *(Mixed)*: The value to clone. #### Returns *(Mixed)*: The cloned value. * * * ### `Benchmark.each(object, callback, thisArg)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1400 \"View in source\") [Ⓣ][1] An iteration utility for arrays and objects. Callbacks may terminate the loop by explicitly returning `false`. #### Arguments 1. `object` *(Array|Object)*: The object to iterate over. 2. `callback` *(Function)*: The function called per iteration. 3. `thisArg` *(Mixed)*: The `this` binding for the callback. #### Returns *(Array, Object)*: Returns the object iterated over. * * * ### `Benchmark.extend(destination [, source={}])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1446 \"View in source\") [Ⓣ][1] Copies enumerable properties from the source(s) object to the destination object. #### Arguments 1. `destination` *(Object)*: The destination object. 2. `[source={}]` *(Object)*: The source object. #### Returns *(Object)*: The destination object. * * * ### `Benchmark.filter(array, callback, thisArg)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1485 \"View in source\") [Ⓣ][1] A generic `Array#filter` like method. #### Arguments 1. `array` *(Array)*: The array to iterate over. 2. `callback` *(Function|String)*: The function/alias called per iteration. 3. `thisArg` *(Mixed)*: The `this` binding for the callback. #### Returns *(Array)*: A new array of values that passed callback filter. #### Example ~~~ js // get odd numbers Benchmark.filter([1, 2, 3, 4, 5], function(n) { return n % 2; }); // -> [1, 3, 5]; // get fastest benchmarks Benchmark.filter(benches, 'fastest'); // get slowest benchmarks Benchmark.filter(benches, 'slowest'); // get benchmarks that completed without erroring Benchmark.filter(benches, 'successful'); ~~~ * * * ### `Benchmark.forEach(array, callback, thisArg)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1518 \"View in source\") [Ⓣ][1] A generic `Array#forEach` like method. Callbacks may terminate the loop by explicitly returning `false`. #### Arguments 1. `array` *(Array)*: The array to iterate over. 2. `callback` *(Function)*: The function called per iteration. 3. `thisArg` *(Mixed)*: The `this` binding for the callback. #### Returns *(Array)*: Returns the array iterated over. * * * ### `Benchmark.formatNumber(number)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1557 \"View in source\") [Ⓣ][1] Converts a number to a more readable comma-separated string representation. #### Arguments 1. `number` *(Number)*: The number to convert. #### Returns *(String)*: The more readable string representation. * * * ### `Benchmark.forOwn(object, callback, thisArg)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1545 \"View in source\") [Ⓣ][1] Iterates over an object's own properties, executing the `callback` for each. Callbacks may terminate the loop by explicitly returning `false`. #### Arguments 1. `object` *(Object)*: The object to iterate over. 2. `callback` *(Function)*: The function executed per own property. 3. `thisArg` *(Mixed)*: The `this` binding for the callback. #### Returns *(Object)*: Returns the object iterated over. * * * ### `Benchmark.hasKey(object, key)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1572 \"View in source\") [Ⓣ][1] Checks if an object has the specified key as a direct property. #### Arguments 1. `object` *(Object)*: The object to check. 2. `key` *(String)*: The key to check for. #### Returns *(Boolean)*: Returns `true` if key is a direct property, else `false`. * * * ### `Benchmark.indexOf(array, value [, fromIndex=0])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1608 \"View in source\") [Ⓣ][1] A generic `Array#indexOf` like method. #### Arguments 1. `array` *(Array)*: The array to iterate over. 2. `value` *(Mixed)*: The value to search for. 3. `[fromIndex=0]` *(Number)*: The index to start searching from. #### Returns *(Number)*: The index of the matched value or `-1`. * * * ### `Benchmark.interpolate(string, object)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1630 \"View in source\") [Ⓣ][1] Modify a string by replacing named tokens with matching object property values. #### Arguments 1. `string` *(String)*: The string to modify. 2. `object` *(Object)*: The template object. #### Returns *(String)*: The modified string. * * * ### `Benchmark.invoke(benches, name [, arg1, arg2, ...])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1677 \"View in source\") [Ⓣ][1] Invokes a method on all items in an array. #### Arguments 1. `benches` *(Array)*: Array of benchmarks to iterate over. 2. `name` *(String|Object)*: The name of the method to invoke OR options object. 3. `[arg1, arg2, ...]` *(Mixed)*: Arguments to invoke the method with. #### Returns *(Array)*: A new array of values returned from each method invoked. #### Example ~~~ js // invoke `reset` on all benchmarks Benchmark.invoke(benches, 'reset'); // invoke `emit` with arguments Benchmark.invoke(benches, 'emit', 'complete', listener); // invoke `run(true)`, treat benchmarks as a queue, and register invoke callbacks Benchmark.invoke(benches, { // invoke the `run` method 'name': 'run', // pass a single argument 'args': true, // treat as queue, removing benchmarks from front of `benches` until empty 'queued': true, // called before any benchmarks have been invoked. 'onStart': onStart, // called between invoking benchmarks 'onCycle': onCycle, // called after all benchmarks have been invoked. 'onComplete': onComplete }); ~~~ * * * ### `Benchmark.join(object [, separator1=',', separator2=': '])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1831 \"View in source\") [Ⓣ][1] Creates a string of joined array values or object key-value pairs. #### Arguments 1. `object` *(Array|Object)*: The object to operate on. 2. `[separator1=',']` *(String)*: The separator used between key-value pairs. 3. `[separator2=': ']` *(String)*: The separator used between keys and values. #### Returns *(String)*: The joined result. * * * ### `Benchmark.map(array, callback, thisArg)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1853 \"View in source\") [Ⓣ][1] A generic `Array#map` like method. #### Arguments 1. `array` *(Array)*: The array to iterate over. 2. `callback` *(Function)*: The function called per iteration. 3. `thisArg` *(Mixed)*: The `this` binding for the callback. #### Returns *(Array)*: A new array of values returned by the callback. * * * ### `Benchmark.pluck(array, property)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1869 \"View in source\") [Ⓣ][1] Retrieves the value of a specified property from all items in an array. #### Arguments 1. `array` *(Array)*: The array to iterate over. 2. `property` *(String)*: The property to pluck. #### Returns *(Array)*: A new array of property values. * * * ### `Benchmark.reduce(array, callback, accumulator)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1885 \"View in source\") [Ⓣ][1] A generic `Array#reduce` like method. #### Arguments 1. `array` *(Array)*: The array to iterate over. 2. `callback` *(Function)*: The function called per iteration. 3. `accumulator` *(Mixed)*: Initial value of the accumulator. #### Returns *(Mixed)*: The accumulator. * * * ## `Benchmark.prototype` ### `Benchmark.prototype.aborted` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3377 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate if the benchmark is aborted. * * * ### `Benchmark.prototype.compiled` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3353 \"View in source\") [Ⓣ][1] *(Function, String)*: The compiled test function. * * * ### `Benchmark.prototype.count` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3329 \"View in source\") [Ⓣ][1] *(Number)*: The number of times a test was executed. * * * ### `Benchmark.prototype.cycles` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3337 \"View in source\") [Ⓣ][1] *(Number)*: The number of cycles performed while benchmarking. * * * ### `Benchmark.prototype.fn` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3369 \"View in source\") [Ⓣ][1] *(Function, String)*: The test to benchmark. * * * ### `Benchmark.prototype.hz` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3345 \"View in source\") [Ⓣ][1] *(Number)*: The number of executions per second. * * * ### `Benchmark.prototype.running` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3385 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate if the benchmark is running. * * * ### `Benchmark.prototype.setup` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3448 \"View in source\") [Ⓣ][1] *(Function, String)*: Compiled into the test and executed immediately **before** the test loop. #### Example ~~~ js // basic usage var bench = Benchmark({ 'setup': function() { var c = this.count, element = document.getElementById('container'); while (c--) { element.appendChild(document.createElement('div')); } }, 'fn': function() { element.removeChild(element.lastChild); } }); // compiles to something like: var c = this.count, element = document.getElementById('container'); while (c--) { element.appendChild(document.createElement('div')); } var start = new Date; while (count--) { element.removeChild(element.lastChild); } var end = new Date - start; // or using strings var bench = Benchmark({ 'setup': '\\ var a = 0;\\n\\ (function() {\\n\\ (function() {\\n\\ (function() {', 'fn': 'a += 1;', 'teardown': '\\ }())\\n\\ }())\\n\\ }())' }); // compiles to something like: var a = 0; (function() { (function() { (function() { var start = new Date; while (count--) { a += 1; } var end = new Date - start; }()) }()) }()) ~~~ * * * ### `Benchmark.prototype.teardown` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3456 \"View in source\") [Ⓣ][1] *(Function, String)*: Compiled into the test and executed immediately **after** the test loop. * * * ### `Benchmark.prototype.abort()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2218 \"View in source\") [Ⓣ][1] Aborts the benchmark without recording times. #### Returns *(Object)*: The benchmark instance. * * * ### `Benchmark.prototype.clone(options)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2257 \"View in source\") [Ⓣ][1] Creates a new benchmark using the same test and options. #### Arguments 1. `options` *(Object)*: Options object to overwrite cloned options. #### Returns *(Object)*: The new benchmark instance. #### Example ~~~ js var bizarro = bench.clone({ 'name': 'doppelganger' }); ~~~ * * * ### `Benchmark.prototype.compare(other)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2280 \"View in source\") [Ⓣ][1] Determines if a benchmark is faster than another. #### Arguments 1. `other` *(Object)*: The benchmark to compare. #### Returns *(Number)*: Returns `-1` if slower, `1` if faster, and `0` if indeterminate. * * * ### `Benchmark.Suite.prototype.emit(type)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2095 \"View in source\") [Ⓣ][1] Executes all registered listeners of the specified event type. #### Arguments 1. `type` *(String|Object)*: The event type or object. #### Returns *(Mixed)*: Returns the return value of the last listener executed. * * * ### `Benchmark.Suite.prototype.listeners(type)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2125 \"View in source\") [Ⓣ][1] Returns an array of event listeners for a given type that can be manipulated to add or remove listeners. #### Arguments 1. `type` *(String)*: The event type. #### Returns *(Array)*: The listeners array. * * * ### `Benchmark.Suite.prototype.off([type, listener])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2158 \"View in source\") [Ⓣ][1] Unregisters a listener for the specified event type(s), or unregisters all listeners for the specified event type(s), or unregisters all listeners for all event types. #### Arguments 1. `[type]` *(String)*: The event type. 2. `[listener]` *(Function)*: The function to unregister. #### Returns *(Object)*: The benchmark instance. #### Example ~~~ js // unregister a listener for an event type bench.off('cycle', listener); // unregister a listener for multiple event types bench.off('start cycle', listener); // unregister all listeners for an event type bench.off('cycle'); // unregister all listeners for multiple event types bench.off('start cycle complete'); // unregister all listeners for all event types bench.off(); ~~~ * * * ### `Benchmark.Suite.prototype.on(type, listener)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2197 \"View in source\") [Ⓣ][1] Registers a listener for the specified event type(s). #### Arguments 1. `type` *(String)*: The event type. 2. `listener` *(Function)*: The function to register. #### Returns *(Object)*: The benchmark instance. #### Example ~~~ js // register a listener for an event type bench.on('cycle', listener); // register a listener for multiple event types bench.on('start cycle', listener); ~~~ * * * ### `Benchmark.prototype.reset()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2334 \"View in source\") [Ⓣ][1] Reset properties and abort if running. #### Returns *(Object)*: The benchmark instance. * * * ### `Benchmark.prototype.run([options={}])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3000 \"View in source\") [Ⓣ][1] Runs the benchmark. #### Arguments 1. `[options={}]` *(Object)*: Options object. #### Returns *(Object)*: The benchmark instance. #### Example ~~~ js // basic usage bench.run(); // or with options bench.run({ 'async': true }); ~~~ * * * ### `Benchmark.prototype.toString()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2405 \"View in source\") [Ⓣ][1] Displays relevant benchmark information when coerced to a string. #### Returns *(String)*: A string representation of the benchmark instance. * * * ## `Benchmark.options` ### `Benchmark.options` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3049 \"View in source\") [Ⓣ][1] *(Object)*: The default options copied by benchmark instances. * * * ### `Benchmark.options.async` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3058 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate that benchmark cycles will execute asynchronously by default. * * * ### `Benchmark.options.defer` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3066 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate that the benchmark clock is deferred. * * * ### `Benchmark.options.delay` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3073 \"View in source\") [Ⓣ][1] *(Number)*: The delay between test cycles *(secs)*. * * * ### `Benchmark.options.id` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3082 \"View in source\") [Ⓣ][1] *(String)*: Displayed by Benchmark#toString when a `name` is not available *(auto-generated if absent)*. * * * ### `Benchmark.options.initCount` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3090 \"View in source\") [Ⓣ][1] *(Number)*: The default number of times to execute a test on a benchmark's first cycle. * * * ### `Benchmark.options.maxTime` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3099 \"View in source\") [Ⓣ][1] *(Number)*: The maximum time a benchmark is allowed to run before finishing *(secs)*. Note: Cycle delays aren't counted toward the maximum time. * * * ### `Benchmark.options.minSamples` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3107 \"View in source\") [Ⓣ][1] *(Number)*: The minimum sample size required to perform statistical analysis. * * * ### `Benchmark.options.minTime` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3115 \"View in source\") [Ⓣ][1] *(Number)*: The time needed to reduce the percent uncertainty of measurement to `1`% *(secs)*. * * * ### `Benchmark.options.name` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3123 \"View in source\") [Ⓣ][1] *(String)*: The name of the benchmark. * * * ### `Benchmark.options.onAbort` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3131 \"View in source\") [Ⓣ][1] An event listener called when the benchmark is aborted. * * * ### `Benchmark.options.onComplete` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3139 \"View in source\") [Ⓣ][1] An event listener called when the benchmark completes running. * * * ### `Benchmark.options.onCycle` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3147 \"View in source\") [Ⓣ][1] An event listener called after each run cycle. * * * ### `Benchmark.options.onError` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3155 \"View in source\") [Ⓣ][1] An event listener called when a test errors. * * * ### `Benchmark.options.onReset` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3163 \"View in source\") [Ⓣ][1] An event listener called when the benchmark is reset. * * * ### `Benchmark.options.onStart` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3171 \"View in source\") [Ⓣ][1] An event listener called when the benchmark starts running. * * * ## `Benchmark.platform` ### `Benchmark.platform` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3182 \"View in source\") [Ⓣ][1] *(Object)*: Platform object with properties describing things like browser name, version, and operating system. * * * ### `Benchmark.platform.description` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3190 \"View in source\") [Ⓣ][1] *(String)*: The platform description. * * * ### `Benchmark.platform.layout` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3198 \"View in source\") [Ⓣ][1] *(String, Null)*: The name of the browser layout engine. * * * ### `Benchmark.platform.manufacturer` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3222 \"View in source\") [Ⓣ][1] *(String, Null)*: The name of the product's manufacturer. * * * ### `Benchmark.platform.name` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3214 \"View in source\") [Ⓣ][1] *(String, Null)*: The name of the browser/environment. * * * ### `Benchmark.platform.os` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3230 \"View in source\") [Ⓣ][1] *(String, Null)*: The name of the operating system. * * * ### `Benchmark.platform.prerelease` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3238 \"View in source\") [Ⓣ][1] *(String, Null)*: The alpha/beta release indicator. * * * ### `Benchmark.platform.product` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3206 \"View in source\") [Ⓣ][1] *(String, Null)*: The name of the product hosting the browser. * * * ### `Benchmark.platform.version` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3246 \"View in source\") [Ⓣ][1] *(String, Null)*: The browser/environment version. * * * ### `Benchmark.platform.toString()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3255 \"View in source\") [Ⓣ][1] Return platform description when the platform object is coerced to a string. #### Returns *(String)*: The platform description. * * * ## `Benchmark.support` ### `Benchmark.support` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L135 \"View in source\") [Ⓣ][1] *(Object)*: An object used to flag environments/features. * * * ### `Benchmark.support.air` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L145 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect Adobe AIR. * * * ### `Benchmark.support.argumentsClass` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L153 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if `arguments` objects have the correct internal [[Class]] value. * * * ### `Benchmark.support.browser` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L161 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if in a browser environment. * * * ### `Benchmark.support.charByIndex` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L169 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if strings support accessing characters by index. * * * ### `Benchmark.support.charByOwnIndex` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L179 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if strings have indexes as own properties. * * * ### `Benchmark.support.decompilation` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L207 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if functions support decompilation. * * * ### `Benchmark.support.descriptors` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L228 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect ES5+ property descriptor API. * * * ### `Benchmark.support.getAllKeys` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L242 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect ES5+ Object.getOwnPropertyNames(). * * * ### `Benchmark.support.iteratesOwnFirst` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L255 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if own properties are iterated before inherited properties *(all but IE `Benchmark.support.java` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L190 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if Java is enabled/exposed. * * * ### `Benchmark.support.nodeClass` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L272 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if a node's [[Class]] is resolvable *(all but IE `Benchmark.support.timeout` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L198 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if the Timers API exists. * * * ## `Benchmark.prototype.error` ### `Benchmark.prototype.error` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3361 \"View in source\") [Ⓣ][1] *(Object)*: The error object if the test failed. * * * ## `Benchmark.prototype.stats` ### `Benchmark.prototype.stats` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3464 \"View in source\") [Ⓣ][1] *(Object)*: An object of stats including mean, margin or error, and standard deviation. * * * ### `Benchmark.prototype.stats.deviation` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3496 \"View in source\") [Ⓣ][1] *(Number)*: The sample standard deviation. * * * ### `Benchmark.prototype.stats.mean` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3504 \"View in source\") [Ⓣ][1] *(Number)*: The sample arithmetic mean. * * * ### `Benchmark.prototype.stats.moe` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3472 \"View in source\") [Ⓣ][1] *(Number)*: The margin of error. * * * ### `Benchmark.prototype.stats.rme` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3480 \"View in source\") [Ⓣ][1] *(Number)*: The relative margin of error *(expressed as a percentage of the mean)*. * * * ### `Benchmark.prototype.stats.sample` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3512 \"View in source\") [Ⓣ][1] *(Array)*: The array of sampled periods. * * * ### `Benchmark.prototype.stats.sem` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3488 \"View in source\") [Ⓣ][1] *(Number)*: The standard error of the mean. * * * ### `Benchmark.prototype.stats.variance` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3520 \"View in source\") [Ⓣ][1] *(Number)*: The sample variance. * * * ## `Benchmark.prototype.times` ### `Benchmark.prototype.times` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3529 \"View in source\") [Ⓣ][1] *(Object)*: An object of timing data including cycle, elapsed, period, start, and stop. * * * ### `Benchmark.prototype.times.cycle` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3537 \"View in source\") [Ⓣ][1] *(Number)*: The time taken to complete the last cycle *(secs)*. * * * ### `Benchmark.prototype.times.elapsed` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3545 \"View in source\") [Ⓣ][1] *(Number)*: The time taken to complete the benchmark *(secs)*. * * * ### `Benchmark.prototype.times.period` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3553 \"View in source\") [Ⓣ][1] *(Number)*: The time taken to execute the test once *(secs)*. * * * ### `Benchmark.prototype.times.timeStamp` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3561 \"View in source\") [Ⓣ][1] *(Number)*: A timestamp of when the benchmark started *(ms)*. * * * ## `Benchmark.Deferred` ### `Benchmark.Deferred(clone)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L445 \"View in source\") [Ⓣ][1] The Deferred constructor. #### Arguments 1. `clone` *(Object)*: The cloned benchmark instance. * * * ## `Benchmark.Deferred.prototype` ### `Benchmark.Deferred.prototype.benchmark` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3605 \"View in source\") [Ⓣ][1] *(Object)*: The deferred benchmark instance. * * * ### `Benchmark.Deferred.prototype.cycles` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3613 \"View in source\") [Ⓣ][1] *(Number)*: The number of deferred cycles performed while benchmarking. * * * ### `Benchmark.Deferred.prototype.elapsed` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3621 \"View in source\") [Ⓣ][1] *(Number)*: The time taken to complete the deferred benchmark *(secs)*. * * * ### `Benchmark.Deferred.prototype.resolve` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1188 \"View in source\") [Ⓣ][1] *(Unknown)*: Handles cycling/completing the deferred benchmark. * * * ### `Benchmark.Deferred.prototype.timeStamp` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3629 \"View in source\") [Ⓣ][1] *(Number)*: A timestamp of when the deferred benchmark started *(ms)*. * * * ## `Benchmark.Event` ### `Benchmark.Event(type)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L461 \"View in source\") [Ⓣ][1] The Event constructor. #### Arguments 1. `type` *(String|Object)*: The event type. * * * ## `Benchmark.Event.prototype` ### `Benchmark.Event.prototype.aborted` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3645 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate if the emitters listener iteration is aborted. * * * ### `Benchmark.Event.prototype.cancelled` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3653 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate if the default action is cancelled. * * * ### `Benchmark.Event.prototype.result` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3669 \"View in source\") [Ⓣ][1] *(Mixed)*: The return value of the last executed listener. * * * ### `Benchmark.Event.prototype.timeStamp` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3685 \"View in source\") [Ⓣ][1] *(Number)*: A timestamp of when the event was created *(ms)*. * * * ### `Benchmark.Event.prototype.type` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3693 \"View in source\") [Ⓣ][1] *(String)*: The event type. * * * ## `Benchmark.Event.prototype.currentTarget` ### `Benchmark.Event.prototype.currentTarget` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3661 \"View in source\") [Ⓣ][1] *(Object)*: The object whose listeners are currently being processed. * * * ## `Benchmark.Event.prototype.target` ### `Benchmark.Event.prototype.target` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3677 \"View in source\") [Ⓣ][1] *(Object)*: The object to which the event was originally emitted. * * * ## `Benchmark.Suite` ### `Benchmark.Suite(name [, options={}])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L507 \"View in source\") [Ⓣ][1] The Suite constructor. #### Arguments 1. `name` *(String)*: A name to identify the suite. 2. `[options={}]` *(Object)*: Options object. #### Example ~~~ js // basic usage (the `new` operator is optional) var suite = new Benchmark.Suite; // or using a name first var suite = new Benchmark.Suite('foo'); // or with options var suite = new Benchmark.Suite('foo', { // called when the suite starts running 'onStart': onStart, // called between running benchmarks 'onCycle': onCycle, // called when aborted 'onAbort': onAbort, // called when a test errors 'onError': onError, // called when reset 'onReset': onReset, // called when the suite completes running 'onComplete': onComplete }); ~~~ * * * ## `Benchmark.Suite.prototype` ### `Benchmark.Suite.prototype.aborted` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3734 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate if the suite is aborted. * * * ### `Benchmark.Suite.prototype.length` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3726 \"View in source\") [Ⓣ][1] *(Number)*: The number of benchmarks in the suite. * * * ### `Benchmark.Suite.prototype.running` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3742 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate if the suite is running. * * * ### `Benchmark.Suite.prototype.abort()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1902 \"View in source\") [Ⓣ][1] Aborts all benchmarks in the suite. #### Returns *(Object)*: The suite instance. * * * ### `Benchmark.Suite.prototype.add(name, fn [, options={}])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1962 \"View in source\") [Ⓣ][1] Adds a test to the benchmark suite. #### Arguments 1. `name` *(String)*: A name to identify the benchmark. 2. `fn` *(Function|String)*: The test to benchmark. 3. `[options={}]` *(Object)*: Options object. #### Returns *(Object)*: The benchmark instance. #### Example ~~~ js // basic usage suite.add(fn); // or using a name first suite.add('foo', fn); // or with options suite.add('foo', fn, { 'onCycle': onCycle, 'onComplete': onComplete }); // or name and options suite.add('foo', { 'fn': fn, 'onCycle': onCycle, 'onComplete': onComplete }); // or options only suite.add({ 'name': 'foo', 'fn': fn, 'onCycle': onCycle, 'onComplete': onComplete }); ~~~ * * * ### `Benchmark.Suite.prototype.clone(options)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1981 \"View in source\") [Ⓣ][1] Creates a new suite with cloned benchmarks. #### Arguments 1. `options` *(Object)*: Options object to overwrite cloned options. #### Returns *(Object)*: The new suite instance. * * * ### `Benchmark.Suite.prototype.emit(type)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2095 \"View in source\") [Ⓣ][1] Executes all registered listeners of the specified event type. #### Arguments 1. `type` *(String|Object)*: The event type or object. #### Returns *(Mixed)*: Returns the return value of the last listener executed. * * * ### `Benchmark.Suite.prototype.filter(callback)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2004 \"View in source\") [Ⓣ][1] An `Array#filter` like method. #### Arguments 1. `callback` *(Function|String)*: The function/alias called per iteration. #### Returns *(Object)*: A new suite of benchmarks that passed callback filter. * * * ### `Benchmark.Suite.prototype.forEach(callback)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3752 \"View in source\") [Ⓣ][1] An `Array#forEach` like method. Callbacks may terminate the loop by explicitly returning `false`. #### Arguments 1. `callback` *(Function)*: The function called per iteration. #### Returns *(Object)*: The suite iterated over. * * * ### `Benchmark.Suite.prototype.indexOf(value)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3761 \"View in source\") [Ⓣ][1] An `Array#indexOf` like method. #### Arguments 1. `value` *(Mixed)*: The value to search for. #### Returns *(Number)*: The index of the matched value or `-1`. * * * ### `Benchmark.Suite.prototype.invoke(name [, arg1, arg2, ...])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3771 \"View in source\") [Ⓣ][1] Invokes a method on all benchmarks in the suite. #### Arguments 1. `name` *(String|Object)*: The name of the method to invoke OR options object. 2. `[arg1, arg2, ...]` *(Mixed)*: Arguments to invoke the method with. #### Returns *(Array)*: A new array of values returned from each method invoked. * * * ### `Benchmark.Suite.prototype.join([separator=','])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3780 \"View in source\") [Ⓣ][1] Converts the suite of benchmarks to a string. #### Arguments 1. `[separator=',']` *(String)*: A string to separate each element of the array. #### Returns *(String)*: The string. * * * ### `Benchmark.Suite.prototype.listeners(type)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2125 \"View in source\") [Ⓣ][1] Returns an array of event listeners for a given type that can be manipulated to add or remove listeners. #### Arguments 1. `type` *(String)*: The event type. #### Returns *(Array)*: The listeners array. * * * ### `Benchmark.Suite.prototype.map(callback)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3789 \"View in source\") [Ⓣ][1] An `Array#map` like method. #### Arguments 1. `callback` *(Function)*: The function called per iteration. #### Returns *(Array)*: A new array of values returned by the callback. * * * ### `Benchmark.Suite.prototype.off([type, listener])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2158 \"View in source\") [Ⓣ][1] Unregisters a listener for the specified event type(s), or unregisters all listeners for the specified event type(s), or unregisters all listeners for all event types. #### Arguments 1. `[type]` *(String)*: The event type. 2. `[listener]` *(Function)*: The function to unregister. #### Returns *(Object)*: The benchmark instance. #### Example ~~~ js // unregister a listener for an event type bench.off('cycle', listener); // unregister a listener for multiple event types bench.off('start cycle', listener); // unregister all listeners for an event type bench.off('cycle'); // unregister all listeners for multiple event types bench.off('start cycle complete'); // unregister all listeners for all event types bench.off(); ~~~ * * * ### `Benchmark.Suite.prototype.on(type, listener)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2197 \"View in source\") [Ⓣ][1] Registers a listener for the specified event type(s). #### Arguments 1. `type` *(String)*: The event type. 2. `listener` *(Function)*: The function to register. #### Returns *(Object)*: The benchmark instance. #### Example ~~~ js // register a listener for an event type bench.on('cycle', listener); // register a listener for multiple event types bench.on('start cycle', listener); ~~~ * * * ### `Benchmark.Suite.prototype.pluck(property)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3798 \"View in source\") [Ⓣ][1] Retrieves the value of a specified property from all benchmarks in the suite. #### Arguments 1. `property` *(String)*: The property to pluck. #### Returns *(Array)*: A new array of property values. * * * ### `Benchmark.Suite.prototype.pop()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3806 \"View in source\") [Ⓣ][1] Removes the last benchmark from the suite and returns it. #### Returns *(Mixed)*: The removed benchmark. * * * ### `Benchmark.Suite.prototype.push()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3814 \"View in source\") [Ⓣ][1] Appends benchmarks to the suite. #### Returns *(Number)*: The suite's new length. * * * ### `Benchmark.Suite.prototype.reduce(callback, accumulator)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3833 \"View in source\") [Ⓣ][1] An `Array#reduce` like method. #### Arguments 1. `callback` *(Function)*: The function called per iteration. 2. `accumulator` *(Mixed)*: Initial value of the accumulator. #### Returns *(Mixed)*: The accumulator. * * * ### `Benchmark.Suite.prototype.reset()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2019 \"View in source\") [Ⓣ][1] Resets all benchmarks in the suite. #### Returns *(Object)*: The suite instance. * * * ### `Benchmark.Suite.prototype.reverse()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L638 \"View in source\") [Ⓣ][1] Rearrange the host array's elements in reverse order. #### Returns *(Array)*: The reversed array. * * * ### `Benchmark.Suite.prototype.run([options={}])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2056 \"View in source\") [Ⓣ][1] Runs the suite. #### Arguments 1. `[options={}]` *(Object)*: Options object. #### Returns *(Object)*: The suite instance. #### Example ~~~ js // basic usage suite.run(); // or with options suite.run({ 'async': true, 'queued': true }); ~~~ * * * ### `Benchmark.Suite.prototype.shift()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L671 \"View in source\") [Ⓣ][1] Removes the first element of the host array and returns it. #### Returns *(Mixed)*: The first element of the array. * * * ### `Benchmark.Suite.prototype.slice(start, end)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L684 \"View in source\") [Ⓣ][1] Creates an array of the host array's elements from the start index up to, but not including, the end index. #### Arguments 1. `start` *(Number)*: The starting index. 2. `end` *(Number)*: The end index. #### Returns *(Array)*: The new array. * * * ### `Benchmark.Suite.prototype.sort([compareFn=null])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3823 \"View in source\") [Ⓣ][1] Sorts the benchmarks of the suite. #### Arguments 1. `[compareFn=null]` *(Function)*: A function that defines the sort order. #### Returns *(Object)*: The sorted suite. * * * ### `Benchmark.Suite.prototype.splice(start, deleteCount [, val1, val2, ...])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L714 \"View in source\") [Ⓣ][1] Allows removing a range of elements and/or inserting elements into the host array. #### Arguments 1. `start` *(Number)*: The start index. 2. `deleteCount` *(Number)*: The number of elements to delete. 3. `[val1, val2, ...]` *(Mixed)*: values to insert at the `start` index. #### Returns *(Array)*: An array of removed elements. * * * ### `Benchmark.Suite.prototype.unshift()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L749 \"View in source\") [Ⓣ][1] Appends arguments to the host array. #### Returns *(Number)*: The new length. * * * ## `Benchmark.Suite.options` ### `Benchmark.Suite.options` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3705 \"View in source\") [Ⓣ][1] *(Object)*: The default options copied by suite instances. * * * ### `Benchmark.Suite.options.name` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3713 \"View in source\") [Ⓣ][1] *(String)*: The name of the suite. * * * [1]: #Benchmark \"Jump back to the TOC.\""},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/node_modules/component-emitter/History.md","tags":[],"body":"1.1.2 / 2014-02-10 ================== * package: rename to \"component-emitter\" * package: update \"main\" and \"component\" fields * Add license to Readme (same format as the other components) * created .npmignore * travis stuff 1.1.1 / 2013-12-01 ================== * fix .once adding .on to the listener * docs: Emitter#off() * component: add `.repo` prop 1.1.0 / 2013-10-20 ================== * add `.addEventListener()` and `.removeEventListener()` aliases 1.0.1 / 2013-06-27 ================== * add support for legacy ie 1.0.0 / 2013-02-26 ================== * add `.off()` support for removing all listeners 0.0.6 / 2012-10-08 ================== * add `this._callbacks` initialization to prevent funky gotcha 0.0.5 / 2012-09-07 ================== * fix `Emitter.call(this)` usage 0.0.3 / 2012-07-11 ================== * add `.listeners()` * rename `.has()` to `.hasListeners()` 0.0.2 / 2012-06-28 ================== * fix `.off()` with `.once()`-registered callbacks"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/node_modules/component-emitter/Readme.md","tags":[],"body":"# Emitter [![Build Status](https://travis-ci.org/component/emitter.png)](https://travis-ci.org/component/emitter) Event emitter component. ## Installation ``` $ component install component/emitter ``` ## API ### Emitter(obj) The `Emitter` may also be used as a mixin. For example a \"plain\" object may become an emitter, or you may extend an existing prototype. As an `Emitter` instance: ```js var Emitter = require('emitter'); var emitter = new Emitter; emitter.emit('something'); ``` As a mixin: ```js var Emitter = require('emitter'); var user = { name: 'tobi' }; Emitter(user); user.emit('im a user'); ``` As a prototype mixin: ```js var Emitter = require('emitter'); Emitter(User.prototype); ``` ### Emitter#on(event, fn) Register an `event` handler `fn`. ### Emitter#once(event, fn) Register a single-shot `event` handler `fn`, removed immediately after it is invoked the first time. ### Emitter#off(event, fn) * Pass `event` and `fn` to remove a listener. * Pass `event` to remove all listeners on that event. * Pass nothing to remove all listeners on all events. ### Emitter#emit(event, ...) Emit an `event` with variable option args. ### Emitter#listeners(event) Return an array of callbacks, or an empty array. ### Emitter#hasListeners(event) Check if this emitter has `event` handlers. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/node_modules/debug/Readme.md","tags":[],"body":"# debug tiny node.js debugging utility modelled after node core's debugging technique. ## Installation ``` $ npm install debug ``` ## Usage With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you're used to work fine. A unique color is selected per-function for visibility. Example _app.js_: ```js var debug = require('debug')('http') , http = require('http') , name = 'My App'; // fake app debug('booting %s', name); http.createServer(function(req, res){ debug(req.method + ' ' + req.url); res.end('hello\\n'); }).listen(3000, function(){ debug('listening'); }); // fake worker of some kind require('./worker'); ``` Example _worker.js_: ```js var debug = require('debug')('worker'); setInterval(function(){ debug('doing some work'); }, 1000); ``` The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png) ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png) ## Millisecond diff When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls. ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png) When stderr is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below: _(NOTE: Debug now uses stderr instead of stdout, so the correct shell command for this example is actually `DEBUG=* node example/worker 2> out &`)_ ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png) ## Conventions If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\". ## Wildcards The \"*\" character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect.compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`. You can also exclude specific debuggers by prefixing them with a \"-\" character. For example, `DEBUG=* -connect:*` would include all debuggers except those starting with \"connect:\". ## Browser support Debug works in the browser as well, currently persisted by `localStorage`. For example if you have `worker:a` and `worker:b` as shown below, and wish to debug both type `debug.enable('worker:*')` in the console and refresh the page, this will remain until you disable with `debug.disable()`. ```js a = debug('worker:a'); b = debug('worker:b'); setInterval(function(){ a('doing some work'); }, 1000); setInterval(function(){ a('doing some work'); }, 1200); ``` ## License (The MIT License) Copyright (c) 2011 TJ Holowaychuk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/node_modules/json3/README.md","tags":[],"body":"# JSON 3 # ![JSON 3 Logo](http://bestiejs.github.io/json3/page/logo.png) **JSON 3** is a modern JSON implementation compatible with a variety of JavaScript platforms, including Internet Explorer 6, Opera 7, Safari 2, and Netscape 6. The current version is **3.2.6**. - [Development Version](https://raw.github.com/bestiejs/json3/v3.2.6/lib/json3.js) *(40 KB; uncompressed with comments)* - [Production Version](https://raw.github.com/bestiejs/json3/v3.2.6/lib/json3.min.js) *(3.3 KB; compressed and `gzip`-ped)* CDN copies are also available at [cdnjs](http://cdnjs.com/libraries/json3/) & [jsDelivr](http://www.jsdelivr.com/#!json3). [JSON](http://json.org/) is a language-independent data interchange format based on a loose subset of the JavaScript grammar. Originally popularized by [Douglas Crockford](http://www.crockford.com/), the format was standardized in the [fifth edition](http://es5.github.com/) of the ECMAScript specification. The 5.1 edition, ratified in June 2011, incorporates several modifications to the grammar pertaining to the serialization of dates. JSON 3 exposes two functions: `stringify()` for [serializing](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/stringify) a JavaScript value to JSON, and `parse()` for [producing](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/parse) a JavaScript value from a JSON source string. It is a **drop-in replacement** for [JSON 2](http://json.org/js). The functions behave exactly as described in the ECMAScript spec, **except** for the date serialization discrepancy noted below. The JSON 3 parser does **not** use `eval` or regular expressions. This provides security and performance benefits in obsolete and mobile environments, where the margin is particularly significant. The complete [benchmark suite](http://jsperf.com/json3) is available on [jsPerf](http://jsperf.com/). The project is [hosted on GitHub](http://git.io/json3), along with the [unit tests](http://bestiejs.github.io/json3/test/test_browser.html). It is part of the [BestieJS](https://github.com/bestiejs) family, a collection of best-in-class JavaScript libraries that promote cross-platform support, specification precedents, unit testing, and plenty of documentation. # Changes from JSON 2 # JSON 3... * Correctly serializes primitive wrapper objects. * Throws a `TypeError` when serializing cyclic structures (JSON 2 recurses until the call stack overflows). * Utilizes **feature tests** to detect broken or incomplete *native* JSON implementations (JSON 2 only checks for the presence of the native functions). The tests are only executed once at runtime, so there is no additional performance cost when parsing or serializing values. **As of v3.2.3**, JSON 3 is compatible with [Prototype](http://prototypejs.org) 1.6.1 and older. In contrast to JSON 2, JSON 3 **does not**... * Add `toJSON()` methods to the `Boolean`, `Number`, and `String` prototypes. These are not part of any standard, and are made redundant by the design of the `stringify()` implementation. * Add `toJSON()` or `toISOString()` methods to `Date.prototype`. See the note about date serialization below. ## Date Serialization **JSON 3 deviates from the specification in one important way**: it does not define `Date#toISOString()` or `Date#toJSON()`. This preserves CommonJS compatibility and avoids polluting native prototypes. Instead, date serialization is performed internally by the `stringify()` implementation: if a date object does not define a custom `toJSON()` method, it is serialized as a [simplified ISO 8601 date-time string](http://es5.github.com/#x15.9.1.15). **Several native `Date#toJSON()` implementations produce date time strings that do *not* conform to the grammar outlined in the spec**. For instance, all versions of Safari 4, as well as JSON 2, fail to serialize extended years correctly. Furthermore, JSON 2 and older implementations omit the milliseconds from the date-time string (optional in ES 5, but required in 5.1). Finally, in all versions of Safari 4 and 5, serializing an invalid date will produce the string `\"Invalid Date\"`, rather than `null`. Because these environments exhibit other serialization bugs, however, JSON 3 will override the native `stringify()` implementation. Portions of the date serialization code are adapted from the [`date-shim`](https://github.com/Yaffle/date-shim) project. # Usage # ## Web Browsers ## CommonJS Environments var JSON3 = require(\"./path/to/json3\"); JSON3.parse(\"[1, 2, 3]\"); // => [1, 2, 3] ## JavaScript Engines load(\"path/to/json3.js\"); JSON.stringify({\"Hello\": 123, \"Good-bye\": 456}, [\"Hello\"], \"\\t\"); // => '{\\n\\t\"Hello\": 123\\n}' # Compatibility # JSON 3 has been **tested** with the following web browsers, CommonJS environments, and JavaScript engines. ## Web Browsers - Windows [Internet Explorer](http://www.microsoft.com/windows/internet-explorer), version 6.0 and higher - Mozilla [Firefox](http://www.mozilla.com/firefox), version 1.0 and higher - Apple [Safari](http://www.apple.com/safari), version 2.0 and higher - [Opera](http://www.opera.com) 7.02 and higher - [Mozilla](http://sillydog.org/narchive/gecko.php) 1.0, [Netscape](http://sillydog.org/narchive/) 6.2.3, and [SeaMonkey](http://www.seamonkey-project.org/) 1.0 and higher ## CommonJS Environments - [Node](http://nodejs.org/) 0.2.6 and higher - [RingoJS](http://ringojs.org/) 0.4 and higher - [Narwhal](http://narwhaljs.org/) 0.3.2 and higher ## JavaScript Engines - Mozilla [Rhino](http://www.mozilla.org/rhino) 1.5R5 and higher - WebKit [JSC](https://trac.webkit.org/wiki/JSC) - Google [V8](http://code.google.com/p/v8) ## Known Incompatibilities * Attempting to serialize the `arguments` object may produce inconsistent results across environments due to specification version differences. As a workaround, please convert the `arguments` object to an array first: `JSON.stringify([].slice.call(arguments, 0))`. ## Required Native Methods JSON 3 assumes that the following methods exist and function as described in the ECMAScript specification: - The `Number`, `String`, `Array`, `Object`, `Date`, `SyntaxError`, and `TypeError` constructors. - `String.fromCharCode` - `Object#toString` - `Function#call` - `Math.floor` - `Number#toString` - `Date#valueOf` - `String.prototype`: `indexOf`, `charCodeAt`, `charAt`, `slice`. - `Array.prototype`: `push`, `pop`, `join`. # Contribute # Check out a working copy of the JSON 3 source code with [Git](http://git-scm.com/): $ git clone git://github.com/bestiejs/json3.git $ cd json3 $ git submodule update --init If you'd like to contribute a feature or bug fix, you can [fork](http://help.github.com/fork-a-repo/) JSON 3, commit your changes, and [send a pull request](http://help.github.com/send-pull-requests/). Please make sure to update the unit tests in the `test` directory as well. Alternatively, you can use the [GitHub issue tracker](https://github.com/bestiejs/json3/issues) to submit bug reports, feature requests, and questions, or send tweets to [@kitcambridge](http://twitter.com/kitcambridge). JSON 3 is released under the [MIT License](http://kit.mit-license.org/)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser/node_modules/json3/coverage/lcov-report/lib/json3.js.html","tags":[],"body":"Code coverage report for lib/json3.js Code coverage report for lib/json3.js Statements: 13.77% (50 / 363)      Branches: 15.32% (59 / 385)      Functions: 11.54% (3 / 26)      Lines: 13.77% (50 / 363)      All files » lib/ » json3.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867  1   1       1     1       1   1     1 1               1 1     1                 1 3         3 3       3     1   2   2 1 1   1 4   1 1                                                                                                                 1     2 1 1 1       1   1 1 1 1   1   1 1       1     1 1       1                 1     3   1 1 1 1   1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         1            /*! JSON v3.2.5 | http://bestiejs.github.io/json3 | Copyright 2012-2013, Kit Cambridge | http://kit.mit-license.org */ ;(function (window) { // Convenience aliases. var getClass = {}.toString, isProperty, forEach, undef;   // Detect the `define` function exposed by asynchronous module loaders. The // strict `define` check is necessary for compatibility with `r.js`. var isLoader = typeof define === \"function\" && define.amd;   // Detect native implementations. var nativeJSON = typeof JSON == \"object\" && JSON;   // Set up the JSON 3 namespace, preferring the CommonJS `exports` object if // available. var JSON3 = typeof exports == \"object\" && exports && !exports.nodeType && exports;   Eif (JSON3 && nativeJSON) { // Explicitly delegate to the native `stringify` and `parse` // implementations in CommonJS environments. JSON3.stringify = nativeJSON.stringify; JSON3.parse = nativeJSON.parse; } else { // Export for web browsers, JavaScript engines, and asynchronous module // loaders, using the global `JSON` object if available. JSON3 = window.JSON = nativeJSON || {}; }   // Test the `Date#getUTC*` methods. Based on work by @Yaffle. var isExtended = new Date(-3509827334573292); try { // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical // results for certain dates in Opera >= 10.53. isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && // Safari `\\u0008`). stringify({ \"a\": [value, true, false, null, \"\\x00\\b\\n\\f\\r\\t\"] }) == serialized && // FF 3.1b1 and b2 ignore the `filter` and `width` arguments. stringify(null, value) === \"1\" && stringify([1, 2], null, 1) == \"[\\n 1,\\n 2\\n]\" && // JSON 2, Prototype = 10.53 incorrectly serialize millisecond // values less than 1000. Credits: @Yaffle. stringify(new Date(-1)) == '\"1969-12-31T23:59:59.999Z\"'; } catch (exception) { stringifySupported = false; } } isSupported = stringifySupported; } // Test `JSON.parse`. if (name == \"json-parse\") { var parse = JSON3.parse; Eif (typeof parse == \"function\") { try { // FF 3.1b1, b2 will throw an exception if a bare literal is provided. // Conforming implementations should also coerce the initial argument to // a string prior to parsing. Eif (parse(\"0\") === 0 && !parse(false)) { // Simple parsing test. value = parse(serialized); var parseSupported = value[\"a\"].length == 5 && value[\"a\"][0] === 1; Eif (parseSupported) { try { // Safari 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400); }; }   // Internal: Determines if a property is a direct property of the given // object. Delegates to the native `Object#hasOwnProperty` method. if (!(isProperty = {}.hasOwnProperty)) { isProperty = function (property) { var members = {}, constructor; if ((members.__proto__ = null, members.__proto__ = { // The *proto* property cannot be set multiple times in recent // versions of Firefox and SeaMonkey. \"toString\": 1 }, members).toString != getClass) { // Safari 10 && charIndexBuggy, symbols; if (isLarge) { symbols = value.split(\"\"); } for (; index -1 / 0 && value = 1e4 ? (year -1 / 0 && value 0) { for (whitespace = \"\", width > 10 && (width = 10); whitespace.length = 48 && charCode = 97 && charCode = 65 && charCode = 32 && charCode != 92 && charCode != 34) { charCode = source.charCodeAt(++Index); } // Append the string as-is. value += source.slice(begin, Index); } } if (source.charCodeAt(Index) == 34) { // Advance to the next character and return the revived string. Index++; return value; } // Unterminated string. abort(); default: // Parse numbers and literals. begin = Index; // Advance past the negative sign, if one is specified. if (charCode == 45) { isSigned = true; charCode = source.charCodeAt(++Index); } // Parse an integer or floating-point value. if (charCode >= 48 && charCode = 48 && charCode = 48 && charCode = 48 && charCode = 48 && charCode <= 57); position++); if (position == Index) { // Illegal empty exponent. abort(); } Index = position; } // Coerce the parsed value to a JavaScript number. return +source.slice(begin, Index); } // A negative sign may only precede numbers. if (isSigned) { abort(); } // `true`, `false`, and `null` literals. if (source.slice(Index, Index + 4) == \"true\") { Index += 4; return true; } else if (source.slice(Index, Index + 5) == \"false\") { Index += 5; return false; } else if (source.slice(Index, Index + 4) == \"null\") { Index += 4; return null; } // Unrecognized token. abort(); } } // Return the sentinel `$` character if the parser has reached the end // of the source string. return \"$\"; };   // Internal: Parses a JSON `value` token. var get = function (value) { var results, hasMembers; if (value == \"$\") { // Unexpected end of input. abort(); } if (typeof value == \"string\") { if ((charIndexBuggy ? value.charAt(0) : value[0]) == \"@\") { // Remove the sentinel `@` character. return value.slice(1); } // Parse object and array literals. if (value == \"[\") { // Parses a JSON array, returning a new JavaScript array. results = []; for (;; hasMembers || (hasMembers = true)) { value = lex(); // A closing square bracket marks the end of the array literal. if (value == \"]\") { break; } // If the array literal contains elements, the current token // should be a comma separating the previous element from the // next. if (hasMembers) { if (value == \",\") { value = lex(); if (value == \"]\") { // Unexpected trailing `,` in array literal. abort(); } } else { // A `,` must separate each array element. abort(); } } // Elisions and leading commas are not permitted. if (value == \",\") { abort(); } results.push(get(value)); } return results; } else if (value == \"{\") { // Parses a JSON object, returning a new JavaScript object. results = {}; for (;; hasMembers || (hasMembers = true)) { value = lex(); // A closing curly brace marks the end of the object literal. if (value == \"}\") { break; } // If the object literal contains members, the current token // should be a comma separator. if (hasMembers) { if (value == \",\") { value = lex(); if (value == \"}\") { // Unexpected trailing `,` in object literal. abort(); } } else { // A `,` must separate each object member. abort(); } } // Leading commas are not permitted, object property names must be // double-quoted strings, and a `:` must separate each property // name and value. if (value == \",\" || typeof value != \"string\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \"@\" || lex() != \":\") { abort(); } results[value.slice(1)] = get(lex()); } return results; } // Unexpected token encountered. abort(); } return value; };   // Internal: Updates a traversed object member. var update = function(source, property, callback) { var element = walk(source, property, callback); if (element === undef) { delete source[property]; } else { source[property] = element; } };   // Internal: Recursively traverses a parsed JSON object, invoking the // `callback` function for each value. This is an implementation of the // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2. var walk = function (source, property, callback) { var value = source[property], length; if (typeof value == \"object\" && value) { // `forEach` can't be used to traverse an array in Opera <= 8.54 // because its `Object#hasOwnProperty` implementation returns `false` // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\"0\")`). if (getClass.call(value) == arrayClass) { for (length = value.length; length--;) { update(value, length, callback); } } else { forEach(value, function (property) { update(value, property, callback); }); } } return callback.call(source, property, value); };   // Public: `JSON.parse`. See ES 5.1 section 15.12.2. JSON3.parse = function (source, callback) { var result, value; Index = 0; Source = \"\" + source; result = get(lex()); // If a JSON string contains multiple tokens, it is invalid. if (lex() != \"$\") { abort(); } // Reset the parser state. Index = Source = null; return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\"\"] = result, value), \"\", callback) : result; }; } }   // Export for asynchronous module loaders. Iif (isLoader) { define(function () { return JSON3; }); } }(this));   Generated by istanbul at Sun Nov 17 2013 14:21:36 GMT-0800 (PST)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/History.md","tags":[],"body":"1.4.6 / 2016-05-02 ================== * bump engine.io-client 1.4.5 / 2016-01-26 ================== * fix `NativeScript` support 1.4.4 / 2016-01-10 ================== * bump `engine.io-client` 1.4.3 / 2016-01-08 ================== * remove `webpack.config.js` 1.4.2 / 2016-01-07 ================== * exclude `ws` instead of `ignore`ing it from build [@lpinca] * add global object as another fallback [@ligaz] * bump `engine.io-client` 1.4.1 / 2016-01-07 ================== * package: bump `engine.io-client` 1.4.0 / 2015-11-28 ================== * package: bump `engine.io-client` * manager: fix `Object.prototype` extensions * package: bump `zuul` and `zuul-ngrok` * package: bump `debug` * package: bump `socket.io-parser` * package: bump `has-binary` * remove unnecessary `index.js` * added support for `ping` and `pong` events * proper handling of disconnection while in `opening` state * instrumentation / style tweaks * added tests for same-namespace new connection handling * do not call apply if packet id is not in acks * build sio client with make to autogenerate new socket.io.js * bugfix/1956 don't reuse same-namespace connections #2 * fix has-binary to work with all objects [gunta] * bugfix/1956 don't reuse same-namespace connections * add support for compression [nkzawa] * fix: location.port was ignored 1.3.7 / 2015-09-21 ================== * package: bump `socket.io` for node4 support * package: bump `engine.io-client` for node4 compatibility 1.3.6 / 2015-07-14 ================== * package: bump `engine.io-client` to fix build on windows 1.3.5 / 2015-03-03 ================== * package: bump parser 1.3.4 / 2015-02-14 ================== * build `socket.io.js` with `engine.io-client` `1.5.1` 1.3.3 / 2015-02-03 ================== * package: bump parser 1.3.2 / 2015-01-19 ================== * build `socket.io.js` 1.3.1 / 2015-01-19 ================== * no change on this release * package: bump `engine.io-client` to not depend on `git(1)` for a dep 1.3.0 / 2015-01-19 ================== * package: bump `engine.io-client` * added `socket.id` property pointing to session id [rase-] * fix url parsing when uri string is undefined [defunctzombie] * implemented `backo` for exponential backoff with randomization [mokesmokes] * reset reconnection attempts state after a successul connection [mokesmokes] 1.2.1 / 2014-11-21 ================== * package: bump `engine.io-client` * README: fixes to prevent duplicate events [nkzawa] * fix reconnection after reconnecting manually [nkzawa] * make ACK callbacks idempotent [thexeos] * package: bump `uglify-js` 1.2.0 / 2014-10-27 ================== * bump `engine.io-client`. * set `readyState` before engine.io close event * fix reconnection after reconnecting manually * enable to stop reconnecting * downloads badge * support no schema relative url * enable to reconnect manually 1.1.0 / 2014-09-04 ================== * socket: fix in `has-binary` * package: bump `socket.io-parser` * package: bump `engine.io-client` * further increase test timeout. * double to singly quotes in tests. * extend timeout and remember to close everything in each test case * fix travis * add travis + zuul matrix * use svg instead of png to get better image quality in readme * make CI build faster * removed unnecessary code from try block. Only decode packet is needed. * package: bump `browserify` * package: bump `engine.io-client` * fix autoConnect option * npmignore: ignore `.gitignore` * package: update `browserify` * don't fire an extra reconnect when we're not reconnecting after a failed initial connect attempt * package: bump `socket.io-parser` for `component-emitter` dep fix * updated tests to reflect `autoConnect` option * add `autoConnect` option to wait with connecting 1.0.6 / 2014-06-19 ================== * test fixes on internet explorer * fixes for duplicate event propagation from manager instance [Rase-] 1.0.5 / 2014-06-16 ================== * package: bump `engine.io-client` for better deps and smaller build * handle io.connect(null, opts) correctly [audreyt] * url: fix incorrect ports in certain connections [holic] * manager: propagate all reconnection events to sockets [Rase-] * index: added BC for `force new connection` * socket: fix event buffering while in disconnected state [kevin-roark] * package: stop using tarballs in dependencies [reid] * manager: relay `connect_error` and `connect_timeout` to sockets 1.0.4 / 2014-06-02 ================== * update build 1.0.3 / 2014-05-31 ================== * package; bump `socket.io-parser` for binary ACK fix * package: bump `engine.io-client` for binary UTF8 fix 1.0.2 / 2014-05-28 ================== * package: bump `socket.io-parser` for windows fix 1.0.1 / 2014-05-28 ================== * override npm tag 1.0.0 / 2014-05-28 ================== * stable release 1.0.0-pre5 / 2014-05-22 ======================= * package: bump `engine.io-client` for parser fixes 1.0.0-pre4 / 2014-05-19 ======================= * build 1.0.0-pre3 / 2014-05-17 ======================= * package: bump parser * package: bump engine.io-client 1.0.0-pre2 / 2014-04-27 ======================= * package: bump `engine.io-client` * package: bump `zuul` * allows user-level query string parameters to be in socket.request * package: bump `socket.io-parser` * package: bump `engine.io-client` for android fix * tidy up .gitignore 1.0.0-pre / 2014-03-14 ====================== * implemented `engine.io-client` * implemented `socket.io-parser` * implemented `json3` to avoid env pollution * implemented `debug` * added binary support * added `browserify` support 0.9.11 / 2012-11-02 =================== * Enable use of 'xhr' transport in Node.js * Fix the problem with disconnecting xhr-polling users * Add should to devDependencies * Prefer XmlHttpRequest if CORS is available * Make client compatible with AMD loaders. 0.9.10 / 2012-08-10 =================== * fix removeAllListeners to behave as expected. * set withCredentials to true only if xdomain. * socket: disable disconnect on unload by default. 0.9.9 / 2012-08-01 ================== * socket: fixed disconnect xhr url and made it actually sync * *: bump xmlhttprequest dep 0.9.8 / 2012-07-24 ================== * Fixed build. 0.9.7 / 2012-07-24 ================== * iOS websocket crash fix. * Fixed potential `open` collision. * Fixed disconnectSync. 0.9.6 / 2012-04-17 ================== * Don't position the jsonp form off the screen (android fix). 0.9.5 / 2012-04-05 ================== * Bumped version. 0.9.4 / 2012-04-01 ================== * Fixes polling loop upon reconnect advice (fixes #438). 0.9.3 / 2012-03-28 ================== * Fix XHR.check, which was throwing an error transparently and causing non-IE browsers to fall back to JSONP [mikito] * Fixed forced disconnect on window close [zzzaaa] 0.9.2 / 2012-03-13 ================== * Transport order set by \"options\" [zzzaaa] 0.9.1-1 / 2012-03-02 ==================== * Fixed active-x-obfuscator NPM dependency. 0.9.1 / 2012-03-02 ================== * Misc corrections. * Added warning within Firefox about webworker test in test runner. * Update ws dependency [einaros] * Implemented client side heartbeat checks. [felixge] * Improved Firewall support with ActiveX obfuscation. [felixge] * Fixed error handling during connection process. [Outsideris] 0.9.0 / 2012-02-26 ================== * Added DS_Store to gitignore. * Updated depedencies. * Bumped uglify * Tweaking code so it doesn't throw an exception when used inside a WebWorker in Firefox * Do not rely on Array.prototype.indexOf as it breaks with pages that use the Prototype.js library. * Windows support landed * Use @einaros ws module instead of the old crap one * Fix for broken closeTimeout and 'IE + xhr' goes into infinite loop on disconnection * Disabled reconnection on error if reconnect option is set to false * Set withCredentials to true before xhr to fix authentication * Clears the timeout from reconnection attempt when there is a successful or failed reconnection. This fixes the issue of setTimeout's carrying over from previous reconnection and changing (skipping) values of self.reconnectionDelay in the newer reconnection. * Removed decoding of parameters when chunking the query string. This was used later on to construct the url to post to the socket.io server for connection and if we're adding custom parameters of our own to this url (for example for OAuth authentication) they were being sent decoded, which is wrong. 0.8.7 / 2011-11-05 ================== * Bumped client 0.8.6 / 2011-10-27 ================== * Added WebWorker support. * Fixed swfobject and web_socket.js to not assume window. * Fixed CORS detection for webworker. * Fix `defer` for webkit in a webworker. * Fixed io.util.request to not rely on window. * FIxed; use global instead of window and dont rely on document. * Fixed; JSON-P handshake if CORS is not available. * Made underlying Transport disconnection trigger immediate socket.io disconnect. * Fixed warning when compressing with Google Closure Compiler. * Fixed builder's uglify utf-8 support. * Added workaround for loading indicator in FF jsonp-polling. [3rd-Eden] * Fixed host discovery lookup. [holic] * Fixed close timeout when disconnected/reconnecting. [jscharlach] * Fixed jsonp-polling feature detection. * Fixed jsonp-polling client POSTing of \\n. * Fixed test runner on IE6/7 0.8.5 / 2011-10-07 ================== * Bumped client 0.8.4 / 2011-09-06 ================== * Corrected build 0.8.3 / 2011-09-03 ================== * Fixed `\\n` parsing for non-JSON packets. * Fixed; make Socket.IO XHTML doctype compatible (fixes #460 from server) * Fixed support for Node.JS running `socket.io-client`. * Updated repository name in `package.json`. * Added support for different policy file ports without having to port forward 843 on the server side [3rd-Eden] 0.8.2 / 2011-08-29 ================== * Fixed flashsocket detection. 0.8.1 / 2011-08-29 ================== * Bump version. 0.8.0 / 2011-08-28 ================== * Added MozWebSocket support (hybi-10 doesn't require API changes) [einaros]. 0.7.11 / 2011-08-27 =================== * Corrected previous release (missing build). 0.7.10 / 2011-08-27 =================== * Fix for failing fallback in websockets 0.7.9 / 2011-08-12 ================== * Added check on `Socket#onConnect` to prevent double `connect` events on the main manager. * Fixed socket namespace connect test. Remove broken alternative namespace connect test. * Removed test handler for removed test. * Bumped version to match `socket.io` server. 0.7.5 / 2011-08-08 ================== * Added querystring support for `connect` [3rd-Eden] * Added partial Node.JS transports support [3rd-Eden, josephg] * Fixed builder test. * Changed `util.inherit` to replicate Object.create / __proto__. * Changed and cleaned up some acceptance tests. * Fixed race condition with a test that could not be run multiple times. * Added test for encoding a payload. * Added the ability to override the transport to use in acceptance test [3rd-Eden] * Fixed multiple connect packets [DanielBaulig] * Fixed jsonp-polling over-buffering [3rd-Eden] * Fixed ascii preservation in minified socket.io client [3rd-Eden] * Fixed socket.io in situations where the page is not served through utf8. * Fixed namespaces not reconnecting after disconnect [3rd-Eden] * Fixed default port for secure connections. 0.7.4 / 2011-07-12 ================== * Added `SocketNamespace#of` shortcut. [3rd-Eden] * Fixed a IE payload decoding bug. [3rd-Eden] * Honor document protocol, unless overriden. [dvv] * Fixed new builder dependencies. [3rd-Eden] 0.7.3 / 2011-06-30 ================== * Fixed; acks don't depend on arity. They're automatic for `.send` and callback based for `.emit`. [dvv] * Added support for sub-sockets authorization. [3rd-Eden] * Added BC support for `new io.connect`. [fat] * Fixed double `connect` events. [3rd-Eden] * Fixed reconnection with jsonp-polling maintaining old sessionid. [franck34] 0.7.2 / 2011-06-22 ================== * Added `noop` message type. 0.7.1 / 2011-06-21 ================== * Bumped socket.io dependency version for acceptance tests. 0.7.0 / 2011-06-21 ================== * http://socket.io/announcement.html"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/README.md","tags":[],"body":"# socket.io-client [![Build Status](https://secure.travis-ci.org/socketio/socket.io-client.svg)](http://travis-ci.org/socketio/socket.io-client) [![Dependency Status](https://david-dm.org/socketio/socket.io-client.svg)](https://david-dm.org/socketio/socket.io-client) [![devDependency Status](https://david-dm.org/socketio/socket.io-client/dev-status.svg)](https://david-dm.org/socketio/socket.io-client#info=devDependencies) ![NPM version](https://badge.fury.io/js/socket.io-client.svg) ![Downloads](http://img.shields.io/npm/dm/socket.io-client.svg?style=flat) [![](http://slack.socket.io/badge.svg?)](http://slack.socket.io) ## How to use A standalone build of `socket.io-client` is exposed automatically by the socket.io server as `/socket.io/socket.io.js`. Alternatively you can serve the file `socket.io.js` found at the root of this repository. ```html ``` Socket.IO is compatible with [browserify](http://browserify.org/). ### Node.JS (server-side usage) Add `socket.io-client` to your `package.json` and then: ```js var socket = require('socket.io-client')('http://localhost'); socket.on('connect', function(){}); socket.on('event', function(data){}); socket.on('disconnect', function(){}); ``` ## API ### IO(url:String, opts:Object):Socket Exposed as the `io` namespace in the standalone build, or the result of calling `require('socket.io-client')`. When called, it creates a new `Manager` for the given URL, and attempts to reuse an existing `Manager` for subsequent calls, unless the `multiplex` option is passed with `false`. The rest of the options are passed to the `Manager` constructor (see below for details). A `Socket` instance is returned for the namespace specified by the pathname in the URL, defaulting to `/`. For example, if the `url` is `http://localhost/users`, a transport connection will be established to `http://localhost` and a Socket.IO connection will be established to `/users`. ### IO#protocol Socket.io protocol revision number this client works with. ### IO#Socket Reference to the `Socket` constructor. ### IO#Manager Reference to the `Manager` constructor. ### IO#Emitter Reference to the `Emitter` constructor. ### Manager(url:String, opts:Object) A `Manager` represents a connection to a given Socket.IO server. One or more `Socket` instances are associated with the manager. The manager can be accessed through the `io` property of each `Socket` instance. The `opts` are also passed to `engine.io` upon initialization of the underlying `Socket`. Options: - `reconnection` whether to reconnect automatically (`true`) - `reconnectionAttempts` (`Infinity`) before giving up - `reconnectionDelay` how long to initially wait before attempting a new reconnection (`1000`). Affected by +/- `randomizationFactor`, for example the default initial delay will be between 500 to 1500ms. - `reconnectionDelayMax` maximum amount of time to wait between reconnections (`5000`). Each attempt increases the reconnection delay by 2x along with a randomization as above - `randomizationFactor` (`0.5`), 0 <= randomizationFactor <= 1 - `timeout` connection timeout before a `connect_error` and `connect_timeout` events are emitted (`20000`) - `autoConnect` by setting this false, you have to call `manager.open` whenever you decide it's appropriate #### Events - `connect_error`. Fired upon a connection error. Parameters: - `Object` error object - `connect_timeout`. Fired upon a connection timeout. - `reconnect`. Fired upon a successful reconnection. Parameters: - `Number` reconnection attempt number - `reconnect_attempt`. Fired upon an attempt to reconnect. - `reconnecting`. Fired upon an attempt to reconnect. Parameters: - `Number` reconnection attempt number - `reconnect_error`. Fired upon a reconnection attempt error. Parameters: - `Object` error object - `reconnect_failed`. Fired when couldn't reconnect within `reconnectionAttempts` - `ping`. Fired when a ping packet is written out to the server. - `pong`. Fired when a pong is received from the server. Parameters: - `Number` number of ms elapsed since `ping` packet (i.e.: latency). The events above are also emitted on the individual sockets that reconnect that depend on this `Manager`. ### Manager#reconnection(v:Boolean):Manager Sets the `reconnection` option, or returns it if no parameters are passed. ### Manager#reconnectionAttempts(v:Boolean):Manager Sets the `reconnectionAttempts` option, or returns it if no parameters are passed. ### Manager#reconnectionDelay(v:Boolean):Manager Sets the `reconectionDelay` option, or returns it if no parameters are passed. ### Manager#reconnectionDelayMax(v:Boolean):Manager Sets the `reconectionDelayMax` option, or returns it if no parameters are passed. ### Manager#timeout(v:Boolean):Manager Sets the `timeout` option, or returns it if no parameters are passed. ### Socket #### Socket#id:String A property on the `socket` instance that is equal to the underlying engine.io socket id. The property is present once the socket has connected, is removed when the socket disconnects and is updated if the socket reconnects. #### Socket#compress(v:Boolean):Socket Sets a modifier for a subsequent event emission that the event data will only be _compressed_ if the value is `true`. Defaults to `true` when you don't call the method. ```js socket.compress(false).emit('an event', { some: 'data' }); ``` #### Events - `connect`. Fired upon a connection including a successful reconnection. - `error`. Fired upon a connection error Parameters: - `Object` error data - `disconnect`. Fired upon a disconnection. - `reconnect`. Fired upon a successful reconnection. Parameters: - `Number` reconnection attempt number - `reconnect_attempt`. Fired upon an attempt to reconnect. - `reconnecting`. Fired upon an attempt to reconnect. Parameters: - `Number` reconnection attempt number - `reconnect_error`. Fired upon a reconnection attempt error. Parameters: - `Object` error object - `reconnect_failed`. Fired when couldn't reconnect within `reconnectionAttempts` ## License [MIT](/LICENSE)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/backo2/History.md","tags":[],"body":"1.0.1 / 2014-02-17 ================== * go away decimal point * history 1.0.0 / 2014-02-17 ================== * add jitter option * Initial commit"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/backo2/Readme.md","tags":[],"body":"# backo Simple exponential backoff because the others seem to have weird abstractions. ## Installation ``` $ npm install backo ``` ## Options - `min` initial timeout in milliseconds [100] - `max` max timeout [10000] - `jitter` [0] - `factor` [2] ## Example ```js var Backoff = require('backo'); var backoff = new Backoff({ min: 100, max: 20000 }); setTimeout(function(){ something.reconnect(); }, backoff.duration()); // later when something works backoff.reset() ``` # License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/component-bind/History.md","tags":[],"body":"1.0.0 / 2014-05-27 ================== * index: use slice ref (#7, @viatropos) * package: rename package to \"component-bind\" * package: add \"repository\" field (#6, @repoify) * package: add \"component\" section 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/component-bind/Readme.md","tags":[],"body":"# bind Function binding utility. ## Installation ``` $ component install component/bind ``` ## API - [bind(obj, fn)](#bindobj-fn) - [bind(obj, fn, ...)](#bindobj-fn-) - [bind(obj, name)](#bindobj-name) ### bind(obj, fn) should bind the function to the given object. ```js var tobi = { name: 'tobi' }; function name() { return this.name; } var fn = bind(tobi, name); fn().should.equal('tobi'); ``` ### bind(obj, fn, ...) should curry the remaining arguments. ```js function add(a, b) { return a + b; } bind(null, add)(1, 2).should.equal(3); bind(null, add, 1)(2).should.equal(3); bind(null, add, 1, 2)().should.equal(3); ``` ### bind(obj, name) should bind the method of the given name. ```js var tobi = { name: 'tobi' }; tobi.getName = function() { return this.name; }; var fn = bind(tobi, 'getName'); fn().should.equal('tobi'); ``` ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/component-emitter/History.md","tags":[],"body":"1.2.0 / 2014-02-12 ================== * prefix events with `$` to support object prototype method names 1.1.3 / 2014-06-20 ================== * republish for npm * add LICENSE file 1.1.2 / 2014-02-10 ================== * package: rename to \"component-emitter\" * package: update \"main\" and \"component\" fields * Add license to Readme (same format as the other components) * created .npmignore * travis stuff 1.1.1 / 2013-12-01 ================== * fix .once adding .on to the listener * docs: Emitter#off() * component: add `.repo` prop 1.1.0 / 2013-10-20 ================== * add `.addEventListener()` and `.removeEventListener()` aliases 1.0.1 / 2013-06-27 ================== * add support for legacy ie 1.0.0 / 2013-02-26 ================== * add `.off()` support for removing all listeners 0.0.6 / 2012-10-08 ================== * add `this._callbacks` initialization to prevent funky gotcha 0.0.5 / 2012-09-07 ================== * fix `Emitter.call(this)` usage 0.0.3 / 2012-07-11 ================== * add `.listeners()` * rename `.has()` to `.hasListeners()` 0.0.2 / 2012-06-28 ================== * fix `.off()` with `.once()`-registered callbacks"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/component-emitter/Readme.md","tags":[],"body":"# Emitter [![Build Status](https://travis-ci.org/component/emitter.png)](https://travis-ci.org/component/emitter) Event emitter component. ## Installation ``` $ component install component/emitter ``` ## API ### Emitter(obj) The `Emitter` may also be used as a mixin. For example a \"plain\" object may become an emitter, or you may extend an existing prototype. As an `Emitter` instance: ```js var Emitter = require('emitter'); var emitter = new Emitter; emitter.emit('something'); ``` As a mixin: ```js var Emitter = require('emitter'); var user = { name: 'tobi' }; Emitter(user); user.emit('im a user'); ``` As a prototype mixin: ```js var Emitter = require('emitter'); Emitter(User.prototype); ``` ### Emitter#on(event, fn) Register an `event` handler `fn`. ### Emitter#once(event, fn) Register a single-shot `event` handler `fn`, removed immediately after it is invoked the first time. ### Emitter#off(event, fn) * Pass `event` and `fn` to remove a listener. * Pass `event` to remove all listeners on that event. * Pass nothing to remove all listeners on all events. ### Emitter#emit(event, ...) Emit an `event` with variable option args. ### Emitter#listeners(event) Return an array of callbacks, or an empty array. ### Emitter#hasListeners(event) Check if this emitter has `event` handlers. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/History.md","tags":[],"body":"1.6.9 / 2016-05-02 ================== * default `rejectUnauthorized` to `true` 1.6.8 / 2016-01-25 ================== * safely resolve `ws` module 1.6.7 / 2016-01-10 ================== * prevent `ws` from being added to the bundle * added jsonp fix for when no `` is found 1.6.6 / 2016-01-07 ================== * support: add fallback to `global` for nativescript [@ligaz] * exclude `ws` instead of ignoring it from build [@lpinca] 1.6.5 / 2016-01-05 ================== * package: bump `ws` for sec advisory 1.6.4 / 2015-12-04 ================== * ipv6 url support * README: fix the description of the `timestampRequests` option * transports: use `yeast` to generate the cache busting id * fix arraybuffer > base64 for binary sends 1.6.3 / 2015-12-01 ================== * remove compress option from control packets * threshold for permessage-deflate 1.6.2 / 2015-11-30 ================== * package: bump `ws` for memory fix with compression * fix response parsing error for polling (unused) 1.6.1 / 2015-11-28 ================== * fix packet options that `ws` changes [Nibbler999] * package: use published `engine.io-parser` 1.6.0 / 2015-11-28 ================== * test with travis containers * socket: remove duplicate declaration (fixes #434) * package: bump `debug` (fixes #433) * bump zuul and zuul-ngrok * package: fix repository url * bump `ws` for several improvements * fix rejectUnauthorized bug * websocket: improve firing of `drain` in websocket transport * socket: clean up buffers right after `close` event * change semantics of the write callback for polling (fire upon flush instead drain) * socket: fix host parsing for IPv6 URLs * socket: handle parser errors appropriately * expose `ping` and `pong` events * enable `supportsBinary` when running as a node client * introduce `extraHeaders` support * fix error when passing `WebSocket#send` second argument on Safari * support compression 1.5.4 / 2015-09-09 ================== * package: bump `engine.io-parser` 1.5.3 / 2015-09-09 ================== * package: bump `ws` to fix node 0.4.0 1.5.2 / 2015-07-09 ================== * package: bump `ws` to fix windows build issues 1.5.1 / 2015-01-19 ================== * do not rely on `git(1)` for dep, point to tarball instead 1.5.0 / 2015-01-18 ================== * package: bump `engine.io-parser` * fix IE tests firing too many connections [rase-] * fix default port detection when host is specified [defunctzombie] * add support for custom SSL options in constructor [rase-] * only call xhr.abort() on error cases in `polling-xhr` [samcday] 1.4.3 / 2014-11-21 ================== * support: make the build system work with the latest browserify * test: remove test with partial browser support * Fixed calls to addEventListener in old browsers 1.4.2 / 2014-10-27 ================== * remove invalid value for strict mode * IE10 should prefer using XHR2 over XDR because it's safer * fixed transport close deferring logic [nkzawa] * wait for buffer to be drained before closing [nkzawa] 1.4.1 / 2014-10-03 ================== * Fixed \"jsonp polling iframe removal error\" * Move ws upgrade needing connection tests to a block checking browser support. * check `readyState` in `sendPacket` and close on `upgradeError` too * defer close while upgrading a transport 1.4.0 / 2014-09-03 ================== * add matrix support for travis runs. * add `enablesXDR` option to turn on `XDomainRequest` * package: bump `browserify` * package: bump `engine.io-parser` * style and close socket after assert * add support for `jsonp` option to turn it off 1.3.1 / 2014-06-19 ================== * transport: catch utf8 decode errors 1.3.0 / 2014-06-13 ================== * smaller inherits utility * fix a test for ws * upgrade emitter dep to not rely on tarball 1.2.2 / 2014-05-30 ================== * package: bump `engine.io-parser` for binary utf8 fix 1.2.1 / 2014-05-22 ================== * build 1.2.0 / 2014-05-18 ================== * removed flashsocket, moving to userland * new build 1.1.1 / 2014-05-14 ================== * jsonp-polling: fixed newline double escaping * package: bump parser * remove legacy Socket#onopen call * added tests for multibyte strings 1.1.0 / 2014-04-27 ================== * bump zuul version * renamed removeAllListeners to cleanup * use inherits package instead of inherit * removed all references to util.js * fix if statement in FlashWS.ready method * polling-jsonp: prevent spurious errors from being emitted when the window is unloaded * polling-xhr: fix a comment and remove unneeded `document` reference * enforce cache busting for all user agents * JSONP and test fixes for fails in IE * package: bump `engine.io-parser` * polling-xhr: abort the request when the window is unloaded 1.0.5 / 2014-03-18 ================== * package: bump `engine.io-parser` for android binary fix 1.0.4 / 2014-03-14 ================== * no base64 encoding for no reason when using websockets 1.0.3 / 2014-03-12 ================== * fix browserify 1.0.2 / 2014-03-12 ================== * bump `engine.io-parser` * made `parseJSON` and `parseURI` from `util` their own modules [gkoren] * clean up tests * clean up browserify 1.0.1 / 2014-03-06 ================== * package: bump `engine.io-parser` 1.0.0 / 2014-03-06 ================== * run browserify without shims * emit socket upgrade event after upgrade done * better feature detection for XHR2 * added `rememberUpgrade` option * binary support 0.9.0 / 2014-02-09 ================== * Fix simple `host:port` URLs and IPV6 [bmalehorn] * Fix XHR cleanup method [poohlty] * Match semantics of `close` event with `WebSocket`. If an error occurs and `open` hadn't fired before, we still emit `close` as per WebSocket spec [mokesmokes]. * Removed SPEC (now in `engine.io-protocol` repository) * Remove `Socket#open` docs (private API) [mokesmokes] 0.8.2 / 2014-01-18 ================== * polling-xhr: avoid catching user-thrown errors * util: remove unused `hasCORS` * polling: remove deferring for faster startup (fixes #174) * engine now works perfectly on workers 0.8.1 / 2014-01-17 ================== * package: bump debug to fix `localStorage` issue (fixes #213) * remove duplicate xmlhttprequest code * add iphone automated testing * bump zuul to 1.3.0 to improve tests performance * use invalid ip address for incorrect connection test * Fix GH-224, remove sockets array 0.8.0 / 2014-01-05 ================== * socket: emit upgrade errors as `upgradeError` instead of `error` 0.7.14 / 2014-01-01 =================== * test: increase timeouts for network tests * test: whitelist globals * test: improve socket closing test * polling: improve url timestamp for ie11 and allow force disabling * polling-xhr: handle errors for xhr creation (fixes `access denied` issues) * polling-xhr: style * socket: more instrumentation for transport creation * socket: allow explicit `false` for `timestampRequests` * socket: accept `null` as first argument * Makefile: cleanup * .travis: deprecate 0.6 0.7.13 / 2013-12-20 =================== * use `jsonp` in favor of `XDomainRequest` to preserve `Cookie` headers in all situations [3rd-eden] (fixes #217) * run zuul tests after node tests [defunctzombie] * add zuul support for easier browser testing [defunctzombie] 0.7.12 / 2013-11-11 =================== * engine.io: updated build to fix WebSocket constructor issue * package: move browserify into devDeps 0.7.11 / 2013-11-06 =================== * AMD support * Makefile: build now smaller thanks to browserify * add browserify support 0.7.10 / 2013-10-28 =================== * fixed issue which prevented IE9 and under to pass Cookies to server during handshake * package: update \"ws\" to v0.4.31 * fixed - there is no host property only hostname * fixed - flash socket creation * fixed - emit errors thrown by xhr.send() 0.7.9 / 2013-08-30 ================== * websocket: pass `undefined` as the WebSocket \"protocols\" 0.7.8 / 2013-08-30 ================== * package: update \"ws\" 0.7.7 / 2013-08-30 ================== * package: bump ws to 0.4.30 * websocket: no more env sniffing, just require `ws` [TooTallNate] * websocket: remove the \"bufferedAmount\" checking logic [TooTallNate] 0.7.6 / 2013-08-30 ================== * package: revert ws to avoid upgrade fail now 0.7.5 / 2013-08-30 ================== * package: bump ws to 0.4.30 0.7.4 / 2013-08-25 ================== * package: rolling back to `ws` `0.4.25` due to disconnection bug 0.7.3 / 2013-08-23 ================== * noop bump 0.7.2 / 2013-08-23 ================== * transports: fix WebSocket transport in the web browser (again) 0.7.1 / 2013-08-23 ================== * transports: fix WebSocket transport in the web browser * package: upgrade \"ws\" to v0.4.29 0.7.0 / 2013-08-23 ================== * socket: add `agent` option * package: point \"xmlhttprequest\" to our LearnBoost fork for agent support * package: specify a newer version of \"ws\" that includes `agent` support * util: use \"component/has-cors\" * transport: fix whitespace * util: use \"component/global\" * package: Add repository field to readme * socket: Don't lose packets writen during upgrade after a re-open * socket: use a consistent \"debug\" name for socket.js * package: Update emitter dep to 1.0.1 for old IE support 0.6.3 / 2013-06-21 ================== * fix check readyState in polling transport (Naoyuki Kanezawa) * use http url in npm dependencies for emitter (Eric Schoffstall) 0.6.2 / 2013-06-15 ================== * transports: improve polling orderly close (fixes #164) * socket: ignore further transport communication upon `onClose` * socket: added missing `socket#onerror` support * socket: don't call `socket#onclose` if previous state was not `open` * transports: fix iOS5 crash issue * Makefile: extra precaution when building to avoid 0.6.0 build problem 0.6.1 / 2013-06-06 ================== * engine.io: fixed build 0.6.0 / 2013-05-31 ================== * does not emit close on incorrect socket connection * use indexof component for ie8 and below * improved x-domain handling * introduce public `ping` api * added drain event * fix `flush` and `flushComplete` events * fixed `drain` bug splicing with upgrading * add support for callbacks with socket.send() 0.5.0 / 2013-03-16 ================== * socket: implement qs support for `string` * added query.EIO to take protocol version from parser * use istanbul for code coverage * integrated engine.io-protocol 0.3.0 * updated ws * fixed JSONPPolling iframe removal error * changed error message to match xhr error message on jsonp transport script tag * Added onerror handler for script tag in jsonp transport * remove uid qs * Added missing colon in payload. Thanks @lsm 0.4.3 / 2013-02-08 ================== * package: removed unusued `parser.js` 0.4.2 / 2013-02-08 ================== * polling-jsonp: fix ie6 JSONP on SSL * close also if socket.readyState is on \"opening\" * parser.js: removed the file package.json: added the engine.io-parser dependency everything else: switched to engine.io-parser * fix \"TypeError: Object # has no method 'global'\" * client now ignores unsupported upgrades 0.4.1 / 2013-01-18 ================== * do not shadow global XMLHttpRequest * socket: added `data` event (as synonym to `message`) * socket: remove `resource` and fix `path` * socket: fixed access to `opts` * test: fixed transports tests * socket: constructor can accept uri/opts simultaneously * SPEC: simplified: removed resource from SPEC * socket: proper `host`/`hostname` support * socket: ensure `onclose` idempotency * socket: added `onerror` instrumentation * socket: fix style * use window to detect platform and fix global reference * *: fix references to `global` (fixes #79) 0.4.0 / 2012-12-09 ================== * *: now based on `component(1)` * *: module now exports `Socket` * socket: export constructors, utils and `protocol` * *: implemented `emitter` component * *: removed browserbuild and preprocessor instructions 0.3.10 / 2012-12-03 =================== * socket: fix closing the socket in an `open` listener [mmastrac] * socket: perform ping interval/timer cleanup [mmastrac] * fix SPEC (packages -> packets) [jxck] * socket: handle probe's transport errors [indutny] 0.3.9 / 2012-10-23 ================== * socket: fix `hostname` instead of `host` * socket: avoid duplicate `port` defaults 0.3.8 / 2012-10-23 ================== * socket: introduce introspection hooks * socket: introduced `host` and `port` `location` defaults * flashsocket: obfuscate activex (fixes #31) * README: documented reconnect (closes #45) * socket: unset `id` upon close * socket: clear transport listeners upon force close 0.3.7 / 2012-10-21 ================== * fix `version` [quackingduck] * ping timeout gets reset upon any packet received [indutny] * timeout fixes [cadorn, indutny] * transport: fix xdomain detection in absence of location.port (GH-38) * socket: fix passing `false` as secure getting overridden * socket: default `secure` to `true` for SSL-served pages * socket: fix default port for SSL when `secure` is not supplied 0.3.6 / 2012-10-16 ================== * socket: reset timeout on any incoming data [indutny] 0.3.5 / 2012-10-14 ================== * new build 0.3.4 / 2012-10-14 ================== * package: fix `component` exports 0.3.3 / 2012-10-10 ================== * socket: fix `secure` default value discovery [quackingduck] 0.3.2 / 2012-10-08 ================== * Bump 0.3.1 / 2012-10-08 ================== * socket: added `write` alias for `send` * package: added `component` 0.3.0 / 2012-09-04 ================== * IE's XDomainRequest cannot do requests that go from HTTPS to HTTP or HTTP to HTTPS [mixu] * Switch to client-initiated ping, and set interval in handshake [cadorn] 0.2.2 / 2012-08-26 ================== * polling-jsonp: allow unneeded global leak (fixes #41) * polling-jsonp: allow for multiple eio's in the same page 0.2.1 / 2012-08-13 ================== * Bump 0.2.0 / 2012-08-06 ================== * polling: introduced `poll` and `pollComplete` (formerly `poll`) events 0.1.2 / 2012-08-02 ================== * Bump 0.1.1 / 2012-08-01 ================== * Added options for request timestamping * Made timestamp query param customizable * Added automatic timestamping for Android 0.1.0 / 2012-07-03 ================== * Initial release."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/README.md","tags":[],"body":"# Engine.IO client [![Build Status](https://secure.travis-ci.org/socketio/engine.io-client.svg)](http://travis-ci.org/socketio/engine.io-client) [![NPM version](https://badge.fury.io/js/engine.io-client.svg)](http://badge.fury.io/js/engine.io-client) This is the client for [Engine.IO](http://github.com/socketio/engine.io), the implementation of transport-based cross-browser/cross-device bi-directional communication layer for [Socket.IO](http://github.com/socketio/socket.io). ## How to use ### Standalone You can find an `engine.io.js` file in this repository, which is a standalone build you can use as follows: ```html ``` ### With browserify Engine.IO is a commonjs module, which means you can include it by using `require` on the browser and package using [browserify](http://browserify.org/): 1. install the client package ```bash $ npm install engine.io-client ``` 1. write your app code ```js var socket = require('engine.io-client')('ws://localhost'); socket.on('open', function(){ socket.on('message', function(data){}); socket.on('close', function(){}); }); ``` 1. build your app bundle ```bash $ browserify app.js > bundle.js ``` 1. include on your page ```html ``` ### Sending and receiving binary ```html ``` ### Node.JS Add `engine.io-client` to your `package.json` and then: ```js var socket = require('engine.io-client')('ws://localhost'); socket.on('open', function(){ socket.on('message', function(data){}); socket.on('close', function(){}); }); ``` ### Node.js with certificates ```js var opts = { key: fs.readFileSync('test/fixtures/client.key'), cert: fs.readFileSync('test/fixtures/client.crt'), ca: fs.readFileSync('test/fixtures/ca.crt') }; var socket = require('engine.io-client')('ws://localhost', opts); socket.on('open', function(){ socket.on('message', function(data){}); socket.on('close', function(){}); }); ``` ### Node.js with extraHeaders ```js var opts = { extraHeaders: { 'X-Custom-Header-For-My-Project': 'my-secret-access-token', 'Cookie': 'user_session=NI2JlCKF90aE0sJZD9ZzujtdsUqNYSBYxzlTsvdSUe35ZzdtVRGqYFr0kdGxbfc5gUOkR9RGp20GVKza; path=/; expires=Tue, 07-Apr-2015 18:18:08 GMT; secure; HttpOnly' } }; var socket = require('engine.io-client')('ws://localhost', opts); socket.on('open', function(){ socket.on('message', function(data){}); socket.on('close', function(){}); }); ``` ## Features - Lightweight - Runs on browser and node.js seamlessly - Transports are independent of `Engine` - Easy to debug - Easy to unit test - Runs inside HTML5 WebWorker - Can send and receive binary data - Receives as ArrayBuffer or Blob when in browser, and Buffer or ArrayBuffer in Node - When XHR2 or WebSockets are used, binary is emitted directly. Otherwise binary is encoded into base64 strings, and decoded when binary types are supported. - With browsers that don't support ArrayBuffer, an object { base64: true, data: dataAsBase64String } is emitted on the `message` event. ## API ### Socket The client class. Mixes in [Emitter](http://github.com/component/emitter). Exposed as `eio` in the browser standalone build. #### Properties - `protocol` _(Number)_: protocol revision number - `binaryType` _(String)_ : can be set to 'arraybuffer' or 'blob' in browsers, and `buffer` or `arraybuffer` in Node. Blob is only used in browser if it's supported. #### Events - `open` - Fired upon successful connection. - `message` - Fired when data is received from the server. - **Arguments** - `String` | `ArrayBuffer`: utf-8 encoded data or ArrayBuffer containing binary data - `close` - Fired upon disconnection. In compliance with the WebSocket API spec, this event may be fired even if the `open` event does not occur (i.e. due to connection error or `close()`). - `error` - Fired when an error occurs. - `flush` - Fired upon completing a buffer flush - `drain` - Fired after `drain` event of transport if writeBuffer is empty - `upgradeError` - Fired if an error occurs with a transport we're trying to upgrade to. - `upgrade` - Fired upon upgrade success, after the new transport is set - `ping` - Fired upon _flushing_ a ping packet (ie: actual packet write out) - `pong` - Fired upon receiving a pong packet. #### Methods - **constructor** - Initializes the client - **Parameters** - `String` uri - `Object`: optional, options object - **Options** - `agent` (`http.Agent`): `http.Agent` to use, defaults to `false` (NodeJS only) - `upgrade` (`Boolean`): defaults to true, whether the client should try to upgrade the transport from long-polling to something better. - `forceJSONP` (`Boolean`): forces JSONP for polling transport. - `jsonp` (`Boolean`): determines whether to use JSONP when necessary for polling. If disabled (by settings to false) an error will be emitted (saying \"No transports available\") if no other transports are available. If another transport is available for opening a connection (e.g. WebSocket) that transport will be used instead. - `forceBase64` (`Boolean`): forces base 64 encoding for polling transport even when XHR2 responseType is available and WebSocket even if the used standard supports binary. - `enablesXDR` (`Boolean`): enables XDomainRequest for IE8 to avoid loading bar flashing with click sound. default to `false` because XDomainRequest has a flaw of not sending cookie. - `timestampRequests` (`Boolean`): whether to add the timestamp with each transport request. Note: polling requests are always stamped unless this option is explicitly set to `false` (`false`) - `timestampParam` (`String`): timestamp parameter (`t`) - `policyPort` (`Number`): port the policy server listens on (`843`) - `path` (`String`): path to connect to, default is `/engine.io` - `transports` (`Array`): a list of transports to try (in order). Defaults to `['polling', 'websocket']`. `Engine` always attempts to connect directly with the first one, provided the feature detection test for it passes. - `rememberUpgrade` (`Boolean`): defaults to false. If true and if the previous websocket connection to the server succeeded, the connection attempt will bypass the normal upgrade process and will initially try websocket. A connection attempt following a transport error will use the normal upgrade process. It is recommended you turn this on only when using SSL/TLS connections, or if you know that your network does not block websockets. - `pfx` (`String`): Certificate, Private key and CA certificates to use for SSL. Can be used in Node.js client environment to manually specify certificate information. - `key` (`String`): Private key to use for SSL. Can be used in Node.js client environment to manually specify certificate information. - `passphrase` (`String`): A string of passphrase for the private key or pfx. Can be used in Node.js client environment to manually specify certificate information. - `cert` (`String`): Public x509 certificate to use. Can be used in Node.js client environment to manually specify certificate information. - `ca` (`String`|`Array`): An authority certificate or array of authority certificates to check the remote host against.. Can be used in Node.js client environment to manually specify certificate information. - `ciphers` (`String`): A string describing the ciphers to use or exclude. Consult the [cipher format list](http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT) for details on the format. Can be used in Node.js client environment to manually specify certificate information. - `rejectUnauthorized` (`Boolean`): If true, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails. Verification happens at the connection level, before the HTTP request is sent. Can be used in Node.js client environment to manually specify certificate information. - `perMessageDeflate` (`Object|Boolean`): parameters of the WebSocket permessage-deflate extension (see [ws module](https://github.com/einaros/ws) api docs). Set to `false` to disable. (`true`) - `threshold` (`Number`): data is compressed only if the byte size is above this value. This option is ignored on the browser. (`1024`) - `extraHeaders` (`Object`): Headers that will be passed for each request to the server (via xhr-polling and via websockets). These values then can be used during handshake or for special proxies. Can only be used in Node.js client environment. - `send` - Sends a message to the server - **Parameters** - `String` | `ArrayBuffer` | `ArrayBufferView` | `Blob`: data to send - `Object`: optional, options object - `Function`: optional, callback upon `drain` - **Options** - `compress` (`Boolean`): whether to compress sending data. This option is ignored and forced to be `true` on the browser. (`true`) - `close` - Disconnects the client. ### Transport The transport class. Private. _Inherits from EventEmitter_. #### Events - `poll`: emitted by polling transports upon starting a new request - `pollComplete`: emitted by polling transports upon completing a request - `drain`: emitted by polling transports upon a buffer drain ## Tests `engine.io-client` is used to test [engine](http://github.com/socketio/engine.io). Running the `engine.io` test suite ensures the client works and vice-versa. Browser tests are run using [zuul](https://github.com/defunctzombie/zuul). You can run the tests locally using the following command. ``` ./node_modules/.bin/zuul --local 8080 -- test/index.js ``` Additionally, `engine.io-client` has a standalone test suite you can run with `make test` which will run node.js and browser tests. You must have zuul setup with a saucelabs account. ## Support The support channels for `engine.io-client` are the same as `socket.io`: - irc.freenode.net **#socket.io** - [Google Groups](http://groups.google.com/group/socket_io) - [Website](http://socket.io) ## Development To contribute patches, run tests or benchmarks, make sure to clone the repository: ```bash git clone git://github.com/socketio/engine.io-client.git ``` Then: ```bash cd engine.io-client npm install ``` See the `Tests` section above for how to run tests before submitting any patches. ## License MIT - Copyright (c) 2014 Automattic, Inc."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/component-emitter/History.md","tags":[],"body":"1.1.2 / 2014-02-10 ================== * package: rename to \"component-emitter\" * package: update \"main\" and \"component\" fields * Add license to Readme (same format as the other components) * created .npmignore * travis stuff 1.1.1 / 2013-12-01 ================== * fix .once adding .on to the listener * docs: Emitter#off() * component: add `.repo` prop 1.1.0 / 2013-10-20 ================== * add `.addEventListener()` and `.removeEventListener()` aliases 1.0.1 / 2013-06-27 ================== * add support for legacy ie 1.0.0 / 2013-02-26 ================== * add `.off()` support for removing all listeners 0.0.6 / 2012-10-08 ================== * add `this._callbacks` initialization to prevent funky gotcha 0.0.5 / 2012-09-07 ================== * fix `Emitter.call(this)` usage 0.0.3 / 2012-07-11 ================== * add `.listeners()` * rename `.has()` to `.hasListeners()` 0.0.2 / 2012-06-28 ================== * fix `.off()` with `.once()`-registered callbacks"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/component-emitter/Readme.md","tags":[],"body":"# Emitter [![Build Status](https://travis-ci.org/component/emitter.png)](https://travis-ci.org/component/emitter) Event emitter component. ## Installation ``` $ component install component/emitter ``` ## API ### Emitter(obj) The `Emitter` may also be used as a mixin. For example a \"plain\" object may become an emitter, or you may extend an existing prototype. As an `Emitter` instance: ```js var Emitter = require('emitter'); var emitter = new Emitter; emitter.emit('something'); ``` As a mixin: ```js var Emitter = require('emitter'); var user = { name: 'tobi' }; Emitter(user); user.emit('im a user'); ``` As a prototype mixin: ```js var Emitter = require('emitter'); Emitter(User.prototype); ``` ### Emitter#on(event, fn) Register an `event` handler `fn`. ### Emitter#once(event, fn) Register a single-shot `event` handler `fn`, removed immediately after it is invoked the first time. ### Emitter#off(event, fn) * Pass `event` and `fn` to remove a listener. * Pass `event` to remove all listeners on that event. * Pass nothing to remove all listeners on all events. ### Emitter#emit(event, ...) Emit an `event` with variable option args. ### Emitter#listeners(event) Return an array of callbacks, or an empty array. ### Emitter#hasListeners(event) Check if this emitter has `event` handlers. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/component-inherit/History.md","tags":[],"body":"0.0.2 / 2012-09-03 ================== * fix typo in package.json"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/component-inherit/Readme.md","tags":[],"body":"# inherit Prototype inheritance utility. ## Installation ``` $ component install component/inherit ``` ## Example ```js var inherit = require('inherit'); function Human() {} function Woman() {} inherit(Woman, Human); ``` ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/History.md","tags":[],"body":"1.2.4 / 2015-12-04 ================== * fix `ArrayBuffer` encoding in base64 string 1.2.3 / 2015-11-28 ================== * fix encoding blob as base64 1.2.2 / 2015-09-09 ================== * fixes for iojs/node 1.2.1 / 2015-01-17 ================== * pass has-binary result to encodePacket [rase-] * Fix parse error [rase-] 1.2.0 / 2015-01-11 ================== * fix return type for decodePacket * README fixes * use travis matrix for better test runs * encode into binary only if needed * add test cases for base64 object encoding. * add encodeBase64Object to encoder for browser * avoid sending Blobs on PhantomJS (as on Android) * test that utf8 encoding is not on by default but can be switched on manually 1.1.0 / 2014-07-16 ================== * make utf8 encoding/decoding optional 1.0.8 / 2014-07-16 ================== * adjust protocol revision * handle invalid utf8 errors gracefully * fix memory leak on browser 1.0.7 / 2014-06-24 ================== * fix decodePayloadAsBinary memory leak [christophwitzko] * README improvements 1.0.6 / 2014-05-30 ================== * utf8 fixes when using binary encoding [nkzawa] 1.0.5 / 2014-05-06 ================== * fix range error 1.0.4 / 2014-04-13 ================== * fix `encodePayloadAsBinary` method encodes packets to base64 1.0.3 / 2014-04-10 ================== * Fix length calculation when encoding as binary [binlain] 1.0.2 / 2014-03-16 ================== * fix binary for android due to a bug in Blob XHR2 implementation [Rase-] 1.0.1 / 2014-03-06 ================== * implement `blob` module to simplify code * bump `arraybuffer.slice` * style fixes 1.0.0 / 2014-02-18 ================== * parser: added binary encoding [Rase-] * parser: switched to an async interface [Rase-] 0.3.0 / 2013-03-16 ================== * parser: if callback returns `false` ignore rest of payload * test: fixed all broken tests 0.2.1 / 2013-03-16 ================== * added protocol version to index.js [albertyfwu] 0.2.0 / 2013-02-26 ================== * Changed `decodePayload` to use a callback instead of returning an array [sweetieSong, albertyfwu] 0.1.1 / 2013-01-26 ================== * package.json fixes 0.1.0 / 2013-01-19 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/Readme.md","tags":[],"body":"# engine.io-parser [![Build Status](https://secure.travis-ci.org/socketio/engine.io-parser.svg)](http://travis-ci.org/socketio/engine.io-parser) [![NPM version](https://badge.fury.io/js/engine.io-parser.svg)](http://badge.fury.io/js/engine.io-parser) This is the JavaScript parser for the engine.io protocol encoding, shared by both [engine.io-client](https://github.com/socketio/engine.io-client) and [engine.io](https://github.com/socketio/engine.io). ## How to use ### Standalone The parser can encode/decode packets, payloads, and payloads as binary with the following methods: `encodePacket`, `decodePacket`, `encodePayload`, `decodePayload`, `encodePayloadAsBinary`, `decodePayloadAsBinary`. The browser-side parser also includes `encodePayloadAsArrayBuffer` and `encodePayloadAsBlob`. Example: ```js var parser = require('engine.io-parser'); var data = new Buffer(5); for (var i = 0; i bundle.js ``` 1. include on your page ```html ``` ## Features - Runs on browser and node.js seamlessly - Runs inside HTML5 WebWorker - Can encode and decode packets - Encodes from/to ArrayBuffer or Blob when in browser, and Buffer or ArrayBuffer in Node ## API Note: `cb(type)` means the type is a callback function that contains a parameter of type `type` when called. ### Node - `encodePacket` - Encodes a packet. - **Parameters** - `Object`: the packet to encode, has `type` and `data`. - `data`: can be a `String`, `Number`, `Buffer`, `ArrayBuffer` - `Boolean`: optional, binary support - `Function`: callback, returns the encoded packet (`cb(String)`) - `decodePacket` - Decodes a packet. Data also available as an ArrayBuffer if requested. - Returns data as `String` or (`Blob` on browser, `ArrayBuffer` on Node) - **Parameters** - `String` | `ArrayBuffer`: the packet to decode, has `type` and `data` - `String`: optional, the binary type - `encodeBase64Packet` - Encodes a packet with binary data in a base64 string (`String`) - **Parameters** - `Object`: the packet to encode, has `type` and `data` - `Function`: callback, returns the base64 encoded message (`cb(String)`) - `decodeBase64Packet` - Decodes a packet encoded in a base64 string. - **Parameters** - `String`: the base64 encoded message - `String`: optional, the binary type - `encodePayload` - Encodes multiple messages (payload). - If any contents are binary, they will be encoded as base64 strings. Base64 encoded strings are marked with a b before the length specifier - **Parameters** - `Array`: an array of packets - `Boolean`: optional, binary support - `Function`: callback, returns the encoded payload (`cb(String)`) - `decodePayload` - Decodes data when a payload is maybe expected. Possible binary contents are decoded from their base64 representation. - **Parameters** - `String`: the payload - `String`: optional, the binary type - `Function`: callback, returns (cb(`Object`: packet, `Number`:packet index, `Number`:packet total)) - `encodePayloadAsBinary` - Encodes multiple messages (payload) as binary. - **Parameters** - `Array`: an array of packets - `Function`: callback, returns the encoded payload (`cb(Buffer)`) - `decodePayloadAsBinary` - Decodes data when a payload is maybe expected. Strings are decoded by interpreting each byte as a key code for entries marked to start with 0. See description of encodePayloadAsBinary. - **Parameters** - `Buffer`: the buffer - `String`: optional, the binary type - `Function`: callback, returns the decoded packet (`cb(Object)`) ### Browser - `encodePayloadAsArrayBuffer` - Encodes multiple messages (payload) as binary. - **Parameters** - `Array`: an array of packets - `Function`: callback, returns the encoded payload (`cb(ArrayBuffer)`) - `encodePayloadAsBlob` - Encodes multiple messages (payload) as blob. - **Parameters** - `Array`: an array of packets - `Function`: callback, returns the encoded payload (`cb(Blob)`) ## Tests Standalone tests can be run with `make test` which will run both node.js and browser tests. Browser tests are run using [zuul](https://github.com/defunctzombie/zuul). (You must have zuul setup with a saucelabs account.) You can run the tests locally using the following command: ``` ./node_modules/.bin/zuul --local 8080 -- test/index.js ``` ## Support The support channels for `engine.io-parser` are the same as `socket.io`: - irc.freenode.net **#socket.io** - [Google Groups](http://groups.google.com/group/socket_io) - [Website](http://socket.io) ## Development To contribute patches, run tests or benchmarks, make sure to clone the repository: ```bash git clone git://github.com/LearnBoost/engine.io-parser.git ``` Then: ```bash cd engine.io-parser npm install ``` See the `Tests` section above for how to run tests before submitting any patches. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/after/README.md","tags":[],"body":"# After [![Build Status][1]][2] Invoke callback after n calls ## Status: production ready ## Example var after = require(\"after\") , next = after(3, logItWorks) next() next() next() // it works function logItWorks() { console.log(\"it works!\") } ## Example with error handling var after = require(\"after\") , next = after(3, logError) next() next(new Error(\"oops\")) // logs oops next() // does nothing function logError(err) { console.log(err) } ## After < 0.6.0 Older versions of after had iterators and flows in them. These have been replaced with seperate modules - [iterators][8] - [composite][9] ## Installation `npm install after` ## Tests `npm test` ## Blog post - [Flow control in node.js][3] ## Examples : - [Determining the end of asynchronous operations][4] - [In javascript what are best practices for executing multiple asynchronous functions][5] - [JavaScript performance long running tasks][6] - [Synchronous database queries with node.js][7] ## Contributors - Raynos ## MIT Licenced [1]: https://secure.travis-ci.org/Raynos/after.png [2]: http://travis-ci.org/Raynos/after [3]: http://raynos.org/blog/2/Flow-control-in-node.js [4]: http://stackoverflow.com/questions/6852059/determining-the-end-of-asynchronous-operations-javascript/6852307#6852307 [5]: http://stackoverflow.com/questions/6869872/in-javascript-what-are-best-practices-for-executing-multiple-asynchronous-functi/6870031#6870031 [6]: http://stackoverflow.com/questions/6864397/javascript-performance-long-running-tasks/6889419#6889419 [7]: http://stackoverflow.com/questions/6597493/synchronous-database-queries-with-node-js/6620091#6620091 [8]: http://github.com/Raynos/iterators [9]: http://github.com/Raynos/composite"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/arraybuffer.slice/README.md","tags":[],"body":"# How to ```javascript var sliceBuffer = require('arraybuffer.slice'); var ab = (new Int8Array(5)).buffer; var sliced = sliceBuffer(ab, 1, 3); sliced = sliceBuffer(ab, 1); ``` # Licence (MIT) Copyright (C) 2013 Rase- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/base64-arraybuffer/README.md","tags":[],"body":"# base64-arraybuffer [![Build Status](https://travis-ci.org/niklasvh/base64-arraybuffer.png)](https://travis-ci.org/niklasvh/base64-arraybuffer) Encode/decode base64 data into ArrayBuffers ## Getting Started Install the module with: `npm install base64-arraybuffer` ## API The library encodes and decodes base64 to and from ArrayBuffers - __encode(buffer)__ - Encodes `ArrayBuffer` into base64 string - __decode(str)__ - Decodes base64 string to `ArrayBuffer` ## Release History - 0.1.2 - Fix old format of typed arrays - 0.1.0 - Initial version, basic decode/encode base64 to and from ArrayBuffer ## License Copyright (c) 2012 Niklas von Hertzen Licensed under the MIT license."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/blob/README.md","tags":[],"body":"Blob ==== A module that exports a constructor that uses window.Blob when available, and a BlobBuilder with any vendor prefix in other cases. If neither is available, it exports undefined. Usage: ```javascript var Blob = require('blob'); var b = new Blob(['hi', 'constructing', 'a', 'blob']); ``` ## Licence MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/has-binary/History.md","tags":[],"body":"0.1.6 / 2015-01-24 ================== * fix \"undefined function\" bug when iterating an object created with Object.create(null) [gunta] 0.1.5 / 2014-09-04 ================== * prevent browserify from bundling `Buffer`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/has-binary/README.md","tags":[],"body":"has-binarydata.js ================= Simple module to test if an object contains binary data"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/has-binary/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/utf8/README.md","tags":[],"body":"# utf8.js [![Build status](https://travis-ci.org/mathiasbynens/utf8.js.svg?branch=master)](https://travis-ci.org/mathiasbynens/utf8.js) [![Code coverage status](http://img.shields.io/coveralls/mathiasbynens/utf8.js/master.svg)](https://coveralls.io/r/mathiasbynens/utf8.js) [![Dependency status](https://gemnasium.com/mathiasbynens/utf8.js.svg)](https://gemnasium.com/mathiasbynens/utf8.js) _utf8.js_ is a well-tested UTF-8 encoder/decoder written in JavaScript. Unlike many other JavaScript solutions, it is designed to be a _proper_ UTF-8 encoder/decoder: it can encode/decode any scalar Unicode code point values, as per [the Encoding Standard](https://encoding.spec.whatwg.org/#utf-8). [Here’s an online demo.](https://mothereff.in/utf-8) Feel free to fork if you see possible improvements! ## Installation Via [npm](https://www.npmjs.org/): ```bash npm install utf8 ``` Via [Bower](http://bower.io/): ```bash bower install utf8 ``` Via [Component](https://github.com/component/component): ```bash component install mathiasbynens/utf8.js ``` In a browser: ```html ``` In [Narwhal](http://narwhaljs.org/), [Node.js](https://nodejs.org/), and [RingoJS ≥ v0.8.0](http://ringojs.org/): ```js var utf8 = require('utf8'); ``` In [Rhino](http://www.mozilla.org/rhino/): ```js load('utf8.js'); ``` Using an AMD loader like [RequireJS](http://requirejs.org/): ```js require( { 'paths': { 'utf8': 'path/to/utf8' } }, ['utf8'], function(utf8) { console.log(utf8); } ); ``` ## API ### `utf8.encode(string)` Encodes any given JavaScript string (`string`) as UTF-8, and returns the UTF-8-encoded version of the string. It throws an error if the input string contains a non-scalar value, i.e. a lone surrogate. (If you need to be able to encode non-scalar values as well, use [WTF-8](https://mths.be/wtf8) instead.) ```js // U+00A9 COPYRIGHT SIGN; see http://codepoints.net/U+00A9 utf8.encode('\\xA9'); // → '\\xC2\\xA9' // U+10001 LINEAR B SYLLABLE B038 E; see http://codepoints.net/U+10001 utf8.encode('\\uD800\\uDC01'); // → '\\xF0\\x90\\x80\\x81' ``` ### `utf8.decode(byteString)` Decodes any given UTF-8-encoded string (`byteString`) as UTF-8, and returns the UTF-8-decoded version of the string. It throws an error when malformed UTF-8 is detected. (If you need to be able to decode encoded non-scalar values as well, use [WTF-8](https://mths.be/wtf8) instead.) ```js utf8.decode('\\xC2\\xA9'); // → '\\xA9' utf8.decode('\\xF0\\x90\\x80\\x81'); // → '\\uD800\\uDC01' // → U+10001 LINEAR B SYLLABLE B038 E ``` ### `utf8.version` A string representing the semantic version number. ## Support utf8.js has been tested in at least Chrome 27-39, Firefox 3-34, Safari 4-8, Opera 10-28, IE 6-11, Node.js v0.10.0, Narwhal 0.3.2, RingoJS 0.8-0.11, PhantomJS 1.9.0, and Rhino 1.7RC4. ## Unit tests & code coverage After cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`. Once that’s done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, PhantomJS, and web browsers as well, use `grunt test`. To generate the code coverage report, use `grunt cover`. ## FAQ ### Why is the first release named v2.0.0? Haven’t you heard of [semantic versioning](http://semver.org/)? Long before utf8.js was created, the `utf8` module on npm was registered and used by another (slightly buggy) library. @ryanmcgrath was kind enough to give me access to the `utf8` package on npm when I told him about utf8.js. Since there has already been a v1.0.0 release of the old library, and to avoid breaking backwards compatibility with projects that rely on the `utf8` npm package, I decided the tag the first release of utf8.js as v2.0.0 and take it from there. ## Author | [![twitter/mathias](https://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias \"Follow @mathias on Twitter\") | |---| | [Mathias Bynens](https://mathiasbynens.be/) | ## License utf8.js is available under the [MIT](https://mths.be/mit) license."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/utf8/tests/index.html","tags":[],"body":"utf8.js test suite"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/has-cors/History.md","tags":[],"body":"1.1.0 / 2014-11-12 ================== * remove \"global\" module dependency (#2, @achingbrain) 1.0.2 / 2013-08-27 ================== * explicitly use `global` instead of being implicit * pin \"component/global\" to v2.0.1 1.0.1 / 2013-08-23 ================== * package: add \"component\" section 1.0.0 / 2013-08-22 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/has-cors/Readme.md","tags":[],"body":"# has-cors Detects support for Cross-Origin Resource Sharing ## Installation Install with [component(1)](http://component.io): $ component install component/has-cors ## API Exports `true` if the user-agent supports CORS, or `false` otherwise. ``` js var hasCORS = require('has-cors'); console.log(hasCORS); // true ``` ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/node_modules/better-assert/History.md","tags":[],"body":"1.0.0 / 2013-02-03 ================== * Stop using the removed magic __stack global getter 0.1.0 / 2012-10-04 ================== * add throwing of AssertionError for test frameworks etc 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/node_modules/better-assert/Readme.md","tags":[],"body":"# better-assert Better c-style assertions using [callsite](https://github.com/visionmedia/callsite) for self-documenting failure messages. ## Installation $ npm install better-assert ## Example By default assertions are enabled, however the __NO_ASSERT__ environment variable will deactivate them when truthy. ```js var assert = require('better-assert'); test(); function test() { var user = { name: 'tobi' }; assert('tobi' == user.name); assert('number' == typeof user.age); } AssertionError: 'number' == typeof user.age at test (/Users/tj/projects/better-assert/example.js:9:3) at Object. (/Users/tj/projects/better-assert/example.js:4:1) at Module._compile (module.js:449:26) at Object.Module._extensions..js (module.js:467:10) at Module.load (module.js:356:32) at Function.Module._load (module.js:312:12) at Module.runMain (module.js:492:10) at process.startup.processNextTick.process._tickCallback (node.js:244:9) ``` ## License (The MIT License) Copyright (c) 2012 TJ Holowaychuk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/node_modules/better-assert/node_modules/callsite/History.md","tags":[],"body":"1.0.0 / 2013-01-24 ================== * remove lame magical getters 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parsejson/node_modules/better-assert/node_modules/callsite/Readme.md","tags":[],"body":"# callstack Access to v8's \"raw\" `CallSite`s. ## Installation $ npm install callsite ## Example ```js var stack = require('callsite'); foo(); function foo() { bar(); } function bar() { baz(); } function baz() { console.log(); stack().forEach(function(site){ console.log(' \\033[36m%s\\033[90m in %s:%d\\033[0m' , site.getFunctionName() || 'anonymous' , site.getFileName() , site.getLineNumber()); }); console.log(); } ``` ## Why? Because you can do weird, stupid, clever, wacky things such as: - [better-assert](https://github.com/visionmedia/better-assert) ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/node_modules/better-assert/History.md","tags":[],"body":"1.0.0 / 2013-02-03 ================== * Stop using the removed magic __stack global getter 0.1.0 / 2012-10-04 ================== * add throwing of AssertionError for test frameworks etc 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/node_modules/better-assert/Readme.md","tags":[],"body":"# better-assert Better c-style assertions using [callsite](https://github.com/visionmedia/callsite) for self-documenting failure messages. ## Installation $ npm install better-assert ## Example By default assertions are enabled, however the __NO_ASSERT__ environment variable will deactivate them when truthy. ```js var assert = require('better-assert'); test(); function test() { var user = { name: 'tobi' }; assert('tobi' == user.name); assert('number' == typeof user.age); } AssertionError: 'number' == typeof user.age at test (/Users/tj/projects/better-assert/example.js:9:3) at Object. (/Users/tj/projects/better-assert/example.js:4:1) at Module._compile (module.js:449:26) at Object.Module._extensions..js (module.js:467:10) at Module.load (module.js:356:32) at Function.Module._load (module.js:312:12) at Module.runMain (module.js:492:10) at process.startup.processNextTick.process._tickCallback (node.js:244:9) ``` ## License (The MIT License) Copyright (c) 2012 TJ Holowaychuk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/node_modules/better-assert/node_modules/callsite/History.md","tags":[],"body":"1.0.0 / 2013-01-24 ================== * remove lame magical getters 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/parseqs/node_modules/better-assert/node_modules/callsite/Readme.md","tags":[],"body":"# callstack Access to v8's \"raw\" `CallSite`s. ## Installation $ npm install callsite ## Example ```js var stack = require('callsite'); foo(); function foo() { bar(); } function bar() { baz(); } function baz() { console.log(); stack().forEach(function(site){ console.log(' \\033[36m%s\\033[90m in %s:%d\\033[0m' , site.getFunctionName() || 'anonymous' , site.getFileName() , site.getLineNumber()); }); console.log(); } ``` ## Why? Because you can do weird, stupid, clever, wacky things such as: - [better-assert](https://github.com/visionmedia/better-assert) ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/README.md","tags":[],"body":"# ws: a node.js websocket library [![Build Status](https://travis-ci.org/websockets/ws.svg?branch=master)](https://travis-ci.org/websockets/ws) `ws` is a simple to use WebSocket implementation, up-to-date against RFC-6455, and [probably the fastest WebSocket library for node.js][archive]. Passes the quite extensive Autobahn test suite. See http://websockets.github.com/ws for the full reports. ## Protocol support * **Hixie draft 76** (Old and deprecated, but still in use by Safari and Opera. Added to ws version 0.4.2, but server only. Can be disabled by setting the `disableHixie` option to true.) * **HyBi drafts 07-12** (Use the option `protocolVersion: 8`) * **HyBi drafts 13-17** (Current default, alternatively option `protocolVersion: 13`) ### Installing ``` npm install --save ws ``` ### Opt-in for performance There are 2 optional modules that can be installed along side with the `ws` module. These modules are binary addons which improve certain operations, but as they are binary addons they require compilation which can fail if no c++ compiler is installed on the host system. - `npm install --save bufferutil`: Improves internal buffer operations which allows for faster processing of masked WebSocket frames and general buffer operations. - `npm install --save utf-8-validate`: The specification requires validation of invalid UTF-8 chars, some of these validations could not be done in JavaScript hence the need for a binary addon. In most cases you will already be validating the input that you receive for security purposes leading to double validation. But if you want to be 100% spec conform and fast validation of UTF-8 then this module is a must. ### Sending and receiving text data ```js var WebSocket = require('ws'); var ws = new WebSocket('ws://www.host.com/path'); ws.on('open', function open() { ws.send('something'); }); ws.on('message', function(data, flags) { // flags.binary will be set if a binary data is received. // flags.masked will be set if the data was masked. }); ``` ### Sending binary data ```js var WebSocket = require('ws'); var ws = new WebSocket('ws://www.host.com/path'); ws.on('open', function open() { var array = new Float32Array(5); for (var i = 0; i Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. [archive]: http://web.archive.org/web/20130314230536/http://hobbycoding.posterous.com/the-fastest-websocket-module-for-nodejs"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/options/README.md","tags":[],"body":"# options.js # A very light-weight in-code option parsers for node.js. ## Usage ## ``` js var Options = require(\"options\"); // Create an Options object function foo(options) { var default_options = { foo : \"bar\" }; // Create an option object with default value var opts = new Options(default_options); // Merge options opts = opts.merge(options); // Reset to default value opts.reset(); // Copy selected attributes out var seled_att = opts.copy(\"foo\"); // Read json options from a file. opts.read(\"options.file\"); // Sync opts.read(\"options.file\", function(err){ // Async if(err){ // If error occurs console.log(\"File error.\"); }else{ // No error } }); // Attributes defined or not opts.isDefinedAndNonNull(\"foobar\"); opts.isDefined(\"foobar\"); } ``` ## License ## (The MIT License) Copyright (c) 2012 Einar Otto Stangvik Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/ultron/README.md","tags":[],"body":"# Ultron [![Made by unshift](https://img.shields.io/badge/made%20by-unshift-00ffcc.svg?style=flat-square)](http://unshift.io)[![Version npm](http://img.shields.io/npm/v/ultron.svg?style=flat-square)](http://browsenpm.org/package/ultron)[![Build Status](http://img.shields.io/travis/unshiftio/ultron/master.svg?style=flat-square)](https://travis-ci.org/unshiftio/ultron)[![Dependencies](https://img.shields.io/david/unshiftio/ultron.svg?style=flat-square)](https://david-dm.org/unshiftio/ultron)[![Coverage Status](http://img.shields.io/coveralls/unshiftio/ultron/master.svg?style=flat-square)](https://coveralls.io/r/unshiftio/ultron?branch=master)[![IRC channel](http://img.shields.io/badge/IRC-irc.freenode.net%23unshift-00a8ff.svg?style=flat-square)](http://webchat.freenode.net/?channels=unshift) Ultron is a high-intelligence robot. It gathers intelligence so it can start improving upon his rudimentary design. It will learn your event emitting patterns and find ways to exterminate them. Allowing you to remove only the event emitters that **you** assigned and not the ones that your users or developers assigned. This can prevent race conditions, memory leaks and even file descriptor leaks from ever happening as you won't remove clean up processes. ## Installation The module is designed to be used in browsers using browserify and in Node.js. You can install the module through the public npm registry by running the following command in CLI: ``` npm install --save ultron ``` ## Usage In all examples we assume that you've required the library as following: ```js 'use strict'; var Ultron = require('ultron'); ``` Now that we've required the library we can construct our first `Ultron` instance. The constructor requires one argument which should be the `EventEmitter` instance that we need to operate upon. This can be the `EventEmitter` module that ships with Node.js or `EventEmitter3` or anything else as long as it follow the same API and internal structure as these 2. So with that in mind we can create the instance: ```js // // For the sake of this example we're going to construct an empty EventEmitter // var EventEmitter = require('events').EventEmitter; // or require('eventmitter3'); var events = new EventEmitter(); var ultron = new Ultron(events); ``` You can now use the following API's from the Ultron instance: ### Ultron.on Register a new event listener for the given event. It follows the exact same API as `EventEmitter.on` but it will return itself instead of returning the EventEmitter instance. If you are using EventEmitter3 it also supports the context param: ```js ultron.on('event-name', handler, { custom: 'function context' }); ``` ### Ultron.once Exactly the same as the [Ultron.on](#ultronon) but it only allows the execution once. ### Ultron.remove This is where all the magic happens and the safe removal starts. This function accepts different argument styles: - No arguments, assume that all events need to be removed so it will work as `removeAllListeners()` API. - 1 argument, when it's a string it will be split on ` ` and `,` to create a list of events that need to be cleared. - Multiple arguments, we assume that they are all names of events that need to be cleared. ```js ultron.remove('foo, bar baz'); // Removes foo, bar and baz. ultron.remove('foo', 'bar', 'baz'); // Removes foo, bar and baz. ultron.remove(); // Removes everything. ``` If you just want to remove a single event listener using a function reference you can still use the EventEmitter's `removeListener(event, fn)` API: ```js function foo() {} ulton.on('foo', foo); events.removeListener('foo', foo); ``` ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/xmlhttprequest-ssl/README.md","tags":[],"body":"# node-XMLHttpRequest # Fork of [node-XMLHttpRequest](https://github.com/driverdan/node-XMLHttpRequest) by [driverdan](http://driverdan.com). Forked and published to npm because a [pull request](https://github.com/rase-/node-XMLHttpRequest/commit/a6b6f296e0a8278165c2d0270d9840b54d5eeadd) is not being created and merged. Changes made by [rase-](https://github.com/rase-/node-XMLHttpRequest/tree/add/ssl-support) are needed for [engine.io-client](https://github.com/Automattic/engine.io-client). # Original README # node-XMLHttpRequest is a wrapper for the built-in http client to emulate the browser XMLHttpRequest object. This can be used with JS designed for browsers to improve reuse of code and allow the use of existing libraries. Note: This library currently conforms to [XMLHttpRequest 1](http://www.w3.org/TR/XMLHttpRequest/). Version 2.0 will target [XMLHttpRequest Level 2](http://www.w3.org/TR/XMLHttpRequest2/). ## Usage ## Here's how to include the module in your project and use as the browser-based XHR object. var XMLHttpRequest = require(\"xmlhttprequest\").XMLHttpRequest; var xhr = new XMLHttpRequest(); Note: use the lowercase string \"xmlhttprequest\" in your require(). On case-sensitive systems (eg Linux) using uppercase letters won't work. ## Versions ## Prior to 1.4.0 version numbers were arbitrary. From 1.4.0 on they conform to the standard major.minor.bugfix. 1.x shouldn't necessarily be considered stable just because it's above 0.x. Since the XMLHttpRequest API is stable this library's API is stable as well. Major version numbers indicate significant core code changes. Minor versions indicate minor core code changes or better conformity to the W3C spec. ## License ## MIT license. See LICENSE for full details. ## Supports ## * Async and synchronous requests * GET, POST, PUT, and DELETE requests * All spec methods (open, send, abort, getRequestHeader, getAllRequestHeaders, event methods) * Requests to all domains ## Known Issues / Missing Features ## For a list of open issues or to report your own visit the [github issues page](https://github.com/driverdan/node-XMLHttpRequest/issues). * Local file access may have unexpected results for non-UTF8 files * Synchronous requests don't set headers properly * Synchronous requests freeze node while waiting for response (But that's what you want, right? Stick with async!). * Some events are missing, such as abort * getRequestHeader is case-sensitive * Cookies aren't persisted between requests * Missing XML support * Missing basic auth"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/yeast/README.md","tags":[],"body":"# yeast [![Made by unshift](https://img.shields.io/badge/made%20by-unshift-00ffcc.svg?style=flat-square)](http://unshift.io)[![Version npm](https://img.shields.io/npm/v/yeast.svg?style=flat-square)](http://browsenpm.org/package/yeast)[![Build Status](https://img.shields.io/travis/unshiftio/yeast/master.svg?style=flat-square)](https://travis-ci.org/unshiftio/yeast)[![Dependencies](https://img.shields.io/david/unshiftio/yeast.svg?style=flat-square)](https://david-dm.org/unshiftio/yeast)[![Coverage Status](https://img.shields.io/coveralls/unshiftio/yeast/master.svg?style=flat-square)](https://coveralls.io/r/unshiftio/yeast?branch=master)[![IRC channel](https://img.shields.io/badge/IRC-irc.freenode.net%23unshift-00a8ff.svg?style=flat-square)](https://webchat.freenode.net/?channels=unshift) [![Sauce Test Status](https://saucelabs.com/browser-matrix/yeast.svg)](https://saucelabs.com/u/yeast) Yeast is a unique id generator. It has been primarily designed to generate a unique id which can be used for cache busting. A common practice for this is to use a timestamp, but there are couple of downsides when using timestamps. 1. The timestamp is already 13 chars long. This might not matter for 1 request but if you make hundreds of them this quickly adds up in bandwidth and processing time. 2. It's not unique enough. If you generate two stamps right after each other, they would be identical because the timing accuracy is limited to milliseconds. Yeast solves both of these issues by: 1. Compressing the generated timestamp using a custom `encode()` function that returns a string representation of the number. 2. Seeding the id in case of collision (when the id is identical to the previous one). To keep the strings unique it will use the `.` char to separate the generated stamp from the seed. ## Installation The module is intended to be used in browsers as well as in Node.js and is therefore released in the npm registry and can be installed using: ``` npm install --save yeast ``` ## Usage All the examples assume that this library is initialized as follow: ```js 'use strict'; var yeast = require('yeast'); ``` To generate an id just call the `yeast` function. ```js console.log(yeast(), yeast(), yeast()); // outputs: KyxidwN KyxidwN.0 KyxidwN.1 setTimeout(function () { console.log(yeast()); // outputs: KyxidwO }); ``` ### yeast.encode(num) An helper function that returns a string representing the specified number. The returned string contains only URL safe characters. ```js yeast.encode(+new Date()); // outputs: Kyxjuo1 ``` ### yeast.decode(str) An helper function that returns the integer value specified by the given string. This function can be used to retrieve the timestamp from a `yeast` id. ```js var id = yeast(); // holds the value: Kyxl1OU yeast.decode(id); // outputs: 1439816226334 ``` That's all folks. If you have ideas on how we can further compress the ids please open an issue! ## License [MIT](LICENSE)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/indexof/Readme.md","tags":[],"body":"# indexOf Lame indexOf thing, thanks microsoft ## Example ```js var index = require('indexof'); index(arr, obj); ``` ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/object-component/History.md","tags":[],"body":"0.0.3 / 2012-10-15 ================== * package: added `component` namespace (fixes #1) 0.0.2 / 2012-09-20 ================== * add code smell to `.merge()`"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/object-component/Readme.md","tags":[],"body":"# object Object utils. ## API ### .keys(obj) Return the keys for `obj`. ### .values(obj) Return the values for `obj`. ### .length(obj) Return the number of keys for `obj`. ### .isEmpty(obj) Check if `obj` is empty. ### .merge(a, b) Merge object `b` into `a`, returns `a`. Precedence is given to `b`. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/History.md","tags":[],"body":"n.n.n / 2014-02-09 ================== * parseuri first commit"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/node_modules/better-assert/History.md","tags":[],"body":"1.0.0 / 2013-02-03 ================== * Stop using the removed magic __stack global getter 0.1.0 / 2012-10-04 ================== * add throwing of AssertionError for test frameworks etc 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/node_modules/better-assert/Readme.md","tags":[],"body":"# better-assert Better c-style assertions using [callsite](https://github.com/visionmedia/callsite) for self-documenting failure messages. ## Installation $ npm install better-assert ## Example By default assertions are enabled, however the __NO_ASSERT__ environment variable will deactivate them when truthy. ```js var assert = require('better-assert'); test(); function test() { var user = { name: 'tobi' }; assert('tobi' == user.name); assert('number' == typeof user.age); } AssertionError: 'number' == typeof user.age at test (/Users/tj/projects/better-assert/example.js:9:3) at Object. (/Users/tj/projects/better-assert/example.js:4:1) at Module._compile (module.js:449:26) at Object.Module._extensions..js (module.js:467:10) at Module.load (module.js:356:32) at Function.Module._load (module.js:312:12) at Module.runMain (module.js:492:10) at process.startup.processNextTick.process._tickCallback (node.js:244:9) ``` ## License (The MIT License) Copyright (c) 2012 TJ Holowaychuk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/node_modules/better-assert/node_modules/callsite/History.md","tags":[],"body":"1.0.0 / 2013-01-24 ================== * remove lame magical getters 0.0.1 / 2010-01-03 ================== * Initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/parseuri/node_modules/better-assert/node_modules/callsite/Readme.md","tags":[],"body":"# callstack Access to v8's \"raw\" `CallSite`s. ## Installation $ npm install callsite ## Example ```js var stack = require('callsite'); foo(); function foo() { bar(); } function bar() { baz(); } function baz() { console.log(); stack().forEach(function(site){ console.log(' \\033[36m%s\\033[90m in %s:%d\\033[0m' , site.getFunctionName() || 'anonymous' , site.getFileName() , site.getLineNumber()); }); console.log(); } ``` ## Why? Because you can do weird, stupid, clever, wacky things such as: - [better-assert](https://github.com/visionmedia/better-assert) ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/to-array/README.md","tags":[],"body":"# to-array Turn an array like into an array ## Example ``` js var toArray = require(\"to-array\") , elems = document.links var array = toArray(elems) ``` ## Installation `npm install to-array` ## Contributors - Raynos ## MIT Licenced"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-parser/History.md","tags":[],"body":"2.2.6 / 2015-11-25 ================== * fix the order of exported events [chylli] 2.2.5 / 2015-11-21 ================== * package: bump debug * update JSON3 to 3.3.2 2.2.4 / 2015-03-03 ================== * index: fix off-by-one bound checks 2.2.3 / 2015-02-03 ================== * index: fix potential infinite loop with malicious binary packet 2.2.2 / 2014-09-04 ================== * prevent direct `Buffer` reference that breaks browserify * binary: reuse `isBuf` helper 2.2.1 / 2014-06-20 ================== * added benchmarking [kevin-roark] * upgrade component-emitter to 1.1.2 [kevin-roark] * update protocol version [kevin-roark] * less indentation and a small optimization [kevin-roark] 2.2.0 / 2014-05-30 ================== * added a BINARY_ACK type [kevin-roark] 2.1.5 / 2014-05-24 ================== * don't iterate keys of `Date` objects [Rase-] 2.1.4 / 2014-05-17 ================== * fix null reconstruction bug [kevin-roark] 2.1.3 / 2014-04-27 ================== * bump zuul version * updated protocol version 2.1.2 / 2014-03-06 ================== * added support for binary in ACK packets 2.1.1 / 2014-03-04 ================== * removed has-binary-data dependency * fixed the object check in binary.removeBlobs 2.1.0 / 2014-03-01 ================== * faster and smaller binary parser and protocol [kevin-roark] 2.0.0 / 2014-02-19 ================== * binary support [kevin-roark] 1.1.2 / 2014-02-11 ================== * package: bump `json3` to fix IE6-7 1.1.1 / 2014-02-10 ================== * package: bump debug to fix browserify issues 1.1.0 / 2013-12-25 ================== * index: use `json3` 1.0.3 / 2012-12-18 ================== * index: added instrumentation through `debug` * index: make sure decoded `id` is a `Number` 1.0.2 / 2012-12-18 ================== * index: allow for falsy values in `id` and `data` 1.0.1 / 2012-12-10 ================== * Revision 1"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-parser/Readme.md","tags":[],"body":"# socket.io-parser [![Build Status](https://secure.travis-ci.org/socketio/socket.io-parser.svg)](http://travis-ci.org/socketio/socket.io-parser) [![NPM version](https://badge.fury.io/js/socket.io-parser.svg)](http://badge.fury.io/js/socket.io-parser) A socket.io encoder and decoder written in JavaScript complying with version `3` of [socket.io-protocol](https://github.com/socketio/socket.io-protocol). Used by [socket.io](https://github.com/automattic/socket.io) and [socket.io-client](https://github.com/automattic/socket.io-client). ## Parser API socket.io-parser is the reference implementation of socket.io-protocol. Read the full API here: [socket.io-protocol](https://github.com/learnboost/socket.io-protocol). ## Example Usage ### Encoding and decoding a packet ```js var parser = require('socket.io-parser'); var encoder = new parser.Encoder(); var packet = { type: parser.EVENT, data: 'test-packet', id: 13 }; encoder.encode(packet, function(encodedPackets) { var decoder = new parser.Decoder(); decoder.on('decoded', function(decodedPacket) { // decodedPacket.type == parser.EVENT // decodedPacket.data == 'test-packet' // decodedPacket.id == 13 }); for (var i = 0; i < encodedPackets.length; i++) { decoder.add(encodedPackets[i]); } }); ``` ### Encoding and decoding a packet with binary data ```js var parser = require('socket.io-parser'); var encoder = new parser.Encoder(); var packet = { type: parser.BINARY_EVENT, data: {i: new Buffer(1234), j: new Blob([new ArrayBuffer(2)])} id: 15 }; encoder.encode(packet, function(encodedPackets) { var decoder = new parser.Decoder(); decoder.on('decoded', function(decodedPacket) { // decodedPacket.type == parser.BINARY_EVENTEVENT // Buffer.isBuffer(decodedPacket.data.i) == true // Buffer.isBuffer(decodedPacket.data.j) == true // decodedPacket.id == 15 }); for (var i = 0; i < encodedPackets.length; i++) { decoder.add(encodedPackets[i]); } }); ``` See the test suite for more examples of how socket.io-parser is used. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-parser/node_modules/benchmark/README.md","tags":[],"body":"# Benchmark.js v1.0.0 A [robust](http://calendar.perfplanet.com/2010/bulletproof-javascript-benchmarks/ \"Bulletproof JavaScript benchmarks\") benchmarking library that works on nearly all JavaScript platforms1, supports high-resolution timers, and returns statistically significant results. As seen on [jsPerf](http://jsperf.com/). ## BestieJS Benchmark.js is part of the BestieJS *\"Best in Class\"* module collection. This means we promote solid browser/environment support, ES5 precedents, unit testing, and plenty of documentation. ## Documentation The documentation for Benchmark.js can be viewed here: For a list of upcoming features, check out our [roadmap](https://github.com/bestiejs/benchmark.js/wiki/Roadmap). ## Support Benchmark.js has been tested in at least Adobe AIR 3.1, Chrome 5-21, Firefox 1.5-13, IE 6-9, Opera 9.25-12.01, Safari 3-6, Node.js 0.8.6, Narwhal 0.3.2, RingoJS 0.8, and Rhino 1.7RC5. ## Installation and usage In a browser or Adobe AIR: ~~~ html ~~~ Optionally, expose Java’s nanosecond timer by adding the `nano` applet to the ``: ~~~ html ~~~ Or enable Chrome’s microsecond timer by using the [command line switch](http://peter.sh/experiments/chromium-command-line-switches/#enable-benchmarking): --enable-benchmarking Via [npm](http://npmjs.org/): ~~~ bash npm install benchmark ~~~ In [Node.js](http://nodejs.org/) and [RingoJS v0.8.0+](http://ringojs.org/): ~~~ js var Benchmark = require('benchmark'); ~~~ Optionally, use the [microtime module](https://github.com/wadey/node-microtime) by Wade Simmons: ~~~ bash npm install microtime ~~~ In [RingoJS v0.7.0-](http://ringojs.org/): ~~~ js var Benchmark = require('benchmark').Benchmark; ~~~ In [Rhino](http://www.mozilla.org/rhino/): ~~~ js load('benchmark.js'); ~~~ In an AMD loader like [RequireJS](http://requirejs.org/): ~~~ js require({ 'paths': { 'benchmark': 'path/to/benchmark' } }, ['benchmark'], function(Benchmark) { console.log(Benchmark.version); }); // or with platform.js // https://github.com/bestiejs/platform.js require({ 'paths': { 'benchmark': 'path/to/benchmark', 'platform': 'path/to/platform' } }, ['benchmark', 'platform'], function(Benchmark, platform) { Benchmark.platform = platform; console.log(Benchmark.platform.name); }); ~~~ Usage example: ~~~ js var suite = new Benchmark.Suite; // add tests suite.add('RegExp#test', function() { /o/.test('Hello World!'); }) .add('String#indexOf', function() { 'Hello World!'.indexOf('o') > -1; }) // add listeners .on('cycle', function(event) { console.log(String(event.target)); }) .on('complete', function() { console.log('Fastest is ' + this.filter('fastest').pluck('name')); }) // run async .run({ 'async': true }); // logs: // > RegExp#test x 4,161,532 +-0.99% (59 cycles) // > String#indexOf x 6,139,623 +-1.00% (131 cycles) // > Fastest is String#indexOf ~~~ ## Authors * [Mathias Bynens](http://mathiasbynens.be/) [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias \"Follow @mathias on Twitter\") * [John-David Dalton](http://allyoucanleet.com/) [![twitter/jdalton](http://gravatar.com/avatar/299a3d891ff1920b69c364d061007043?s=70)](https://twitter.com/jdalton \"Follow @jdalton on Twitter\") ## Contributors * [Kit Cambridge](http://kitcambridge.github.com/) [![twitter/kitcambridge](http://gravatar.com/avatar/6662a1d02f351b5ef2f8b4d815804661?s=70)](https://twitter.com/kitcambridge \"Follow @kitcambridge on Twitter\")"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-parser/node_modules/benchmark/doc/README.md","tags":[],"body":"# Benchmark.js v1.0.0 ## `Benchmark` * [`Benchmark`](#benchmarkname-fn--options) * [`Benchmark.version`](#benchmarkversion) * [`Benchmark.deepClone`](#benchmarkdeepclonevalue) * [`Benchmark.each`](#benchmarkeachobject-callback-thisarg) * [`Benchmark.extend`](#benchmarkextenddestination--source) * [`Benchmark.filter`](#benchmarkfilterarray-callback-thisarg) * [`Benchmark.forEach`](#benchmarkforeacharray-callback-thisarg) * [`Benchmark.formatNumber`](#benchmarkformatnumbernumber) * [`Benchmark.forOwn`](#benchmarkforownobject-callback-thisarg) * [`Benchmark.hasKey`](#benchmarkhaskeyobject-key) * [`Benchmark.indexOf`](#benchmarkindexofarray-value--fromindex0) * [`Benchmark.interpolate`](#benchmarkinterpolatestring-object) * [`Benchmark.invoke`](#benchmarkinvokebenches-name--arg1-arg2-) * [`Benchmark.join`](#benchmarkjoinobject--separator1--separator2:) * [`Benchmark.map`](#benchmarkmaparray-callback-thisarg) * [`Benchmark.pluck`](#benchmarkpluckarray-property) * [`Benchmark.reduce`](#benchmarkreducearray-callback-accumulator) ## `Benchmark.prototype` * [`Benchmark.prototype.aborted`](#benchmarkprototypeaborted) * [`Benchmark.prototype.compiled`](#benchmarkprototypecompiled) * [`Benchmark.prototype.count`](#benchmarkprototypecount) * [`Benchmark.prototype.cycles`](#benchmarkprototypecycles) * [`Benchmark.prototype.fn`](#benchmarkprototypefn) * [`Benchmark.prototype.hz`](#benchmarkprototypehz) * [`Benchmark.prototype.running`](#benchmarkprototyperunning) * [`Benchmark.prototype.setup`](#benchmarkprototypesetup) * [`Benchmark.prototype.teardown`](#benchmarkprototypeteardown) * [`Benchmark.prototype.abort`](#benchmarkprototypeabort) * [`Benchmark.prototype.clone`](#benchmarkprototypecloneoptions) * [`Benchmark.prototype.compare`](#benchmarkprototypecompareother) * [`Benchmark.prototype.emit`](#benchmarkprototypeemittype) * [`Benchmark.prototype.listeners`](#benchmarkprototypelistenerstype) * [`Benchmark.prototype.off`](#benchmarkprototypeofftype-listener) * [`Benchmark.prototype.on`](#benchmarkprototypeontype-listener) * [`Benchmark.prototype.reset`](#benchmarkprototypereset) * [`Benchmark.prototype.run`](#benchmarkprototyperunoptions) * [`Benchmark.prototype.toString`](#benchmarkprototypetostring) ## `Benchmark.options` * [`Benchmark.options`](#benchmarkoptions) * [`Benchmark.options.async`](#benchmarkoptionsasync) * [`Benchmark.options.defer`](#benchmarkoptionsdefer) * [`Benchmark.options.delay`](#benchmarkoptionsdelay) * [`Benchmark.options.id`](#benchmarkoptionsid) * [`Benchmark.options.initCount`](#benchmarkoptionsinitcount) * [`Benchmark.options.maxTime`](#benchmarkoptionsmaxtime) * [`Benchmark.options.minSamples`](#benchmarkoptionsminsamples) * [`Benchmark.options.minTime`](#benchmarkoptionsmintime) * [`Benchmark.options.name`](#benchmarkoptionsname) * [`Benchmark.options.onAbort`](#benchmarkoptionsonabort) * [`Benchmark.options.onComplete`](#benchmarkoptionsoncomplete) * [`Benchmark.options.onCycle`](#benchmarkoptionsoncycle) * [`Benchmark.options.onError`](#benchmarkoptionsonerror) * [`Benchmark.options.onReset`](#benchmarkoptionsonreset) * [`Benchmark.options.onStart`](#benchmarkoptionsonstart) ## `Benchmark.platform` * [`Benchmark.platform`](#benchmarkplatform) * [`Benchmark.platform.description`](#benchmarkplatformdescription) * [`Benchmark.platform.layout`](#benchmarkplatformlayout) * [`Benchmark.platform.manufacturer`](#benchmarkplatformmanufacturer) * [`Benchmark.platform.name`](#benchmarkplatformname) * [`Benchmark.platform.os`](#benchmarkplatformos) * [`Benchmark.platform.prerelease`](#benchmarkplatformprerelease) * [`Benchmark.platform.product`](#benchmarkplatformproduct) * [`Benchmark.platform.version`](#benchmarkplatformversion) * [`Benchmark.platform.toString`](#benchmarkplatformtostring) ## `Benchmark.support` * [`Benchmark.support`](#benchmarksupport) * [`Benchmark.support.air`](#benchmarksupportair) * [`Benchmark.support.argumentsClass`](#benchmarksupportargumentsclass) * [`Benchmark.support.browser`](#benchmarksupportbrowser) * [`Benchmark.support.charByIndex`](#benchmarksupportcharbyindex) * [`Benchmark.support.charByOwnIndex`](#benchmarksupportcharbyownindex) * [`Benchmark.support.decompilation`](#benchmarksupportdecompilation) * [`Benchmark.support.descriptors`](#benchmarksupportdescriptors) * [`Benchmark.support.getAllKeys`](#benchmarksupportgetallkeys) * [`Benchmark.support.iteratesOwnLast`](#benchmarksupportiteratesownfirst) * [`Benchmark.support.java`](#benchmarksupportjava) * [`Benchmark.support.nodeClass`](#benchmarksupportnodeclass) * [`Benchmark.support.timeout`](#benchmarksupporttimeout) ## `Benchmark.prototype.error` * [`Benchmark.prototype.error`](#benchmarkprototypeerror) ## `Benchmark.prototype.stats` * [`Benchmark.prototype.stats`](#benchmarkprototypestats) * [`Benchmark.prototype.stats.deviation`](#benchmark-statsdeviation) * [`Benchmark.prototype.stats.mean`](#benchmark-statsmean) * [`Benchmark.prototype.stats.moe`](#benchmark-statsmoe) * [`Benchmark.prototype.stats.rme`](#benchmark-statsrme) * [`Benchmark.prototype.stats.sample`](#benchmark-statssample) * [`Benchmark.prototype.stats.sem`](#benchmark-statssem) * [`Benchmark.prototype.stats.variance`](#benchmark-statsvariance) ## `Benchmark.prototype.times` * [`Benchmark.prototype.times`](#benchmarkprototypetimes) * [`Benchmark.prototype.times.cycle`](#benchmark-timescycle) * [`Benchmark.prototype.times.elapsed`](#benchmark-timeselapsed) * [`Benchmark.prototype.times.period`](#benchmark-timesperiod) * [`Benchmark.prototype.times.timeStamp`](#benchmark-timestimestamp) ## `Benchmark.Deferred` * [`Benchmark.Deferred`](#benchmarkdeferredclone) ## `Benchmark.Deferred.prototype` * [`Benchmark.Deferred.prototype.benchmark`](#benchmarkdeferredprototypebenchmark) * [`Benchmark.Deferred.prototype.cycles`](#benchmarkdeferredprototypecycles) * [`Benchmark.Deferred.prototype.elapsed`](#benchmarkdeferredprototypeelapsed) * [`Benchmark.Deferred.prototype.resolve`](#benchmarkdeferredprototyperesolve) * [`Benchmark.Deferred.prototype.timeStamp`](#benchmarkdeferredprototypetimestamp) ## `Benchmark.Event` * [`Benchmark.Event`](#benchmarkeventtype) ## `Benchmark.Event.prototype` * [`Benchmark.Event.prototype.aborted`](#benchmarkeventprototypeaborted) * [`Benchmark.Event.prototype.cancelled`](#benchmarkeventprototypecancelled) * [`Benchmark.Event.prototype.result`](#benchmarkeventprototyperesult) * [`Benchmark.Event.prototype.timeStamp`](#benchmarkeventprototypetimestamp) * [`Benchmark.Event.prototype.type`](#benchmarkeventprototypetype) ## `Benchmark.Event.prototype.currentTarget` * [`Benchmark.Event.prototype.currentTarget`](#benchmarkeventprototypecurrenttarget) ## `Benchmark.Event.prototype.target` * [`Benchmark.Event.prototype.target`](#benchmarkeventprototypetarget) ## `Benchmark.Suite` * [`Benchmark.Suite`](#benchmarksuitename--options) ## `Benchmark.Suite.prototype` * [`Benchmark.Suite.prototype.aborted`](#benchmarksuiteprototypeaborted) * [`Benchmark.Suite.prototype.length`](#benchmarksuiteprototypelength) * [`Benchmark.Suite.prototype.running`](#benchmarksuiteprototyperunning) * [`Benchmark.Suite.prototype.abort`](#benchmarksuiteprototypeabort) * [`Benchmark.Suite.prototype.add`](#benchmarksuiteprototypeaddname-fn--options) * [`Benchmark.Suite.prototype.clone`](#benchmarksuiteprototypecloneoptions) * [`Benchmark.Suite.prototype.emit`](#benchmarkprototypeemittype) * [`Benchmark.Suite.prototype.filter`](#benchmarksuiteprototypefiltercallback) * [`Benchmark.Suite.prototype.forEach`](#benchmarksuiteprototypeforeachcallback) * [`Benchmark.Suite.prototype.indexOf`](#benchmarksuiteprototypeindexofvalue) * [`Benchmark.Suite.prototype.invoke`](#benchmarksuiteprototypeinvokename--arg1-arg2-) * [`Benchmark.Suite.prototype.join`](#benchmarksuiteprototypejoinseparator-) * [`Benchmark.Suite.prototype.listeners`](#benchmarkprototypelistenerstype) * [`Benchmark.Suite.prototype.map`](#benchmarksuiteprototypemapcallback) * [`Benchmark.Suite.prototype.off`](#benchmarkprototypeofftype-listener) * [`Benchmark.Suite.prototype.on`](#benchmarkprototypeontype-listener) * [`Benchmark.Suite.prototype.pluck`](#benchmarksuiteprototypepluckproperty) * [`Benchmark.Suite.prototype.pop`](#benchmarksuiteprototypepop) * [`Benchmark.Suite.prototype.push`](#benchmarksuiteprototypepush) * [`Benchmark.Suite.prototype.reduce`](#benchmarksuiteprototypereducecallback-accumulator) * [`Benchmark.Suite.prototype.reset`](#benchmarksuiteprototypereset) * [`Benchmark.Suite.prototype.reverse`](#benchmarksuiteprototypereverse) * [`Benchmark.Suite.prototype.run`](#benchmarksuiteprototyperunoptions) * [`Benchmark.Suite.prototype.shift`](#benchmarksuiteprototypeshift) * [`Benchmark.Suite.prototype.slice`](#benchmarksuiteprototypeslicestart-end) * [`Benchmark.Suite.prototype.sort`](#benchmarksuiteprototypesortcomparefnnull) * [`Benchmark.Suite.prototype.splice`](#benchmarksuiteprototypesplicestart-deletecount--val1-val2-) * [`Benchmark.Suite.prototype.unshift`](#benchmarksuiteprototypeunshift) ## `Benchmark.Suite.options` * [`Benchmark.Suite.options`](#benchmarksuiteoptions) * [`Benchmark.Suite.options.name`](#benchmarksuiteoptionsname) ## `Benchmark` ### `Benchmark(name, fn [, options={}])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L404 \"View in source\") [Ⓣ][1] The Benchmark constructor. #### Arguments 1. `name` *(String)*: A name to identify the benchmark. 2. `fn` *(Function|String)*: The test to benchmark. 3. `[options={}]` *(Object)*: Options object. #### Example ~~~ js // basic usage (the `new` operator is optional) var bench = new Benchmark(fn); // or using a name first var bench = new Benchmark('foo', fn); // or with options var bench = new Benchmark('foo', fn, { // displayed by Benchmark#toString if `name` is not available 'id': 'xyz', // called when the benchmark starts running 'onStart': onStart, // called after each run cycle 'onCycle': onCycle, // called when aborted 'onAbort': onAbort, // called when a test errors 'onError': onError, // called when reset 'onReset': onReset, // called when the benchmark completes running 'onComplete': onComplete, // compiled/called before the test loop 'setup': setup, // compiled/called after the test loop 'teardown': teardown }); // or name and options var bench = new Benchmark('foo', { // a flag to indicate the benchmark is deferred 'defer': true, // benchmark test function 'fn': function(deferred) { // call resolve() when the deferred test is finished deferred.resolve(); } }); // or options only var bench = new Benchmark({ // benchmark name 'name': 'foo', // benchmark test as a string 'fn': '[1,2,3,4].sort()' }); // a test's `this` binding is set to the benchmark instance var bench = new Benchmark('foo', function() { 'My name is '.concat(this.name); // My name is foo }); ~~~ * * * ### `Benchmark.version` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3267 \"View in source\") [Ⓣ][1] *(String)*: The semantic version number. * * * ### `Benchmark.deepClone(value)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1225 \"View in source\") [Ⓣ][1] A deep clone utility. #### Arguments 1. `value` *(Mixed)*: The value to clone. #### Returns *(Mixed)*: The cloned value. * * * ### `Benchmark.each(object, callback, thisArg)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1400 \"View in source\") [Ⓣ][1] An iteration utility for arrays and objects. Callbacks may terminate the loop by explicitly returning `false`. #### Arguments 1. `object` *(Array|Object)*: The object to iterate over. 2. `callback` *(Function)*: The function called per iteration. 3. `thisArg` *(Mixed)*: The `this` binding for the callback. #### Returns *(Array, Object)*: Returns the object iterated over. * * * ### `Benchmark.extend(destination [, source={}])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1446 \"View in source\") [Ⓣ][1] Copies enumerable properties from the source(s) object to the destination object. #### Arguments 1. `destination` *(Object)*: The destination object. 2. `[source={}]` *(Object)*: The source object. #### Returns *(Object)*: The destination object. * * * ### `Benchmark.filter(array, callback, thisArg)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1485 \"View in source\") [Ⓣ][1] A generic `Array#filter` like method. #### Arguments 1. `array` *(Array)*: The array to iterate over. 2. `callback` *(Function|String)*: The function/alias called per iteration. 3. `thisArg` *(Mixed)*: The `this` binding for the callback. #### Returns *(Array)*: A new array of values that passed callback filter. #### Example ~~~ js // get odd numbers Benchmark.filter([1, 2, 3, 4, 5], function(n) { return n % 2; }); // -> [1, 3, 5]; // get fastest benchmarks Benchmark.filter(benches, 'fastest'); // get slowest benchmarks Benchmark.filter(benches, 'slowest'); // get benchmarks that completed without erroring Benchmark.filter(benches, 'successful'); ~~~ * * * ### `Benchmark.forEach(array, callback, thisArg)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1518 \"View in source\") [Ⓣ][1] A generic `Array#forEach` like method. Callbacks may terminate the loop by explicitly returning `false`. #### Arguments 1. `array` *(Array)*: The array to iterate over. 2. `callback` *(Function)*: The function called per iteration. 3. `thisArg` *(Mixed)*: The `this` binding for the callback. #### Returns *(Array)*: Returns the array iterated over. * * * ### `Benchmark.formatNumber(number)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1557 \"View in source\") [Ⓣ][1] Converts a number to a more readable comma-separated string representation. #### Arguments 1. `number` *(Number)*: The number to convert. #### Returns *(String)*: The more readable string representation. * * * ### `Benchmark.forOwn(object, callback, thisArg)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1545 \"View in source\") [Ⓣ][1] Iterates over an object's own properties, executing the `callback` for each. Callbacks may terminate the loop by explicitly returning `false`. #### Arguments 1. `object` *(Object)*: The object to iterate over. 2. `callback` *(Function)*: The function executed per own property. 3. `thisArg` *(Mixed)*: The `this` binding for the callback. #### Returns *(Object)*: Returns the object iterated over. * * * ### `Benchmark.hasKey(object, key)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1572 \"View in source\") [Ⓣ][1] Checks if an object has the specified key as a direct property. #### Arguments 1. `object` *(Object)*: The object to check. 2. `key` *(String)*: The key to check for. #### Returns *(Boolean)*: Returns `true` if key is a direct property, else `false`. * * * ### `Benchmark.indexOf(array, value [, fromIndex=0])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1608 \"View in source\") [Ⓣ][1] A generic `Array#indexOf` like method. #### Arguments 1. `array` *(Array)*: The array to iterate over. 2. `value` *(Mixed)*: The value to search for. 3. `[fromIndex=0]` *(Number)*: The index to start searching from. #### Returns *(Number)*: The index of the matched value or `-1`. * * * ### `Benchmark.interpolate(string, object)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1630 \"View in source\") [Ⓣ][1] Modify a string by replacing named tokens with matching object property values. #### Arguments 1. `string` *(String)*: The string to modify. 2. `object` *(Object)*: The template object. #### Returns *(String)*: The modified string. * * * ### `Benchmark.invoke(benches, name [, arg1, arg2, ...])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1677 \"View in source\") [Ⓣ][1] Invokes a method on all items in an array. #### Arguments 1. `benches` *(Array)*: Array of benchmarks to iterate over. 2. `name` *(String|Object)*: The name of the method to invoke OR options object. 3. `[arg1, arg2, ...]` *(Mixed)*: Arguments to invoke the method with. #### Returns *(Array)*: A new array of values returned from each method invoked. #### Example ~~~ js // invoke `reset` on all benchmarks Benchmark.invoke(benches, 'reset'); // invoke `emit` with arguments Benchmark.invoke(benches, 'emit', 'complete', listener); // invoke `run(true)`, treat benchmarks as a queue, and register invoke callbacks Benchmark.invoke(benches, { // invoke the `run` method 'name': 'run', // pass a single argument 'args': true, // treat as queue, removing benchmarks from front of `benches` until empty 'queued': true, // called before any benchmarks have been invoked. 'onStart': onStart, // called between invoking benchmarks 'onCycle': onCycle, // called after all benchmarks have been invoked. 'onComplete': onComplete }); ~~~ * * * ### `Benchmark.join(object [, separator1=',', separator2=': '])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1831 \"View in source\") [Ⓣ][1] Creates a string of joined array values or object key-value pairs. #### Arguments 1. `object` *(Array|Object)*: The object to operate on. 2. `[separator1=',']` *(String)*: The separator used between key-value pairs. 3. `[separator2=': ']` *(String)*: The separator used between keys and values. #### Returns *(String)*: The joined result. * * * ### `Benchmark.map(array, callback, thisArg)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1853 \"View in source\") [Ⓣ][1] A generic `Array#map` like method. #### Arguments 1. `array` *(Array)*: The array to iterate over. 2. `callback` *(Function)*: The function called per iteration. 3. `thisArg` *(Mixed)*: The `this` binding for the callback. #### Returns *(Array)*: A new array of values returned by the callback. * * * ### `Benchmark.pluck(array, property)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1869 \"View in source\") [Ⓣ][1] Retrieves the value of a specified property from all items in an array. #### Arguments 1. `array` *(Array)*: The array to iterate over. 2. `property` *(String)*: The property to pluck. #### Returns *(Array)*: A new array of property values. * * * ### `Benchmark.reduce(array, callback, accumulator)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1885 \"View in source\") [Ⓣ][1] A generic `Array#reduce` like method. #### Arguments 1. `array` *(Array)*: The array to iterate over. 2. `callback` *(Function)*: The function called per iteration. 3. `accumulator` *(Mixed)*: Initial value of the accumulator. #### Returns *(Mixed)*: The accumulator. * * * ## `Benchmark.prototype` ### `Benchmark.prototype.aborted` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3377 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate if the benchmark is aborted. * * * ### `Benchmark.prototype.compiled` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3353 \"View in source\") [Ⓣ][1] *(Function, String)*: The compiled test function. * * * ### `Benchmark.prototype.count` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3329 \"View in source\") [Ⓣ][1] *(Number)*: The number of times a test was executed. * * * ### `Benchmark.prototype.cycles` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3337 \"View in source\") [Ⓣ][1] *(Number)*: The number of cycles performed while benchmarking. * * * ### `Benchmark.prototype.fn` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3369 \"View in source\") [Ⓣ][1] *(Function, String)*: The test to benchmark. * * * ### `Benchmark.prototype.hz` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3345 \"View in source\") [Ⓣ][1] *(Number)*: The number of executions per second. * * * ### `Benchmark.prototype.running` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3385 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate if the benchmark is running. * * * ### `Benchmark.prototype.setup` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3448 \"View in source\") [Ⓣ][1] *(Function, String)*: Compiled into the test and executed immediately **before** the test loop. #### Example ~~~ js // basic usage var bench = Benchmark({ 'setup': function() { var c = this.count, element = document.getElementById('container'); while (c--) { element.appendChild(document.createElement('div')); } }, 'fn': function() { element.removeChild(element.lastChild); } }); // compiles to something like: var c = this.count, element = document.getElementById('container'); while (c--) { element.appendChild(document.createElement('div')); } var start = new Date; while (count--) { element.removeChild(element.lastChild); } var end = new Date - start; // or using strings var bench = Benchmark({ 'setup': '\\ var a = 0;\\n\\ (function() {\\n\\ (function() {\\n\\ (function() {', 'fn': 'a += 1;', 'teardown': '\\ }())\\n\\ }())\\n\\ }())' }); // compiles to something like: var a = 0; (function() { (function() { (function() { var start = new Date; while (count--) { a += 1; } var end = new Date - start; }()) }()) }()) ~~~ * * * ### `Benchmark.prototype.teardown` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3456 \"View in source\") [Ⓣ][1] *(Function, String)*: Compiled into the test and executed immediately **after** the test loop. * * * ### `Benchmark.prototype.abort()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2218 \"View in source\") [Ⓣ][1] Aborts the benchmark without recording times. #### Returns *(Object)*: The benchmark instance. * * * ### `Benchmark.prototype.clone(options)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2257 \"View in source\") [Ⓣ][1] Creates a new benchmark using the same test and options. #### Arguments 1. `options` *(Object)*: Options object to overwrite cloned options. #### Returns *(Object)*: The new benchmark instance. #### Example ~~~ js var bizarro = bench.clone({ 'name': 'doppelganger' }); ~~~ * * * ### `Benchmark.prototype.compare(other)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2280 \"View in source\") [Ⓣ][1] Determines if a benchmark is faster than another. #### Arguments 1. `other` *(Object)*: The benchmark to compare. #### Returns *(Number)*: Returns `-1` if slower, `1` if faster, and `0` if indeterminate. * * * ### `Benchmark.Suite.prototype.emit(type)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2095 \"View in source\") [Ⓣ][1] Executes all registered listeners of the specified event type. #### Arguments 1. `type` *(String|Object)*: The event type or object. #### Returns *(Mixed)*: Returns the return value of the last listener executed. * * * ### `Benchmark.Suite.prototype.listeners(type)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2125 \"View in source\") [Ⓣ][1] Returns an array of event listeners for a given type that can be manipulated to add or remove listeners. #### Arguments 1. `type` *(String)*: The event type. #### Returns *(Array)*: The listeners array. * * * ### `Benchmark.Suite.prototype.off([type, listener])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2158 \"View in source\") [Ⓣ][1] Unregisters a listener for the specified event type(s), or unregisters all listeners for the specified event type(s), or unregisters all listeners for all event types. #### Arguments 1. `[type]` *(String)*: The event type. 2. `[listener]` *(Function)*: The function to unregister. #### Returns *(Object)*: The benchmark instance. #### Example ~~~ js // unregister a listener for an event type bench.off('cycle', listener); // unregister a listener for multiple event types bench.off('start cycle', listener); // unregister all listeners for an event type bench.off('cycle'); // unregister all listeners for multiple event types bench.off('start cycle complete'); // unregister all listeners for all event types bench.off(); ~~~ * * * ### `Benchmark.Suite.prototype.on(type, listener)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2197 \"View in source\") [Ⓣ][1] Registers a listener for the specified event type(s). #### Arguments 1. `type` *(String)*: The event type. 2. `listener` *(Function)*: The function to register. #### Returns *(Object)*: The benchmark instance. #### Example ~~~ js // register a listener for an event type bench.on('cycle', listener); // register a listener for multiple event types bench.on('start cycle', listener); ~~~ * * * ### `Benchmark.prototype.reset()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2334 \"View in source\") [Ⓣ][1] Reset properties and abort if running. #### Returns *(Object)*: The benchmark instance. * * * ### `Benchmark.prototype.run([options={}])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3000 \"View in source\") [Ⓣ][1] Runs the benchmark. #### Arguments 1. `[options={}]` *(Object)*: Options object. #### Returns *(Object)*: The benchmark instance. #### Example ~~~ js // basic usage bench.run(); // or with options bench.run({ 'async': true }); ~~~ * * * ### `Benchmark.prototype.toString()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2405 \"View in source\") [Ⓣ][1] Displays relevant benchmark information when coerced to a string. #### Returns *(String)*: A string representation of the benchmark instance. * * * ## `Benchmark.options` ### `Benchmark.options` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3049 \"View in source\") [Ⓣ][1] *(Object)*: The default options copied by benchmark instances. * * * ### `Benchmark.options.async` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3058 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate that benchmark cycles will execute asynchronously by default. * * * ### `Benchmark.options.defer` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3066 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate that the benchmark clock is deferred. * * * ### `Benchmark.options.delay` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3073 \"View in source\") [Ⓣ][1] *(Number)*: The delay between test cycles *(secs)*. * * * ### `Benchmark.options.id` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3082 \"View in source\") [Ⓣ][1] *(String)*: Displayed by Benchmark#toString when a `name` is not available *(auto-generated if absent)*. * * * ### `Benchmark.options.initCount` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3090 \"View in source\") [Ⓣ][1] *(Number)*: The default number of times to execute a test on a benchmark's first cycle. * * * ### `Benchmark.options.maxTime` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3099 \"View in source\") [Ⓣ][1] *(Number)*: The maximum time a benchmark is allowed to run before finishing *(secs)*. Note: Cycle delays aren't counted toward the maximum time. * * * ### `Benchmark.options.minSamples` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3107 \"View in source\") [Ⓣ][1] *(Number)*: The minimum sample size required to perform statistical analysis. * * * ### `Benchmark.options.minTime` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3115 \"View in source\") [Ⓣ][1] *(Number)*: The time needed to reduce the percent uncertainty of measurement to `1`% *(secs)*. * * * ### `Benchmark.options.name` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3123 \"View in source\") [Ⓣ][1] *(String)*: The name of the benchmark. * * * ### `Benchmark.options.onAbort` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3131 \"View in source\") [Ⓣ][1] An event listener called when the benchmark is aborted. * * * ### `Benchmark.options.onComplete` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3139 \"View in source\") [Ⓣ][1] An event listener called when the benchmark completes running. * * * ### `Benchmark.options.onCycle` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3147 \"View in source\") [Ⓣ][1] An event listener called after each run cycle. * * * ### `Benchmark.options.onError` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3155 \"View in source\") [Ⓣ][1] An event listener called when a test errors. * * * ### `Benchmark.options.onReset` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3163 \"View in source\") [Ⓣ][1] An event listener called when the benchmark is reset. * * * ### `Benchmark.options.onStart` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3171 \"View in source\") [Ⓣ][1] An event listener called when the benchmark starts running. * * * ## `Benchmark.platform` ### `Benchmark.platform` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3182 \"View in source\") [Ⓣ][1] *(Object)*: Platform object with properties describing things like browser name, version, and operating system. * * * ### `Benchmark.platform.description` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3190 \"View in source\") [Ⓣ][1] *(String)*: The platform description. * * * ### `Benchmark.platform.layout` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3198 \"View in source\") [Ⓣ][1] *(String, Null)*: The name of the browser layout engine. * * * ### `Benchmark.platform.manufacturer` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3222 \"View in source\") [Ⓣ][1] *(String, Null)*: The name of the product's manufacturer. * * * ### `Benchmark.platform.name` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3214 \"View in source\") [Ⓣ][1] *(String, Null)*: The name of the browser/environment. * * * ### `Benchmark.platform.os` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3230 \"View in source\") [Ⓣ][1] *(String, Null)*: The name of the operating system. * * * ### `Benchmark.platform.prerelease` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3238 \"View in source\") [Ⓣ][1] *(String, Null)*: The alpha/beta release indicator. * * * ### `Benchmark.platform.product` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3206 \"View in source\") [Ⓣ][1] *(String, Null)*: The name of the product hosting the browser. * * * ### `Benchmark.platform.version` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3246 \"View in source\") [Ⓣ][1] *(String, Null)*: The browser/environment version. * * * ### `Benchmark.platform.toString()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3255 \"View in source\") [Ⓣ][1] Return platform description when the platform object is coerced to a string. #### Returns *(String)*: The platform description. * * * ## `Benchmark.support` ### `Benchmark.support` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L135 \"View in source\") [Ⓣ][1] *(Object)*: An object used to flag environments/features. * * * ### `Benchmark.support.air` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L145 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect Adobe AIR. * * * ### `Benchmark.support.argumentsClass` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L153 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if `arguments` objects have the correct internal [[Class]] value. * * * ### `Benchmark.support.browser` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L161 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if in a browser environment. * * * ### `Benchmark.support.charByIndex` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L169 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if strings support accessing characters by index. * * * ### `Benchmark.support.charByOwnIndex` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L179 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if strings have indexes as own properties. * * * ### `Benchmark.support.decompilation` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L207 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if functions support decompilation. * * * ### `Benchmark.support.descriptors` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L228 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect ES5+ property descriptor API. * * * ### `Benchmark.support.getAllKeys` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L242 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect ES5+ Object.getOwnPropertyNames(). * * * ### `Benchmark.support.iteratesOwnFirst` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L255 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if own properties are iterated before inherited properties *(all but IE `Benchmark.support.java` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L190 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if Java is enabled/exposed. * * * ### `Benchmark.support.nodeClass` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L272 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if a node's [[Class]] is resolvable *(all but IE `Benchmark.support.timeout` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L198 \"View in source\") [Ⓣ][1] *(Boolean)*: Detect if the Timers API exists. * * * ## `Benchmark.prototype.error` ### `Benchmark.prototype.error` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3361 \"View in source\") [Ⓣ][1] *(Object)*: The error object if the test failed. * * * ## `Benchmark.prototype.stats` ### `Benchmark.prototype.stats` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3464 \"View in source\") [Ⓣ][1] *(Object)*: An object of stats including mean, margin or error, and standard deviation. * * * ### `Benchmark.prototype.stats.deviation` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3496 \"View in source\") [Ⓣ][1] *(Number)*: The sample standard deviation. * * * ### `Benchmark.prototype.stats.mean` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3504 \"View in source\") [Ⓣ][1] *(Number)*: The sample arithmetic mean. * * * ### `Benchmark.prototype.stats.moe` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3472 \"View in source\") [Ⓣ][1] *(Number)*: The margin of error. * * * ### `Benchmark.prototype.stats.rme` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3480 \"View in source\") [Ⓣ][1] *(Number)*: The relative margin of error *(expressed as a percentage of the mean)*. * * * ### `Benchmark.prototype.stats.sample` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3512 \"View in source\") [Ⓣ][1] *(Array)*: The array of sampled periods. * * * ### `Benchmark.prototype.stats.sem` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3488 \"View in source\") [Ⓣ][1] *(Number)*: The standard error of the mean. * * * ### `Benchmark.prototype.stats.variance` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3520 \"View in source\") [Ⓣ][1] *(Number)*: The sample variance. * * * ## `Benchmark.prototype.times` ### `Benchmark.prototype.times` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3529 \"View in source\") [Ⓣ][1] *(Object)*: An object of timing data including cycle, elapsed, period, start, and stop. * * * ### `Benchmark.prototype.times.cycle` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3537 \"View in source\") [Ⓣ][1] *(Number)*: The time taken to complete the last cycle *(secs)*. * * * ### `Benchmark.prototype.times.elapsed` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3545 \"View in source\") [Ⓣ][1] *(Number)*: The time taken to complete the benchmark *(secs)*. * * * ### `Benchmark.prototype.times.period` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3553 \"View in source\") [Ⓣ][1] *(Number)*: The time taken to execute the test once *(secs)*. * * * ### `Benchmark.prototype.times.timeStamp` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3561 \"View in source\") [Ⓣ][1] *(Number)*: A timestamp of when the benchmark started *(ms)*. * * * ## `Benchmark.Deferred` ### `Benchmark.Deferred(clone)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L445 \"View in source\") [Ⓣ][1] The Deferred constructor. #### Arguments 1. `clone` *(Object)*: The cloned benchmark instance. * * * ## `Benchmark.Deferred.prototype` ### `Benchmark.Deferred.prototype.benchmark` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3605 \"View in source\") [Ⓣ][1] *(Object)*: The deferred benchmark instance. * * * ### `Benchmark.Deferred.prototype.cycles` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3613 \"View in source\") [Ⓣ][1] *(Number)*: The number of deferred cycles performed while benchmarking. * * * ### `Benchmark.Deferred.prototype.elapsed` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3621 \"View in source\") [Ⓣ][1] *(Number)*: The time taken to complete the deferred benchmark *(secs)*. * * * ### `Benchmark.Deferred.prototype.resolve` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1188 \"View in source\") [Ⓣ][1] *(Unknown)*: Handles cycling/completing the deferred benchmark. * * * ### `Benchmark.Deferred.prototype.timeStamp` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3629 \"View in source\") [Ⓣ][1] *(Number)*: A timestamp of when the deferred benchmark started *(ms)*. * * * ## `Benchmark.Event` ### `Benchmark.Event(type)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L461 \"View in source\") [Ⓣ][1] The Event constructor. #### Arguments 1. `type` *(String|Object)*: The event type. * * * ## `Benchmark.Event.prototype` ### `Benchmark.Event.prototype.aborted` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3645 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate if the emitters listener iteration is aborted. * * * ### `Benchmark.Event.prototype.cancelled` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3653 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate if the default action is cancelled. * * * ### `Benchmark.Event.prototype.result` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3669 \"View in source\") [Ⓣ][1] *(Mixed)*: The return value of the last executed listener. * * * ### `Benchmark.Event.prototype.timeStamp` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3685 \"View in source\") [Ⓣ][1] *(Number)*: A timestamp of when the event was created *(ms)*. * * * ### `Benchmark.Event.prototype.type` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3693 \"View in source\") [Ⓣ][1] *(String)*: The event type. * * * ## `Benchmark.Event.prototype.currentTarget` ### `Benchmark.Event.prototype.currentTarget` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3661 \"View in source\") [Ⓣ][1] *(Object)*: The object whose listeners are currently being processed. * * * ## `Benchmark.Event.prototype.target` ### `Benchmark.Event.prototype.target` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3677 \"View in source\") [Ⓣ][1] *(Object)*: The object to which the event was originally emitted. * * * ## `Benchmark.Suite` ### `Benchmark.Suite(name [, options={}])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L507 \"View in source\") [Ⓣ][1] The Suite constructor. #### Arguments 1. `name` *(String)*: A name to identify the suite. 2. `[options={}]` *(Object)*: Options object. #### Example ~~~ js // basic usage (the `new` operator is optional) var suite = new Benchmark.Suite; // or using a name first var suite = new Benchmark.Suite('foo'); // or with options var suite = new Benchmark.Suite('foo', { // called when the suite starts running 'onStart': onStart, // called between running benchmarks 'onCycle': onCycle, // called when aborted 'onAbort': onAbort, // called when a test errors 'onError': onError, // called when reset 'onReset': onReset, // called when the suite completes running 'onComplete': onComplete }); ~~~ * * * ## `Benchmark.Suite.prototype` ### `Benchmark.Suite.prototype.aborted` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3734 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate if the suite is aborted. * * * ### `Benchmark.Suite.prototype.length` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3726 \"View in source\") [Ⓣ][1] *(Number)*: The number of benchmarks in the suite. * * * ### `Benchmark.Suite.prototype.running` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3742 \"View in source\") [Ⓣ][1] *(Boolean)*: A flag to indicate if the suite is running. * * * ### `Benchmark.Suite.prototype.abort()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1902 \"View in source\") [Ⓣ][1] Aborts all benchmarks in the suite. #### Returns *(Object)*: The suite instance. * * * ### `Benchmark.Suite.prototype.add(name, fn [, options={}])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1962 \"View in source\") [Ⓣ][1] Adds a test to the benchmark suite. #### Arguments 1. `name` *(String)*: A name to identify the benchmark. 2. `fn` *(Function|String)*: The test to benchmark. 3. `[options={}]` *(Object)*: Options object. #### Returns *(Object)*: The benchmark instance. #### Example ~~~ js // basic usage suite.add(fn); // or using a name first suite.add('foo', fn); // or with options suite.add('foo', fn, { 'onCycle': onCycle, 'onComplete': onComplete }); // or name and options suite.add('foo', { 'fn': fn, 'onCycle': onCycle, 'onComplete': onComplete }); // or options only suite.add({ 'name': 'foo', 'fn': fn, 'onCycle': onCycle, 'onComplete': onComplete }); ~~~ * * * ### `Benchmark.Suite.prototype.clone(options)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L1981 \"View in source\") [Ⓣ][1] Creates a new suite with cloned benchmarks. #### Arguments 1. `options` *(Object)*: Options object to overwrite cloned options. #### Returns *(Object)*: The new suite instance. * * * ### `Benchmark.Suite.prototype.emit(type)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2095 \"View in source\") [Ⓣ][1] Executes all registered listeners of the specified event type. #### Arguments 1. `type` *(String|Object)*: The event type or object. #### Returns *(Mixed)*: Returns the return value of the last listener executed. * * * ### `Benchmark.Suite.prototype.filter(callback)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2004 \"View in source\") [Ⓣ][1] An `Array#filter` like method. #### Arguments 1. `callback` *(Function|String)*: The function/alias called per iteration. #### Returns *(Object)*: A new suite of benchmarks that passed callback filter. * * * ### `Benchmark.Suite.prototype.forEach(callback)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3752 \"View in source\") [Ⓣ][1] An `Array#forEach` like method. Callbacks may terminate the loop by explicitly returning `false`. #### Arguments 1. `callback` *(Function)*: The function called per iteration. #### Returns *(Object)*: The suite iterated over. * * * ### `Benchmark.Suite.prototype.indexOf(value)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3761 \"View in source\") [Ⓣ][1] An `Array#indexOf` like method. #### Arguments 1. `value` *(Mixed)*: The value to search for. #### Returns *(Number)*: The index of the matched value or `-1`. * * * ### `Benchmark.Suite.prototype.invoke(name [, arg1, arg2, ...])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3771 \"View in source\") [Ⓣ][1] Invokes a method on all benchmarks in the suite. #### Arguments 1. `name` *(String|Object)*: The name of the method to invoke OR options object. 2. `[arg1, arg2, ...]` *(Mixed)*: Arguments to invoke the method with. #### Returns *(Array)*: A new array of values returned from each method invoked. * * * ### `Benchmark.Suite.prototype.join([separator=','])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3780 \"View in source\") [Ⓣ][1] Converts the suite of benchmarks to a string. #### Arguments 1. `[separator=',']` *(String)*: A string to separate each element of the array. #### Returns *(String)*: The string. * * * ### `Benchmark.Suite.prototype.listeners(type)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2125 \"View in source\") [Ⓣ][1] Returns an array of event listeners for a given type that can be manipulated to add or remove listeners. #### Arguments 1. `type` *(String)*: The event type. #### Returns *(Array)*: The listeners array. * * * ### `Benchmark.Suite.prototype.map(callback)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3789 \"View in source\") [Ⓣ][1] An `Array#map` like method. #### Arguments 1. `callback` *(Function)*: The function called per iteration. #### Returns *(Array)*: A new array of values returned by the callback. * * * ### `Benchmark.Suite.prototype.off([type, listener])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2158 \"View in source\") [Ⓣ][1] Unregisters a listener for the specified event type(s), or unregisters all listeners for the specified event type(s), or unregisters all listeners for all event types. #### Arguments 1. `[type]` *(String)*: The event type. 2. `[listener]` *(Function)*: The function to unregister. #### Returns *(Object)*: The benchmark instance. #### Example ~~~ js // unregister a listener for an event type bench.off('cycle', listener); // unregister a listener for multiple event types bench.off('start cycle', listener); // unregister all listeners for an event type bench.off('cycle'); // unregister all listeners for multiple event types bench.off('start cycle complete'); // unregister all listeners for all event types bench.off(); ~~~ * * * ### `Benchmark.Suite.prototype.on(type, listener)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2197 \"View in source\") [Ⓣ][1] Registers a listener for the specified event type(s). #### Arguments 1. `type` *(String)*: The event type. 2. `listener` *(Function)*: The function to register. #### Returns *(Object)*: The benchmark instance. #### Example ~~~ js // register a listener for an event type bench.on('cycle', listener); // register a listener for multiple event types bench.on('start cycle', listener); ~~~ * * * ### `Benchmark.Suite.prototype.pluck(property)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3798 \"View in source\") [Ⓣ][1] Retrieves the value of a specified property from all benchmarks in the suite. #### Arguments 1. `property` *(String)*: The property to pluck. #### Returns *(Array)*: A new array of property values. * * * ### `Benchmark.Suite.prototype.pop()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3806 \"View in source\") [Ⓣ][1] Removes the last benchmark from the suite and returns it. #### Returns *(Mixed)*: The removed benchmark. * * * ### `Benchmark.Suite.prototype.push()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3814 \"View in source\") [Ⓣ][1] Appends benchmarks to the suite. #### Returns *(Number)*: The suite's new length. * * * ### `Benchmark.Suite.prototype.reduce(callback, accumulator)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3833 \"View in source\") [Ⓣ][1] An `Array#reduce` like method. #### Arguments 1. `callback` *(Function)*: The function called per iteration. 2. `accumulator` *(Mixed)*: Initial value of the accumulator. #### Returns *(Mixed)*: The accumulator. * * * ### `Benchmark.Suite.prototype.reset()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2019 \"View in source\") [Ⓣ][1] Resets all benchmarks in the suite. #### Returns *(Object)*: The suite instance. * * * ### `Benchmark.Suite.prototype.reverse()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L638 \"View in source\") [Ⓣ][1] Rearrange the host array's elements in reverse order. #### Returns *(Array)*: The reversed array. * * * ### `Benchmark.Suite.prototype.run([options={}])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L2056 \"View in source\") [Ⓣ][1] Runs the suite. #### Arguments 1. `[options={}]` *(Object)*: Options object. #### Returns *(Object)*: The suite instance. #### Example ~~~ js // basic usage suite.run(); // or with options suite.run({ 'async': true, 'queued': true }); ~~~ * * * ### `Benchmark.Suite.prototype.shift()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L671 \"View in source\") [Ⓣ][1] Removes the first element of the host array and returns it. #### Returns *(Mixed)*: The first element of the array. * * * ### `Benchmark.Suite.prototype.slice(start, end)` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L684 \"View in source\") [Ⓣ][1] Creates an array of the host array's elements from the start index up to, but not including, the end index. #### Arguments 1. `start` *(Number)*: The starting index. 2. `end` *(Number)*: The end index. #### Returns *(Array)*: The new array. * * * ### `Benchmark.Suite.prototype.sort([compareFn=null])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3823 \"View in source\") [Ⓣ][1] Sorts the benchmarks of the suite. #### Arguments 1. `[compareFn=null]` *(Function)*: A function that defines the sort order. #### Returns *(Object)*: The sorted suite. * * * ### `Benchmark.Suite.prototype.splice(start, deleteCount [, val1, val2, ...])` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L714 \"View in source\") [Ⓣ][1] Allows removing a range of elements and/or inserting elements into the host array. #### Arguments 1. `start` *(Number)*: The start index. 2. `deleteCount` *(Number)*: The number of elements to delete. 3. `[val1, val2, ...]` *(Mixed)*: values to insert at the `start` index. #### Returns *(Array)*: An array of removed elements. * * * ### `Benchmark.Suite.prototype.unshift()` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L749 \"View in source\") [Ⓣ][1] Appends arguments to the host array. #### Returns *(Number)*: The new length. * * * ## `Benchmark.Suite.options` ### `Benchmark.Suite.options` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3705 \"View in source\") [Ⓣ][1] *(Object)*: The default options copied by suite instances. * * * ### `Benchmark.Suite.options.name` # [Ⓢ](https://github.com/bestiejs/benchmark.js/blob/master/benchmark.js#L3713 \"View in source\") [Ⓣ][1] *(String)*: The name of the suite. * * * [1]: #Benchmark \"Jump back to the TOC.\""},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-parser/node_modules/component-emitter/History.md","tags":[],"body":"1.1.2 / 2014-02-10 ================== * package: rename to \"component-emitter\" * package: update \"main\" and \"component\" fields * Add license to Readme (same format as the other components) * created .npmignore * travis stuff 1.1.1 / 2013-12-01 ================== * fix .once adding .on to the listener * docs: Emitter#off() * component: add `.repo` prop 1.1.0 / 2013-10-20 ================== * add `.addEventListener()` and `.removeEventListener()` aliases 1.0.1 / 2013-06-27 ================== * add support for legacy ie 1.0.0 / 2013-02-26 ================== * add `.off()` support for removing all listeners 0.0.6 / 2012-10-08 ================== * add `this._callbacks` initialization to prevent funky gotcha 0.0.5 / 2012-09-07 ================== * fix `Emitter.call(this)` usage 0.0.3 / 2012-07-11 ================== * add `.listeners()` * rename `.has()` to `.hasListeners()` 0.0.2 / 2012-06-28 ================== * fix `.off()` with `.once()`-registered callbacks"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-parser/node_modules/component-emitter/Readme.md","tags":[],"body":"# Emitter [![Build Status](https://travis-ci.org/component/emitter.png)](https://travis-ci.org/component/emitter) Event emitter component. ## Installation ``` $ component install component/emitter ``` ## API ### Emitter(obj) The `Emitter` may also be used as a mixin. For example a \"plain\" object may become an emitter, or you may extend an existing prototype. As an `Emitter` instance: ```js var Emitter = require('emitter'); var emitter = new Emitter; emitter.emit('something'); ``` As a mixin: ```js var Emitter = require('emitter'); var user = { name: 'tobi' }; Emitter(user); user.emit('im a user'); ``` As a prototype mixin: ```js var Emitter = require('emitter'); Emitter(User.prototype); ``` ### Emitter#on(event, fn) Register an `event` handler `fn`. ### Emitter#once(event, fn) Register a single-shot `event` handler `fn`, removed immediately after it is invoked the first time. ### Emitter#off(event, fn) * Pass `event` and `fn` to remove a listener. * Pass `event` to remove all listeners on that event. * Pass nothing to remove all listeners on all events. ### Emitter#emit(event, ...) Emit an `event` with variable option args. ### Emitter#listeners(event) Return an array of callbacks, or an empty array. ### Emitter#hasListeners(event) Check if this emitter has `event` handlers. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-parser/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-parser/node_modules/json3/README.md","tags":[],"body":"# JSON 3 # ![JSON 3 Logo](http://bestiejs.github.io/json3/page/logo.png) [![Build Status](https://secure.travis-ci.org/bestiejs/json3.png?branch=gh-pages)](http://travis-ci.org/bestiejs/json3) **JSON 3** is a modern JSON implementation compatible with a variety of JavaScript platforms, including Internet Explorer 6, Opera 7, Safari 2, and Netscape 6. The current version is **3.3.2**. - [Development Version](http://cdnjs.cloudflare.com/ajax/libs/json3/3.3.2/json3.js) *(43 KB; uncompressed with comments)* - [Production Version](http://cdnjs.cloudflare.com/ajax/libs/json3/3.3.2/json3.min.js) *(3.5 KB; compressed and `gzip`-ped)* Special thanks to [cdnjs](http://cdnjs.com/libraries/json3/) and [jsDelivr](http://www.jsdelivr.com/#!json3) for hosting CDN copies of JSON 3. [JSON](http://json.org/) is a language-independent data interchange format based on a loose subset of the JavaScript grammar. Originally popularized by [Douglas Crockford](http://www.crockford.com/), the format was standardized in the [fifth edition](http://es5.github.com/) of the ECMAScript specification. The 5.1 edition, ratified in June 2011, incorporates several modifications to the grammar pertaining to the serialization of dates. JSON 3 exposes two functions: `stringify()` for [serializing](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/stringify) a JavaScript value to JSON, and `parse()` for [producing](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/parse) a JavaScript value from a JSON source string. It is a **drop-in replacement** for [JSON 2](http://json.org/js). The functions behave exactly as described in the ECMAScript spec, **except** for the date serialization discrepancy noted below. The JSON 3 parser does **not** use `eval` or regular expressions. This provides security and performance benefits in obsolete and mobile environments, where the margin is particularly significant. The complete [benchmark suite](http://jsperf.com/json3) is available on [jsPerf](http://jsperf.com/). The project is [hosted on GitHub](http://git.io/json3), along with the [unit tests](http://bestiejs.github.io/json3/test/test_browser.html). It is part of the [BestieJS](https://github.com/bestiejs) family, a collection of best-in-class JavaScript libraries that promote cross-platform support, specification precedents, unit testing, and plenty of documentation. # Changes from JSON 2 # JSON 3... * Correctly serializes primitive wrapper objects. * Throws a `TypeError` when serializing cyclic structures (JSON 2 recurses until the call stack overflows). * Utilizes **feature tests** to detect broken or incomplete *native* JSON implementations (JSON 2 only checks for the presence of the native functions). The tests are only executed once at runtime, so there is no additional performance cost when parsing or serializing values. **As of v3.2.3**, JSON 3 is compatible with [Prototype](http://prototypejs.org) 1.6.1 and older. In contrast to JSON 2, JSON 3 **does not**... * Add `toJSON()` methods to the `Boolean`, `Number`, and `String` prototypes. These are not part of any standard, and are made redundant by the design of the `stringify()` implementation. * Add `toJSON()` or `toISOString()` methods to `Date.prototype`. See the note about date serialization below. ## Date Serialization **JSON 3 deviates from the specification in one important way**: it does not define `Date#toISOString()` or `Date#toJSON()`. This preserves CommonJS compatibility and avoids polluting native prototypes. Instead, date serialization is performed internally by the `stringify()` implementation: if a date object does not define a custom `toJSON()` method, it is serialized as a [simplified ISO 8601 date-time string](http://es5.github.com/#x15.9.1.15). **Several native `Date#toJSON()` implementations produce date time strings that do *not* conform to the grammar outlined in the spec**. For instance, all versions of Safari 4, as well as JSON 2, fail to serialize extended years correctly. Furthermore, JSON 2 and older implementations omit the milliseconds from the date-time string (optional in ES 5, but required in 5.1). Finally, in all versions of Safari 4 and 5, serializing an invalid date will produce the string `\"Invalid Date\"`, rather than `null`. Because these environments exhibit other serialization bugs, however, JSON 3 will override the native `stringify()` implementation. Portions of the date serialization code are adapted from the [`date-shim`](https://github.com/Yaffle/date-shim) project. # Usage # ## Web Browsers **When used in a web browser**, JSON 3 exposes an additional `JSON3` object containing the `noConflict()` and `runInContext()` functions, as well as aliases to the `stringify()` and `parse()` functions. ### `noConflict` and `runInContext` * `JSON3.noConflict()` restores the original value of the global `JSON` object and returns a reference to the `JSON3` object. * `JSON3.runInContext([context, exports])` initializes JSON 3 using the given `context` object (e.g., `window`, `global`, etc.), or the global object if omitted. If an `exports` object is specified, the `stringify()`, `parse()`, and `runInContext()` functions will be attached to it instead of a new object. ### Asynchronous Module Loaders JSON 3 is defined as an [anonymous module](https://github.com/amdjs/amdjs-api/wiki/AMD#define-function-) for compatibility with [RequireJS](http://requirejs.org/), [`curl.js`](https://github.com/cujojs/curl), and other asynchronous module loaders. To avoid issues with third-party scripts, **JSON 3 is exported to the global scope even when used with a module loader**. If this behavior is undesired, `JSON3.noConflict()` can be used to restore the global `JSON` object to its original value. ## CommonJS Environments var JSON3 = require(\"./path/to/json3\"); JSON3.parse(\"[1, 2, 3]\"); // => [1, 2, 3] ## JavaScript Engines load(\"path/to/json3.js\"); JSON.stringify({\"Hello\": 123, \"Good-bye\": 456}, [\"Hello\"], \"\\t\"); // => '{\\n\\t\"Hello\": 123\\n}' # Compatibility # JSON 3 has been **tested** with the following web browsers, CommonJS environments, and JavaScript engines. ## Web Browsers - Windows [Internet Explorer](http://www.microsoft.com/windows/internet-explorer), version 6.0 and higher - Mozilla [Firefox](http://www.mozilla.com/firefox), version 1.0 and higher - Apple [Safari](http://www.apple.com/safari), version 2.0 and higher - [Opera](http://www.opera.com) 7.02 and higher - [Mozilla](http://sillydog.org/narchive/gecko.php) 1.0, [Netscape](http://sillydog.org/narchive/) 6.2.3, and [SeaMonkey](http://www.seamonkey-project.org/) 1.0 and higher ## CommonJS Environments - [Node](http://nodejs.org/) 0.2.6 and higher - [RingoJS](http://ringojs.org/) 0.4 and higher - [Narwhal](http://narwhaljs.org/) 0.3.2 and higher ## JavaScript Engines - Mozilla [Rhino](http://www.mozilla.org/rhino) 1.5R5 and higher - WebKit [JSC](https://trac.webkit.org/wiki/JSC) - Google [V8](http://code.google.com/p/v8) ## Known Incompatibilities * Attempting to serialize the `arguments` object may produce inconsistent results across environments due to specification version differences. As a workaround, please convert the `arguments` object to an array first: `JSON.stringify([].slice.call(arguments, 0))`. ## Required Native Methods JSON 3 assumes that the following methods exist and function as described in the ECMAScript specification: - The `Number`, `String`, `Array`, `Object`, `Date`, `SyntaxError`, and `TypeError` constructors. - `String.fromCharCode` - `Object#toString` - `Function#call` - `Math.floor` - `Number#toString` - `Date#valueOf` - `String.prototype`: `indexOf`, `charCodeAt`, `charAt`, `slice`. - `Array.prototype`: `push`, `pop`, `join`. # Contribute # Check out a working copy of the JSON 3 source code with [Git](http://git-scm.com/): $ git clone git://github.com/bestiejs/json3.git $ cd json3 If you'd like to contribute a feature or bug fix, you can [fork](http://help.github.com/fork-a-repo/) JSON 3, commit your changes, and [send a pull request](http://help.github.com/send-pull-requests/). Please make sure to update the unit tests in the `test` directory as well. Alternatively, you can use the [GitHub issue tracker](https://github.com/bestiejs/json3/issues) to submit bug reports, feature requests, and questions, or send tweets to [@kitcambridge](http://twitter.com/kitcambridge). JSON 3 is released under the [MIT License](http://kit.mit-license.org/)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/ua-parser-js/readme.md","tags":[],"body":"# UAParser.js Lightweight JavaScript-based User-Agent string parser. Supports browser & node.js environment. Also available as jQuery/Zepto plugin, Component/Bower/Meteor package, & RequireJS/AMD module [![Build Status](https://travis-ci.org/faisalman/ua-parser-js.svg?branch=master)](https://travis-ci.org/faisalman/ua-parser-js) [![Flattr this](http://api.flattr.com/button/flattr-badge-large.png)](http://flattr.com/thing/3867907/faisalmanua-parser-js-on-GitHub) * Author : Faisal Salman > * Demo : http://faisalman.github.io/ua-parser-js * Source : https://github.com/faisalman/ua-parser-js ## Features Extract detailed type of web browser, layout engine, operating system, cpu architecture, and device type/model purely from user-agent string with relatively lightweight footprint (~11KB minified / ~4KB gzipped). Written in vanilla js, which means it doesn't depends on any other library. ![It's over 9000](https://raw.githubusercontent.com/faisalman/ua-parser-js/gh-pages/images/over9000.jpg) ## Methods * `getBrowser()` * returns `{ name: '', version: '' }` ``` # Possible 'browser.name': Amaya, Android Browser, Arora, Avant, Baidu, Blazer, Bolt, Camino, Chimera, Chrome, Chromium, Comodo Dragon, Conkeror, Dillo, Dolphin, Doris, Edge, Epiphany, Fennec, Firebird, Firefox, Flock, GoBrowser, iCab, ICE Browser, IceApe, IceCat, IceDragon, Iceweasel, IE [Mobile], Iron, Jasmine, K-Meleon, Konqueror, Kindle, Links, Lunascape, Lynx, Maemo, Maxthon, Midori, Minimo, MIUI Browser, [Mobile] Safari, Mosaic, Mozilla, Netfront, Netscape, NetSurf, Nokia, OmniWeb, Opera [Mini/Mobi/Tablet], PhantomJS, Phoenix, Polaris, QQBrowser, RockMelt, Silk, Skyfire, SeaMonkey, SlimBrowser, Swiftfox, Tizen, UCBrowser, Vivaldi, w3m, Yandex # 'browser.version' determined dynamically ``` * `getDevice()` * returns `{ model: '', type: '', vendor: '' }` ``` # Possible 'device.type': console, mobile, tablet, smarttv, wearable, embedded # Possible 'device.vendor': Acer, Alcatel, Amazon, Apple, Archos, Asus, BenQ, BlackBerry, Dell, GeeksPhone, Google, HP, HTC, Huawei, Jolla, Lenovo, LG, Meizu, Microsoft, Motorola, Nexian, Nintendo, Nokia, Nvidia, Ouya, Palm, Panasonic, Polytron, RIM, Samsung, Sharp, Siemens, Sony-Ericsson, Sprint, Xbox, ZTE # 'device.model' determined dynamically ``` * `getEngine()` * returns `{ name: '', version: '' }` ``` # Possible 'engine.name' Amaya, EdgeHTML, Gecko, iCab, KHTML, Links, Lynx, NetFront, NetSurf, Presto, Tasman, Trident, w3m, WebKit # 'engine.version' determined dynamically ``` * `getOS()` * returns `{ name: '', version: '' }` ``` # Possible 'os.name' AIX, Amiga OS, Android, Arch, Bada, BeOS, BlackBerry, CentOS, Chromium OS, Contiki, Fedora, Firefox OS, FreeBSD, Debian, DragonFly, Gentoo, GNU, Haiku, Hurd, iOS, Joli, Linpus, Linux, Mac OS, Mageia, Mandriva, MeeGo, Minix, Mint, Morph OS, NetBSD, Nintendo, OpenBSD, OpenVMS, OS/2, Palm, PCLinuxOS, Plan9, Playstation, QNX, RedHat, RIM Tablet OS, RISC OS, Sailfish, Series40, Slackware, Solaris, SUSE, Symbian, Tizen, Ubuntu, UNIX, VectorLinux, WebOS, Windows [Phone/Mobile], Zenwalk # 'os.version' determined dynamically ``` * `getCPU()` * returns `{ architecture: '' }` ``` # Possible 'cpu.architecture' 68k, amd64, arm, arm64, avr, ia32, ia64, irix, irix64, mips, mips64, pa-risc, ppc, sparc, sparc64 ``` * `getResult()` * returns `{ ua: '', browser: {}, cpu: {}, device: {}, engine: {}, os: {} }` * `getUA()` * returns UA string of current instance * `setUA(uastring)` * set & parse UA string ## Example ```html ``` ### Using node.js ```sh $ npm install ua-parser-js ``` ```js var http = require('http'); var parser = require('ua-parser-js'); http.createServer(function (req, res) { // get user-agent header var ua = parser(req.headers['user-agent']); // write the result as response res.end(JSON.stringify(ua, null, ' ')); }) .listen(1337, '127.0.0.1'); console.log('Server running at http://127.0.0.1:1337/'); ``` ### Using requirejs ```js require(['ua-parser'], function(UAParser) { var parser = new UAParser(); console.log(parser.getResult()); }); ``` ### Using component ```sh $ component install faisalman/ua-parser-js ``` ### Using bower ```sh $ bower install ua-parser-js ``` ### Using meteor ```sh $ meteor add faisalman:ua-parser-js ``` ### Using jQuery/Zepto ($.ua) Although written in vanilla js (which means it doesn't depends on jQuery), this library will automatically detect if jQuery/Zepto is present and create `$.ua` object based on browser's user-agent (although in case you need, `window.UAParser` constructor is still present). To get/set user-agent you can use: `$.ua.get()` / `$.ua.set(uastring)`. ```js // In browser with default user-agent: 'Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0': // Do some tests console.log($.ua.device); // {vendor: \"HTC\", model: \"Evo Shift 4G\", type: \"mobile\"} console.log($.ua.os); // {name: \"Android\", version: \"2.3.4\"} console.log($.ua.os.name); // \"Android\" console.log($.ua.get()); // \"Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0\" // reset to custom user-agent $.ua.set('Mozilla/5.0 (Linux; U; Android 3.0.1; en-us; Xoom Build/HWI69) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13'); // Test again console.log($.ua.browser.name); // \"Safari\" console.log($.ua.engine.name); // \"Webkit\" console.log($.ua.device); // {vendor: \"Motorola\", model: \"Xoom\", type: \"tablet\"} console.log(parseInt($.ua.browser.version.split('.')[0], 10)); // 4 ``` ### Extending regex patterns * `UAParser(uastring[, extensions])` Pass your own regexes to extend the limited matching rules. ```js // Example: var uaString = 'ownbrowser/1.3'; var ownBrowser = [[/(ownbrowser)\\/([\\w\\.]+)/i], [UAParser.BROWSER.NAME, UAParser.BROWSER.VERSION]]; var parser = new UAParser(uaString, {browser: ownBrowser}); console.log(parser.getBrowser()); // {name: \"ownbrowser\", version: \"1.3\"} ``` ## Development Verify, test, & minify script ```sh $ npm run test $ npm run build ``` Then submit a pull request to https://github.com/faisalman/ua-parser-js under `develop` branch. ## License Dual licensed under GPLv2 & MIT Copyright © 2012-2015 Faisal Salman > Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/CHANGELOG.md","tags":[],"body":"# Change Log All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines. ## [4.7.1](https://github.com/yargs/yargs/compare/v4.7.0...v4.7.1) (2016-05-15) ### Bug Fixes * switch to using `const` rather than `var` ([#499](https://github.com/yargs/yargs/pull/499)) * make stdout flush on newer versions of Node.js ([#501](https://github.com/yargs/yargs/issues/501)) ([9f8c6f4](https://github.com/yargs/yargs/commit/9f8c6f4)) # [4.7.0](https://github.com/yargs/yargs/compare/v4.6.0...v4.7.0) (2016-05-02) ### Bug Fixes * **pkgConf:** fix aliases issues in .pkgConf() ([#478](https://github.com/yargs/yargs/issues/478))([b900502](https://github.com/yargs/yargs/commit/b900502)) ### Features * **completion:** allow to get completions for any string, not just process.argv ([#470](https://github.com/yargs/yargs/issues/470))([74fcfbc](https://github.com/yargs/yargs/commit/74fcfbc)) * **configuration:** Allow to directly pass a configuration object to .config() ([#480](https://github.com/yargs/yargs/issues/480))([e0a7e05](https://github.com/yargs/yargs/commit/e0a7e05)) * **validation:** Add .skipValidation() method ([#471](https://github.com/yargs/yargs/issues/471))([d72badb](https://github.com/yargs/yargs/commit/d72badb)) # [4.6.0](https://github.com/yargs/yargs/compare/v4.5.0...v4.6.0) (2016-04-11) ### Bug Fixes * **my brand!:** I agree with [@osher](https://github.com/osher) lightweight isn't a huge selling point of ours any longer, see [#468](https://github.com/yargs/yargs/issues/468) ([c46d7e1](https://github.com/yargs/yargs/commit/c46d7e1)) ### Features * switch to standard-version for release management ([f70f801](https://github.com/yargs/yargs/commit/f70f801)) * upgrade to version of yargs-parser that introduces some slick new features, great work [@elas7](https://github.com/elas7). update cliui, replace win-spawn, replace badge. ([#475](https://github.com/yargs/yargs/issues/475)) ([f915dd4](https://github.com/yargs/yargs/commit/f915dd4)) # [4.5.0](https://github.com/yargs/yargs/compare/v4.4.0...v4.5.0) (2016-04-05) ### Bug Fixes * **windows:** handle $0 better on Windows platforms ([eb6e03f](https://github.com/yargs/yargs/commit/eb6e03f)) ### Features * **commands:** implemented variadic positional arguments ([51d926e](https://github.com/yargs/yargs/commit/51d926e)) * **completion:** completion now better handles aliases, and avoids duplicating keys. ([86416c8](https://github.com/yargs/yargs/commit/86416c8)) * **config:** If invoking .config() without parameters, set a default option ([0413dd1](https://github.com/yargs/yargs/commit/0413dd1)) * **conventional-changelog:** switching to using conventional-changelog for generating the changelog ([a2b5a2a](https://github.com/yargs/yargs/commit/a2b5a2a)) ### v4.4.0 (2016/04/03 21:10 +07:00) - [#454](https://github.com/yargs/yargs/pull/454) fix demand() when second argument is an array (@elas7) - [#452](https://github.com/yargs/yargs/pull/452) fix code example for `.help()` docs (@maxrimue) - [#450](https://github.com/yargs/yargs/pull/450) fix for bash completion trailing space edge-case (@elas7) - [#448](https://github.com/yargs/yargs/pull/448) allow a method to be passed to `showHelp`, rather than a log-level (@osher) - [#446](https://github.com/yargs/yargs/pull/446) update yargs-parser, y18n, nyc, cliui, pkg-conf (@bcoe) - [#436](https://github.com/yargs/yargs/pull/436) the rebase method is only used by tests, do not export it in two places (@elas7) - [#428](https://github.com/yargs/yargs/pull/428) initial support for subcommands (@nexdrew) ### v4.3.2 (2016/3/20 15:07 +07:00) - [#445](https://github.com/yargs/yargs/pull/445) strict mode was failing if no commands were registered (@nexdrew) - [#443](https://github.com/yargs/yargs/pull/443) adds Italian translation \\o/ (@madrisan) - [#441](https://github.com/yargs/yargs/pull/441) remove duplicate keys from array options configuration (@elas7) - [#437](https://github.com/yargs/yargs/pull/437) standardize tests for .command() (@lrlna) ### v4.3.0 (2016/3/12 14:19 +07:00) - [#432](https://github.com/yargs/yargs/pull/432) non-singleton version of yargs (@bcoe) - [#422, #425, #420] translations for number (@zkat, @rilut, @maxrimue, @watilde) - [#414](https://github.com/yargs/yargs/pull/414) all command options can be defined in module now (@nexdrew) ### v4.2.0 (2016/2/22 11:02 +07:00) - [#395](https://github.com/yargs/yargs/pull/395) do not reset groups if they contain global keys (@novemberborn) - [#393](https://github.com/yargs/yargs/pull/393) use sane default for usage strings (@nexdrew) - [#392](https://github.com/yargs/yargs/pull/392) resetting wrap() was causing layout issues with commands (@nexdrew) - [#391](https://github.com/yargs/yargs/pull/391) commands were being added multiple times (@nexdrew) ### v4.0.0 (2016/2/14 1:27 +07:00) - [#384](https://github.com/bcoe/yargs/pull/384) add new number type to yargs (@lrlna, @maxrimue) - [#382](https://github.com/bcoe/yargs/pull/382) pass error as extra parameter to fail (@gajus) - [#378](https://github.com/bcoe/yargs/pull/378) introduces the pkgConf feature, which tells yargs to load default argument values from a key on a project's package.json (@bcoe) - [#376](https://github.com/bcoe/yargs/pull/376) **breaking change**, make help() method signature more consistent with other commands (@maxrimue) - [#368](https://github.com/bcoe/yargs/pull/368) **breaking change**, overhaul to command handling API: introducing named positional arguments, commands as modules, introduces the concept of global options (options that don't reset). (@nexdrew, @bcoe). - [#364](https://github.com/bcoe/yargs/pull/364) add the slick new yargs website to the package.json (@iarna). - [#357](https://github.com/bcoe/yargs/pull/357) .strict() now requires that a valid command is provided (@lrlna) - [#356](https://github.com/bcoe/yargs/pull/356) pull the parsing bits of yargs into the separate module yargs-parser. Various parsing options can now be turned on and off using configuration (@bcoe). - [#330](https://github.com/bcoe/yargs/pull/330) **breaking change**, fix inconsistencies with `.version()` API. (@maxrimue). ### v3.32.0 (2016/1/14 10:13 +07:00) - [#344](https://github.com/bcoe/yargs/pull/344) yargs now has a code of conduct and contributor guidelines (@bcoe) - [#341](https://github.com/bcoe/yargs/issues/341) Fix edge-case with camel-case arguments (@davibe) - [#331](https://github.com/bcoe/yargs/pull/331) Handle parsing a raw argument string (@kellyselden) - [#325](https://github.com/bcoe/yargs/pull/325) Tweaks to make tests pass again on Windows (@isaacs) - [#321](https://github.com/bcoe/yargs/pull/321) Custom config parsing function (@bcoe) ### v3.31.0 (2015/12/03 10:15 +07:00) - [#239](https://github.com/bcoe/yargs/pull/239) Pass argv to commands (@bcoe) - [#308](https://github.com/bcoe/yargs/pull/308) Yargs now handles environment variables (@nexdrew) - [#302](https://github.com/bcoe/yargs/pull/302) Add Indonesian translation (@rilut) - [#300](https://github.com/bcoe/yargs/pull/300) Add Turkish translation (@feyzo) - [#298](https://github.com/bcoe/yargs/pull/298) Add Norwegian Bokmål translation (@sindresorhus) - [#297](https://github.com/bcoe/yargs/pull/297) Fix for layout of cjk characters (@disjukr) - [#296](https://github.com/bcoe/yargs/pull/296) Add Korean translation (@disjukr) ### v3.30.0 (2015/11/13 16:29 +07:00) - [#293](https://github.com/bcoe/yargs/pull/293) Polish language support (@kamilogorek) - [#291](https://github.com/bcoe/yargs/pull/291) fix edge-cases with `.alias()` (@bcoe) - [#289](https://github.com/bcoe/yargs/pull/289) group options in custom groups (@bcoe) ### v3.29.0 (2015/10/16 21:51 +07:00) - [#282](https://github.com/bcoe/yargs/pull/282) completions now accept promises (@LinusU) - [#281](https://github.com/bcoe/yargs/pull/281) fix parsing issues with dot notation (@bcoe) ### v3.28.0 (2015/10/16 1:55 +07:00) - [#277](https://github.com/bcoe/yargs/pull/277) adds support for ansi escape codes (@bcoe) ### v3.27.0 (2015/10/08 1:55 +00:00) - [#271](https://github.com/bcoe/yargs/pull/273) skips validation for help or version flags with exitProcess(false) (@tepez) - [#273](https://github.com/bcoe/yargs/pull/273) implements single output for errors with exitProcess(false) (@nexdrew) - [#269](https://github.com/bcoe/yargs/pull/269) verifies single output for errors with exitProcess(false) (@tepez) - [#268](https://github.com/bcoe/yargs/pull/268) adds Chinese translation (@qiu8310) - [#266](https://github.com/bcoe/yargs/pull/266) adds case for -- after -- in parser test (@geophree) ### v3.26.0 (2015/09/25 2:14 +00:00) - [#263](https://github.com/bcoe/yargs/pull/263) document count() and option() object keys (@nexdrew) - [#259](https://github.com/bcoe/yargs/pull/259) remove util in readme (@38elements) - [#258](https://github.com/bcoe/yargs/pull/258) node v4 builds, update deps (@nexdrew) - [#257](https://github.com/bcoe/yargs/pull/257) fix spelling errors (@dkoleary88) ### v3.25.0 (2015/09/13 7:38 -07:00) - [#254](https://github.com/bcoe/yargs/pull/254) adds Japanese translation (@oti) - [#253](https://github.com/bcoe/yargs/pull/253) fixes for tests on Windows (@bcoe) ### v3.24.0 (2015/09/04 12:02 +00:00) - [#248](https://github.com/bcoe/yargs/pull/248) reinstate os-locale, no spawning (@nexdrew) - [#249](https://github.com/bcoe/yargs/pull/249) use travis container-based infrastructure (@nexdrew) - [#247](https://github.com/bcoe/yargs/pull/247) upgrade standard (@nexdrew) ### v3.23.0 (2015/08/30 23:00 +00:00) - [#246](https://github.com/bcoe/yargs/pull/246) detect locale based only on environment variables (@bcoe) - [#244](https://github.com/bcoe/yargs/pull/244) adds Windows CI testing (@bcoe) - [#245](https://github.com/bcoe/yargs/pull/245) adds OSX CI testing (@bcoe, @nexdrew) ### v3.22.0 (2015/08/28 22:26 +00:00) - [#242](https://github.com/bcoe/yargs/pull/242) adds detectLocale config option (@bcoe) ### v3.21.1 (2015/08/28 20:58 +00:00) - [#240](https://github.com/bcoe/yargs/pull/240) hot-fix for Atom on Windows (@bcoe) ### v3.21.0 (2015/08/21 21:20 +00:00) - [#238](https://github.com/bcoe/yargs/pull/238) upgrade camelcase, window-size, chai, mocha (@nexdrew) - [#237](https://github.com/bcoe/yargs/pull/237) adds defaultDescription to option() (@nexdrew) ### v3.20.0 (2015/08/20 01:29 +00:00) - [#231](https://github.com/bcoe/yargs/pull/231) Merge pull request #231 from bcoe/detect-locale (@sindresorhus) - [#235](https://github.com/bcoe/yargs/pull/235) adds german translation to yargs (@maxrimue) ### v3.19.0 (2015/08/14 05:12 +00:00) - [#224](https://github.com/bcoe/yargs/pull/224) added Portuguese translation (@codemonkey3045) ### v3.18.1 (2015/08/12 05:53 +00:00) - [#228](https://github.com/bcoe/yargs/pull/228) notes about embedding yargs in Electron (@etiktin) - [#223](https://github.com/bcoe/yargs/pull/223) make booleans work in config files (@sgentle) ### v3.18.0 (2015/08/06 20:05 +00:00) - [#222](https://github.com/bcoe/yargs/pull/222) updates fr locale (@nexdrew) - [#221](https://github.com/bcoe/yargs/pull/221) adds missing locale strings (@nexdrew) - [#220](https://github.com/bcoe/yargs/pull/220) adds es locale (@zkat) ### v3.17.1 (2015/08/02 19:35 +00:00) - [#218](https://github.com/bcoe/yargs/pull/218) upgrades nyc (@bcoe) ### v3.17.0 (2015/08/02 18:39 +00:00) - [#217](https://github.com/bcoe/yargs/pull/217) sort methods in README.md (@nexdrew) - [#215](https://github.com/bcoe/yargs/pull/215) adds fr locale (@LoicMahieu) ### v3.16.0 (2015/07/30 04:35 +00:00) - [#210](https://github.com/bcoe/yargs/pull/210) adds i18n support to yargs (@bcoe) - [#209](https://github.com/bcoe/yargs/pull/209) adds choices type to yargs (@nexdrew) - [#207](https://github.com/bcoe/yargs/pull/207) pretty new shields from shields.io (@SimenB) - [#208](https://github.com/bcoe/yargs/pull/208) improvements to README.md (@nexdrew) - [#205](https://github.com/bcoe/yargs/pull/205) faster build times on Travis (@ChristianMurphy) ### v3.15.0 (2015/07/06 06:01 +00:00) - [#197](https://github.com/bcoe/yargs/pull/197) tweaks to how errors bubble up from parser.js (@bcoe) - [#193](https://github.com/bcoe/yargs/pull/193) upgraded nyc, reporting now happens by default (@bcoe) ### v3.14.0 (2015/06/28 02:12 +00:00) - [#192](https://github.com/bcoe/yargs/pull/192) standard style nits (@bcoe) - [#190](https://github.com/bcoe/yargs/pull/190) allow for hidden commands, e.g., .completion('completion', false) (@tschaub) ### v3.13.0 (2015/06/24 04:12 +00:00) - [#187](https://github.com/bcoe/yargs/pull/187) completion now behaves differently if it is being run in the context of a command (@tschaub) - [#186](https://github.com/bcoe/yargs/pull/186) if no matches are found for a completion default to filename completion (@tschaub) ### v3.12.0 (2015/06/19 03:23 +00:00) - [#183](https://github.com/bcoe/yargs/pull/183) don't complete commands if they've already been completed (@tschaub) - [#181](https://github.com/bcoe/yargs/pull/181) various fixes for completion. (@bcoe, @tschaub) - [#182](https://github.com/bcoe/yargs/pull/182) you can now set a maximum # of of required arguments (@bcoe) ### v3.11.0 (2015/06/15 05:15 +00:00) - [#173](https://github.com/bcoe/yargs/pull/173) update standard, window-size, chai (@bcoe) - [#171](https://github.com/bcoe/yargs/pull/171) a description can now be set when providing a config option. (@5c077yP) ### v3.10.0 (2015/05/29 04:25 +00:00) - [#165](https://github.com/bcoe/yargs/pull/165) expose yargs.terminalWidth() thanks @ensonic (@bcoe) - [#164](https://github.com/bcoe/yargs/pull/164) better array handling thanks @getify (@bcoe) ### v3.9.1 (2015/05/20 05:14 +00:00) - [b6662b6](https://github.com/bcoe/yargs/commit/b6662b6774cfeab4876f41ec5e2f67b7698f4e2f) clarify .config() docs (@linclark) - [0291360](https://github.com/bcoe/yargs/commit/02913606285ce31ce81d7f12c48d8a3029776ec7) fixed tests, switched to nyc for coverage, fixed security issue, added Lin as collaborator (@bcoe) ### v3.9.0 (2015/05/10 18:32 +00:00) - [#157](https://github.com/bcoe/yargs/pull/157) Merge pull request #157 from bcoe/command-yargs. allows handling of command specific arguments. Thanks for the suggestion @ohjames (@bcoe) - [#158](https://github.com/bcoe/yargs/pull/158) Merge pull request #158 from kemitchell/spdx-license. Update license format (@kemitchell) ### v3.8.0 (2015/04/24 23:10 +00:00) - [#154](https://github.com/bcoe/yargs/pull/154) showHelp's method signature was misleading fixes #153 (@bcoe) - [#151](https://github.com/bcoe/yargs/pull/151) refactor yargs' table layout logic to use new helper library (@bcoe) - [#150](https://github.com/bcoe/yargs/pull/150) Fix README example in argument requirements (@annonymouse) ### v3.7.2 (2015/04/13 11:52 -07:00) * [679fbbf](https://github.com/bcoe/yargs/commit/679fbbf55904030ccee8a2635e8e5f46551ab2f0) updated yargs to use the [standard](https://github.com/feross/standard) style guide (agokjr) * [22382ee](https://github.com/bcoe/yargs/commit/22382ee9f5b495bc2586c1758cd1091cec3647f9 various bug fixes for $0 (@nylen) ### v3.7.1 (2015/04/10 11:06 -07:00) * [89e1992](https://github.com/bcoe/yargs/commit/89e1992a004ba73609b5f9ee6890c4060857aba4) detect iojs bin along with node bin. (@bcoe) * [755509e](https://github.com/bcoe/yargs/commit/755509ea90041e5f7833bba3b8c5deffe56f0aab) improvements to example documentation in README.md (@rstacruz) * [0d2dfc8](https://github.com/bcoe/yargs/commit/0d2dfc822a43418242908ad97ddd5291a1b35dc6) showHelp() no longer requires that .argv has been called (@bcoe) ### v3.7.0 (2015/04/04 02:29 -07:00) * [56cbe2d](https://github.com/bcoe/yargs/commit/56cbe2ddd33dc176dcbf97ba40559864a9f114e4) make .requiresArg() work with type hints. (@bcoe). * [2f5d562](https://github.com/bcoe/yargs/commit/2f5d5624f736741deeedf6a664d57bc4d857bdd0) serialize arrays and objects in usage strings. (@bcoe). * [5126304](https://github.com/bcoe/yargs/commit/5126304dd18351fc28f10530616fdd9361e0af98) be more lenient about alias/primary key ordering in chaining API. (@bcoe) ### v3.6.0 (2015/03/21 01:00 +00:00) - [4e24e22](https://github.com/bcoe/yargs/commit/4e24e22e6a195e55ab943ede704a0231ac33b99c) support for .js configuration files. (@pirxpilot) ### v3.5.4 (2015/03/12 05:56 +00:00) - [c16cc08](https://github.com/bcoe/yargs/commit/c16cc085501155cf7fd853ccdf8584b05ab92b78) message for non-option arguments is now optional, thanks to (@raine) ### v3.5.3 (2015/03/09 06:14 +00:00) - [870b428](https://github.com/bcoe/yargs/commit/870b428cf515d560926ca392555b7ad57dba9e3d) completion script was missing in package.json (@bcoe) ### v3.5.2 (2015/03/09 06:11 +00:00) - [58a4b24](https://github.com/bcoe/yargs/commit/58a4b2473ebbb326713d522be53e32d3aabb08d2) parse was being called multiple times, resulting in strange behavior (@bcoe) ### v3.5.1 (2015/03/09 04:55 +00:00) - [4e588e0](https://github.com/bcoe/yargs/commit/4e588e055afbeb9336533095f051496e3977f515) accidentally left testing logic in (@bcoe) ### v3.5.0 (2015/03/09 04:49 +00:00) - [718bacd](https://github.com/bcoe/yargs/commit/718bacd81b9b44f786af76b2afe491fe06274f19) added support for bash completions see #4 (@bcoe) - [a192882](https://github.com/bcoe/yargs/commit/a19288270fc431396c42af01125eeb4443664528) downgrade to mocha 2.1.0 until https://github.com/mochajs/mocha/issues/1585 can be sorted out (@bcoe) ### v3.4.7 (2015/03/09 04:09 +00:00) - [9845e5c](https://github.com/bcoe/yargs/commit/9845e5c1a9c684ba0be3f0bfb40e7b62ab49d9c8) the Argv singleton was not being updated when manually parsing arguments, fixes #114 (@bcoe) ### v3.4.6 (2015/03/09 04:01 +00:00) - [45b4c80](https://github.com/bcoe/yargs/commit/45b4c80b890d02770b0a94f326695a8a566e8fe9) set placeholders for all keys fixes #115 (@bcoe) ### v3.4.5 (2015/03/01 20:31 +00:00) - [a758e0b](https://github.com/bcoe/yargs/commit/a758e0b2556184f067cf3d9c4ef886d39817ebd2) fix for count consuming too many arguments (@bcoe) ### v3.4.4 (2015/02/28 04:52 +00:00) - [0476af7](https://github.com/bcoe/yargs/commit/0476af757966acf980d998b45108221d4888cfcb) added nargs feature, allowing you to specify the number of arguments after an option (@bcoe) - [092477d](https://github.com/bcoe/yargs/commit/092477d7ab3efbf0ba11cede57f7d8cfc70b024f) updated README with full example of v3.0 API (@bcoe) ### v3.3.3 (2015/02/28 04:23 +00:00) - [0c4b769](https://github.com/bcoe/yargs/commit/0c4b769516cd8d93a7c4e5e675628ae0049aa9a8) remove string dependency, which conflicted with other libraries see #106 (@bcoe) ### v3.3.2 (2015/02/28 04:11 +00:00) - [2a98906](https://github.com/bcoe/yargs/commit/2a9890675821c0e7a12f146ce008b0562cb8ec9a) add $0 to epilog (@schnittstabil) ### v3.3.1 (2015/02/24 03:28 +00:00) - [ad485ce](https://github.com/bcoe/yargs/commit/ad485ce748ebdfce25b88ef9d6e83d97a2f68987) fix for applying defaults to camel-case args (@bcoe) ### v3.3.0 (2015/02/24 00:49 +00:00) - [8bfe36d](https://github.com/bcoe/yargs/commit/8bfe36d7fb0f93a799ea3f4c756a7467c320f8c0) fix and document restart() command, as a tool for building nested CLIs (@bcoe) ### v3.2.1 (2015/02/22 05:45 +00:00) - [49a6d18](https://github.com/bcoe/yargs/commit/49a6d1822a4ef9b1ea6f90cc366be60912628885) you can now provide a function that generates a default value (@bcoe) ### v3.2.0 (2015/02/22 05:24 +00:00) - [7a55886](https://github.com/bcoe/yargs/commit/7a55886c9343cf71a20744ca5cdd56d2ea7412d5) improvements to yargs two-column text layout (@bcoe) - [b6ab513](https://github.com/bcoe/yargs/commit/b6ab5136a4c3fa6aa496f6b6360382e403183989) Tweak NPM version badge (@nylen) ### v3.1.0 (2015/02/19 19:37 +00:00) - [9bd2379](https://github.com/bcoe/yargs/commit/9bd237921cf1b61fd9f32c0e6d23f572fc225861) version now accepts a function, making it easy to load version #s from a package.json (@bcoe) ### v3.0.4 (2015/02/14 01:40 +00:00) - [0b7c19b](https://github.com/bcoe/yargs/commit/0b7c19beaecb747267ca4cc10e5cb2a8550bc4b7) various fixes for dot-notation handling (@bcoe) ### v3.0.3 (2015/02/14 00:59 +00:00) - [c3f35e9](https://github.com/bcoe/yargs/commit/c3f35e99bd5a0d278073fcadd95e2d778616cc17) make sure dot-notation is applied to aliases (@bcoe) ### 3.0.2 (2015/02/13 16:50 +00:00) - [74c8967](https://github.com/bcoe/yargs/commit/74c8967c340c204a0a7edf8a702b6f46c2705435) document epilog shorthand of epilogue. (@bcoe) - [670110f](https://github.com/bcoe/yargs/commit/670110fc01bedc4831b6fec6afac54517d5a71bc) any non-truthy value now causes check to fail see #76 (@bcoe) - [0d8f791](https://github.com/bcoe/yargs/commit/0d8f791a33c11ced4cd431ea8d3d3a337d456b56) finished implementing my wish-list of fetures for yargs 3.0. see #88 (@bcoe) - [5768447](https://github.com/bcoe/yargs/commit/5768447447c4c8e8304f178846206ce86540f063) fix coverage. (@bcoe) - [82e793f](https://github.com/bcoe/yargs/commit/82e793f3f61c41259eaacb67f0796aea2cf2aaa0) detect console width and perform word-wrapping. (@bcoe) - [67476b3](https://github.com/bcoe/yargs/commit/67476b37eea07fee55f23f35b9e0c7d76682b86d) refactor two-column table layout so that we can use it for examples and usage (@bcoe) - [4724cdf](https://github.com/bcoe/yargs/commit/4724cdfcc8e37ae1ca3dcce9d762f476e9ef4bb4) major refactor of index.js, in prep for 3.x release. (@bcoe) ### v2.3.0 (2015/02/08 20:41 +00:00) - [d824620](https://github.com/bcoe/yargs/commit/d824620493df4e63664af1fe320764dd1a9244e6) allow for undefined boolean defaults (@ashi009) ### v2.2.0 (2015/02/08 20:07 +00:00) - [d6edd98](https://github.com/bcoe/yargs/commit/d6edd9848826e7389ed1393858c45d03961365fd) in-prep for further refactoring, and a 3.x release I've shuffled some things around and gotten test-coverage to 100%. (@bcoe) ### v2.1.2 (2015/02/08 06:05 +00:00) - [d640745](https://github.com/bcoe/yargs/commit/d640745a7b9f8d476e0223879d056d18d9c265c4) switch to path.relative (@bcoe) - [3bfd41f](https://github.com/bcoe/yargs/commit/3bfd41ff262a041f29d828b88936a79c63cad594) remove mocha.opts. (@bcoe) - [47a2f35](https://github.com/bcoe/yargs/commit/47a2f357091db70903a402d6765501c1d63f15fe) document using .string('_') for string ids. see #56 (@bcoe) - [#57](https://github.com/bcoe/yargs/pull/57) Merge pull request #57 from eush77/option-readme (@eush77) ### v2.1.1 (2015/02/06 08:08 +00:00) - [01c6c61](https://github.com/bcoe/yargs/commit/01c6c61d67b4ebf88f41f0b32a345ec67f0ac17d) fix for #71, 'newAliases' of undefined (@bcoe) ### v2.1.0 (2015/02/06 07:59 +00:00) - [6a1a3fa](https://github.com/bcoe/yargs/commit/6a1a3fa731958e26ccd56885f183dd8985cc828f) try to guess argument types, and apply sensible defaults see #73 (@bcoe) ### v2.0.1 (2015/02/06 07:54 +00:00) - [96a06b2](https://github.com/bcoe/yargs/commit/96a06b2650ff1d085a52b7328d8bba614c20cc12) Fix for strange behavior with --sort option, see #51 (@bcoe) ### v2.0.0 (2015/02/06 07:45 +00:00) - [0250517](https://github.com/bcoe/yargs/commit/0250517c9643e53f431b824e8ccfa54937414011) - [108fb84](https://github.com/bcoe/yargs/commit/108fb8409a3a63dcaf99d917fe4dfcfaa1de236d) fixed bug with boolean parsing, when bools separated by = see #66 (@bcoe) - [a465a59](https://github.com/bcoe/yargs/commit/a465a5915f912715738de890982e4f8395958b10) Add `files` field to the package.json (@shinnn) - [31043de](https://github.com/bcoe/yargs/commit/31043de7a38a17c4c97711f1099f5fb164334db3) fix for yargs.argv having the same keys added multiple times see #63 (@bcoe) - [2d68c5b](https://github.com/bcoe/yargs/commit/2d68c5b91c976431001c4863ce47c9297850f1ad) Disable process.exit calls using .exitProcess(false) (@cianclarke) - [45da9ec](https://github.com/bcoe/yargs/commit/45da9ec4c55a7bd394721bc6a1db0dabad7bc52a) Mention .option in README (@eush77) ### v1.3.2 (2014/10/06 21:56 +00:00) - [b8d3472](https://github.com/bcoe/yargs/commit/b8d34725482e5821a3cc809c0df71378f282f526) 1.3.2 (@chevex) ### list (2014/08/30 18:41 +00:00) - [fbc777f](https://github.com/bcoe/yargs/commit/fbc777f416eeefd37c84e44d27d7dfc7c1925721) Now that yargs is the successor to optimist, I'm changing the README language to be more universal. Pirate speak isn't very accessible to non-native speakers. (@chevex) - [a54d068](https://github.com/bcoe/yargs/commit/a54d0682ae2efc2394d407ab171cc8a8bbd135ea) version output will not print extra newline (@boneskull) - [1cef5d6](https://github.com/bcoe/yargs/commit/1cef5d62a9d6d61a3948a49574892e01932cc6ae) Added contributors section to package.json (@chrisn) - [cc295c0](https://github.com/bcoe/yargs/commit/cc295c0a80a2de267e0155b60d315fc4b6f7c709) Added 'require' and 'required' as synonyms for 'demand' (@chrisn) - [d0bf951](https://github.com/bcoe/yargs/commit/d0bf951d949066b6280101ed606593d079ee15c8) Updating minimist. (@chevex) - [c15f8e7](https://github.com/bcoe/yargs/commit/c15f8e7f245b261e542cf205ce4f4313630cbdb4) Fix #31 (bad interaction between camelCase options and strict mode) (@nylen) - [d991b9b](https://github.com/bcoe/yargs/commit/d991b9be687a68812dee1e3b185ba64b7778b82d) Added .help() and .version() methods (@chrisn) - [e8c8aa4](https://github.com/bcoe/yargs/commit/e8c8aa46268379357cb11e9fc34b8c403037724b) Added .showHelpOnFail() method (@chrisn) - [e855af4](https://github.com/bcoe/yargs/commit/e855af4a933ea966b5bbdd3c4c6397a4bac1a053) Allow boolean flag with .demand() (@chrisn) - [14dbec2](https://github.com/bcoe/yargs/commit/14dbec24fb7380683198e2b20c4deb8423e64bea) Fixes issue #22. Arguments are no longer printed to the console when using .config. (@chevex) - [bef74fc](https://github.com/bcoe/yargs/commit/bef74fcddc1544598a804f80d0a3728459f196bf) Informing users that Yargs is the official optimist successor. (@chevex) - [#24](https://github.com/bcoe/yargs/pull/24) Merge pull request #24 from chrisn/strict (@chrisn) - [889a2b2](https://github.com/bcoe/yargs/commit/889a2b28eb9768801b05163360a470d0fd6c8b79) Added requiresArg option, for options that require values (@chrisn) - [eb16369](https://github.com/bcoe/yargs/commit/eb163692262be1fe80b992fd8803d5923c5a9b18) Added .strict() method, to report error if unknown arguments are given (@chrisn) - [0471c3f](https://github.com/bcoe/yargs/commit/0471c3fd999e1ad4e6cded88b8aa02013b66d14f) Changed optimist to yargs in usage-options.js example (@chrisn) - [5c88f74](https://github.com/bcoe/yargs/commit/5c88f74e3cf031b17c54b4b6606c83e485ff520e) Change optimist to yargs in examples (@chrisn) - [66f12c8](https://github.com/bcoe/yargs/commit/66f12c82ba3c943e4de8ca862980e835da8ecb3a) Fix a couple of bad interactions between aliases and defaults (@nylen) - [8fa1d80](https://github.com/bcoe/yargs/commit/8fa1d80f14b03eb1f2898863a61f1d1615bceb50) Document second argument of usage(message, opts) (@Gobie) - [56e6528](https://github.com/bcoe/yargs/commit/56e6528cf674ff70d63083fb044ff240f608448e) For \"--some-option\", also set argv.someOption (@nylen) - [ed5f6d3](https://github.com/bcoe/yargs/commit/ed5f6d33f57ad1086b11c91b51100f7c6c7fa8ee) Finished porting unit tests to Mocha. (@chevex) ### v1.0.15 (2014/02/05 23:18 +00:00) - [e2b1fc0](https://github.com/bcoe/yargs/commit/e2b1fc0c4a59cf532ae9b01b275e1ef57eeb64d2) 1.0.15 update to badges (@chevex) ### v1.0.14 (2014/02/05 23:17 +00:00) - [f33bbb0](https://github.com/bcoe/yargs/commit/f33bbb0f00fe18960f849cc8e15a7428a4cd59b8) Revert \"Fixed issue which caused .demand function not to work correctly.\" (@chevex) ### v1.0.13 (2014/02/05 22:13 +00:00) - [6509e5e](https://github.com/bcoe/yargs/commit/6509e5e7dee6ef1a1f60eea104be0faa1a045075) Fixed issue which caused .demand function not to work correctly. (@chevex) ### v1.0.12 (2013/12/13 00:09 +00:00) - [05eb267](https://github.com/bcoe/yargs/commit/05eb26741c9ce446b33ff006e5d33221f53eaceb) 1.0.12 (@chevex) ### v1.0.11 (2013/12/13 00:07 +00:00) - [c1bde46](https://github.com/bcoe/yargs/commit/c1bde46e37318a68b87d17a50c130c861d6ce4a9) 1.0.11 (@chevex) ### v1.0.10 (2013/12/12 23:57 +00:00) - [dfebf81](https://github.com/bcoe/yargs/commit/dfebf8164c25c650701528ee581ca483a99dc21c) Fixed formatting in README (@chevex) ### v1.0.9 (2013/12/12 23:47 +00:00) - [0b4e34a](https://github.com/bcoe/yargs/commit/0b4e34af5e6d84a9dbb3bb6d02cd87588031c182) Update README.md (@chevex) ### v1.0.8 (2013/12/06 16:36 +00:00) - [#1](https://github.com/bcoe/yargs/pull/1) fix error caused by check() see #1 (@martinheidegger) ### v1.0.7 (2013/11/24 18:01 +00:00) - [a247d88](https://github.com/bcoe/yargs/commit/a247d88d6e46644cbb7303c18b1bb678fc132d72) Modified Pirate Joe image. (@chevex) ### v1.0.6 (2013/11/23 19:21 +00:00) - [d7f69e1](https://github.com/bcoe/yargs/commit/d7f69e1d34bc929736a8bdccdc724583e21b7eab) Updated Pirate Joe image. (@chevex) ### v1.0.5 (2013/11/23 19:09 +00:00) - [ece809c](https://github.com/bcoe/yargs/commit/ece809cf317cc659175e1d66d87f3ca68c2760be) Updated readme notice again. (@chevex) ### v1.0.4 (2013/11/23 19:05 +00:00) - [9e81e81](https://github.com/bcoe/yargs/commit/9e81e81654028f83ba86ffc3ac772a0476084e5e) Updated README with a notice about yargs being a fork of optimist and what that implies. (@chevex) ### v1.0.3 (2013/11/23 17:43 +00:00) - [65e7a78](https://github.com/bcoe/yargs/commit/65e7a782c86764944d63d084416aba9ee6019c5f) Changed some small wording in README.md. (@chevex) - [459e20e](https://github.com/bcoe/yargs/commit/459e20e539b366b85128dd281ccd42221e96c7da) Fix a bug in the options function, when string and boolean options weren't applied to aliases. (@shockone) ### v1.0.2 (2013/11/23 09:46 +00:00) - [3d80ebe](https://github.com/bcoe/yargs/commit/3d80ebed866d3799224b6f7d596247186a3898a9) 1.0.2 (@chevex) ### v1.0.1 (2013/11/23 09:39 +00:00) - [f80ff36](https://github.com/bcoe/yargs/commit/f80ff3642d580d4b68bf9f5a94277481bd027142) Updated image. (@chevex) ### v1.0.0 (2013/11/23 09:33 +00:00) - [54e31d5](https://github.com/bcoe/yargs/commit/54e31d505f820b80af13644e460894b320bf25a3) Rebranded from optimist to yargs in the spirit of the fork :D (@chevex) - [4ebb6c5](https://github.com/bcoe/yargs/commit/4ebb6c59f44787db7c24c5b8fe2680f01a23f498) Added documentation for demandCount(). (@chevex) - [4561ce6](https://github.com/bcoe/yargs/commit/4561ce66dcffa95f49e8b4449b25b94cd68acb25) Simplified the error messages returned by .check(). (@chevex) - [661c678](https://github.com/bcoe/yargs/commit/661c67886f479b16254a830b7e1db3be29e6b7a6) Fixed an issue with demand not accepting a zero value. (@chevex) - [731dd3c](https://github.com/bcoe/yargs/commit/731dd3c37624790490bd6df4d5f1da8f4348279e) Add .fail(fn) so death isn't the only option. Should fix issue #39. (@chevex) - [fa15417](https://github.com/bcoe/yargs/commit/fa15417ff9e70dace0d726627a5818654824c1d8) Added a few missing 'return self' (@chevex) - [e655e4d](https://github.com/bcoe/yargs/commit/e655e4d99d1ae1d3695ef755d51c2de08d669761) Fix showing help in certain JS environments. (@chevex) - [a746a31](https://github.com/bcoe/yargs/commit/a746a31cd47c87327028e6ea33762d6187ec5c87) Better string representation of default values. (@chevex) - [6134619](https://github.com/bcoe/yargs/commit/6134619a7e90b911d5443230b644c5d447c1a68c) Implies: conditional demands (@chevex) - [046b93b](https://github.com/bcoe/yargs/commit/046b93b5d40a27367af4cb29726e4d781d934639) Added support for JSON config files. (@chevex) - [a677ec0](https://github.com/bcoe/yargs/commit/a677ec0a0ecccd99c75e571d03323f950688da03) Add .example(cmd, desc) feature. (@chevex) - [1bd4375](https://github.com/bcoe/yargs/commit/1bd4375e11327ba1687d4bb6e5e9f3c30c1be2af) Added 'defaults' as alias to 'default' so as to avoid usage of a reserved keyword. (@chevex) - [6b753c1](https://github.com/bcoe/yargs/commit/6b753c16ca09e723060e70b773b430323b29c45c) add .normalize(args..) support for normalizing paths (@chevex) - [33d7d59](https://github.com/bcoe/yargs/commit/33d7d59341d364f03d3a25f0a55cb99004dbbe4b) Customize error messages with demand(key, msg) (@chevex) - [647d37f](https://github.com/bcoe/yargs/commit/647d37f164c20f4bafbf67dd9db6cd6e2cd3b49f) Merge branch 'rewrite-duplicate-test' of github.com:isbadawi/node-optimist (@chevex) - [9059d1a](https://github.com/bcoe/yargs/commit/9059d1ad5e8aea686c2a01c89a23efdf929fff2e) Pass aliases object to check functions for greater versatility. (@chevex) - [623dc26](https://github.com/bcoe/yargs/commit/623dc26c7331abff2465ef8532e3418996d42fe6) Added ability to count boolean options and rolled minimist library back into project. (@chevex) - [49f0dce](https://github.com/bcoe/yargs/commit/49f0dcef35de4db544c3966350d36eb5838703f6) Fixed small typo. (@chevex) - [79ec980](https://github.com/bcoe/yargs/commit/79ec9806d9ca6eb0014cfa4b6d1849f4f004baf2) Removed dependency on wordwrap module. (@chevex) - [ea14630](https://github.com/bcoe/yargs/commit/ea14630feddd69d1de99dd8c0e08948f4c91f00a) Merge branch 'master' of github.com:chbrown/node-optimist (@chevex) - [2b75da2](https://github.com/bcoe/yargs/commit/2b75da2624061e0f4f3107d20303c06ec9054906) Merge branch 'master' of github.com:seanzhou1023/node-optimist (@chevex) - [d9bda11](https://github.com/bcoe/yargs/commit/d9bda1116e26f3b40e833ca9ca19263afea53565) Merge branch 'patch-1' of github.com:thefourtheye/node-optimist (@chevex) - [d6cc606](https://github.com/bcoe/yargs/commit/d6cc6064a4f1bea38a16a4430b8a1334832fbeff) Renamed README. (@chevex) - [9498d3f](https://github.com/bcoe/yargs/commit/9498d3f59acfb5e102826503e681623c3a64b178) Renamed readme and added .gitignore. (@chevex) - [bbd1fe3](https://github.com/bcoe/yargs/commit/bbd1fe37fefa366dde0fb3dc44d91fe8b28f57f5) Included examples for ```help``` and ```showHelp``` functions and fixed few formatting issues (@thefourtheye) - [37fea04](https://github.com/bcoe/yargs/commit/37fea0470a5796a0294c1dcfff68d8041650e622) .alias({}) behaves differently based on mapping direction when generating descriptions (@chbrown) - [855b20d](https://github.com/bcoe/yargs/commit/855b20d0be567ca121d06b30bea64001b74f3d6d) Documented function signatures are useful for dynamically typed languages. (@chbrown) ### 0.6.0 (2013/06/25 08:48 +00:00) - [d37bfe0](https://github.com/bcoe/yargs/commit/d37bfe05ae6d295a0ab481efe4881222412791f4) all tests passing using minimist (@substack) - [76f1352](https://github.com/bcoe/yargs/commit/76f135270399d01f2bbc621e524a5966e5c422fd) all parse tests now passing (@substack) - [a7b6754](https://github.com/bcoe/yargs/commit/a7b6754276c38d1565479a5685c3781aeb947816) using minimist, some tests passing (@substack) - [6655688](https://github.com/bcoe/yargs/commit/66556882aa731cbbbe16cc4d42c85740a2e98099) Give credit where its due (@DeadAlready) - [602a2a9](https://github.com/bcoe/yargs/commit/602a2a92a459f93704794ad51b115bbb08b535ce) v0.5.3 - Remove wordwrap as dependency (@DeadAlready) ### 0.5.2 (2013/05/31 03:46 +00:00) - [4497ca5](https://github.com/bcoe/yargs/commit/4497ca55e332760a37b866ec119ded347ca27a87) fixed the whitespace bug without breaking anything else (@substack) - [5a3dd1a](https://github.com/bcoe/yargs/commit/5a3dd1a4e0211a38613c6e02f61328e1031953fa) failing test for whitespace arg (@substack) ### 0.5.1 (2013/05/30 07:17 +00:00) - [a20228f](https://github.com/bcoe/yargs/commit/a20228f62a454755dd07f628a7c5759113918327) fix parse() to work with functions before it (@substack) - [b13bd4c](https://github.com/bcoe/yargs/commit/b13bd4cac856a9821d42fa173bdb58f089365a7d) failing test for parse() with modifiers (@substack) ### 0.5.0 (2013/05/18 21:59 +00:00) - [c474a64](https://github.com/bcoe/yargs/commit/c474a649231527915c222156e3b40806d365a87c) fixes for dash (@substack) ### 0.4.0 (2013/04/13 19:03 +00:00) - [dafe3e1](https://github.com/bcoe/yargs/commit/dafe3e18d7c6e7c2d68e06559df0e5cbea3adb14) failing short test (@substack) ### 0.3.7 (2013/04/04 04:07 +00:00) - [6c7a0ec](https://github.com/bcoe/yargs/commit/6c7a0ec94ce4199a505f0518b4d6635d4e47cc81) Fix for windows. On windows there is no _ in environment. (@hdf) ### 0.3.6 (2013/04/04 04:04 +00:00) - [e72346a](https://github.com/bcoe/yargs/commit/e72346a727b7267af5aa008b418db89970873f05) Add support for newlines in -a=\"\" arguments (@danielbeardsley) - [71e1fb5](https://github.com/bcoe/yargs/commit/71e1fb55ea9987110a669ac6ec12338cfff3821c) drop 0.4, add 0.8 to travis (@substack) ### 0.3.5 (2012/10/10 11:09 +00:00) - [ee692b3](https://github.com/bcoe/yargs/commit/ee692b37554c70a0bb16389a50a26b66745cbbea) Fix parsing booleans (@vojtajina) - [5045122](https://github.com/bcoe/yargs/commit/5045122664c3f5b4805addf1be2148d5856f7ce8) set $0 properly in the tests (@substack) ### 0.3.4 (2012/04/30 06:54 +00:00) - [f28c0e6](https://github.com/bcoe/yargs/commit/f28c0e62ca94f6e0bb2e6d82fc3d91a55e69b903) bump for string \"true\" params (@substack) - [8f44aeb](https://github.com/bcoe/yargs/commit/8f44aeb74121ddd689580e2bf74ef86a605e9bf2) Fix failing test for aliased booleans. (@coderarity) - [b9f7b61](https://github.com/bcoe/yargs/commit/b9f7b613b1e68e11e6c23fbda9e555a517dcc976) Add failing test for short aliased booleans. (@coderarity) ### 0.3.3 (2012/04/30 06:45 +00:00) - [541bac8](https://github.com/bcoe/yargs/commit/541bac8dd787a5f1a5d28f6d8deb1627871705e7) Fixes #37. ### 0.3.2 (2012/04/12 20:28 +00:00) - [3a0f014](https://github.com/bcoe/yargs/commit/3a0f014c1451280ac1c9caa1f639d31675586eec) travis badge (@substack) - [4fb60bf](https://github.com/bcoe/yargs/commit/4fb60bf17845f4ce3293f8ca49c9a1a7c736cfce) Fix boolean aliases. (@coderarity) - [f14dda5](https://github.com/bcoe/yargs/commit/f14dda546efc4fe06ace04d36919bfbb7634f79b) Adjusted package.json to use tap (@jfhbrook) - [88e5d32](https://github.com/bcoe/yargs/commit/88e5d32295be6e544c8d355ff84e355af38a1c74) test/usage.js no longer hangs (@jfhbrook) - [e1e740c](https://github.com/bcoe/yargs/commit/e1e740c27082f3ce84deca2093d9db2ef735d0e5) two tests for combined boolean/alias opts parsing (@jfhbrook) ### 0.3.1 (2011/12/31 08:44 +00:00) - [d09b719](https://github.com/bcoe/yargs/commit/d09b71980ef711b6cf3918cd19beec8257e40e82) If \"default\" is set to false it was not passed on, fixed. (@wolframkriesing) ### 0.3.0 (2011/12/09 06:03 +00:00) - [6e74aa7](https://github.com/bcoe/yargs/commit/6e74aa7b46a65773e20c0cb68d2d336d4a0d553d) bump and documented dot notation (@substack) ### 0.2.7 (2011/10/20 02:25 +00:00) - [94adee2](https://github.com/bcoe/yargs/commit/94adee20e17b58d0836f80e8b9cdbe9813800916) argv._ can be told 'Hey! argv._! Don't be messing with my args.', and it WILL obey (@colinta) - [c46fdd5](https://github.com/bcoe/yargs/commit/c46fdd56a05410ae4a1e724a4820c82e77ff5469) optimistic critter image (@substack) - [5c95c73](https://github.com/bcoe/yargs/commit/5c95c73aedf4c7482bd423e10c545e86d7c8a125) alias options() to option() (@substack) - [f7692ea](https://github.com/bcoe/yargs/commit/f7692ea8da342850af819367833abb685fde41d8) [fix] Fix for parsing boolean edge case (@indexzero) - [d1f92d1](https://github.com/bcoe/yargs/commit/d1f92d1425bd7f356055e78621b30cdf9741a3c2) - [b01bda8](https://github.com/bcoe/yargs/commit/b01bda8d86e455bbf74ce497864cb8ab5b9fb847) [fix test] Update to ensure optimist is aware of default booleans. Associated tests included (@indexzero) - [aa753e7](https://github.com/bcoe/yargs/commit/aa753e7c54fb3a12f513769a0ff6d54aa0f63943) [dist test] Update devDependencies in package.json. Update test pathing to be more npm and require.paths future-proof (@indexzero) - [7bfce2f](https://github.com/bcoe/yargs/commit/7bfce2f3b3c98e6539e7549d35fbabced7e9341e) s/sys/util/ (@substack) - [d420a7a](https://github.com/bcoe/yargs/commit/d420a7a9c890d2cdb11acfaf3ea3f43bc3e39f41) update usage output (@substack) - [cf86eed](https://github.com/bcoe/yargs/commit/cf86eede2e5fc7495b6ec15e6d137d9ac814f075) some sage readme protips about parsing rules (@substack) - [5da9f7a](https://github.com/bcoe/yargs/commit/5da9f7a5c0e1758ec7c5801fb3e94d3f6e970513) documented all the methods finally (@substack) - [8ca6879](https://github.com/bcoe/yargs/commit/8ca6879311224b25933642987300f6a29de5c21b) fenced syntax highlighting (@substack) - [b72bacf](https://github.com/bcoe/yargs/commit/b72bacf1d02594778c1935405bc8137eb61761dc) right-alignment of wrapped extra params (@substack) - [2b980bf](https://github.com/bcoe/yargs/commit/2b980bf2656b4ee8fc5134dc5f56a48855c35198) now with .wrap() (@substack) - [d614f63](https://github.com/bcoe/yargs/commit/d614f639654057d1b7e35e3f5a306e88ec2ad1e4) don't show 'Options:' when there aren't any (@substack) - [691eda3](https://github.com/bcoe/yargs/commit/691eda354df97b5a86168317abcbcaabdc08a0fb) failing test for multi-aliasing (@substack) - [0826c9f](https://github.com/bcoe/yargs/commit/0826c9f462109feab2bc7a99346d22e72bf774b7) \"Options:\" > \"options:\" (@substack) - [72f7490](https://github.com/bcoe/yargs/commit/72f749025d01b7f295738ed370a669d885fbada0) [minor] Update formatting for `.showHelp()` (@indexzero) - [75aecce](https://github.com/bcoe/yargs/commit/75aeccea74329094072f95800e02c275e7d999aa) options works again, too lazy to write a proper test right now (@substack) - [f742e54](https://github.com/bcoe/yargs/commit/f742e5439817c662dc3bd8734ddd6467e6018cfd) line_count_options example, which breaks (@substack) - [4ca06b8](https://github.com/bcoe/yargs/commit/4ca06b8b4ea99b5d5714b315a2a8576bee6e5537) line count example (@substack) - [eeb8423](https://github.com/bcoe/yargs/commit/eeb8423e0a5ecc9dc3eb1e6df9f3f8c1c88f920b) remove self.argv setting in boolean (@substack) - [6903412](https://github.com/bcoe/yargs/commit/69034126804660af9cc20ea7f4457b50338ee3d7) removed camel case for now (@substack) - [5a0d88b](https://github.com/bcoe/yargs/commit/5a0d88bf23e9fa79635dd034e2a1aa992acc83cd) remove dead longest checking code (@substack) - [d782170](https://github.com/bcoe/yargs/commit/d782170babf7284b1aa34f5350df0dd49c373fa8) .help() too (@substack) - [622ec17](https://github.com/bcoe/yargs/commit/622ec17379bb5374fdbb190404c82bc600975791) rm old help generator (@substack) - [7c8baac](https://github.com/bcoe/yargs/commit/7c8baac4d66195e9f5158503ea9ebfb61153dab7) nub keys (@substack) - [8197785](https://github.com/bcoe/yargs/commit/8197785ad4762465084485b041abd722f69bf344) generate help message based on the previous calls, todo: nub (@substack) - [3ffbdc3](https://github.com/bcoe/yargs/commit/3ffbdc33c8f5e83d4ea2ac60575ce119570c7ede) stub out new showHelp, better checks (@substack) - [d4e21f5](https://github.com/bcoe/yargs/commit/d4e21f56a4830f7de841900d3c79756fb9886184) let .options() take single options too (@substack) - [3c4cf29](https://github.com/bcoe/yargs/commit/3c4cf2901a29bac119cca8e983028d8669230ec6) .options() is now heaps simpler (@substack) - [89f0d04](https://github.com/bcoe/yargs/commit/89f0d043cbccd302f10ab30c2069e05d2bf817c9) defaults work again, all tests pass (@substack) - [dd87333](https://github.com/bcoe/yargs/commit/dd8733365423006a6e4156372ebb55f98323af58) update test error messages, down to 2 failing tests (@substack) - [53f7bc6](https://github.com/bcoe/yargs/commit/53f7bc626b9875f2abdfc5dd7a80bde7f14143a3) fix for bools doubling up, passes the parse test again, others fail (@substack) - [2213e2d](https://github.com/bcoe/yargs/commit/2213e2ddc7263226fba717fb041dc3fde9bc2ee4) refactored for an argv getter, failing several tests (@substack) - [d1e7379](https://github.com/bcoe/yargs/commit/d1e737970f15c6c006bebdd8917706827ff2f0f2) just rescan for now, alias test passes (@substack) - [b2f8c99](https://github.com/bcoe/yargs/commit/b2f8c99cc477a8eb0fdf4cf178e1785b63185cfd) failing alias test (@substack) - [d0c0174](https://github.com/bcoe/yargs/commit/d0c0174daa144bfb6dc7290fdc448c393c475e15) .alias() (@substack) - [d85f431](https://github.com/bcoe/yargs/commit/d85f431ad7d07b058af3f2a57daa51495576c164) [api] Remove `.describe()` in favor of building upon the existing `.usage()` API (@indexzero) - [edbd527](https://github.com/bcoe/yargs/commit/edbd5272a8e213e71acd802782135c7f9699913a) [doc api] Add `.describe()`, `.options()`, and `.showHelp()` methods along with example. (@indexzero) - [be4902f](https://github.com/bcoe/yargs/commit/be4902ff0961ae8feb9093f2c0a4066463ded2cf) updates for coffee since it now does argv the node way (@substack) - [e24cb23](https://github.com/bcoe/yargs/commit/e24cb23798ee64e53b60815e7fda78b87f42390c) more general coffeescript detection (@substack) - [78ac753](https://github.com/bcoe/yargs/commit/78ac753e5d0ec32a96d39d893272afe989e42a4d) Don't trigger the CoffeeScript hack when running under node_g. (@papandreou) - [bcfe973](https://github.com/bcoe/yargs/commit/bcfe9731d7f90d4632281b8a52e8d76eb0195ae6) .string() but failing test (@substack) - [1987aca](https://github.com/bcoe/yargs/commit/1987aca28c7ba4e8796c07bbc547cb984804c826) test hex strings (@substack) - [ef36db3](https://github.com/bcoe/yargs/commit/ef36db32259b0b0d62448dc907c760e5554fb7e7) more keywords (@substack) - [cc53c56](https://github.com/bcoe/yargs/commit/cc53c56329960bed6ab077a79798e991711ba01d) Added camelCase function that converts --multi-word-option to camel case (so it becomes argv.multiWordOption). (@papandreou) - [60b57da](https://github.com/bcoe/yargs/commit/60b57da36797716e5783a633c6d5c79099016d45) fixed boolean bug by rescanning (@substack) - [dff6d07](https://github.com/bcoe/yargs/commit/dff6d078d97f8ac503c7d18dcc7b7a8c364c2883) boolean examples (@substack) - [0e380b9](https://github.com/bcoe/yargs/commit/0e380b92c4ef4e3c8dac1da18b5c31d85b1d02c9) boolean() with passing test (@substack) - [62644d4](https://github.com/bcoe/yargs/commit/62644d4bffbb8d1bbf0c2baf58a1d14a6359ef07) coffee compatibility with node regex for versions too (@substack) - [430fafc](https://github.com/bcoe/yargs/commit/430fafcf1683d23774772826581acff84b456827) argv._ fixed by fixing the coffee detection (@substack) - [343b8af](https://github.com/bcoe/yargs/commit/343b8afefd98af274ebe21b5a16b3a949ec5429f) whichNodeArgs test fails too (@substack) - [63df2f3](https://github.com/bcoe/yargs/commit/63df2f371f31e63d7f1dec2cbf0022a5f08da9d2) replicated mnot's bug in whichNodeEmpty test (@substack) - [35473a4](https://github.com/bcoe/yargs/commit/35473a4d93a45e5e7e512af8bb54ebb532997ae1) test for ./bin usage (@substack) - [13df151](https://github.com/bcoe/yargs/commit/13df151e44228eed10e5441c7cd163e086c458a4) don't coerce booleans to numbers (@substack) - [85f8007](https://github.com/bcoe/yargs/commit/85f8007e93b8be7124feea64b1f1916d8ba1894a) package bump for automatic number conversion (@substack) - [8f17014](https://github.com/bcoe/yargs/commit/8f170141cded4ccc0c6d67a849c5bf996aa29643) updated readme and examples with new auto-numberification goodness (@substack) - [73dc901](https://github.com/bcoe/yargs/commit/73dc9011ac968e39b55e19e916084a839391b506) auto number conversion works yay (@substack) - [bcec56b](https://github.com/bcoe/yargs/commit/bcec56b3d031e018064cbb691539ccc4f28c14ad) failing test for not-implemented auto numification (@substack) - [ebd2844](https://github.com/bcoe/yargs/commit/ebd2844d683feeac583df79af0e5124a7a7db04e) odd that eql doesn't check types careflly (@substack) - [fd854b0](https://github.com/bcoe/yargs/commit/fd854b02e512ce854b76386d395672a7969c1bc4) package author + keywords (@substack) - [656a1d5](https://github.com/bcoe/yargs/commit/656a1d5a1b7c0e49d72e80cb13f20671d56f76c6) updated readme with .default() stuff (@substack) - [cd7f8c5](https://github.com/bcoe/yargs/commit/cd7f8c55f0b82b79b690d14c5f806851236998a1) passing tests for new .default() behavior (@substack) - [932725e](https://github.com/bcoe/yargs/commit/932725e39ce65bc91a0385a5fab659a5fa976ac2) new default() thing for setting default key/values (@substack) - [4e6c7ab](https://github.com/bcoe/yargs/commit/4e6c7aba6374ac9ebc6259ecf91f13af7bce40e3) test for coffee usage (@substack) - [d54ffcc](https://github.com/bcoe/yargs/commit/d54ffccf2a5a905f51ed5108f7c647f35d64ae23) new --key value style with passing tests. NOTE: changes existing behavior (@substack) - [ed2a2d5](https://github.com/bcoe/yargs/commit/ed2a2d5d828100ebeef6385c0fb88d146a5cfe9b) package bump for summatix's coffee script fix (@substack) - [75a975e](https://github.com/bcoe/yargs/commit/75a975eed8430d28e2a79dc9e6d819ad545f4587) Added support for CoffeeScript (@summatix) - [56b2b1d](https://github.com/bcoe/yargs/commit/56b2b1de8d11f8a2b91979d8ae2d6db02d8fe64d) test coverage for the falsy check() usage (@substack) - [a4843a9](https://github.com/bcoe/yargs/commit/a4843a9f0e69ffb4afdf6a671d89eb6f218be35d) check bug fixed plus a handy string (@substack) - [857bd2d](https://github.com/bcoe/yargs/commit/857bd2db933a5aaa9cfecba0ced2dc9b415f8111) tests for demandCount, back up to 100% coverage (@substack) - [073b776](https://github.com/bcoe/yargs/commit/073b7768ebd781668ef05c13f9003aceca2f5c35) call demandCount from demand (@substack) - [4bd4b7a](https://github.com/bcoe/yargs/commit/4bd4b7a085c8b6ce1d885a0f486cc9865cee2db1) add demandCount to check for the number of arguments in the _ list (@marshall) - [b8689ac](https://github.com/bcoe/yargs/commit/b8689ac68dacf248119d242bba39a41cb0adfa07) Rebase checks. That will be its own module eventually. (@substack) - [e688370](https://github.com/bcoe/yargs/commit/e688370b576f0aa733c3f46183df69e1b561668e) a $0 like in perl (@substack) - [2e5e196](https://github.com/bcoe/yargs/commit/2e5e1960fc19afb21fb3293752316eaa8bcd3609) usage test hacking around process and console (@substack) - [fcc3521](https://github.com/bcoe/yargs/commit/fcc352163fbec6a1dfe8caf47a0df39de24fe016) description pun (@substack) - [87a1fe2](https://github.com/bcoe/yargs/commit/87a1fe29037ca2ca5fefda85141aaeb13e8ce761) mit/x11 license (@substack) - [8d089d2](https://github.com/bcoe/yargs/commit/8d089d24cd687c0bde3640a96c09b78f884900dd) bool example is more consistent and also shows off short option grouping (@substack) - [448d747](https://github.com/bcoe/yargs/commit/448d7473ac68e8e03d8befc9457b0d9e21725be0) start of the readme and examples (@substack) - [da74dea](https://github.com/bcoe/yargs/commit/da74dea799a9b59dbf022cbb8001bfdb0d52eec9) more tests for long and short captures (@substack) - [ab6387e](https://github.com/bcoe/yargs/commit/ab6387e6769ca4af82ca94c4c67c7319f0d9fcfa) silly bug in the tests with s/not/no/, all tests pass now (@substack) - [102496a](https://github.com/bcoe/yargs/commit/102496a319e8e06f6550d828fc2f72992c7d9ecc) hack an instance for process.argv onto Argv so the export can be called to create an instance or used for argv, which is the most common case (@substack) - [a01caeb](https://github.com/bcoe/yargs/commit/a01caeb532546d19f68f2b2b87f7036cfe1aaedd) divide example (@substack) - [443da55](https://github.com/bcoe/yargs/commit/443da55736acbaf8ff8b04d1b9ce19ab016ddda2) start of the lib with a package.json (@substack)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/README.md","tags":[],"body":"yargs ======== Yargs be a node.js library fer hearties tryin' ter parse optstrings. With yargs, ye be havin' a map that leads straight to yer treasure! Treasure of course, being a simple option hash. [![Build Status][travis-image]][travis-url] [![Dependency Status][gemnasium-image]][gemnasium-url] [![Coverage Status][coveralls-image]][coveralls-url] [![NPM version][npm-image]][npm-url] [![Windows Tests][windows-image]][windows-url] [![js-standard-style][standard-image]][standard-url] [![standard-version][standard-version-image]][standard-version-url] > Yargs is the official successor to optimist. Please feel free to submit issues and pull requests. If you'd like to contribute and don't know where to start, have a look at [the issue list](https://github.com/yargs/yargs/issues) :) examples ======== With yargs, the options be just a hash! ------------------------------------------------------------------- plunder.js: ````javascript #!/usr/bin/env node var argv = require('yargs').argv; if (argv.ships > 3 && argv.distance = 0 && console.log.apply(console, arguments); } function INFO() { VERBOSE_LEVEL >= 1 && console.log.apply(console, arguments); } function DEBUG() { VERBOSE_LEVEL >= 2 && console.log.apply(console, arguments); } WARN(\"Showing only important stuff\"); INFO(\"Showing semi-important stuff too\"); DEBUG(\"Extra chatty mode\"); ```` *** $ node count.js Showing only important stuff $ node count.js -v Showing only important stuff Showing semi-important stuff too $ node count.js -vv Showing only important stuff Showing semi-important stuff too Extra chatty mode $ node count.js -v --verbose Showing only important stuff Showing semi-important stuff too Extra chatty mode Tell users how to use yer options and make demands. ------------------------------------------------- area.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .usage('Usage: $0 -w [num] -h [num]') .demand(['w','h']) .argv; console.log(\"The area is:\", argv.w * argv.h); ```` *** $ ./area.js -w 55 -h 11 The area is: 605 $ node ./area.js -w 4.91 -w 2.51 Usage: area.js -w [num] -h [num] Options: -w [required] -h [required] Missing required arguments: h After yer demands have been met, demand more! Ask for non-hyphenated arguments! ----------------------------------------- demand_count.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .demand(2) .argv; console.dir(argv); ```` *** $ ./demand_count.js a Not enough non-option arguments: got 1, need at least 2 $ ./demand_count.js a b { _: [ 'a', 'b' ], '$0': 'demand_count.js' } $ ./demand_count.js a b c { _: [ 'a', 'b', 'c' ], '$0': 'demand_count.js' } EVEN MORE SHIVER ME TIMBERS! ------------------ default_singles.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .default('x', 10) .default('y', 10) .argv ; console.log(argv.x + argv.y); ```` *** $ ./default_singles.js -x 5 15 default_hash.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .default({ x : 10, y : 10 }) .argv ; console.log(argv.x + argv.y); ```` *** $ ./default_hash.js -y 7 17 And if you really want to get all descriptive about it... --------------------------------------------------------- boolean_single.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .boolean('v') .argv ; console.dir(argv.v); console.dir(argv._); ```` *** $ ./boolean_single.js -v \"me hearties\" yo ho true [ 'me hearties', 'yo', 'ho' ] boolean_double.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .boolean(['x','y','z']) .argv ; console.dir([ argv.x, argv.y, argv.z ]); console.dir(argv._); ```` *** $ ./boolean_double.js -x -z one two three [ true, false, true ] [ 'one', 'two', 'three' ] Yargs is here to help you... --------------------------- Ye can describe parameters fer help messages and set aliases. Yargs figures out how ter format a handy help string automatically. line_count.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .usage('Usage: $0 [options]') .command('count', 'Count the lines in a file') .demand(1) .example('$0 count -f foo.js', 'count the lines in the given file') .demand('f') .alias('f', 'file') .nargs('f', 1) .describe('f', 'Load a file') .help('h') .alias('h', 'help') .epilog('copyright 2015') .argv; var fs = require('fs'); var s = fs.createReadStream(argv.file); var lines = 0; s.on('data', function (buf) { lines += buf.toString().match(/\\n/g).length; }); s.on('end', function () { console.log(lines); }); ```` *** $ node line_count.js count Usage: line_count.js [options] Commands: count Count the lines in a file Options: -f, --file Load a file [required] -h, --help Show help [boolean] Examples: line_count.js count -f foo.js count the lines in the given file copyright 2015 Missing required arguments: f $ node line_count.js count --file line_count.js 26 $ node line_count.js count -f line_count.js 26 methods ======= By itself, ````javascript require('yargs').argv ```` will use the `process.argv` array to construct the `argv` object. You can pass in the `process.argv` yourself: ````javascript require('yargs')([ '-x', '1', '-y', '2' ]).argv ```` or use `.parse()` to do the same thing: ````javascript require('yargs').parse([ '-x', '1', '-y', '2' ]) ```` The rest of these methods below come in just before the terminating `.argv`. .alias(key, alias) ------------------ Set key names as equivalent such that updates to a key will propagate to aliases and vice-versa. Optionally `.alias()` can take an object that maps keys to aliases. Each key of this object should be the canonical version of the option, and each value should be a string or an array of strings. .argv ----- Get the arguments as a plain old object. Arguments without a corresponding flag show up in the `argv._` array. The script name or node command is available at `argv.$0` similarly to how `$0` works in bash or perl. If `yargs` is executed in an environment that embeds node and there's no script name (e.g. [Electron](http://electron.atom.io/) or [nw.js](http://nwjs.io/)), it will ignore the first parameter since it expects it to be the script name. In order to override this behavior, use `.parse(process.argv.slice(1))` instead of `.argv` and the first parameter won't be ignored. .array(key) ---------- Tell the parser to interpret `key` as an array. If `.array('foo')` is set, `--foo foo bar` will be parsed as `['foo', 'bar']` rather than as `'foo'`. .boolean(key) ------------- Interpret `key` as a boolean. If a non-flag option follows `key` in `process.argv`, that string won't get set as the value of `key`. `key` will default to `false`, unless a `default(key, undefined)` is explicitly set. If `key` is an array, interpret all the elements as booleans. .check(fn) ---------- Check that certain conditions are met in the provided arguments. `fn` is called with two arguments, the parsed `argv` hash and an array of options and their aliases. If `fn` throws or returns a non-truthy value, show the thrown error, usage information, and exit. .choices(key, choices) ---------------------- Limit valid values for `key` to a predefined set of `choices`, given as an array or as an individual value. ```js var argv = require('yargs') .alias('i', 'ingredient') .describe('i', 'choose your sandwich ingredients') .choices('i', ['peanut-butter', 'jelly', 'banana', 'pickles']) .help('help') .argv ``` If this method is called multiple times, all enumerated values will be merged together. Choices are generally strings or numbers, and value matching is case-sensitive. Optionally `.choices()` can take an object that maps multiple keys to their choices. Choices can also be specified as `choices` in the object given to `option()`. ```js var argv = require('yargs') .option('size', { alias: 's', describe: 'choose a size', choices: ['xs', 's', 'm', 'l', 'xl'] }) .argv ``` .command(cmd, desc, [builder], [handler]) ----------------------------------------- .command(cmd, desc, [module]) ----------------------------- .command(module) ---------------- Document the commands exposed by your application. Use `desc` to provide a description for each command your application accepts (the values stored in `argv._`). Set `desc` to `false` to create a hidden command. Hidden commands don't show up in the help output and aren't available for completion. Optionally, you can provide a `builder` object to give hints about the options that your command accepts: ```js yargs.command('get', 'make a get HTTP request', { url: { alias: 'u', default: 'http://yargs.js.org/' } }) .help() .argv ``` `builder` can also be a function. This function is executed with a `yargs` instance, and can be used to provide _advanced_ command specific help: ```js yargs.command('get', 'make a get HTTP request', function (yargs) { return yargs.option('url', { alias: 'u', default: 'http://yargs.js.org/' }) }) .help() .argv ``` You can also provide a handler function, which will be executed with the parsed `argv` object: ```js yargs .command( 'get', 'make a get HTTP request', function (yargs) { return yargs.option('u', { alias: 'url', describe: 'the URL to make an HTTP request to' }) }, function (argv) { console.log(argv.url) } ) .help() .argv ``` ### Positional Arguments Commands can accept _optional_ and _required_ positional arguments. Required positional arguments take the form ``, and optional arguments take the form `[bar]`. The parsed positional arguments will be populated in `argv`: ```js yargs.command('get [proxy]', 'make a get HTTP request') .help() .argv ``` #### Variadic Positional Arguments The last positional argument can optionally accept an array of values, by using the `..` operator: ```js yargs.command('download [files..]', 'download several files') .help() .argv ``` ### Providing a Command Module For complicated commands you can pull the logic into a module. A module simply needs to export: * `exports.command`: string that executes this command when given on the command line, may contain positional args * `exports.describe`: string used as the description for the command in help text, use `false` for a hidden command * `exports.builder`: object declaring the options the command accepts, or a function accepting and returning a yargs instance * `exports.handler`: a function which will be passed the parsed argv. ```js // my-module.js exports.command = 'get [proxy]' exports.describe = 'make a get HTTP request' exports.builder = { banana: { default: 'cool' }, batman: { default: 'sad' } } exports.handler = function (argv) { // do something with argv. } ``` You then register the module like so: ```js yargs.command(require('my-module')) .help() .argv ``` Or if the module does not export `command` and `describe` (or if you just want to override them): ```js yargs.command('get [proxy]', 'make a get HTTP request', require('my-module')) .help() .argv ``` .completion([cmd], [description], [fn]); ---------------------------------------- Enable bash-completion shortcuts for commands and options. `cmd`: When present in `argv._`, will result in the `.bashrc` completion script being outputted. To enable bash completions, concat the generated script to your `.bashrc` or `.bash_profile`. `description`: Provide a description in your usage instructions for the command that generates bash completion scripts. `fn`: Rather than relying on yargs' default completion functionality, which shiver me timbers is pretty awesome, you can provide your own completion method. If invoked without parameters, `.completion()` will make `completion` the command to output the completion script. ```js var argv = require('yargs') .completion('completion', function(current, argv) { // 'current' is the current command being completed. // 'argv' is the parsed arguments so far. // simply return an array of completions. return [ 'foo', 'bar' ]; }) .argv; ``` You can also provide asynchronous completions. ```js var argv = require('yargs') .completion('completion', function(current, argv, done) { setTimeout(function() { done([ 'apple', 'banana' ]); }, 500); }) .argv; ``` But wait, there's more! You can return an asynchronous promise. ```js var argv = require('yargs') .completion('completion', function(current, argv, done) { return new Promise(function (resolve, reject) { setTimeout(function () { resolve(['apple', 'banana']) }, 10) }) }) .argv; ``` .config([key], [description], [parseFn]) ------------------------------------------------------------- .config(object) --------------- Tells the parser that if the option specified by `key` is passed in, it should be interpreted as a path to a JSON config file. The file is loaded and parsed, and its properties are set as arguments. If invoked without parameters, `.config()` will make `--config` the option to pass the JSON config file. An optional `description` can be provided to customize the config (`key`) option in the usage string. An optional `parseFn` can be used to provide a custom parser. The parsing function must be synchronous, and should return an object containing key value pairs or an error. ```js var argv = require('yargs') .config('settings', function (configPath) { return JSON.parse(fs.readFileSync(configPath, 'utf-8')) }) .argv ``` You can also pass an explicit configuration `object`, it will be parsed and its properties will be set as arguments. ```js var argv = require('yargs') .config({foo: 1, bar: 2}) .argv console.log(argv) ``` ``` $ node test.js { _: [], foo: 1, bar: 2, '$0': 'test.js' } ``` .count(key) ------------ Interpret `key` as a boolean flag, but set its parsed value to the number of flag occurrences rather than `true` or `false`. Default value is thus `0`. .default(key, value, [description]) --------------------------------------------------------- .defaults(key, value, [description]) ------------------------------------ **Note:** The `.defaults()` alias is deprecated. It will be removed in the next major version. Set `argv[key]` to `value` if no option was specified in `process.argv`. Optionally `.default()` can take an object that maps keys to default values. But wait, there's more! The default value can be a `function` which returns a value. The name of the function will be used in the usage string: ```js var argv = require('yargs') .default('random', function randomValue() { return Math.random() * 256; }).argv; ``` Optionally, `description` can also be provided and will take precedence over displaying the value in the usage instructions: ```js .default('timeout', 60000, '(one-minute)') ``` .demand(key, [msg | boolean]) ------------------------------ .demand(count, [max], [msg]) ------------------------------ If `key` is a string, show the usage information and exit if `key` wasn't specified in `process.argv`. If `key` is a number, demand at least as many non-option arguments, which show up in `argv._`. A second number can also optionally be provided, which indicates the maximum number of non-option arguments. If `key` is an array, demand each element. If a `msg` string is given, it will be printed when the argument is missing, instead of the standard error message. This is especially helpful for the non-option arguments in `argv._`. If a `boolean` value is given, it controls whether the option is demanded; this is useful when using `.options()` to specify command line parameters. A combination of `.demand(1)` and `.strict()` will allow you to require a user to pass at least one command: ```js var argv = require('yargs') .command('install', 'tis a mighty fine package to install') .demand(1) .strict() .argv ``` Similarly, you can require a command and arguments at the same time: ```js var argv = require('yargs') .command('install', 'tis a mighty fine package to install') .demand(1, ['w', 'm']) .strict() .argv ``` .describe(key, desc) -------------------- Describe a `key` for the generated usage information. Optionally `.describe()` can take an object that maps keys to descriptions. .detectLocale(boolean) ----------- Should yargs attempt to detect the os' locale? Defaults to `true`. .env([prefix]) -------------- Tell yargs to parse environment variables matching the given prefix and apply them to argv as though they were command line arguments. Use the \"__\" separator in the environment variable to indicate nested options. (e.g. prefix_nested__foo => nested.foo) If this method is called with no argument or with an empty string or with `true`, then all env vars will be applied to argv. Program arguments are defined in this order of precedence: 1. Command line args 2. Config file 3. Env var 4. Configured defaults ```js var argv = require('yargs') .env('MY_PROGRAM') .option('f', { alias: 'fruit-thing', default: 'apple' }) .argv console.log(argv) ``` ``` $ node fruity.js { _: [], f: 'apple', 'fruit-thing': 'apple', fruitThing: 'apple', '$0': 'fruity.js' } ``` ``` $ MY_PROGRAM_FRUIT_THING=banana node fruity.js { _: [], fruitThing: 'banana', f: 'banana', 'fruit-thing': 'banana', '$0': 'fruity.js' } ``` ``` $ MY_PROGRAM_FRUIT_THING=banana node fruity.js -f cat { _: [], f: 'cat', 'fruit-thing': 'cat', fruitThing: 'cat', '$0': 'fruity.js' } ``` Env var parsing is disabled by default, but you can also explicitly disable it by calling `.env(false)`, e.g. if you need to undo previous configuration. .epilog(str) ------------ .epilogue(str) -------------- A message to print at the end of the usage instructions, e.g. ```js var argv = require('yargs') .epilogue('for more information, find our manual at http://example.com'); ``` .example(cmd, desc) ------------------- Give some example invocations of your program. Inside `cmd`, the string `$0` will get interpolated to the current script name or node command for the present script similar to how `$0` works in bash or perl. Examples will be printed out as part of the help message. .exitProcess(enable) ---------------------------------- By default, yargs exits the process when the user passes a help flag, uses the `.version` functionality, or when validation fails. Calling `.exitProcess(false)` disables this behavior, enabling further actions after yargs have been validated. .fail(fn) --------- Method to execute when a failure occurs, rather than printing the failure message. `fn` is called with the failure message that would have been printed and the `Error` instance originally thrown, if any. ```js var argv = require('yargs') .fail(function (msg, err) { if (err) throw err // preserve stack console.error('You broke it!') console.error(msg) process.exit(1) }) .argv ``` .getCompletion(args, done); --------------------------- Allows to programmatically get completion choices for any line. `args`: An array of the words in the command line to complete. `done`: The callback to be called with the resulting completions. For example: ```js require('yargs') .option('foobar', {}) .option('foobaz', {}) .completion() .getCompletion(['./test.js', '--foo'], function (completions) { console.log(completions) }) ``` Outputs the same completion choices as `./test.js --foo`TAB: `--foobar` and `--foobaz` .global(globals) ------------ Indicate that an option (or group of options) should not be reset when a command is executed, as an example: ```js var argv = require('yargs') .option('a', { alias: 'all', default: true }) .option('n', { alias: 'none', default: true }) .command('foo', 'foo command', function (yargs) { return yargs.option('b', { alias: 'bar' }) }) .help('help') .global('a') .argv ``` If the `foo` command is executed the `all` option will remain, but the `none` option will have been eliminated. `help`, `version`, and `completion` options default to being global. .group(key(s), groupName) -------------------- Given a key, or an array of keys, places options under an alternative heading when displaying usage instructions, e.g., ```js var yargs = require('yargs')(['--help']) .help() .group('batman', 'Heroes:') .describe('batman', \"world's greatest detective\") .wrap(null) .argv ``` *** Heroes: --batman world's greatest detective Options: --help Show help [boolean] .help([option, [description]]) ------------------------------ Add an option (e.g. `--help`) that displays the usage string and exits the process. If present, the `description` parameter customizes the description of the help option in the usage string. If invoked without parameters, `.help()` will make `--help` the option to trigger help output. Example: ```js var yargs = require(\"yargs\")(['--help']) .usage(\"$0 -operand1 number -operand2 number -operation [add|subtract]\") .help() .argv ``` Later on, `argv` can be retrieved with `yargs.argv`. .implies(x, y) -------------- Given the key `x` is set, it is required that the key `y` is set. Optionally `.implies()` can accept an object specifying multiple implications. .locale() --------- Return the locale that yargs is currently using. By default, yargs will auto-detect the operating system's locale so that yargs-generated help content will display in the user's language. To override this behavior with a static locale, pass the desired locale as a string to this method (see below). .locale(locale) --------------- Override the auto-detected locale from the user's operating system with a static locale. Note that the OS locale can be modified by setting/exporting the `LC_ALL` environment variable. ```js var argv = require('yargs') .usage('./$0 - follow ye instructions true') .option('option', { alias: 'o', describe: \"'tis a mighty fine option\", demand: true }) .command('run', \"Arrr, ya best be knowin' what yer doin'\") .example('$0 run foo', \"shiver me timbers, here's an example for ye\") .help('help') .wrap(70) .locale('pirate') .argv ``` *** ```shell ./test.js - follow ye instructions true Choose yer command: run Arrr, ya best be knowin' what yer doin' Options for me hearties! --option, -o 'tis a mighty fine option [requi-yar-ed] --help Parlay this here code of conduct [boolean] Ex. marks the spot: test.js run foo shiver me timbers, here's an example for ye Ye be havin' to set the followin' argument land lubber: option ``` Locales currently supported: * **de:** German. * **en:** American English. * **es:** Spanish. * **fr:** French. * **id:** Indonesian. * **it:** Italian. * **ja:** Japanese. * **ko:** Korean. * **nb:** Norwegian Bokmål. * **pirate:** American Pirate. * **pl:** Polish. * **pt:** Portuguese. * **pt_BR:** Brazilian Portuguese. * **tr:** Turkish. * **zh:** Chinese. To submit a new translation for yargs: 1. use `./locales/en.json` as a starting point. 2. submit a pull request with the new locale file. *The [Microsoft Terminology Search](http://www.microsoft.com/Language/en-US/Search.aspx) can be useful for finding the correct terminology in your locale.* .nargs(key, count) ----------- The number of arguments that should be consumed after a key. This can be a useful hint to prevent parsing ambiguity. For example: ```js var argv = require('yargs') .nargs('token', 1) .parse(['--token', '-my-token']); ``` parses as: `{ _: [], token: '-my-token', '$0': 'node test' }` Optionally `.nargs()` can take an object of `key`/`narg` pairs. .normalize(key) --------------- The key provided represents a path and should have `path.normalize()` applied. .number(key) ------------ Tell the parser to always interpret `key` as a number. If `key` is an array, all elements will be parsed as numbers. If the option is given on the command line without a value, `argv` will be populated with `undefined`. If the value given on the command line cannot be parsed as a number, `argv` will be populated with `NaN`. Note that decimals, hexadecimals, and scientific notation are all accepted. ```js var argv = require('yargs') .number('n') .number(['width', 'height']) .argv ``` .option(key, opt) ----------------- .options(key, opt) ------------------ Instead of chaining together `.alias().demand().default().describe().string()`, you can specify keys in `opt` for each of the chainable methods. For example: ````javascript var argv = require('yargs') .option('f', { alias: 'file', demand: true, default: '/etc/passwd', describe: 'x marks the spot', type: 'string' }) .argv ; ```` is the same as ````javascript var argv = require('yargs') .alias('f', 'file') .demand('f') .default('f', '/etc/passwd') .describe('f', 'x marks the spot') .string('f') .argv ; ```` Optionally `.options()` can take an object that maps keys to `opt` parameters. ````javascript var argv = require('yargs') .options({ 'f': { alias: 'file', demand: true, default: '/etc/passwd', describe: 'x marks the spot', type: 'string' } }) .argv ; ```` Valid `opt` keys include: - `alias`: string or array of strings, alias(es) for the canonical option key, see [`alias()`](#alias) - `array`: boolean, interpret option as an array, see [`array()`](#array) - `boolean`: boolean, interpret option as a boolean flag, see [`boolean()`](#boolean) - `choices`: value or array of values, limit valid option arguments to a predefined set, see [`choices()`](#choices) - `config`: boolean, interpret option as a path to a JSON config file, see [`config()`](#config) - `configParser`: function, provide a custom config parsing function, see [`config()`](#config) - `count`: boolean, interpret option as a count of boolean flags, see [`count()`](#count) - `default`: value, set a default value for the option, see [`default()`](#default) - `defaultDescription`: string, use this description for the default value in help content, see [`default()`](#default) - `demand`/`require`/`required`: boolean or string, demand the option be given, with optional error message, see [`demand()`](#demand) - `desc`/`describe`/`description`: string, the option description for help content, see [`describe()`](#describe) - `global`: boolean, indicate that this key should not be [reset](#reset) when a command is invoked, see [`global()`](#global) - `group`: string, when displaying usage instructions place the option under an alternative group heading, see [`group()`](#group) - `nargs`: number, specify how many arguments should be consumed for the option, see [`nargs()`](#nargs) - `normalize`: boolean, apply `path.normalize()` to the option, see [`normalize()`](#normalize) - `number`: boolean, interpret option as a number, [`number()`](#number) - `requiresArg`: boolean, require the option be specified with a value, see [`requiresArg()`](#requiresArg) - `skipValidation`: boolean, skips validation if the option is present, see [`skipValidation()`](#skipValidation) - `string`: boolean, interpret option as a string, see [`string()`](#string) - `type`: one of the following strings - `'array'`: synonymous for `array: true`, see [`array()`](#array) - `'boolean'`: synonymous for `boolean: true`, see [`boolean()`](#boolean) - `'count'`: synonymous for `count: true`, see [`count()`](#count) - `'number'`: synonymous for `number: true`, see [`number()`](#number) - `'string'`: synonymous for `string: true`, see [`string()`](#string) .parse(args) ------------ Parse `args` instead of `process.argv`. Returns the `argv` object. `args` may either be a pre-processed argv array, or a raw argument string. .pkgConf(key, [cwd]) ------------ Similar to [`config()`](#config), indicates that yargs should interpret the object from the specified key in package.json as a configuration object. `cwd` can optionally be provided, the package.json will be read from this location. .require(key, [msg | boolean]) ------------------------------ .required(key, [msg | boolean]) ------------------------------ An alias for [`demand()`](#demand). See docs there. .requiresArg(key) ----------------- Specifies either a single option key (string), or an array of options that must be followed by option values. If any option value is missing, show the usage information and exit. The default behavior is to set the value of any key not followed by an option value to `true`. .reset() -------- Reset the argument object built up so far. This is useful for creating nested command line interfaces. Use [global](#global) to specify keys that should not be reset. ```js var yargs = require('yargs') .usage('$0 command') .command('hello', 'hello command') .command('world', 'world command') .demand(1, 'must provide a valid command'), argv = yargs.argv, command = argv._[0]; if (command === 'hello') { yargs.reset() .usage('$0 hello') .help('h') .example('$0 hello', 'print the hello message!') .argv console.log('hello!'); } else if (command === 'world'){ yargs.reset() .usage('$0 world') .help('h') .example('$0 world', 'print the world message!') .argv console.log('world!'); } else { yargs.showHelp(); } ``` .showCompletionScript() ---------------------- Generate a bash completion script. Users of your application can install this script in their `.bashrc`, and yargs will provide completion shortcuts for commands and options. .showHelp(consoleLevel='error') --------------------------- Print the usage data using the [`console`](https://nodejs.org/api/console.html) function `consoleLevel` for printing. Example: ```js var yargs = require(\"yargs\") .usage(\"$0 -operand1 number -operand2 number -operation [add|subtract]\"); yargs.showHelp(); //prints to stderr using console.error() ``` Or, to print the usage data to `stdout` instead, you can specify the use of `console.log`: ```js yargs.showHelp(\"log\"); //prints to stdout using console.log() ``` Later on, `argv` can be retrieved with `yargs.argv`. .showHelpOnFail(enable, [message]) ---------------------------------- By default, yargs outputs a usage string if any error is detected. Use the `.showHelpOnFail()` method to customize this behavior. If `enable` is `false`, the usage string is not output. If the `message` parameter is present, this message is output after the error message. line_count.js: ````javascript #!/usr/bin/env node var argv = require('yargs') .usage('Count the lines in a file.\\nUsage: $0 -f ') .demand('f') .alias('f', 'file') .describe('f', 'Load a file') .string('f') .showHelpOnFail(false, 'Specify --help for available options') .help('help') .argv; // etc. ```` *** ``` $ node line_count.js Missing argument value: f Specify --help for available options ``` .skipValidation(key) ----------------- Specifies either a single option key (string), or an array of options. If any of the options is present, yargs validation is skipped. .strict() --------- Any command-line argument given that is not demanded, or does not have a corresponding description, will be reported as an error. .string(key) ------------ Tell the parser logic not to interpret `key` as a number or boolean. This can be useful if you need to preserve leading zeros in an input. If `key` is an array, interpret all the elements as strings. `.string('_')` will result in non-hyphenated arguments being interpreted as strings, regardless of whether they resemble numbers. .updateLocale(obj) ------------------ .updateStrings(obj) ------------------ Override the default strings used by yargs with the key/value pairs provided in `obj`: ```js var argv = require('yargs') .command('run', 'the run command') .help('help') .updateStrings({ 'Commands:': 'My Commands -->\\n' }) .wrap(null) .argv ``` *** ```shell My Commands --> run the run command Options: --help Show help [boolean] ``` If you explicitly specify a `locale()`, you should do so *before* calling `updateStrings()`. .usage(message, [opts]) --------------------- Set a usage message to show which commands to use. Inside `message`, the string `$0` will get interpolated to the current script name or node command for the present script similar to how `$0` works in bash or perl. `opts` is optional and acts like calling `.options(opts)`. .version([option], [description], [version]) ---------------------------------------- Add an option (e.g. `--version`) that displays the version number (given by the `version` parameter) and exits the process. If no arguments are passed to `version` (`.version()`), yargs will parse the `package.json` of your module and use its `version` value. The default value of `option` is `--version`. You can provide a `function` for version, rather than a string. This is useful if you want to use a version stored in a location other than package.json: ```js var argv = require('yargs') .version(function() { return require('../lib/version').version; }) .argv; ``` .wrap(columns) -------------- Format usage output to wrap at `columns` many columns. By default wrap will be set to `Math.min(80, windowWidth)`. Use `.wrap(null)` to specify no column limit (no right-align). Use `.wrap(yargs.terminalWidth())` to maximize the width of yargs' usage instructions. parsing tricks ============== stop parsing ------------ Use `--` to stop parsing flags and stuff the remainder into `argv._`. $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4 { _: [ '-c', '3', '-d', '4' ], a: 1, b: 2, '$0': 'examples/reflect.js' } negate fields ------------- If you want to explicitly set a field to false instead of just leaving it undefined or to override a default you can do `--no-key`. $ node examples/reflect.js -a --no-b { _: [], a: true, b: false, '$0': 'examples/reflect.js' } numbers ------- Every argument that looks like a number (`!isNaN(Number(arg))`) is converted to one. This way you can just `net.createConnection(argv.port)` and you can add numbers out of `argv` with `+` without having that mean concatenation, which is super frustrating. duplicates ---------- If you specify a flag multiple times it will get turned into an array containing all the values in order. $ node examples/reflect.js -x 5 -x 8 -x 0 { _: [], x: [ 5, 8, 0 ], '$0': 'examples/reflect.js' } dot notation ------------ When you use dots (`.`s) in argument names, an implicit object path is assumed. This lets you organize arguments into nested objects. $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5 { _: [], foo: { bar: { baz: 33 }, quux: 5 }, '$0': 'examples/reflect.js' } short numbers ------------- Short numeric `-n5` style arguments work too: $ node examples/reflect.js -n123 -m456 { _: [], n: 123, m: 456, '$0': 'examples/reflect.js' } installation ============ With [npm](https://github.com/npm/npm), just do: npm install yargs or clone this project on github: git clone http://github.com/yargs/yargs.git To run the tests with npm, just do: npm test configuration ============= Using the `yargs` stanza in your `package.json` you can turn on and off some of yargs' parsing features: ```json { \"yargs\": { \"short-option-groups\": true, \"camel-case-expansion\": true, \"dot-notation\": true, \"parse-numbers\": true, \"boolean-negation\": true } } ``` See the [yargs-parser](https://github.com/yargs/yargs-parser#configuration) module for detailed documentation of this feature. inspired by =========== This module is loosely inspired by Perl's [Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm). [travis-url]: https://travis-ci.org/yargs/yargs [travis-image]: https://img.shields.io/travis/yargs/yargs.svg [gemnasium-url]: https://gemnasium.com/yargs/yargs [gemnasium-image]: https://img.shields.io/gemnasium/yargs/yargs.svg [coveralls-url]: https://coveralls.io/github/yargs/yargs [coveralls-image]: https://img.shields.io/coveralls/yargs/yargs.svg [npm-url]: https://www.npmjs.com/package/yargs [npm-image]: https://img.shields.io/npm/v/yargs.svg [windows-url]: https://ci.appveyor.com/project/bcoe/yargs [windows-image]: https://img.shields.io/appveyor/ci/bcoe/yargs/master.svg?label=Windows%20Tests [standard-image]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg [standard-url]: http://standardjs.com/ [standard-version-image]: https://img.shields.io/badge/release-standard%20version-brightgreen.svg [standard-version-url]: https://github.com/conventional-changelog/standard-version"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/camelcase/readme.md","tags":[],"body":"# camelcase [![Build Status](https://travis-ci.org/sindresorhus/camelcase.svg?branch=master)](https://travis-ci.org/sindresorhus/camelcase) > Convert a dash/dot/underscore/space separated string to camelCase: `foo-bar` → `fooBar` ## Install ``` $ npm install --save camelcase ``` ## Usage ```js const camelCase = require('camelcase'); camelCase('foo-bar'); //=> 'fooBar' camelCase('foo_bar'); //=> 'fooBar' camelCase('Foo-Bar'); //=> 'fooBar' camelCase('--foo.bar'); //=> 'fooBar' camelCase('__foo__bar__'); //=> 'fooBar' camelCase('foo bar'); //=> 'fooBar' console.log(process.argv[3]); //=> '--foo-bar' camelCase(process.argv[3]); //=> 'fooBar' camelCase('foo', 'bar'); //=> 'fooBar' camelCase('__foo__', '--bar'); //=> 'fooBar' ``` ## Related - [decamelize](https://github.com/sindresorhus/decamelize) - The inverse of this module - [uppercamelcase](https://github.com/SamVerschueren/uppercamelcase) - Like this module, but to PascalCase instead of camelCase ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/cliui/CHANGELOG.md","tags":[],"body":"# Change Log All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines. # [3.2.0](https://github.com/yargs/cliui/compare/v3.1.2...v3.2.0) (2016-04-11) ### Bug Fixes * reduces tarball size ([acc6c33](https://github.com/yargs/cliui/commit/acc6c33)) ### Features * adds standard-version for release management ([ff84e32](https://github.com/yargs/cliui/commit/ff84e32))"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/cliui/README.md","tags":[],"body":"# cliui [![Build Status](https://travis-ci.org/yargs/cliui.svg)](https://travis-ci.org/yargs/cliui) [![Coverage Status](https://coveralls.io/repos/yargs/cliui/badge.svg?branch=)](https://coveralls.io/r/yargs/cliui?branch=) [![NPM version](https://img.shields.io/npm/v/cliui.svg)](https://www.npmjs.com/package/cliui) [![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version) easily create complex multi-column command-line-interfaces. ## Example ```js var ui = require('cliui')({ width: 80 }) ui.div('Usage: $0 [command] [options]') ui.div({ text: 'Options:', padding: [2, 0, 2, 0] }) ui.div( { text: \"-f, --file\", width: 20, padding: [0, 4, 0, 4] }, { text: \"the file to load.\" + chalk.green(\"(if this description is long it wraps).\") , width: 20 }, { text: chalk.red(\"[required]\"), align: 'right' } ) console.log(ui.toString()) ``` ## Layout DSL cliui exposes a simple layout DSL: If you create a single `ui.row`, passing a string rather than an object: * `\\n`: characters will be interpreted as new rows. * `\\t`: characters will be interpreted as new columns. * `\\s`: characters will be interpreted as padding. **as an example...** ```js var ui = require('./')({ width: 60 }) ui.div( 'Usage: node ./bin/foo.js\\n' + ' \\t provide a regex\\n' + ' \\t provide a glob\\t [required]' ) console.log(ui.toString()) ``` **will output:** ```shell Usage: node ./bin/foo.js provide a regex provide a glob [required] ``` ## Methods ```js cliui = require('cliui') ``` ### cliui({width: integer}) Specify the maximum width of the UI being generated. ### cliui({wrap: boolean}) Enable or disable the wrapping of text in a column. ### cliui.div(column, column, column) Create a row with any number of columns, a column can either be a string, or an object with the following options: * **width:** the width of a column. * **align:** alignment, `right` or `center`. * **padding:** `[top, right, bottom, left]`. * **border:** should a border be placed around the div? ### cliui.span(column, column, column) Similar to `div`, except the next row will be appended without a new line being created."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/cliui/node_modules/strip-ansi/node_modules/ansi-regex/readme.md","tags":[],"body":"# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex) > Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save ansi-regex ``` ## Usage ```js var ansiRegex = require('ansi-regex'); ansiRegex().test('\\u001b[4mcake\\u001b[0m'); //=> true ansiRegex().test('cake'); //=> false '\\u001b[4mcake\\u001b[0m'.match(ansiRegex()); //=> ['\\u001b[4m', '\\u001b[0m'] ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/cliui/node_modules/strip-ansi/readme.md","tags":[],"body":"# strip-ansi [![Build Status](https://travis-ci.org/chalk/strip-ansi.svg?branch=master)](https://travis-ci.org/chalk/strip-ansi) > Strip [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save strip-ansi ``` ## Usage ```js var stripAnsi = require('strip-ansi'); stripAnsi('\\u001b[4mcake\\u001b[0m'); //=> 'cake' ``` ## Related - [strip-ansi-cli](https://github.com/chalk/strip-ansi-cli) - CLI for this module - [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes - [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/cliui/node_modules/wrap-ansi/readme.md","tags":[],"body":"# wrap-ansi [![Build Status](https://travis-ci.org/chalk/wrap-ansi.svg?branch=master)](https://travis-ci.org/chalk/wrap-ansi) [![Coverage Status](https://coveralls.io/repos/chalk/wrap-ansi/badge.svg?branch=master&service=github)](https://coveralls.io/github/chalk/wrap-ansi?branch=master) > Wordwrap a string with [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors_and_Styles) ## Install ``` $ npm install --save wrap-ansi ``` ## Usage ```js const chalk = require('chalk'); const wrapAnsi = require('wrap-ansi'); const input = 'The quick brown ' + chalk.red('fox jumped over ') + 'the lazy ' + chalk.green('dog and then ran away with the unicorn.'); console.log(wrapAnsi(input, 20)); ``` ## API ### wrapAnsi(input, columns, [options]) Wrap words to the specified column width. #### input Type: `string` String with ANSI escape codes. Like one styled by [`chalk`](https://github.com/chalk/chalk). #### columns Type: `number` Number of columns to wrap the text to. #### options.hard Type: `boolean` Default: `false` By default the wrap is soft, meaning long words may extend past the column width. Setting this to `true` will make it hard wrap at the column width. ## Related - [slice-ansi](https://github.com/chalk/slice-ansi) - Slice a string with ANSI escape codes - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right - [jsesc](https://github.com/mathiasbynens/jsesc) - Generate ASCII-only output from Unicode strings. Useful for creating test fixtures. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/decamelize/readme.md","tags":[],"body":"# decamelize [![Build Status](https://travis-ci.org/sindresorhus/decamelize.svg?branch=master)](https://travis-ci.org/sindresorhus/decamelize) > Convert a camelized string into a lowercased one with a custom separator > Example: `unicornRainbow` → `unicorn_rainbow` ## Install ``` $ npm install --save decamelize ``` ## Usage ```js const decamelize = require('decamelize'); decamelize('unicornRainbow'); //=> 'unicorn_rainbow' decamelize('unicornRainbow', '-'); //=> 'unicorn-rainbow' ``` ## API ### decamelize(input, [separator]) #### input Type: `string` #### separator Type: `string` Default: `_` ## Related See [`camelcase`](https://github.com/sindresorhus/camelcase) for the inverse. ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/lodash.assign/README.md","tags":[],"body":"# lodash.assign v4.0.9 The [lodash](https://lodash.com/) method `_.assign` exported as a [Node.js](https://nodejs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.assign ``` In Node.js: ```js var assign = require('lodash.assign'); ``` See the [documentation](https://lodash.com/docs#assign) or [package source](https://github.com/lodash/lodash/blob/4.0.9-npm-packages/lodash.assign) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/lodash.assign/node_modules/lodash.keys/README.md","tags":[],"body":"# lodash.keys v4.0.7 The [lodash](https://lodash.com/) method `_.keys` exported as a [Node.js](https://nodejs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.keys ``` In Node.js: ```js var keys = require('lodash.keys'); ``` See the [documentation](https://lodash.com/docs#keys) or [package source](https://github.com/lodash/lodash/blob/4.0.7-npm-packages/lodash.keys) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/lodash.assign/node_modules/lodash.rest/README.md","tags":[],"body":"# lodash.rest v4.0.3 The [lodash](https://lodash.com/) method `_.rest` exported as a [Node.js](https://nodejs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.rest ``` In Node.js: ```js var rest = require('lodash.rest'); ``` See the [documentation](https://lodash.com/docs#rest) or [package source](https://github.com/lodash/lodash/blob/4.0.3-npm-packages/lodash.rest) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/os-locale/node_modules/lcid/node_modules/invert-kv/readme.md","tags":[],"body":"# invert-kv [![Build Status](https://travis-ci.org/sindresorhus/invert-kv.svg?branch=master)](https://travis-ci.org/sindresorhus/invert-kv) > Invert the key/value of an object. Example: `{foo: 'bar'}` → `{bar: 'foo'}` ## Install ```sh $ npm install --save invert-kv ``` ## Usage ```js var invertKv = require('invert-kv'); invertKv({foo: 'bar', unicorn: 'rainbow'}); //=> {bar: 'foo', rainbow: 'unicorn'} ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/os-locale/node_modules/lcid/readme.md","tags":[],"body":"# lcid [![Build Status](https://travis-ci.org/sindresorhus/lcid.svg?branch=master)](https://travis-ci.org/sindresorhus/lcid) > Mapping between [standard locale identifiers](http://en.wikipedia.org/wiki/Locale) and [Windows locale identifiers (LCID)](http://en.wikipedia.org/wiki/Locale#Specifics_for_Microsoft_platforms) Based on the [mapping](https://github.com/python/cpython/blob/be2a1a76fa43bb1ea1b3577bb5bdd506a2e90e37/Lib/locale.py#L1395-L1604) used in the Python standard library. The mapping itself is just a [JSON file](lcid.json) and can be used wherever. ## Install ``` $ npm install --save lcid ``` ## Usage ```js var lcid = require('lcid'); lcid.from(1044); //=> 'nb_NO' lcid.to('nb_NO'); //=> 1044 lcid.all; //=> {'af_ZA': 1078, ...} ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/os-locale/readme.md","tags":[],"body":"# os-locale [![Build Status](https://travis-ci.org/sindresorhus/os-locale.svg?branch=master)](https://travis-ci.org/sindresorhus/os-locale) > Get the system [locale](http://en.wikipedia.org/wiki/Locale) Useful for localizing your module or app. POSIX systems: The returned locale refers to the [`LC_MESSAGE`](http://www.gnu.org/software/libc/manual/html_node/Locale-Categories.html#Locale-Categories) category, suitable for selecting the language used in the user interface for message translation. ## Install ``` $ npm install --save os-locale ``` ## Usage ```js var osLocale = require('os-locale'); osLocale(function (err, locale) { console.log(locale); //=> 'en_US' }); ``` ## API ### osLocale([options], callback(error, locale)) ### osLocale.sync([options]) Returns the locale. #### options.spawn Type: `boolean` Default: `true` Set to `false` to avoid spawning subprocesses and instead only resolve the locale from environment variables. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/find-up/node_modules/path-exists/readme.md","tags":[],"body":"# path-exists [![Build Status](https://travis-ci.org/sindresorhus/path-exists.svg?branch=master)](https://travis-ci.org/sindresorhus/path-exists) > Check if a path exists Because [`fs.exists()`](https://nodejs.org/api/fs.html#fs_fs_exists_path_callback) is being [deprecated](https://github.com/iojs/io.js/issues/103), but there's still a genuine use-case of being able to check if a path exists for other purposes than doing IO with it. Never use this before handling a file though: > In particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions: another process may remove the file between the calls to `fs.exists()` and `fs.open()`. Just open the file and handle the error when it's not there. ## Install ``` $ npm install --save path-exists ``` ## Usage ```js // foo.js var pathExists = require('path-exists'); pathExists('foo.js').then(function (exists) { console.log(exists); //=> true }); ``` ## API ### pathExists(path) Returns a promise that resolves to a boolean of whether the path exists. ### pathExists.sync(path) Returns a boolean of whether the path exists. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/find-up/node_modules/pinkie-promise/node_modules/pinkie/readme.md","tags":[],"body":"> Itty bitty little widdle twinkie pinkie [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation [![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie) [![Coverage Status](https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&service=github)](https://coveralls.io/github/floatdrop/pinkie?branch=master) There are [tons of Promise implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone) out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in Node.js land (it should be browserify-able though). ## Install ``` $ npm install --save pinkie ``` ## Usage ```js var fs = require('fs'); var Promise = require('pinkie'); new Promise(function (resolve, reject) { fs.readFile('foo.json', 'utf8', function (err, data) { if (err) { reject(err); return; } resolve(data); }); }); //=> Promise ``` ### API `pinkie` exports bare [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation and polyfills [Node.js rejection events](https://nodejs.org/api/process.html#process_event_unhandledrejection). In case you forgot: #### new Promise(executor) Returns new instance of `Promise`. ##### executor *Required* Type: `function` Function with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. #### pinkie.all(promises) Returns a promise that resolves when all of the promises in the `promises` Array argument have resolved. #### pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise. #### pinkie.reject(reason) Returns a Promise object that is rejected with the given `reason`. #### pinkie.resolve(value) Returns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`. ## Related - [pinkie-promise](https://github.com/floatdrop/pinkie-promise) - Returns the native Promise or this module ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/find-up/node_modules/pinkie-promise/readme.md","tags":[],"body":"# pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise) > [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) ponyfill Module exports global Promise object (if available) or [`pinkie`](http://github.com/floatdrop/pinkie) Promise polyfill. ## Install ``` $ npm install --save pinkie-promise ``` ## Usage ```js var Promise = require('pinkie-promise'); new Promise(function (resolve) { resolve('unicorns'); }); //=> Promise { 'unicorns' } ``` ## Related - [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/find-up/readme.md","tags":[],"body":"# find-up [![Build Status](https://travis-ci.org/sindresorhus/find-up.svg?branch=master)](https://travis-ci.org/sindresorhus/find-up) > Find a file by walking up parent directories ## Install ``` $ npm install --save find-up ``` ## Usage ``` / └── Users └── sindresorhus ├── unicorn.png └── foo └── bar ├── baz └── example.js ``` ```js // example.js const findUp = require('find-up'); findUp('unicorn.png').then(filepath => { console.log(filepath); //=> '/Users/sindresorhus/unicorn.png' }); ``` ## API ### findUp(filename, [options]) Returns a promise for the filepath or `null`. ### findUp.sync(filename, [options]) Returns a filepath or `null`. #### filename Type: `string` Filename of the file to find. #### options ##### cwd Type: `string` Default: `process.cwd()` Directory to start from. ## Related - [find-up-cli](https://github.com/sindresorhus/find-up-cli) - CLI for this module - [pkg-up](https://github.com/sindresorhus/pkg-up) - Find the closest package.json file - [pkg-dir](https://github.com/sindresorhus/pkg-dir) - Find the root directory of an npm package ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/load-json-file/node_modules/graceful-fs/README.md","tags":[],"body":"# graceful-fs graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors. ## Improvements over [fs module](http://api.nodejs.org/fs.html) * Queues up `open` and `readdir` calls, and retries them once something closes if there is an EMFILE error from too many file descriptors. * fixes `lchmod` for Node versions prior to 0.6.2. * implements `fs.lutimes` if possible. Otherwise it becomes a noop. * ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or `lchown` if the user isn't root. * makes `lchmod` and `lchown` become noops, if not available. * retries reading a file if `read` results in EAGAIN error. On Windows, it retries renaming a file for up to one second if `EACCESS` or `EPERM` error occurs, likely because antivirus software has locked the directory. ## USAGE ```javascript // use just like fs var fs = require('graceful-fs') // now go and do stuff with it... fs.readFileSync('some-file-or-whatever') ``` ## Global Patching If you want to patch the global fs module (or any other fs-like module) you can do this: ```javascript // Make sure to read the caveat below. var realFs = require('fs') var gracefulFs = require('graceful-fs') gracefulFs.gracefulify(realFs) ``` This should only ever be done at the top-level application layer, in order to delay on EMFILE errors from any fs-using dependencies. You should **not** do this in a library, because it can cause unexpected delays in other parts of the program. ## Changes This module is fairly stable at this point, and used by a lot of things. That being said, because it implements a subtle behavior change in a core part of the node API, even modest changes can be extremely breaking, and the versioning is thus biased towards bumping the major when in doubt. The main change between major versions has been switching between providing a fully-patched `fs` module vs monkey-patching the node core builtin, and the approach by which a non-monkey-patched `fs` was created. The goal is to trade `EMFILE` errors for slower fs operations. So, if you try to open a zillion files, rather than crashing, `open` operations will be queued up and wait for something else to `close`. There are advantages to each approach. Monkey-patching the fs means that no `EMFILE` errors can possibly occur anywhere in your application, because everything is using the same core `fs` module, which is patched. However, it can also obviously cause undesirable side-effects, especially if the module is loaded multiple times. Implementing a separate-but-identical patched `fs` module is more surgical (and doesn't run the risk of patching multiple times), but also imposes the challenge of keeping in sync with the core module. The current approach loads the `fs` module, and then creates a lookalike object that has all the same methods, except a few that are patched. It is safe to use in all versions of Node from 0.8 through 7.0. ### v4 * Do not monkey-patch the fs module. This module may now be used as a drop-in dep, and users can opt into monkey-patching the fs builtin if their app requires it. ### v3 * Monkey-patch fs, because the eval approach no longer works on recent node. * fixed possible type-error throw if rename fails on windows * verify that we *never* get EMFILE errors * Ignore ENOSYS from chmod/chown * clarify that graceful-fs must be used as a drop-in ### v2.1.0 * Use eval rather than monkey-patching fs. * readdir: Always sort the results * win32: requeue a file if error has an OK status ### v2.0 * A return to monkey patching * wrap process.cwd ### v1.1 * wrap readFile * Wrap fs.writeFile. * readdir protection * Don't clobber the fs builtin * Handle fs.read EAGAIN errors by trying again * Expose the curOpen counter * No-op lchown/lchmod if not implemented * fs.rename patch only for win32 * Patch fs.rename to handle AV software on Windows * Close #4 Chown should not fail on einval or eperm if non-root * Fix isaacs/fstream#1 Only wrap fs one time * Fix #3 Start at 1024 max files, then back off on EMFILE * lutimes that doens't blow up on Linux * A full on-rewrite using a queue instead of just swallowing the EMFILE error * Wrap Read/Write streams as well ### 1.0 * Update engines for node 0.6 * Be lstat-graceful on Windows * first"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/load-json-file/node_modules/parse-json/node_modules/error-ex/README.md","tags":[],"body":"# node-error-ex [![Travis-CI.org Build Status](https://img.shields.io/travis/Qix-/node-error-ex.svg?style=flat-square)](https://travis-ci.org/Qix-/node-error-ex) [![Coveralls.io Coverage Rating](https://img.shields.io/coveralls/Qix-/node-error-ex.svg?style=flat-square)](https://coveralls.io/r/Qix-/node-error-ex) > Easily subclass and customize new Error types ## Examples To include in your project: ```javascript var errorEx = require('error-ex'); ``` To create an error message type with a specific name (note, that `ErrorFn.name` will not reflect this): ```javascript var JSONError = errorEx('JSONError'); var err = new JSONError('error'); err.name; //-> JSONError throw err; //-> JSONError: error ``` To add a stack line: ```javascript var JSONError = errorEx('JSONError', {fileName: errorEx.line('in %s')}); var err = new JSONError('error') err.fileName = '/a/b/c/foo.json'; throw err; //-> (line 2)-> in /a/b/c/foo.json ``` To append to the error message: ```javascript var JSONError = errorEx('JSONError', {fileName: errorEx.append('in %s')}); var err = new JSONError('error'); err.fileName = '/a/b/c/foo.json'; throw err; //-> JSONError: error in /a/b/c/foo.json ``` ## API #### `errorEx([name], [properties])` Creates a new ErrorEx error type - `name`: the name of the new type (appears in the error message upon throw; defaults to `Error.name`) - `properties`: if supplied, used as a key/value dictionary of properties to use when building up the stack message. Keys are property names that are looked up on the error message, and then passed to function values. - `line`: if specified and is a function, return value is added as a stack entry (error-ex will indent for you). Passed the property value given the key. - `stack`: if specified and is a function, passed the value of the property using the key, and the raw stack lines as a second argument. Takes no return value (but the stack can be modified directly). - `message`: if specified and is a function, return value is used as new `.message` value upon get. Passed the property value of the property named by key, and the existing message is passed as the second argument as an array of lines (suitable for multi-line messages). Returns a constructor (Function) that can be used just like the regular Error constructor. ```javascript var errorEx = require('error-ex'); var BasicError = errorEx(); var NamedError = errorEx('NamedError'); // -- var AdvancedError = errorEx('AdvancedError', { foo: { line: function (value, stack) { if (value) { return 'bar ' + value; } return null; } } } var err = new AdvancedError('hello, world'); err.foo = 'baz'; throw err; /* AdvancedError: hello, world bar baz at tryReadme() (readme.js:20:1) */ ``` #### `errorEx.line(str)` Creates a stack line using a delimiter > This is a helper function. It is to be used in lieu of writing a value object > for `properties` values. - `str`: The string to create - Use the delimiter `%s` to specify where in the string the value should go ```javascript var errorEx = require('error-ex'); var FileError = errorEx('FileError', {fileName: errorEx.line('in %s')}); var err = new FileError('problem reading file'); err.fileName = '/a/b/c/d/foo.js'; throw err; /* FileError: problem reading file in /a/b/c/d/foo.js at tryReadme() (readme.js:7:1) */ ``` #### `errorEx.append(str)` Appends to the `error.message` string > This is a helper function. It is to be used in lieu of writing a value object > for `properties` values. - `str`: The string to append - Use the delimiter `%s` to specify where in the string the value should go ```javascript var errorEx = require('error-ex'); var SyntaxError = errorEx('SyntaxError', {fileName: errorEx.append('in %s')}); var err = new SyntaxError('improper indentation'); err.fileName = '/a/b/c/d/foo.js'; throw err; /* SyntaxError: improper indentation in /a/b/c/d/foo.js at tryReadme() (readme.js:7:1) */ ``` ## License Licensed under the [MIT License](http://opensource.org/licenses/MIT). You can find a copy of it in [LICENSE](LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/load-json-file/node_modules/parse-json/node_modules/error-ex/node_modules/is-arrayish/README.md","tags":[],"body":"# node-is-arrayish [![Travis-CI.org Build Status](https://img.shields.io/travis/Qix-/node-is-arrayish.svg?style=flat-square)](https://travis-ci.org/Qix-/node-is-arrayish) [![Coveralls.io Coverage Rating](https://img.shields.io/coveralls/Qix-/node-is-arrayish.svg?style=flat-square)](https://coveralls.io/r/Qix-/node-is-arrayish) > Determines if an object can be used like an Array ## Example ```javascript var isArrayish = require('is-arrayish'); isArrayish([]); // true isArrayish({__proto__: []}); // true isArrayish({}); // false isArrayish({length:10}); // false ``` ## License Licensed under the [MIT License](http://opensource.org/licenses/MIT). You can find a copy of it in [LICENSE](LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/load-json-file/node_modules/parse-json/readme.md","tags":[],"body":"# parse-json [![Build Status](https://travis-ci.org/sindresorhus/parse-json.svg?branch=master)](https://travis-ci.org/sindresorhus/parse-json) > Parse JSON with more helpful errors ## Install ``` $ npm install --save parse-json ``` ## Usage ```js var parseJson = require('parse-json'); var json = '{\\n\\t\"foo\": true,\\n}'; JSON.parse(json); /* undefined:3 } ^ SyntaxError: Unexpected token } */ parseJson(json); /* JSONError: Trailing comma in object at 3:1 } ^ */ parseJson(json, 'foo.json'); /* JSONError: Trailing comma in object at 3:1 in foo.json } ^ */ // you can also add the filename at a later point try { parseJson(json); } catch (err) { err.fileName = 'foo.json'; throw err; } /* JSONError: Trailing comma in object at 3:1 in foo.json } ^ */ ``` ## API ### parseJson(input, [reviver], [filename]) #### input Type: `string` #### reviver Type: `function` Prescribes how the value originally produced by parsing is transformed, before being returned. See [`JSON.parse` docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter ) for more. #### filename Type: `string` Filename displayed in the error message. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/load-json-file/node_modules/pify/readme.md","tags":[],"body":"# pify [![Build Status](https://travis-ci.org/sindresorhus/pify.svg?branch=master)](https://travis-ci.org/sindresorhus/pify) > Promisify a callback-style function ## Install ``` $ npm install --save pify ``` ## Usage ```js const fs = require('fs'); const pify = require('pify'); // promisify a single function pify(fs.readFile)('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); // or promisify all methods in a module pify(fs).readFile('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); ``` ## API ### pify(input, [promiseModule], [options]) Returns a promise wrapped version of the supplied function or module. #### input Type: `function`, `object` Callback-style function or module whose methods you want to promisify. #### promiseModule Type: `function` Custom promise module to use instead of the native one. Check out [`pinkie-promise`](https://github.com/floatdrop/pinkie-promise) if you need a tiny promise polyfill. #### options ##### multiArgs Type: `boolean` Default: `false` By default, the promisified function will only return the second argument from the callback, which works fine for most APIs. This option can be useful for modules like `request` that return multiple arguments. Turning this on will make it return an array of all arguments from the callback, excluding the error argument, instead of just the second argument. ```js const request = require('request'); const pify = require('pify'); pify(request, {multiArgs: true})('https://sindresorhus.com').then(result => { const [httpResponse, body] = result; }); ``` ##### include Type: `array` of (`string`|`regex`) Methods in a module to promisify. Remaining methods will be left untouched. ##### exclude Type: `array` of (`string`|`regex`) Default: `[/.+Sync$/]` Methods in a module **not** to promisify. Methods with names ending with `'Sync'` are excluded by default. ##### excludeMain Type: `boolean` Default: `false` By default, if given module is a function itself, this function will be promisified. Turn this option on if you want to promisify only methods of the module. ```js const pify = require('pify'); function fn() { return true; } fn.method = (data, callback) => { setImmediate(() => { callback(data, null); }); }; // promisify methods but not fn() const promiseFn = pify(fn, {excludeMain: true}); if (promiseFn()) { promiseFn.method('hi').then(data => { console.log(data); }); } ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/load-json-file/node_modules/pinkie-promise/node_modules/pinkie/readme.md","tags":[],"body":"> Itty bitty little widdle twinkie pinkie [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation [![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie) [![Coverage Status](https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&service=github)](https://coveralls.io/github/floatdrop/pinkie?branch=master) There are [tons of Promise implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone) out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in Node.js land (it should be browserify-able though). ## Install ``` $ npm install --save pinkie ``` ## Usage ```js var fs = require('fs'); var Promise = require('pinkie'); new Promise(function (resolve, reject) { fs.readFile('foo.json', 'utf8', function (err, data) { if (err) { reject(err); return; } resolve(data); }); }); //=> Promise ``` ### API `pinkie` exports bare [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation and polyfills [Node.js rejection events](https://nodejs.org/api/process.html#process_event_unhandledrejection). In case you forgot: #### new Promise(executor) Returns new instance of `Promise`. ##### executor *Required* Type: `function` Function with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. #### pinkie.all(promises) Returns a promise that resolves when all of the promises in the `promises` Array argument have resolved. #### pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise. #### pinkie.reject(reason) Returns a Promise object that is rejected with the given `reason`. #### pinkie.resolve(value) Returns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`. ## Related - [pinkie-promise](https://github.com/floatdrop/pinkie-promise) - Returns the native Promise or this module ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/load-json-file/node_modules/pinkie-promise/readme.md","tags":[],"body":"# pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise) > [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) ponyfill Module exports global Promise object (if available) or [`pinkie`](http://github.com/floatdrop/pinkie) Promise polyfill. ## Install ``` $ npm install --save pinkie-promise ``` ## Usage ```js var Promise = require('pinkie-promise'); new Promise(function (resolve) { resolve('unicorns'); }); //=> Promise { 'unicorns' } ``` ## Related - [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/load-json-file/node_modules/strip-bom/node_modules/is-utf8/README.md","tags":[],"body":"#utf8 detector Detect if a Buffer is utf8 encoded. It need The minimum amount of bytes is 4. ```javascript var fs = require('fs'); var isUtf8 = require('is-utf8'); var ansi = fs.readFileSync('ansi.txt'); var utf8 = fs.readFileSync('utf8.txt'); console.log('ansi.txt is utf8: '+isUtf8(ansi)); //false console.log('utf8.txt is utf8: '+isUtf8(utf8)); //true ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/load-json-file/node_modules/strip-bom/readme.md","tags":[],"body":"# strip-bom [![Build Status](https://travis-ci.org/sindresorhus/strip-bom.svg?branch=master)](https://travis-ci.org/sindresorhus/strip-bom) > Strip UTF-8 [byte order mark](http://en.wikipedia.org/wiki/Byte_order_mark#UTF-8) (BOM) from a string/buffer From Wikipedia: > The Unicode Standard permits the BOM in UTF-8, but does not require nor recommend its use. Byte order has no meaning in UTF-8. ## Install ``` $ npm install --save strip-bom ``` ## Usage ```js var fs = require('fs'); var stripBom = require('strip-bom'); stripBom('\\uFEFFunicorn'); //=> 'unicorn' stripBom(fs.readFileSync('unicorn.txt')); //=> 'unicorn' ``` ## Related - [strip-bom-cli](https://github.com/sindresorhus/strip-bom-cli) - CLI for this module - [strip-bom-stream](https://github.com/sindresorhus/strip-bom-stream) - Stream version of this module ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/load-json-file/readme.md","tags":[],"body":"# load-json-file [![Build Status](https://travis-ci.org/sindresorhus/load-json-file.svg?branch=master)](https://travis-ci.org/sindresorhus/load-json-file) > Read and parse a JSON file [Strips UTF-8 BOM](https://github.com/sindresorhus/strip-bom), uses [`graceful-fs`](https://github.com/isaacs/node-graceful-fs), and throws more [helpful JSON errors](https://github.com/sindresorhus/parse-json). ## Install ``` $ npm install --save load-json-file ``` ## Usage ```js const loadJsonFile = require('load-json-file'); loadJsonFile('foo.json').then(json => { console.log(json); //=> {foo: true} }); ``` ## API ### loadJsonFile(filepath) Returns a promise that resolves to the parsed JSON. ### loadJsonFile.sync(filepath) Returns the parsed JSON. ## Related - [write-json-file](https://github.com/sindresorhus/write-json-file) - Stringify and write JSON to a file atomically ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/object-assign/readme.md","tags":[],"body":"# object-assign [![Build Status](https://travis-ci.org/sindresorhus/object-assign.svg?branch=master)](https://travis-ci.org/sindresorhus/object-assign) > ES2015 [`Object.assign()`](http://www.2ality.com/2014/01/object-assign.html) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save object-assign ``` ## Usage ```js const objectAssign = require('object-assign'); objectAssign({foo: 0}, {bar: 1}); //=> {foo: 0, bar: 1} // multiple sources objectAssign({foo: 0}, {bar: 1}, {baz: 2}); //=> {foo: 0, bar: 1, baz: 2} // overwrites equal keys objectAssign({foo: 0}, {foo: 1}, {foo: 2}); //=> {foo: 2} // ignores null and undefined sources objectAssign({foo: 0}, null, {bar: 1}, undefined); //=> {foo: 0, bar: 1} ``` ## API ### objectAssign(target, source, [source, ...]) Assigns enumerable own properties of `source` objects to the `target` object and returns the `target` object. Additional `source` objects will overwrite previous ones. ## Resources - [ES2015 spec - Object.assign](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign) ## Related - [deep-assign](https://github.com/sindresorhus/deep-assign) - Recursive `Object.assign()` ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/node_modules/symbol/README.md","tags":[],"body":"# Symbols [![NPM version](https://badge.fury.io/js/symbol.png)](http://badge.fury.io/js/symbol) [ES6 Symbols](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-symbol-objects), in your ES5. If `Symbol` is already defined, it will be used. Otherwise, this implements as much of the `Symbol` spec as is possible with plain JavaScript. ## Usage ```js var Symbol = require('symbol'); var key = Symbol(); var obj = {}; obj[key] = 'foo'; console.log(obj[key]); // 'foo' console.log(Object.keys(obj)); // [] ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/pkg-conf/readme.md","tags":[],"body":"# pkg-conf [![Build Status](https://travis-ci.org/sindresorhus/pkg-conf.svg?branch=master)](https://travis-ci.org/sindresorhus/pkg-conf) > Get namespaced config from the closest package.json Having tool specific config in package.json reduces the amount of metafiles in your repo (there are usually a lot!) and makes the config obvious compared to hidden dotfiles like `.jshintrc`, which can end up causing confusion. [XO](https://github.com/sindresorhus/xo), for example, use the `xo` namespace in package.json, and [ESLint](http://eslint.org) uses `eslintConfig`. Many more tools supports this, like [AVA](https://ava.li), [Babel](https://babeljs.io), [nyc](https://github.com/bcoe/nyc), etc. ## Install ``` $ npm install --save pkg-conf ``` ## Usage ```json { \"name\": \"some-package\", \"version\": \"1.0.0\", \"unicorn\": { \"rainbow\": true } } ``` ```js const pkgConf = require('pkg-conf'); pkgConf('unicorn').then(config => { console.log(config.rainbow); //=> true }); ``` ## API It [walks up](https://github.com/sindresorhus/find-up) parent directories until a `package.json` can be found, reads it, and returns the user specified namespace or an empty object if not found. ### pkgConf(namespace, [options]) Returns a promise that resolves to the config. ### pkgConf.sync(namespace, [options]) Returns the config. #### namespace Type: `string` The package.json namespace you want. #### options ##### cwd Type: `string` Default: `process.cwd()` Directory to start looking up for a package.json file. ##### defaults Type: `Object` Default config. ### pkgConf.filepath(config) Pass in the `config` returned from any of the above methods. Returns the filepath to the package.json file or `null`. ## Related - [read-pkg-up](https://github.com/sindresorhus/read-pkg-up) - Read the closest package.json file - [read-pkg](https://github.com/sindresorhus/read-pkg) - Read a package.json file - [find-up](https://github.com/sindresorhus/find-up) - Find a file by walking up parent directories ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/find-up/node_modules/path-exists/readme.md","tags":[],"body":"# path-exists [![Build Status](https://travis-ci.org/sindresorhus/path-exists.svg?branch=master)](https://travis-ci.org/sindresorhus/path-exists) > Check if a path exists Because [`fs.exists()`](https://nodejs.org/api/fs.html#fs_fs_exists_path_callback) is being [deprecated](https://github.com/iojs/io.js/issues/103), but there's still a genuine use-case of being able to check if a path exists for other purposes than doing IO with it. Never use this before handling a file though: > In particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions: another process may remove the file between the calls to `fs.exists()` and `fs.open()`. Just open the file and handle the error when it's not there. ## Install ``` $ npm install --save path-exists ``` ## Usage ```js // foo.js var pathExists = require('path-exists'); pathExists('foo.js').then(function (exists) { console.log(exists); //=> true }); ``` ## API ### pathExists(path) Returns a promise that resolves to a boolean of whether the path exists. ### pathExists.sync(path) Returns a boolean of whether the path exists. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/find-up/node_modules/pinkie-promise/node_modules/pinkie/readme.md","tags":[],"body":"> Itty bitty little widdle twinkie pinkie [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation [![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie) [![Coverage Status](https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&service=github)](https://coveralls.io/github/floatdrop/pinkie?branch=master) There are [tons of Promise implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone) out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in Node.js land (it should be browserify-able though). ## Install ``` $ npm install --save pinkie ``` ## Usage ```js var fs = require('fs'); var Promise = require('pinkie'); new Promise(function (resolve, reject) { fs.readFile('foo.json', 'utf8', function (err, data) { if (err) { reject(err); return; } resolve(data); }); }); //=> Promise ``` ### API `pinkie` exports bare [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation and polyfills [Node.js rejection events](https://nodejs.org/api/process.html#process_event_unhandledrejection). In case you forgot: #### new Promise(executor) Returns new instance of `Promise`. ##### executor *Required* Type: `function` Function with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. #### pinkie.all(promises) Returns a promise that resolves when all of the promises in the `promises` Array argument have resolved. #### pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise. #### pinkie.reject(reason) Returns a Promise object that is rejected with the given `reason`. #### pinkie.resolve(value) Returns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`. ## Related - [pinkie-promise](https://github.com/floatdrop/pinkie-promise) - Returns the native Promise or this module ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/find-up/node_modules/pinkie-promise/readme.md","tags":[],"body":"# pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise) > [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) ponyfill Module exports global Promise object (if available) or [`pinkie`](http://github.com/floatdrop/pinkie) Promise polyfill. ## Install ``` $ npm install --save pinkie-promise ``` ## Usage ```js var Promise = require('pinkie-promise'); new Promise(function (resolve) { resolve('unicorns'); }); //=> Promise { 'unicorns' } ``` ## Related - [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/find-up/readme.md","tags":[],"body":"# find-up [![Build Status](https://travis-ci.org/sindresorhus/find-up.svg?branch=master)](https://travis-ci.org/sindresorhus/find-up) > Find a file by walking up parent directories ## Install ``` $ npm install --save find-up ``` ## Usage ``` / └── Users └── sindresorhus ├── unicorn.png └── foo └── bar ├── baz └── example.js ``` ```js // example.js const findUp = require('find-up'); findUp('unicorn.png').then(filepath => { console.log(filepath); //=> '/Users/sindresorhus/unicorn.png' }); ``` ## API ### findUp(filename, [options]) Returns a promise for the filepath or `null`. ### findUp.sync(filename, [options]) Returns a filepath or `null`. #### filename Type: `string` Filename of the file to find. #### options ##### cwd Type: `string` Default: `process.cwd()` Directory to start from. ## Related - [find-up-cli](https://github.com/sindresorhus/find-up-cli) - CLI for this module - [pkg-up](https://github.com/sindresorhus/pkg-up) - Find the closest package.json file - [pkg-dir](https://github.com/sindresorhus/pkg-dir) - Find the root directory of an npm package ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/graceful-fs/README.md","tags":[],"body":"# graceful-fs graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors. ## Improvements over [fs module](http://api.nodejs.org/fs.html) * Queues up `open` and `readdir` calls, and retries them once something closes if there is an EMFILE error from too many file descriptors. * fixes `lchmod` for Node versions prior to 0.6.2. * implements `fs.lutimes` if possible. Otherwise it becomes a noop. * ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or `lchown` if the user isn't root. * makes `lchmod` and `lchown` become noops, if not available. * retries reading a file if `read` results in EAGAIN error. On Windows, it retries renaming a file for up to one second if `EACCESS` or `EPERM` error occurs, likely because antivirus software has locked the directory. ## USAGE ```javascript // use just like fs var fs = require('graceful-fs') // now go and do stuff with it... fs.readFileSync('some-file-or-whatever') ``` ## Global Patching If you want to patch the global fs module (or any other fs-like module) you can do this: ```javascript // Make sure to read the caveat below. var realFs = require('fs') var gracefulFs = require('graceful-fs') gracefulFs.gracefulify(realFs) ``` This should only ever be done at the top-level application layer, in order to delay on EMFILE errors from any fs-using dependencies. You should **not** do this in a library, because it can cause unexpected delays in other parts of the program. ## Changes This module is fairly stable at this point, and used by a lot of things. That being said, because it implements a subtle behavior change in a core part of the node API, even modest changes can be extremely breaking, and the versioning is thus biased towards bumping the major when in doubt. The main change between major versions has been switching between providing a fully-patched `fs` module vs monkey-patching the node core builtin, and the approach by which a non-monkey-patched `fs` was created. The goal is to trade `EMFILE` errors for slower fs operations. So, if you try to open a zillion files, rather than crashing, `open` operations will be queued up and wait for something else to `close`. There are advantages to each approach. Monkey-patching the fs means that no `EMFILE` errors can possibly occur anywhere in your application, because everything is using the same core `fs` module, which is patched. However, it can also obviously cause undesirable side-effects, especially if the module is loaded multiple times. Implementing a separate-but-identical patched `fs` module is more surgical (and doesn't run the risk of patching multiple times), but also imposes the challenge of keeping in sync with the core module. The current approach loads the `fs` module, and then creates a lookalike object that has all the same methods, except a few that are patched. It is safe to use in all versions of Node from 0.8 through 7.0. ### v4 * Do not monkey-patch the fs module. This module may now be used as a drop-in dep, and users can opt into monkey-patching the fs builtin if their app requires it. ### v3 * Monkey-patch fs, because the eval approach no longer works on recent node. * fixed possible type-error throw if rename fails on windows * verify that we *never* get EMFILE errors * Ignore ENOSYS from chmod/chown * clarify that graceful-fs must be used as a drop-in ### v2.1.0 * Use eval rather than monkey-patching fs. * readdir: Always sort the results * win32: requeue a file if error has an OK status ### v2.0 * A return to monkey patching * wrap process.cwd ### v1.1 * wrap readFile * Wrap fs.writeFile. * readdir protection * Don't clobber the fs builtin * Handle fs.read EAGAIN errors by trying again * Expose the curOpen counter * No-op lchown/lchmod if not implemented * fs.rename patch only for win32 * Patch fs.rename to handle AV software on Windows * Close #4 Chown should not fail on einval or eperm if non-root * Fix isaacs/fstream#1 Only wrap fs one time * Fix #3 Start at 1024 max files, then back off on EMFILE * lutimes that doens't blow up on Linux * A full on-rewrite using a queue instead of just swallowing the EMFILE error * Wrap Read/Write streams as well ### 1.0 * Update engines for node 0.6 * Be lstat-graceful on Windows * first"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/parse-json/node_modules/error-ex/README.md","tags":[],"body":"# node-error-ex [![Travis-CI.org Build Status](https://img.shields.io/travis/Qix-/node-error-ex.svg?style=flat-square)](https://travis-ci.org/Qix-/node-error-ex) [![Coveralls.io Coverage Rating](https://img.shields.io/coveralls/Qix-/node-error-ex.svg?style=flat-square)](https://coveralls.io/r/Qix-/node-error-ex) > Easily subclass and customize new Error types ## Examples To include in your project: ```javascript var errorEx = require('error-ex'); ``` To create an error message type with a specific name (note, that `ErrorFn.name` will not reflect this): ```javascript var JSONError = errorEx('JSONError'); var err = new JSONError('error'); err.name; //-> JSONError throw err; //-> JSONError: error ``` To add a stack line: ```javascript var JSONError = errorEx('JSONError', {fileName: errorEx.line('in %s')}); var err = new JSONError('error') err.fileName = '/a/b/c/foo.json'; throw err; //-> (line 2)-> in /a/b/c/foo.json ``` To append to the error message: ```javascript var JSONError = errorEx('JSONError', {fileName: errorEx.append('in %s')}); var err = new JSONError('error'); err.fileName = '/a/b/c/foo.json'; throw err; //-> JSONError: error in /a/b/c/foo.json ``` ## API #### `errorEx([name], [properties])` Creates a new ErrorEx error type - `name`: the name of the new type (appears in the error message upon throw; defaults to `Error.name`) - `properties`: if supplied, used as a key/value dictionary of properties to use when building up the stack message. Keys are property names that are looked up on the error message, and then passed to function values. - `line`: if specified and is a function, return value is added as a stack entry (error-ex will indent for you). Passed the property value given the key. - `stack`: if specified and is a function, passed the value of the property using the key, and the raw stack lines as a second argument. Takes no return value (but the stack can be modified directly). - `message`: if specified and is a function, return value is used as new `.message` value upon get. Passed the property value of the property named by key, and the existing message is passed as the second argument as an array of lines (suitable for multi-line messages). Returns a constructor (Function) that can be used just like the regular Error constructor. ```javascript var errorEx = require('error-ex'); var BasicError = errorEx(); var NamedError = errorEx('NamedError'); // -- var AdvancedError = errorEx('AdvancedError', { foo: { line: function (value, stack) { if (value) { return 'bar ' + value; } return null; } } } var err = new AdvancedError('hello, world'); err.foo = 'baz'; throw err; /* AdvancedError: hello, world bar baz at tryReadme() (readme.js:20:1) */ ``` #### `errorEx.line(str)` Creates a stack line using a delimiter > This is a helper function. It is to be used in lieu of writing a value object > for `properties` values. - `str`: The string to create - Use the delimiter `%s` to specify where in the string the value should go ```javascript var errorEx = require('error-ex'); var FileError = errorEx('FileError', {fileName: errorEx.line('in %s')}); var err = new FileError('problem reading file'); err.fileName = '/a/b/c/d/foo.js'; throw err; /* FileError: problem reading file in /a/b/c/d/foo.js at tryReadme() (readme.js:7:1) */ ``` #### `errorEx.append(str)` Appends to the `error.message` string > This is a helper function. It is to be used in lieu of writing a value object > for `properties` values. - `str`: The string to append - Use the delimiter `%s` to specify where in the string the value should go ```javascript var errorEx = require('error-ex'); var SyntaxError = errorEx('SyntaxError', {fileName: errorEx.append('in %s')}); var err = new SyntaxError('improper indentation'); err.fileName = '/a/b/c/d/foo.js'; throw err; /* SyntaxError: improper indentation in /a/b/c/d/foo.js at tryReadme() (readme.js:7:1) */ ``` ## License Licensed under the [MIT License](http://opensource.org/licenses/MIT). You can find a copy of it in [LICENSE](LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/parse-json/node_modules/error-ex/node_modules/is-arrayish/README.md","tags":[],"body":"# node-is-arrayish [![Travis-CI.org Build Status](https://img.shields.io/travis/Qix-/node-is-arrayish.svg?style=flat-square)](https://travis-ci.org/Qix-/node-is-arrayish) [![Coveralls.io Coverage Rating](https://img.shields.io/coveralls/Qix-/node-is-arrayish.svg?style=flat-square)](https://coveralls.io/r/Qix-/node-is-arrayish) > Determines if an object can be used like an Array ## Example ```javascript var isArrayish = require('is-arrayish'); isArrayish([]); // true isArrayish({__proto__: []}); // true isArrayish({}); // false isArrayish({length:10}); // false ``` ## License Licensed under the [MIT License](http://opensource.org/licenses/MIT). You can find a copy of it in [LICENSE](LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/parse-json/readme.md","tags":[],"body":"# parse-json [![Build Status](https://travis-ci.org/sindresorhus/parse-json.svg?branch=master)](https://travis-ci.org/sindresorhus/parse-json) > Parse JSON with more helpful errors ## Install ``` $ npm install --save parse-json ``` ## Usage ```js var parseJson = require('parse-json'); var json = '{\\n\\t\"foo\": true,\\n}'; JSON.parse(json); /* undefined:3 } ^ SyntaxError: Unexpected token } */ parseJson(json); /* JSONError: Trailing comma in object at 3:1 } ^ */ parseJson(json, 'foo.json'); /* JSONError: Trailing comma in object at 3:1 in foo.json } ^ */ // you can also add the filename at a later point try { parseJson(json); } catch (err) { err.fileName = 'foo.json'; throw err; } /* JSONError: Trailing comma in object at 3:1 in foo.json } ^ */ ``` ## API ### parseJson(input, [reviver], [filename]) #### input Type: `string` #### reviver Type: `function` Prescribes how the value originally produced by parsing is transformed, before being returned. See [`JSON.parse` docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter ) for more. #### filename Type: `string` Filename displayed in the error message. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/pify/readme.md","tags":[],"body":"# pify [![Build Status](https://travis-ci.org/sindresorhus/pify.svg?branch=master)](https://travis-ci.org/sindresorhus/pify) > Promisify a callback-style function ## Install ``` $ npm install --save pify ``` ## Usage ```js const fs = require('fs'); const pify = require('pify'); // promisify a single function pify(fs.readFile)('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); // or promisify all methods in a module pify(fs).readFile('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); ``` ## API ### pify(input, [promiseModule], [options]) Returns a promise wrapped version of the supplied function or module. #### input Type: `function`, `object` Callback-style function or module whose methods you want to promisify. #### promiseModule Type: `function` Custom promise module to use instead of the native one. Check out [`pinkie-promise`](https://github.com/floatdrop/pinkie-promise) if you need a tiny promise polyfill. #### options ##### multiArgs Type: `boolean` Default: `false` By default, the promisified function will only return the second argument from the callback, which works fine for most APIs. This option can be useful for modules like `request` that return multiple arguments. Turning this on will make it return an array of all arguments from the callback, excluding the error argument, instead of just the second argument. ```js const request = require('request'); const pify = require('pify'); pify(request, {multiArgs: true})('https://sindresorhus.com').then(result => { const [httpResponse, body] = result; }); ``` ##### include Type: `array` of (`string`|`regex`) Methods in a module to promisify. Remaining methods will be left untouched. ##### exclude Type: `array` of (`string`|`regex`) Default: `[/.+Sync$/]` Methods in a module **not** to promisify. Methods with names ending with `'Sync'` are excluded by default. ##### excludeMain Type: `boolean` Default: `false` By default, if given module is a function itself, this function will be promisified. Turn this option on if you want to promisify only methods of the module. ```js const pify = require('pify'); function fn() { return true; } fn.method = (data, callback) => { setImmediate(() => { callback(data, null); }); }; // promisify methods but not fn() const promiseFn = pify(fn, {excludeMain: true}); if (promiseFn()) { promiseFn.method('hi').then(data => { console.log(data); }); } ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/pinkie-promise/node_modules/pinkie/readme.md","tags":[],"body":"> Itty bitty little widdle twinkie pinkie [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation [![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie) [![Coverage Status](https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&service=github)](https://coveralls.io/github/floatdrop/pinkie?branch=master) There are [tons of Promise implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone) out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in Node.js land (it should be browserify-able though). ## Install ``` $ npm install --save pinkie ``` ## Usage ```js var fs = require('fs'); var Promise = require('pinkie'); new Promise(function (resolve, reject) { fs.readFile('foo.json', 'utf8', function (err, data) { if (err) { reject(err); return; } resolve(data); }); }); //=> Promise ``` ### API `pinkie` exports bare [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation and polyfills [Node.js rejection events](https://nodejs.org/api/process.html#process_event_unhandledrejection). In case you forgot: #### new Promise(executor) Returns new instance of `Promise`. ##### executor *Required* Type: `function` Function with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. #### pinkie.all(promises) Returns a promise that resolves when all of the promises in the `promises` Array argument have resolved. #### pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise. #### pinkie.reject(reason) Returns a Promise object that is rejected with the given `reason`. #### pinkie.resolve(value) Returns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`. ## Related - [pinkie-promise](https://github.com/floatdrop/pinkie-promise) - Returns the native Promise or this module ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/pinkie-promise/readme.md","tags":[],"body":"# pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise) > [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) ponyfill Module exports global Promise object (if available) or [`pinkie`](http://github.com/floatdrop/pinkie) Promise polyfill. ## Install ``` $ npm install --save pinkie-promise ``` ## Usage ```js var Promise = require('pinkie-promise'); new Promise(function (resolve) { resolve('unicorns'); }); //=> Promise { 'unicorns' } ``` ## Related - [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/strip-bom/node_modules/is-utf8/README.md","tags":[],"body":"#utf8 detector Detect if a Buffer is utf8 encoded. It need The minimum amount of bytes is 4. ```javascript var fs = require('fs'); var isUtf8 = require('is-utf8'); var ansi = fs.readFileSync('ansi.txt'); var utf8 = fs.readFileSync('utf8.txt'); console.log('ansi.txt is utf8: '+isUtf8(ansi)); //false console.log('utf8.txt is utf8: '+isUtf8(utf8)); //true ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/strip-bom/readme.md","tags":[],"body":"# strip-bom [![Build Status](https://travis-ci.org/sindresorhus/strip-bom.svg?branch=master)](https://travis-ci.org/sindresorhus/strip-bom) > Strip UTF-8 [byte order mark](http://en.wikipedia.org/wiki/Byte_order_mark#UTF-8) (BOM) from a string/buffer From Wikipedia: > The Unicode Standard permits the BOM in UTF-8, but does not require nor recommend its use. Byte order has no meaning in UTF-8. ## Install ``` $ npm install --save strip-bom ``` ## Usage ```js var fs = require('fs'); var stripBom = require('strip-bom'); stripBom('\\uFEFFunicorn'); //=> 'unicorn' stripBom(fs.readFileSync('unicorn.txt')); //=> 'unicorn' ``` ## Related - [strip-bom-cli](https://github.com/sindresorhus/strip-bom-cli) - CLI for this module - [strip-bom-stream](https://github.com/sindresorhus/strip-bom-stream) - Stream version of this module ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/readme.md","tags":[],"body":"# load-json-file [![Build Status](https://travis-ci.org/sindresorhus/load-json-file.svg?branch=master)](https://travis-ci.org/sindresorhus/load-json-file) > Read and parse a JSON file [Strips UTF-8 BOM](https://github.com/sindresorhus/strip-bom), uses [`graceful-fs`](https://github.com/isaacs/node-graceful-fs), and throws more [helpful JSON errors](https://github.com/sindresorhus/parse-json). ## Install ``` $ npm install --save load-json-file ``` ## Usage ```js const loadJsonFile = require('load-json-file'); loadJsonFile('foo.json').then(json => { console.log(json); //=> {foo: true} }); ``` ## API ### loadJsonFile(filepath) Returns a promise that resolves to the parsed JSON. ### loadJsonFile.sync(filepath) Returns the parsed JSON. ## Related - [write-json-file](https://github.com/sindresorhus/write-json-file) - Stringify and write JSON to a file atomically ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/normalize-package-data/README.md","tags":[],"body":"# normalize-package-data [![Build Status](https://travis-ci.org/npm/normalize-package-data.png?branch=master)](https://travis-ci.org/npm/normalize-package-data) normalize-package data exports a function that normalizes package metadata. This data is typically found in a package.json file, but in principle could come from any source - for example the npm registry. normalize-package-data is used by [read-package-json](https://npmjs.org/package/read-package-json) to normalize the data it reads from a package.json file. In turn, read-package-json is used by [npm](https://npmjs.org/package/npm) and various npm-related tools. ## Installation ``` npm install normalize-package-data ``` ## Usage Basic usage is really simple. You call the function that normalize-package-data exports. Let's call it `normalizeData`. ```javascript normalizeData = require('normalize-package-data') packageData = fs.readFileSync(\"package.json\") normalizeData(packageData) // packageData is now normalized ``` #### Strict mode You may activate strict validation by passing true as the second argument. ```javascript normalizeData = require('normalize-package-data') packageData = fs.readFileSync(\"package.json\") warnFn = function(msg) { console.error(msg) } normalizeData(packageData, true) // packageData is now normalized ``` If strict mode is activated, only Semver 2.0 version strings are accepted. Otherwise, Semver 1.0 strings are accepted as well. Packages must have a name, and the name field must not have contain leading or trailing whitespace. #### Warnings Optionally, you may pass a \"warning\" function. It gets called whenever the `normalizeData` function encounters something that doesn't look right. It indicates less than perfect input data. ```javascript normalizeData = require('normalize-package-data') packageData = fs.readFileSync(\"package.json\") warnFn = function(msg) { console.error(msg) } normalizeData(packageData, warnFn) // packageData is now normalized. Any number of warnings may have been logged. ``` You may combine strict validation with warnings by passing `true` as the second argument, and `warnFn` as third. When `private` field is set to `true`, warnings will be suppressed. ### Potential exceptions If the supplied data has an invalid name or version vield, `normalizeData` will throw an error. Depending on where you call `normalizeData`, you may want to catch these errors so can pass them to a callback. ## What normalization (currently) entails * The value of `name` field gets trimmed (unless in strict mode). * The value of the `version` field gets cleaned by `semver.clean`. See [documentation for the semver module](https://github.com/isaacs/node-semver). * If `name` and/or `version` fields are missing, they are set to empty strings. * If `files` field is not an array, it will be removed. * If `bin` field is a string, then `bin` field will become an object with `name` set to the value of the `name` field, and `bin` set to the original string value. * If `man` field is a string, it will become an array with the original string as its sole member. * If `keywords` field is string, it is considered to be a list of keywords separated by one or more white-space characters. It gets converted to an array by splitting on `\\s+`. * All people fields (`author`, `maintainers`, `contributors`) get converted into objects with name, email and url properties. * If `bundledDependencies` field (a typo) exists and `bundleDependencies` field does not, `bundledDependencies` will get renamed to `bundleDependencies`. * If the value of any of the dependencies fields (`dependencies`, `devDependencies`, `optionalDependencies`) is a string, it gets converted into an object with familiar `name=>value` pairs. * The values in `optionalDependencies` get added to `dependencies`. The `optionalDependencies` array is left untouched. * As of v2: Dependencies that point at known hosted git providers (currently: github, bitbucket, gitlab) will have their URLs canonicalized, but protocols will be preserved. * As of v2: Dependencies that use shortcuts for hosted git providers (`org/proj`, `github:org/proj`, `bitbucket:org/proj`, `gitlab:org/proj`, `gist:docid`) will have the shortcut left in place. (In the case of github, the `org/proj` form will be expanded to `github:org/proj`.) THIS MARKS A BREAKING CHANGE FROM V1, where the shorcut was previously expanded to a URL. * If `description` field does not exist, but `readme` field does, then (more or less) the first paragraph of text that's found in the readme is taken as value for `description`. * If `repository` field is a string, it will become an object with `url` set to the original string value, and `type` set to `\"git\"`. * If `repository.url` is not a valid url, but in the style of \"[owner-name]/[repo-name]\", `repository.url` will be set to git+https://github.com/[owner-name]/[repo-name].git * If `bugs` field is a string, the value of `bugs` field is changed into an object with `url` set to the original string value. * If `bugs` field does not exist, but `repository` field points to a repository hosted on GitHub, the value of the `bugs` field gets set to an url in the form of https://github.com/[owner-name]/[repo-name]/issues . If the repository field points to a GitHub Gist repo url, the associated http url is chosen. * If `bugs` field is an object, the resulting value only has email and url properties. If email and url properties are not strings, they are ignored. If no valid values for either email or url is found, bugs field will be removed. * If `homepage` field is not a string, it will be removed. * If the url in the `homepage` field does not specify a protocol, then http is assumed. For example, `myproject.org` will be changed to `http://myproject.org`. * If `homepage` field does not exist, but `repository` field points to a repository hosted on GitHub, the value of the `homepage` field gets set to an url in the form of https://github.com/[owner-name]/[repo-name]/ . If the repository field points to a GitHub Gist repo url, the associated http url is chosen. ### Rules for name field If `name` field is given, the value of the name field must be a string. The string may not: * start with a period. * contain the following characters: `/@\\s+%` * contain and characters that would need to be encoded for use in urls. * resemble the word `node_modules` or `favicon.ico` (case doesn't matter). ### Rules for version field If `version` field is given, the value of the version field must be a valid *semver* string, as determined by the `semver.valid` method. See [documentation for the semver module](https://github.com/isaacs/node-semver). ### Rules for license field The `license` field should be a valid *SPDX license expression* or one of the special values allowed by [validate-npm-package-license](https://npmjs.com/packages/validate-npm-package-license). See [documentation for the license field in package.json](https://docs.npmjs.com/files/package.json#license). ## Credits This package contains code based on read-package-json written by Isaac Z. Schlueter. Used with permisson. ## License normalize-package-data is released under the [BSD 2-Clause License](http://opensource.org/licenses/MIT). Copyright (c) 2013 Meryn Stol"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/normalize-package-data/node_modules/hosted-git-info/README.md","tags":[],"body":"# hosted-git-info This will let you identify and transform various git hosts URLs between protocols. It also can tell you what the URL is for the raw path for particular file for direct access without git. ## Usage ```javascript var hostedGitInfo = require(\"hosted-git-info\") var info = hostedGitInfo.fromUrl(\"git@github.com:npm/hosted-git-info.git\") /* info looks like: { type: \"github\", domain: \"github.com\", user: \"npm\", project: \"hosted-git-info\" } */ ``` If the URL can't be matched with a git host, `null` will be returned. We can match git, ssh and https urls. Additionally, we can match ssh connect strings (`git@github.com:npm/hosted-git-info`) and shortcuts (eg, `github:npm/hosted-git-info`). Github specifically, is detected in the case of a third, unprefixed, form: `npm/hosted-git-info`. If it does match, the returned object has properties of: * info.type -- The short name of the service * info.domain -- The domain for git protocol use * info.user -- The name of the user/org on the git host * info.project -- The name of the project on the git host And methods of: * info.file(path) Given the path of a file relative to the repository, returns a URL for directly fetching it from the githost. If no committish was set then `master` will be used as the default. For example `hostedGitInfo.fromUrl(\"git@github.com:npm/hosted-git-info.git#v1.0.0\").file(\"package.json\")` would return `https://raw.githubusercontent.com/npm/hosted-git-info/v1.0.0/package.json` * info.shortcut() eg, `github:npm/hosted-git-info` * info.browse() eg, `https://github.com/npm/hosted-git-info/tree/v1.2.0` * info.bugs() eg, `https://github.com/npm/hosted-git-info/issues` * info.docs() eg, `https://github.com/npm/hosted-git-info/tree/v1.2.0#readme` * info.https() eg, `git+https://github.com/npm/hosted-git-info.git` * info.sshurl() eg, `git+ssh://git@github.com/npm/hosted-git-info.git` * info.ssh() eg, `git@github.com:npm/hosted-git-info.git` * info.path() eg, `npm/hosted-git-info` * info.getDefaultRepresentation() Returns the default output type. The default output type is based on the string you passed in to be parsed * info.toString() Uses the getDefaultRepresentation to call one of the other methods to get a URL for this resource. As such `hostedGitInfo.fromUrl(url).toString()` will give you a normalized version of the URL that still uses the same protocol. Shortcuts will still be returned as shortcuts, but the special case github form of `org/project` will be normalized to `github:org/project`. SSH connect strings will be normalized into `git+ssh` URLs. ## Supported hosts Currently this supports Github, Bitbucket and Gitlab. Pull requests for additional hosts welcome."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/normalize-package-data/node_modules/is-builtin-module/node_modules/builtin-modules/readme.md","tags":[],"body":"# builtin-modules [![Build Status](https://travis-ci.org/sindresorhus/builtin-modules.svg?branch=master)](https://travis-ci.org/sindresorhus/builtin-modules) > List of the Node.js builtin modules The list is just a [JSON file](builtin-modules.json) and can be used wherever. ## Install ``` $ npm install --save builtin-modules ``` ## Usage ```js var builtinModules = require('builtin-modules'); console.log(builinModules); //=> ['assert', 'buffer', ...] ``` ## API Returns an array of builtin modules fetched from the running Node.js version. ### Static list This module also comes bundled with a static array of builtin modules generated from the latest Node.js version. You can get it with `require('builtin-modules/static');` ## Related - [is-builtin-module](https://github.com/sindresorhus/is-builtin-module) - Check if a string matches the name of a Node.js builtin module ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/normalize-package-data/node_modules/is-builtin-module/readme.md","tags":[],"body":"# is-builtin-module [![Build Status](https://travis-ci.org/sindresorhus/is-builtin-module.svg?branch=master)](https://travis-ci.org/sindresorhus/is-builtin-module) > Check if a string matches the name of a Node.js builtin module ## Install ``` $ npm install --save is-builtin-module ``` ## Usage ```js var isBuiltinModule = require('is-builtin-module'); isBuiltinModule('fs'); //=> true isBuiltinModule('unicorn'); //=> false :( ``` ## Related - [builtin-modules](https://github.com/sindresorhus/builtin-modules) - List of the Node.js builtin modules ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/normalize-package-data/node_modules/semver/README.md","tags":[],"body":"semver(1) -- The semantic versioner for npm =========================================== ## Usage $ npm install semver semver.valid('1.2.3') // '1.2.3' semver.valid('a.b.c') // null semver.clean(' =v1.2.3 ') // '1.2.3' semver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true semver.gt('1.2.3', '9.8.7') // false semver.lt('1.2.3', '9.8.7') // true As a command-line utility: $ semver -h SemVer 5.1.0 A JavaScript implementation of the http://semver.org/ specification Copyright Isaac Z. Schlueter Usage: semver [options] [ [...]] Prints valid versions sorted by SemVer precedence Options: -r --range Print versions that match the specified range. -i --increment [] Increment a version by the specified level. Level can be one of: major, minor, patch, premajor, preminor, prepatch, or prerelease. Default level is 'patch'. Only one version may be specified. --preid Identifier to be used to prefix premajor, preminor, prepatch or prerelease version increments. -l --loose Interpret versions and ranges loosely Program exits successfully if any valid version satisfies all supplied ranges, and prints all satisfying versions. If no satisfying versions are found, then exits failure. Versions are printed in ascending order, so supplying multiple versions to the utility will just sort them. ## Versions A \"version\" is described by the `v2.0.0` specification found at . A leading `\"=\"` or `\"v\"` character is stripped off and ignored. ## Ranges A `version range` is a set of `comparators` which specify versions that satisfy the range. A `comparator` is composed of an `operator` and a `version`. The set of primitive `operators` is: * `` Greater than * `>=` Greater than or equal to * `=` Equal. If no operator is specified, then equality is assumed, so this operator is optional, but MAY be included. For example, the comparator `>=1.2.7` would match the versions `1.2.7`, `1.2.8`, `2.5.3`, and `1.3.9`, but not the versions `1.2.6` or `1.1.0`. Comparators can be joined by whitespace to form a `comparator set`, which is satisfied by the **intersection** of all of the comparators it includes. A range is composed of one or more comparator sets, joined by `||`. A version matches a range if and only if every comparator in at least one of the `||`-separated comparator sets is satisfied by the version. For example, the range `>=1.2.7 =1.2.9 1.2.3-alpha.3` would be allowed to match the version `1.2.3-alpha.7`, but it would *not* be satisfied by `3.4.5-alpha.9`, even though `3.4.5-alpha.9` is technically \"greater than\" `1.2.3-alpha.3` according to the SemVer sort rules. The version range only accepts prerelease tags on the `1.2.3` version. The version `3.4.5` *would* satisfy the range, because it does not have a prerelease flag, and `3.4.5` is greater than `1.2.3-alpha.7`. The purpose for this behavior is twofold. First, prerelease versions frequently are updated very quickly, and contain many breaking changes that are (by the author's design) not yet fit for public consumption. Therefore, by default, they are excluded from range matching semantics. Second, a user who has opted into using a prerelease version has clearly indicated the intent to use *that specific* set of alpha/beta/rc versions. By including a prerelease tag in the range, the user is indicating that they are aware of the risk. However, it is still not appropriate to assume that they have opted into taking a similar risk on the *next* set of prerelease versions. #### Prerelease Identifiers The method `.inc` takes an additional `identifier` string argument that will append the value of the string as a prerelease identifier: ```javascript > semver.inc('1.2.3', 'prerelease', 'beta') '1.2.4-beta.0' ``` command-line example: ```shell $ semver 1.2.3 -i prerelease --preid beta 1.2.4-beta.0 ``` Which then can be used to increment further: ```shell $ semver 1.2.4-beta.0 -i prerelease 1.2.4-beta.1 ``` ### Advanced Range Syntax Advanced range syntax desugars to primitive comparators in deterministic ways. Advanced ranges may be combined in the same way as primitive comparators using white space or `||`. #### Hyphen Ranges `X.Y.Z - A.B.C` Specifies an inclusive set. * `1.2.3 - 2.3.4` := `>=1.2.3 =1.2.0 =1.2.3 =1.2.3 =0.0.0` (Any version satisfies) * `1.x` := `>=1.0.0 =1.2.0 =0.0.0` * `1` := `1.x.x` := `>=1.0.0 =1.2.0 =1.2.3 =1.2.3 =1.2.0 =1.2.0 =1.0.0 =1.0.0 =0.2.3 =0.2.3 =0.2.0 =0.2.0 =0.0.0 =0.0.0 =1.2.3-beta.2 =0.1.0`, and *no* updates for versions `0.0.X`. Many authors treat a `0.x` version as if the `x` were the major \"breaking-change\" indicator. Caret ranges are ideal when an author may make breaking changes between `0.2.4` and `0.3.0` releases, which is a common practice. However, it presumes that there will *not* be breaking changes between `0.2.4` and `0.2.5`. It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices. * `^1.2.3` := `>=1.2.3 =0.2.3 =0.0.3 =1.2.3-beta.2 =0.0.3-beta =1.2.0 =0.0.0 =0.0.0 =1.0.0 =0.0.0 ' | '>=' | ' ['alpha', 1]` * `major(v)`: Return the major version number. * `minor(v)`: Return the minor version number. * `patch(v)`: Return the patch version number. ### Comparison * `gt(v1, v2)`: `v1 > v2` * `gte(v1, v2)`: `v1 >= v2` * `lt(v1, v2)`: `v1 '` or `'2.0.0` would have a hole from `1.2.9` until `2.0.0`, so the version `1.2.10` would not be greater than the range (because `2.0.1` satisfies, which is higher), nor less than the range (since `1.2.8` satisfies, which is lower), and it also does not satisfy the range. If you want to know if a version satisfies or does not satisfy a range, use the `satisfies(version, range)` function."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/normalize-package-data/node_modules/validate-npm-package-license/README.md","tags":[],"body":"validate-npm-package-license ============================ Give me a string and I'll tell you if it's a valid npm package license string. ```javascript var valid = require('validate-npm-package-license'); ``` SPDX license identifiers are valid license strings: ```javascript var assert = require('assert'); var validSPDXExpression = { validForNewPackages: true, validForOldPackages: true, spdx: true }; assert.deepEqual(valid('MIT'), validSPDXExpression); assert.deepEqual(valid('BSD-2-Clause'), validSPDXExpression); assert.deepEqual(valid('Apache-2.0'), validSPDXExpression); assert.deepEqual(valid('ISC'), validSPDXExpression); ``` The function will return a warning and suggestion for nearly-correct license identifiers: ```javascript assert.deepEqual( valid('Apache 2.0'), { validForOldPackages: false, validForNewPackages: false, warnings: [ 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN \"', 'license is similar to the valid expression \"Apache-2.0\"' ] } ); ``` SPDX expressions are valid, too ... ```javascript // Simple SPDX license expression for dual licensing assert.deepEqual( valid('(GPL-3.0 OR BSD-2-Clause)'), validSPDXExpression ); ``` ... except if they contain `LicenseRef`: ```javascript var warningAboutLicenseRef = { validForOldPackages: false, validForNewPackages: false, spdx: true, warnings: [ 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN \"', ] }; assert.deepEqual( valid('LicenseRef-Made-Up'), warningAboutLicenseRef ); assert.deepEqual( valid('(MIT OR LicenseRef-Made-Up)'), warningAboutLicenseRef ); ``` If you can't describe your licensing terms with standardized SPDX identifiers, put the terms in a file in the package and point users there: ```javascript assert.deepEqual( valid('SEE LICENSE IN LICENSE.txt'), { validForNewPackages: true, validForOldPackages: true, inFile: 'LICENSE.txt' } ); assert.deepEqual( valid('SEE LICENSE IN license.md'), { validForNewPackages: true, validForOldPackages: true, inFile: 'license.md' } ); ``` If there aren't any licensing terms, use `UNLICENSED`: ```javascript var unlicensed = { validForNewPackages: true, validForOldPackages: true, unlicensed: true }; assert.deepEqual(valid('UNLICENSED'), unlicensed); assert.deepEqual(valid('UNLICENCED'), unlicensed); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-correct/README.md","tags":[],"body":"```javascript var correct = require('spdx-correct'); var assert = require('assert'); assert.equal(correct('mit'), 'MIT') assert.equal(correct('Apache 2'), 'Apache-2.0') assert(correct('No idea what license') === null) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-correct/node_modules/spdx-license-ids/README.md","tags":[],"body":"# spdx-license-ids A list of [SPDX license](https://spdx.org/licenses/) identifiers [**Download JSON**](https://raw.githubusercontent.com/shinnn/spdx-license-ids/master/spdx-license-ids.json) ## Use as a JavaScript Library [![NPM version](https://img.shields.io/npm/v/spdx-license-ids.svg)](https://www.npmjs.org/package/spdx-license-ids) [![Bower version](https://img.shields.io/bower/v/spdx-license-ids.svg)](https://github.com/shinnn/spdx-license-ids/releases) [![Build Status](https://travis-ci.org/shinnn/spdx-license-ids.svg?branch=master)](https://travis-ci.org/shinnn/spdx-license-ids) [![Coverage Status](https://img.shields.io/coveralls/shinnn/spdx-license-ids.svg)](https://coveralls.io/r/shinnn/spdx-license-ids) [![devDependency Status](https://david-dm.org/shinnn/spdx-license-ids/dev-status.svg)](https://david-dm.org/shinnn/spdx-license-ids#info=devDependencies) ### Installation #### Package managers ##### [npm](https://www.npmjs.com/) ```sh npm install spdx-license-ids ``` ##### [bower](http://bower.io/) ```sh bower install spdx-license-ids ``` ##### [Duo](http://duojs.org/) ```javascript const spdxLicenseIds = require('shinnn/spdx-license-ids'); ``` #### Standalone [Download the script file directly.](https://raw.githubusercontent.com/shinnn/spdx-license-ids/master/spdx-license-ids-browser.js) ### API #### spdxLicenseIds Type: `Array` of `String` It returns an array of SPDX license identifiers. ```javascript const spdxLicenseIds = require('spdx-license-ids'); //=> ['Glide', 'Abstyles', 'AFL-1.1', ... ] ``` ## License [The Unlicense](./LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-expression-parse/README.md","tags":[],"body":"```javascript var parse = require('spdx-expression-parse') var assert = require('assert') var firstAST = { left: { license: 'LGPL-2.1' }, conjunction: 'or', right: { left: { license: 'BSD-3-Clause' }, conjunction: 'and', right: { license: 'MIT' } } } assert.deepEqual( parse('(LGPL-2.1 OR BSD-3-Clause AND MIT)'), firstAST) var secondAST = { left: { license: 'MIT' }, conjunction: 'and', right: { left: { license: 'LGPL-2.1', plus: true }, conjunction: 'and', right: { license: 'BSD-3-Clause' } } } assert.deepEqual( parse('(MIT AND (LGPL-2.1+ AND BSD-3-Clause))'), secondAST) // We handle all the bare SPDX license and exception ids as well. require('spdx-license-ids').forEach(function(id) { assert.deepEqual( parse(id), { license: id }) require('spdx-exceptions').forEach(function(e) { assert.deepEqual( parse(id + ' WITH ' + e), { license: id, exception: e }) }) }) ``` --- [The Software Package Data Exchange (SPDX) specification](http://spdx.org) is the work of the [Linux Foundation](http://www.linuxfoundation.org) and its contributors, and is licensed under the terms of [the Creative Commons Attribution License 3.0 Unported (SPDX: \"CC-BY-3.0\")](http://spdx.org/licenses/CC-BY-3.0). \"SPDX\" is a United States federally registered trademark of the Linux Foundation."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-expression-parse/node_modules/spdx-exceptions/README.md","tags":[],"body":"The package exports an array of strings."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-expression-parse/node_modules/spdx-license-ids/README.md","tags":[],"body":"# spdx-license-ids A list of [SPDX license](https://spdx.org/licenses/) identifiers [**Download JSON**](https://raw.githubusercontent.com/shinnn/spdx-license-ids/master/spdx-license-ids.json) ## Use as a JavaScript Library [![NPM version](https://img.shields.io/npm/v/spdx-license-ids.svg)](https://www.npmjs.org/package/spdx-license-ids) [![Bower version](https://img.shields.io/bower/v/spdx-license-ids.svg)](https://github.com/shinnn/spdx-license-ids/releases) [![Build Status](https://travis-ci.org/shinnn/spdx-license-ids.svg?branch=master)](https://travis-ci.org/shinnn/spdx-license-ids) [![Coverage Status](https://img.shields.io/coveralls/shinnn/spdx-license-ids.svg)](https://coveralls.io/r/shinnn/spdx-license-ids) [![devDependency Status](https://david-dm.org/shinnn/spdx-license-ids/dev-status.svg)](https://david-dm.org/shinnn/spdx-license-ids#info=devDependencies) ### Installation #### Package managers ##### [npm](https://www.npmjs.com/) ```sh npm install spdx-license-ids ``` ##### [bower](http://bower.io/) ```sh bower install spdx-license-ids ``` ##### [Duo](http://duojs.org/) ```javascript const spdxLicenseIds = require('shinnn/spdx-license-ids'); ``` #### Standalone [Download the script file directly.](https://raw.githubusercontent.com/shinnn/spdx-license-ids/master/spdx-license-ids-browser.js) ### API #### spdxLicenseIds Type: `Array` of `String` It returns an array of SPDX license identifiers. ```javascript const spdxLicenseIds = require('spdx-license-ids'); //=> ['Glide', 'Abstyles', 'AFL-1.1', ... ] ``` ## License [The Unlicense](./LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/node_modules/graceful-fs/README.md","tags":[],"body":"# graceful-fs graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors. ## Improvements over [fs module](http://api.nodejs.org/fs.html) * Queues up `open` and `readdir` calls, and retries them once something closes if there is an EMFILE error from too many file descriptors. * fixes `lchmod` for Node versions prior to 0.6.2. * implements `fs.lutimes` if possible. Otherwise it becomes a noop. * ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or `lchown` if the user isn't root. * makes `lchmod` and `lchown` become noops, if not available. * retries reading a file if `read` results in EAGAIN error. On Windows, it retries renaming a file for up to one second if `EACCESS` or `EPERM` error occurs, likely because antivirus software has locked the directory. ## USAGE ```javascript // use just like fs var fs = require('graceful-fs') // now go and do stuff with it... fs.readFileSync('some-file-or-whatever') ``` ## Global Patching If you want to patch the global fs module (or any other fs-like module) you can do this: ```javascript // Make sure to read the caveat below. var realFs = require('fs') var gracefulFs = require('graceful-fs') gracefulFs.gracefulify(realFs) ``` This should only ever be done at the top-level application layer, in order to delay on EMFILE errors from any fs-using dependencies. You should **not** do this in a library, because it can cause unexpected delays in other parts of the program. ## Changes This module is fairly stable at this point, and used by a lot of things. That being said, because it implements a subtle behavior change in a core part of the node API, even modest changes can be extremely breaking, and the versioning is thus biased towards bumping the major when in doubt. The main change between major versions has been switching between providing a fully-patched `fs` module vs monkey-patching the node core builtin, and the approach by which a non-monkey-patched `fs` was created. The goal is to trade `EMFILE` errors for slower fs operations. So, if you try to open a zillion files, rather than crashing, `open` operations will be queued up and wait for something else to `close`. There are advantages to each approach. Monkey-patching the fs means that no `EMFILE` errors can possibly occur anywhere in your application, because everything is using the same core `fs` module, which is patched. However, it can also obviously cause undesirable side-effects, especially if the module is loaded multiple times. Implementing a separate-but-identical patched `fs` module is more surgical (and doesn't run the risk of patching multiple times), but also imposes the challenge of keeping in sync with the core module. The current approach loads the `fs` module, and then creates a lookalike object that has all the same methods, except a few that are patched. It is safe to use in all versions of Node from 0.8 through 7.0. ### v4 * Do not monkey-patch the fs module. This module may now be used as a drop-in dep, and users can opt into monkey-patching the fs builtin if their app requires it. ### v3 * Monkey-patch fs, because the eval approach no longer works on recent node. * fixed possible type-error throw if rename fails on windows * verify that we *never* get EMFILE errors * Ignore ENOSYS from chmod/chown * clarify that graceful-fs must be used as a drop-in ### v2.1.0 * Use eval rather than monkey-patching fs. * readdir: Always sort the results * win32: requeue a file if error has an OK status ### v2.0 * A return to monkey patching * wrap process.cwd ### v1.1 * wrap readFile * Wrap fs.writeFile. * readdir protection * Don't clobber the fs builtin * Handle fs.read EAGAIN errors by trying again * Expose the curOpen counter * No-op lchown/lchmod if not implemented * fs.rename patch only for win32 * Patch fs.rename to handle AV software on Windows * Close #4 Chown should not fail on einval or eperm if non-root * Fix isaacs/fstream#1 Only wrap fs one time * Fix #3 Start at 1024 max files, then back off on EMFILE * lutimes that doens't blow up on Linux * A full on-rewrite using a queue instead of just swallowing the EMFILE error * Wrap Read/Write streams as well ### 1.0 * Update engines for node 0.6 * Be lstat-graceful on Windows * first"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/node_modules/pify/readme.md","tags":[],"body":"# pify [![Build Status](https://travis-ci.org/sindresorhus/pify.svg?branch=master)](https://travis-ci.org/sindresorhus/pify) > Promisify a callback-style function ## Install ``` $ npm install --save pify ``` ## Usage ```js const fs = require('fs'); const pify = require('pify'); // promisify a single function pify(fs.readFile)('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); // or promisify all methods in a module pify(fs).readFile('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); ``` ## API ### pify(input, [promiseModule], [options]) Returns a promise wrapped version of the supplied function or module. #### input Type: `function`, `object` Callback-style function or module whose methods you want to promisify. #### promiseModule Type: `function` Custom promise module to use instead of the native one. Check out [`pinkie-promise`](https://github.com/floatdrop/pinkie-promise) if you need a tiny promise polyfill. #### options ##### multiArgs Type: `boolean` Default: `false` By default, the promisified function will only return the second argument from the callback, which works fine for most APIs. This option can be useful for modules like `request` that return multiple arguments. Turning this on will make it return an array of all arguments from the callback, excluding the error argument, instead of just the second argument. ```js const request = require('request'); const pify = require('pify'); pify(request, {multiArgs: true})('https://sindresorhus.com').then(result => { const [httpResponse, body] = result; }); ``` ##### include Type: `array` of (`string`|`regex`) Methods in a module to promisify. Remaining methods will be left untouched. ##### exclude Type: `array` of (`string`|`regex`) Default: `[/.+Sync$/]` Methods in a module **not** to promisify. Methods with names ending with `'Sync'` are excluded by default. ##### excludeMain Type: `boolean` Default: `false` By default, if given module is a function itself, this function will be promisified. Turn this option on if you want to promisify only methods of the module. ```js const pify = require('pify'); function fn() { return true; } fn.method = (data, callback) => { setImmediate(() => { callback(data, null); }); }; // promisify methods but not fn() const promiseFn = pify(fn, {excludeMain: true}); if (promiseFn()) { promiseFn.method('hi').then(data => { console.log(data); }); } ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/node_modules/pinkie-promise/node_modules/pinkie/readme.md","tags":[],"body":"> Itty bitty little widdle twinkie pinkie [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation [![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie) [![Coverage Status](https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&service=github)](https://coveralls.io/github/floatdrop/pinkie?branch=master) There are [tons of Promise implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone) out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in Node.js land (it should be browserify-able though). ## Install ``` $ npm install --save pinkie ``` ## Usage ```js var fs = require('fs'); var Promise = require('pinkie'); new Promise(function (resolve, reject) { fs.readFile('foo.json', 'utf8', function (err, data) { if (err) { reject(err); return; } resolve(data); }); }); //=> Promise ``` ### API `pinkie` exports bare [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation and polyfills [Node.js rejection events](https://nodejs.org/api/process.html#process_event_unhandledrejection). In case you forgot: #### new Promise(executor) Returns new instance of `Promise`. ##### executor *Required* Type: `function` Function with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. #### pinkie.all(promises) Returns a promise that resolves when all of the promises in the `promises` Array argument have resolved. #### pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise. #### pinkie.reject(reason) Returns a Promise object that is rejected with the given `reason`. #### pinkie.resolve(value) Returns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`. ## Related - [pinkie-promise](https://github.com/floatdrop/pinkie-promise) - Returns the native Promise or this module ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/node_modules/pinkie-promise/readme.md","tags":[],"body":"# pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise) > [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) ponyfill Module exports global Promise object (if available) or [`pinkie`](http://github.com/floatdrop/pinkie) Promise polyfill. ## Install ``` $ npm install --save pinkie-promise ``` ## Usage ```js var Promise = require('pinkie-promise'); new Promise(function (resolve) { resolve('unicorns'); }); //=> Promise { 'unicorns' } ``` ## Related - [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/readme.md","tags":[],"body":"# path-type [![Build Status](https://travis-ci.org/sindresorhus/path-type.svg?branch=master)](https://travis-ci.org/sindresorhus/path-type) > Check if a path is a file, directory, or symlink ## Install ``` $ npm install --save path-type ``` ## Usage ```js var pathType = require('path-type'); pathType.file('package.json').then(function (isFile) { console.log(isFile); //=> true }) ``` ## API ### .file(path) ### .dir(path) ### .symlink(path) Returns a promise that resolves to a boolean of whether the path is the checked type. ### .fileSync(path) ### .dirSync(path) ### .symlinkSync(path) Returns a boolean of whether the path is the checked type. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/readme.md","tags":[],"body":"# read-pkg [![Build Status](https://travis-ci.org/sindresorhus/read-pkg.svg?branch=master)](https://travis-ci.org/sindresorhus/read-pkg) > Read a package.json file ## Why - [Gracefully handles filesystem issues](https://github.com/isaacs/node-graceful-fs) - [Strips UTF-8 BOM](https://github.com/sindresorhus/strip-bom) - [Throws more helpful JSON errors](https://github.com/sindresorhus/parse-json) - [Normalizes the data](https://github.com/npm/normalize-package-data#what-normalization-currently-entails) ## Install ``` $ npm install --save read-pkg ``` ## Usage ```js var readPkg = require('read-pkg'); readPkg().then(function (pkg) { console.log(pkg); //=> {name: 'read-pkg', ...} }); readPkg(__dirname).then(function (pkg) { console.log(pkg); //=> {name: 'read-pkg', ...} }); readPkg(path.join('unicorn', 'package.json')).then(function (pkg) { console.log(pkg); //=> {name: 'read-pkg', ...} }); ``` ## API ### readPkg([path], [options]) Returns a promise that resolves to the parsed JSON. ### readPkg.sync([path], [options]) Returns the parsed JSON. #### path Type: `string` Default: `.` Path to a `package.json` file or its directory. #### options ##### normalize Type: `boolean` Default: `true` [Normalize](https://github.com/npm/normalize-package-data#what-normalization-currently-entails) the package data. ## Related - [read-pkg-up](https://github.com/sindresorhus/read-pkg-up) - Read the closest package.json file - [write-pkg](https://github.com/sindresorhus/write-pkg) - Write a `package.json` file - [load-json-file](https://github.com/sindresorhus/load-json-file) - Read and parse a JSON file ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/read-pkg-up/readme.md","tags":[],"body":"# read-pkg-up [![Build Status](https://travis-ci.org/sindresorhus/read-pkg-up.svg?branch=master)](https://travis-ci.org/sindresorhus/read-pkg-up) > Read the closest package.json file ## Why - [Finds the closest package.json](https://github.com/sindresorhus/find-up) - [Gracefully handles filesystem issues](https://github.com/isaacs/node-graceful-fs) - [Strips UTF-8 BOM](https://github.com/sindresorhus/strip-bom) - [Throws more helpful JSON errors](https://github.com/sindresorhus/parse-json) - [Normalizes the data](https://github.com/npm/normalize-package-data#what-normalization-currently-entails) ## Install ``` $ npm install --save read-pkg-up ``` ## Usage ```js var readPkgUp = require('read-pkg-up'); readPkgUp().then(function (result) { console.log(result); /* { pkg: { name: 'awesome-package', version: '1.0.0', ... }, path: '/Users/sindresorhus/dev/awesome-package' } */ }); ``` ## API ### readPkgUp([options]) Returns a promise that resolves to a result object. ### readPkgUp.sync([options]) Returns a result object. #### options ##### cwd Type: `string` Default: `.` Directory to start looking for a package.json file. ##### normalize Type: `boolean` Default: `true` [Normalize](https://github.com/npm/normalize-package-data#what-normalization-currently-entails) the package data. ## Related - [read-pkg](https://github.com/sindresorhus/read-pkg) - Read a package.json file - [find-up](https://github.com/sindresorhus/find-up) - Find a file by walking up parent directories - [pkg-conf](https://github.com/sindresorhus/pkg-conf) - Get namespaced config from the closest package.json ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/require-main-filename/README.md","tags":[],"body":"# require-main-filename [![Build Status](https://travis-ci.org/yargs/require-main-filename.png)](https://travis-ci.org/yargs/require-main-filename) [![Coverage Status](https://coveralls.io/repos/yargs/require-main-filename/badge.svg?branch=master)](https://coveralls.io/r/yargs/require-main-filename?branch=master) [![NPM version](https://img.shields.io/npm/v/require-main-filename.svg)](https://www.npmjs.com/package/require-main-filename) `require.main.filename` is great for figuring out the entry point for the current application. This can be combined with a module like [pkg-conf](https://www.npmjs.com/package/pkg-conf) to, _as if by magic_, load top-level configuration. Unfortunately, `require.main.filename` sometimes fails when an application is executed with an alternative process manager, e.g., [iisnode](https://github.com/tjanczuk/iisnode). `require-main-filename` is a shim that addresses this problem. ## Usage ```js var main = require('require-main-filename')() // use main as an alternative to require.main.filename. ``` ## License ISC"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/set-blocking/CHANGELOG.md","tags":[],"body":"# Change Log All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines. # 1.0.0 (2016-05-14) ### Features * implemented shim for stream._handle.setBlocking ([6bde0c0](https://github.com/yargs/set-blocking/commit/6bde0c0))"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/set-blocking/README.md","tags":[],"body":"# set-blocking [![Build Status](https://travis-ci.org/yargs/set-blocking.svg)](https://travis-ci.org/yargs/set-blocking) [![NPM version](https://img.shields.io/npm/v/set-blocking.svg)](https://www.npmjs.com/package/set-blocking) [![Coverage Status](https://coveralls.io/repos/yargs/set-blocking/badge.svg?branch=)](https://coveralls.io/r/yargs/set-blocking?branch=master) [![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version) set blocking `stdio` and `stderr` ensuring that terminal output does not truncate. ```js const setBlocking = require('set-blocking') setBlocking(true) console.log(someLargeStringToOutput) ``` ## License ISC"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/string-width/node_modules/code-point-at/node_modules/number-is-nan/readme.md","tags":[],"body":"# number-is-nan [![Build Status](https://travis-ci.org/sindresorhus/number-is-nan.svg?branch=master)](https://travis-ci.org/sindresorhus/number-is-nan) > ES6 [`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save number-is-nan ``` ## Usage ```js var numberIsNan = require('number-is-nan'); numberIsNan(NaN); //=> true numberIsNan('unicorn'); //=> false ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/string-width/node_modules/code-point-at/readme.md","tags":[],"body":"# code-point-at [![Build Status](https://travis-ci.org/sindresorhus/code-point-at.svg?branch=master)](https://travis-ci.org/sindresorhus/code-point-at) > ES2015 [`String#codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save code-point-at ``` ## Usage ```js var codePointAt = require('code-point-at'); codePointAt('🐴'); //=> 128052 codePointAt('abc', 2); //=> 99 ``` ## API ### codePointAt(input, [position]) ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/string-width/node_modules/is-fullwidth-code-point/node_modules/number-is-nan/readme.md","tags":[],"body":"# number-is-nan [![Build Status](https://travis-ci.org/sindresorhus/number-is-nan.svg?branch=master)](https://travis-ci.org/sindresorhus/number-is-nan) > ES6 [`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save number-is-nan ``` ## Usage ```js var numberIsNan = require('number-is-nan'); numberIsNan(NaN); //=> true numberIsNan('unicorn'); //=> false ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/string-width/node_modules/is-fullwidth-code-point/readme.md","tags":[],"body":"# is-fullwidth-code-point [![Build Status](https://travis-ci.org/sindresorhus/is-fullwidth-code-point.svg?branch=master)](https://travis-ci.org/sindresorhus/is-fullwidth-code-point) > Check if the character represented by a given [Unicode code point](https://en.wikipedia.org/wiki/Code_point) is [fullwidth](https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms) ## Install ``` $ npm install --save is-fullwidth-code-point ``` ## Usage ```js var isFullwidthCodePoint = require('is-fullwidth-code-point'); isFullwidthCodePoint('谢'.codePointAt()); //=> true isFullwidthCodePoint('a'.codePointAt()); //=> false ``` ## API ### isFullwidthCodePoint(input) #### input Type: `number` [Code point](https://en.wikipedia.org/wiki/Code_point) of a character. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/string-width/node_modules/strip-ansi/node_modules/ansi-regex/readme.md","tags":[],"body":"# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex) > Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save ansi-regex ``` ## Usage ```js var ansiRegex = require('ansi-regex'); ansiRegex().test('\\u001b[4mcake\\u001b[0m'); //=> true ansiRegex().test('cake'); //=> false '\\u001b[4mcake\\u001b[0m'.match(ansiRegex()); //=> ['\\u001b[4m', '\\u001b[0m'] ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/string-width/node_modules/strip-ansi/readme.md","tags":[],"body":"# strip-ansi [![Build Status](https://travis-ci.org/chalk/strip-ansi.svg?branch=master)](https://travis-ci.org/chalk/strip-ansi) > Strip [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save strip-ansi ``` ## Usage ```js var stripAnsi = require('strip-ansi'); stripAnsi('\\u001b[4mcake\\u001b[0m'); //=> 'cake' ``` ## Related - [strip-ansi-cli](https://github.com/chalk/strip-ansi-cli) - CLI for this module - [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes - [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/string-width/readme.md","tags":[],"body":"# string-width [![Build Status](https://travis-ci.org/sindresorhus/string-width.svg?branch=master)](https://travis-ci.org/sindresorhus/string-width) > Get the visual width of a string - the number of columns required to display it Some Unicode characters are [fullwidth](https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms) and use double the normal width. Useful to be able to measure the actual width of command-line output. ## Install ``` $ npm install --save string-width ``` ## Usage ```js var stringWidth = require('string-width'); stringWidth('古'); //=> 2 stringWidth('\\u001b[1m古\\u001b[22m'); //=> 2 stringWidth('a'); //=> 1 ``` ## Related - [string-width-cli](https://github.com/sindresorhus/string-width-cli) - CLI for this module - [string-length](https://github.com/sindresorhus/string-length) - Get the real length of a string ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/window-size/README.md","tags":[],"body":"# window-size [![NPM version](https://badge.fury.io/js/window-size.svg)](http://badge.fury.io/js/window-size) [![Build Status](https://travis-ci.org/jonschlinkert/window-size.svg)](https://travis-ci.org/jonschlinkert/window-size) > Reliable way to to get the height and width of the terminal/console in a node.js environment. ## Install Install with [npm](https://www.npmjs.com/) ```sh $ npm i window-size --save ``` ## Usage ```js var size = require('window-size'); size.height; // \"25\" (rows) size.width; // \"80\" (columns) ``` ## Other projects * [base-cli](https://www.npmjs.com/package/base-cli): Plugin for base-methods that maps built-in methods to CLI args (also supports methods from a… [more](https://www.npmjs.com/package/base-cli) | [homepage](https://github.com/jonschlinkert/base-cli) * [lint-deps](https://www.npmjs.com/package/lint-deps): CLI tool that tells you when dependencies are missing from package.json and offers you a… [more](https://www.npmjs.com/package/lint-deps) | [homepage](https://github.com/jonschlinkert/lint-deps) * [yargs](https://www.npmjs.com/package/yargs): Light-weight option parsing with an argv hash. No optstrings attached. | [homepage](https://github.com/bcoe/yargs#readme) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/window-size/issues/new). ## Author **Jon Schlinkert** + [github/jonschlinkert](https://github.com/jonschlinkert) + [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2014-2015 [Jon Schlinkert](https://github.com/jonschlinkert) Released under the MIT license. *** _This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on November 15, 2015._"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/y18n/README.md","tags":[],"body":"# y18n [![Build Status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url] [![NPM version][npm-image]][npm-url] [![js-standard-style][standard-image]][standard-url] The bare-bones internationalization library used by yargs. Inspired by [i18n](https://www.npmjs.com/package/i18n). ## Examples _simple string translation:_ ```js var __ = require('y18n').__ console.log(__('my awesome string %s', 'foo')) ``` output: `my awesome string foo` _pluralization support:_ ```js var __n = require('y18n').__n console.log(__n('one fish %s', '%d fishes %s', 2, 'foo')) ``` output: `2 fishes foo` ## JSON Language Files The JSON language files should be stored in a `./locales` folder. File names correspond to locales, e.g., `en.json`, `pirate.json`. When strings are observed for the first time they will be added to the JSON file corresponding to the current locale. ## Methods ### require('y18n')(config) Create an instance of y18n with the config provided, options include: * `directory`: the locale directory, default `./locales`. * `updateFiles`: should newly observed strings be updated in file, default `true`. * `locale`: what locale should be used. * `fallbackToLanguage`: should fallback to a language-only file (e.g. `en.json`) be allowed if a file matching the locale does not exist (e.g. `en_US.json`), default `true`. ### y18n.\\_\\_(str, arg, arg, arg) Print a localized string, `%s` will be replaced with `arg`s. ### y18n.\\_\\_n(singularString, pluralString, count, arg, arg, arg) Print a localized string with appropriate pluralization. If `%d` is provided in the string, the `count` will replace this placeholder. ### y18n.setLocale(str) Set the current locale being used. ### y18n.getLocale() What locale is currently being used? ### y18n.updateLocale(obj) Update the current locale with the key value pairs in `obj`. ## License ISC [travis-url]: https://travis-ci.org/yargs/y18n [travis-image]: https://img.shields.io/travis/yargs/y18n.svg [coveralls-url]: https://coveralls.io/github/yargs/y18n [coveralls-image]: https://img.shields.io/coveralls/yargs/y18n.svg [npm-url]: https://npmjs.org/package/y18n [npm-image]: https://img.shields.io/npm/v/y18n.svg [standard-image]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg [standard-url]: https://github.com/feross/standard"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/yargs-parser/CHANGELOG.md","tags":[],"body":"# Change Log All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines. # [2.4.0](https://github.com/yargs/yargs-parser/compare/v2.3.0...v2.4.0) (2016-04-11) ### Features * **environment:** Support nested options in environment variables ([#26](https://github.com/yargs/yargs-parser/issues/26)) thanks [@elas7](https://github.com/elas7) \\o/ ([020778b](https://github.com/yargs/yargs-parser/commit/020778b)) # [2.3.0](https://github.com/yargs/yargs-parser/compare/v2.2.0...v2.3.0) (2016-04-09) ### Bug Fixes * **boolean:** fix for boolean options with non boolean defaults (#20) ([2dbe86b](https://github.com/yargs/yargs-parser/commit/2dbe86b)), closes [(#20](https://github.com/(/issues/20) * **package:** remove tests from tarball ([0353c0d](https://github.com/yargs/yargs-parser/commit/0353c0d)) * **parsing:** handle calling short option with an empty string as the next value. ([a867165](https://github.com/yargs/yargs-parser/commit/a867165)) * boolean flag when next value contains the strings 'true' or 'false'. ([69941a6](https://github.com/yargs/yargs-parser/commit/69941a6)) * update dependencies; add standard-version bin for next release (#24) ([822d9d5](https://github.com/yargs/yargs-parser/commit/822d9d5)) ### Features * **configuration:** Allow to pass configuration objects to yargs-parser ([0780900](https://github.com/yargs/yargs-parser/commit/0780900)) * **normalize:** allow normalize to work with arrays ([e0eaa1a](https://github.com/yargs/yargs-parser/commit/e0eaa1a))"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/yargs-parser/README.md","tags":[],"body":"# yargs-parser [![Build Status](https://travis-ci.org/yargs/yargs-parser.png)](https://travis-ci.org/yargs/yargs-parser) [![Coverage Status](https://coveralls.io/repos/yargs/yargs-parser/badge.svg?branch=)](https://coveralls.io/r/yargs/yargs-parser?branch=master) [![NPM version](https://img.shields.io/npm/v/yargs-parser.svg)](https://www.npmjs.com/package/yargs-parser) [![Windows Tests](https://img.shields.io/appveyor/ci/bcoe/yargs-parser/master.svg?label=Windows%20Tests)](https://ci.appveyor.com/project/bcoe/yargs-parser) [![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version) The mighty option parser used by [yargs](https://github.com/bcoe/yargs). visit the [yargs website](http://yargs.js.org/) for more examples, and thorough usage instructions. ## Example ```sh npm i yargs-parser --save ``` ```js var argv = require('yargs-parser')(process.argv.slice(2)); console.log(argv) ``` ```sh node example.js --foo=33 --bar hello { _: [], foo: 33, bar: 'hello' } ``` _or parse a string!_ ```js var argv = require('./')('--foo=99 --bar=33'); console.log(argv) ``` ```sh { _: [], foo: 99, bar: 33 } ``` ## API ### require('yargs-parser')(args, opts={}) Parses command line arguments returning a simple mapping of keys and values. **expects:** * `args`: an array or string representing the options to parse. * `opts`: provide a set of hints indicating how `args` should be parsed: * `opts.alias`: an object representing the set of aliases for a key: `{alias: {foo: ['f']}}`. * `opts.array`: indicate that keys should be parsed as an array: `{array: ['foo', 'bar']}`. * `opts.boolean`: arguments should be parsed as booleans: `{boolean: ['x', 'y']}`. * `opts.config`: indicate a key that represents a path to a configuration file (this file will be loaded and parsed). * `opts.count`: indicate a key that should be used as a counter, e.g., `-vvv` = `{v: 3}`. * `opts.default`: provide default values for keys: `{default: {x: 33, y: 'hello world!'}}`. * `opts.envPrefix`: environment variables (`process.env`) with the prefix provided should be parsed. * `opts.narg`: specify that a key requires `n` arguments: `{narg: {x: 2}}`. * `opts.normalize`: `path.normalize()` will be applied to values set to this key. * `opts.string`: keys should be treated as strings (even if they resemble a number `-x 33`). * `opts.configuration`: provide configuration options to the yargs-parser (see: [configuration](#configuration)). * `opts.number`: keys should be treated as numbers. **returns:** * `obj`: an object representing the parsed value of `args` * `key/value`: key value pairs for each argument and their aliases. * `_`: an array representing the positional arguments. ### require('yargs-parser').detailed(args, opts={}) Parses a command line string, returning detailed information required by the yargs engine. **expects:** * `args`: an array or string representing options to parse. * `opts`: provide a set of hints indicating how `args`, inputs are identical to `require('yargs-parser')(args, opts={})`. **returns:** * `argv`: an object representing the parsed value of `args` * `key/value`: key value pairs for each argument and their aliases. * `_`: an array representing the positional arguments. * `error`: populated with an error object if an exception occurred during parsing. * `aliases`: the inferred list of aliases built by combining lists in `opts.alias`. * `newAliases`: any new aliases added via camel-case expansion. * `configuration`: the configuration loaded from the `yargs` stanza in package.json. ### Configuration The yargs-parser applies several automated transformations on the keys provided in `args`. These features can be turned on and off using the `configuration` field of `opts`. ```js var parsed = parser(['--no-dice'], { configuration: { 'boolean-negation': false } }) ``` ### short option groups * default: `true`. * key: `short-option-groups`. Should a group of short-options be treated as boolean flags? ```sh node example.js -abc { _: [], a: true, b: true, c: true } ``` _if disabled:_ ```sh node example.js -abc { _: [], abc: true } ``` ### camel-case expansion * default: `true`. * key: `camel-case-expansion`. Should hyphenated arguments be expanded into camel-case aliases? ```sh node example.js --foo-bar { _: [], 'foo-bar': true, fooBar: true } ``` _if disabled:_ ```sh node example.js --foo-bar { _: [], 'foo-bar': true } ``` ### dot-notation * default: `true` * key: `dot-notation` Should keys that contain `.` be treated as objects? ```sh node example.js --foo.bar { _: [], foo: { bar: true } } ``` _if disabled:_ ```sh node example.js --foo.bar { _: [], \"foo.bar\": true } ``` ### parse numbers * default: `true` * key: 'parse-numbers' Should keys that look like numbers be treated as such? ```sh node example.js --foo=99.3 { _: [], foo: 99.3 } ``` _if disabled:_ ```sh node example.js --foo=99.3 { _: [], foo: \"99.3\" } ``` ### boolean negation * default: `true` * key: 'boolean-negation' Should variables prefixed with `--no` be treated as negations? ```sh node example.js --no-foo { _: [], foo: false } ``` _if disabled:_ ```sh node example.js --no-foo { _: [], \"no-foo\": true } ``` ## Special Thanks The yargs project evolves from optimist and minimist. It owes its existence to a lot of James Halliday's hard work. Thanks [substack](https://github.com/substack) **beep** **boop** \\o/ ## License ISC"},{"title":"","url":"/open-gsa-redesign/node_modules/browser-sync/node_modules/yargs/node_modules/yargs-parser/node_modules/camelcase/readme.md","tags":[],"body":"# camelcase [![Build Status](https://travis-ci.org/sindresorhus/camelcase.svg?branch=master)](https://travis-ci.org/sindresorhus/camelcase) > Convert a dash/dot/underscore/space separated string to camelCase: `foo-bar` → `fooBar` ## Install ``` $ npm install --save camelcase ``` ## Usage ```js const camelCase = require('camelcase'); camelCase('foo-bar'); //=> 'fooBar' camelCase('foo_bar'); //=> 'fooBar' camelCase('Foo-Bar'); //=> 'fooBar' camelCase('--foo.bar'); //=> 'fooBar' camelCase('__foo__bar__'); //=> 'fooBar' camelCase('foo bar'); //=> 'fooBar' console.log(process.argv[3]); //=> '--foo-bar' camelCase(process.argv[3]); //=> 'fooBar' camelCase('foo', 'bar'); //=> 'fooBar' camelCase('__foo__', '--bar'); //=> 'fooBar' ``` ## Related - [decamelize](https://github.com/sindresorhus/decamelize) - The inverse of this module - [uppercamelcase](https://github.com/SamVerschueren/uppercamelcase) - Like this module, but to PascalCase instead of camelCase ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/README.md","tags":[],"body":"# gulp-shell [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status][david-dm-image]][david-dm-url] [![Downloads][downloads-image]][npm-url] [npm-url]: https://npmjs.org/package/gulp-shell [npm-image]: https://img.shields.io/npm/v/gulp-shell.svg [travis-url]: https://travis-ci.org/sun-zheng-an/gulp-shell [travis-image]: https://img.shields.io/travis/sun-zheng-an/gulp-shell/master.svg [coveralls-url]: https://coveralls.io/r/sun-zheng-an/gulp-shell [coveralls-image]: https://img.shields.io/coveralls/sun-zheng-an/gulp-shell/master.svg [david-dm-url]: https://david-dm.org/sun-zheng-an/gulp-shell [david-dm-image]: https://img.shields.io/david/sun-zheng-an/gulp-shell.svg [downloads-image]: https://img.shields.io/npm/dm/gulp-shell.svg > A handy command line interface for gulp ## Installation ```shell npm install --save-dev gulp-shell ``` ## Usage ```js var gulp = require('gulp') var shell = require('gulp-shell') gulp.task('example', function () { return gulp.src('*.js', {read: false}) .pipe(shell([ 'echo ', 'ls -l ' ], { templateData: { f: function (s) { return s.replace(/$/, '.bak') } } })) }) ``` If you just want to execute a series of commands only once, ~~starting the stream with `gulp.src('')`~~ should do the trick. However, [this is an anti-pattern](https://github.com/sun-zheng-an/gulp-shell/issues/55), and **it won't work in `gulp 4.0`** . Or you can use this shorthand: ```js gulp.task('shorthand', shell.task([ 'echo hello', 'echo world' ])) ``` You can find more examples in the [gulpfile][] of this project. [gulpfile]: https://github.com/sun-zheng-an/gulp-shell/blob/master/gulpfile.js ## API ### shell(commands, options) or shell.task(commands, options) #### commands type: `Array` or `String` A command can be a [template][] which can be interpolated by some [file][] info (e.g. `file.path`). [template]: http://lodash.com/docs#template [file]: https://github.com/wearefractal/vinyl #### options.verbose type: `Boolean` default: `false` Set to `true` to print the command(s) to stdout as they are executed #### options.errorMessage type: `String` default: ``Command `` failed with exit code `` You can add a custom error message for when the command fails. This can be a [template][] which can be interpolated with the current `command`, some [file][] info (e.g. `file.path`) and some [error][] info (e.g. `error.code`). [error]: http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback #### options.ignoreErrors type: `Boolean` default: `false` By default, it will emit an `error` event when the command finishes unsuccessfully. #### options.quiet type: `Boolean` default: `false` By default, it will print the command output. #### options.interactive type: `Boolean` default: `false` Turn it on only if you need to run some interactive commands. #### options.cwd type: `String` default: [`process.cwd()`](http://nodejs.org/api/process.html#process_process_cwd) Sets the current working directory for the command. This can be a [template][] which can be interpolated by some [file][] info (e.g. `file.path`). [template]: http://lodash.com/docs#template #### options.templateData type: `Object` The data that can be accessed in template. #### options.maxBuffer type: `Number` default: 16MB(16 * 1024 * 1024) You won't need to set this option unless you encounter a \"stdout maxBuffer exceeded\" error. #### options.timeout type: `Number` default: undefined (no timeout) The maximum amount of time in milliseconds the process is allowed to run. #### options.env type: `Object` By default, all the commands will be executed in an environment with all the variables in [`process.env`](http://nodejs.org/api/process.html#process_process_env) and `PATH` prepended by `./node_modules/.bin` (allowing you to run executables in your Node's dependencies). You can override any environment variables with this option. For example, setting it to `{PATH: process.env.PATH}` will reset the `PATH` if the default one brings your some troubles."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/async/CHANGELOG.md","tags":[],"body":"# v1.5.2 - Allow using `\"consructor\"` as an argument in `memoize` (#998) - Give a better error messsage when `auto` dependency checking fails (#994) - Various doc updates (#936, #956, #979, #1002) # v1.5.1 - Fix issue with `pause` in `queue` with concurrency enabled (#946) - `while` and `until` now pass the final result to callback (#963) - `auto` will properly handle concurrency when there is no callback (#966) - `auto` will now properly stop execution when an error occurs (#988, #993) - Various doc fixes (#971, #980) # v1.5.0 - Added `transform`, analogous to [`_.transform`](http://lodash.com/docs#transform) (#892) - `map` now returns an object when an object is passed in, rather than array with non-numeric keys. `map` will begin always returning an array with numeric indexes in the next major release. (#873) - `auto` now accepts an optional `concurrency` argument to limit the number of running tasks (#637) - Added `queue#workersList()`, to retrieve the list of currently running tasks. (#891) - Various code simplifications (#896, #904) - Various doc fixes :scroll: (#890, #894, #903, #905, #912) # v1.4.2 - Ensure coverage files don't get published on npm (#879) # v1.4.1 - Add in overlooked `detectLimit` method (#866) - Removed unnecessary files from npm releases (#861) - Removed usage of a reserved word to prevent :boom: in older environments (#870) # v1.4.0 - `asyncify` now supports promises (#840) - Added `Limit` versions of `filter` and `reject` (#836) - Add `Limit` versions of `detect`, `some` and `every` (#828, #829) - `some`, `every` and `detect` now short circuit early (#828, #829) - Improve detection of the global object (#804), enabling use in WebWorkers - `whilst` now called with arguments from iterator (#823) - `during` now gets called with arguments from iterator (#824) - Code simplifications and optimizations aplenty ([diff](https://github.com/caolan/async/compare/v1.3.0...v1.4.0)) # v1.3.0 New Features: - Added `constant` - Added `asyncify`/`wrapSync` for making sync functions work with callbacks. (#671, #806) - Added `during` and `doDuring`, which are like `whilst` with an async truth test. (#800) - `retry` now accepts an `interval` parameter to specify a delay between retries. (#793) - `async` should work better in Web Workers due to better `root` detection (#804) - Callbacks are now optional in `whilst`, `doWhilst`, `until`, and `doUntil` (#642) - Various internal updates (#786, #801, #802, #803) - Various doc fixes (#790, #794) Bug Fixes: - `cargo` now exposes the `payload` size, and `cargo.payload` can be changed on the fly after the `cargo` is created. (#740, #744, #783) # v1.2.1 Bug Fix: - Small regression with synchronous iterator behavior in `eachSeries` with a 1-element array. Before 1.1.0, `eachSeries`'s callback was called on the same tick, which this patch restores. In 2.0.0, it will be called on the next tick. (#782) # v1.2.0 New Features: - Added `timesLimit` (#743) - `concurrency` can be changed after initialization in `queue` by setting `q.concurrency`. The new concurrency will be reflected the next time a task is processed. (#747, #772) Bug Fixes: - Fixed a regression in `each` and family with empty arrays that have additional properties. (#775, #777) # v1.1.1 Bug Fix: - Small regression with synchronous iterator behavior in `eachSeries` with a 1-element array. Before 1.1.0, `eachSeries`'s callback was called on the same tick, which this patch restores. In 2.0.0, it will be called on the next tick. (#782) # v1.1.0 New Features: - `cargo` now supports all of the same methods and event callbacks as `queue`. - Added `ensureAsync` - A wrapper that ensures an async function calls its callback on a later tick. (#769) - Optimized `map`, `eachOf`, and `waterfall` families of functions - Passing a `null` or `undefined` array to `map`, `each`, `parallel` and families will be treated as an empty array (#667). - The callback is now optional for the composed results of `compose` and `seq`. (#618) - Reduced file size by 4kb, (minified version by 1kb) - Added code coverage through `nyc` and `coveralls` (#768) Bug Fixes: - `forever` will no longer stack overflow with a synchronous iterator (#622) - `eachLimit` and other limit functions will stop iterating once an error occurs (#754) - Always pass `null` in callbacks when there is no error (#439) - Ensure proper conditions when calling `drain()` after pushing an empty data set to a queue (#668) - `each` and family will properly handle an empty array (#578) - `eachSeries` and family will finish if the underlying array is modified during execution (#557) - `queue` will throw if a non-function is passed to `q.push()` (#593) - Doc fixes (#629, #766) # v1.0.0 No known breaking changes, we are simply complying with semver from here on out. Changes: - Start using a changelog! - Add `forEachOf` for iterating over Objects (or to iterate Arrays with indexes available) (#168 #704 #321) - Detect deadlocks in `auto` (#663) - Better support for require.js (#527) - Throw if queue created with concurrency `0` (#714) - Fix unneeded iteration in `queue.resume()` (#758) - Guard against timer mocking overriding `setImmediate` (#609 #611) - Miscellaneous doc fixes (#542 #596 #615 #628 #631 #690 #729) - Use single noop function internally (#546) - Optimize internal `_each`, `_map` and `_keys` functions."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/async/README.md","tags":[],"body":"# Async.js [![Build Status via Travis CI](https://travis-ci.org/caolan/async.svg?branch=master)](https://travis-ci.org/caolan/async) [![NPM version](http://img.shields.io/npm/v/async.svg)](https://www.npmjs.org/package/async) [![Coverage Status](https://coveralls.io/repos/caolan/async/badge.svg?branch=master)](https://coveralls.io/r/caolan/async?branch=master) [![Join the chat at https://gitter.im/caolan/async](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/caolan/async?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript. Although originally designed for use with [Node.js](http://nodejs.org) and installable via `npm install async`, it can also be used directly in the browser. Async is also installable via: - [bower](http://bower.io/): `bower install async` - [component](https://github.com/component/component): `component install caolan/async` - [jam](http://jamjs.org/): `jam install async` - [spm](http://spmjs.io/): `spm install async` Async provides around 20 functions that include the usual 'functional' suspects (`map`, `reduce`, `filter`, `each`…) as well as some common patterns for asynchronous control flow (`parallel`, `series`, `waterfall`…). All these functions assume you follow the Node.js convention of providing a single callback as the last argument of your `async` function. ## Quick Examples ```javascript async.map(['file1','file2','file3'], fs.stat, function(err, results){ // results is now an array of stats for each file }); async.filter(['file1','file2','file3'], fs.exists, function(results){ // results now equals an array of the existing files }); async.parallel([ function(){ ... }, function(){ ... } ], callback); async.series([ function(){ ... }, function(){ ... } ]); ``` There are many more functions available so take a look at the docs below for a full list. This module aims to be comprehensive, so if you feel anything is missing please create a GitHub issue for it. ## Common Pitfalls [(StackOverflow)](http://stackoverflow.com/questions/tagged/async.js) ### Synchronous iteration functions If you get an error like `RangeError: Maximum call stack size exceeded.` or other stack overflow issues when using async, you are likely using a synchronous iterator. By *synchronous* we mean a function that calls its callback on the same tick in the javascript event loop, without doing any I/O or using any timers. Calling many callbacks iteratively will quickly overflow the stack. If you run into this issue, just defer your callback with `async.setImmediate` to start a new call stack on the next tick of the event loop. This can also arise by accident if you callback early in certain cases: ```js async.eachSeries(hugeArray, function iterator(item, callback) { if (inCache(item)) { callback(null, cache[item]); // if many items are cached, you'll overflow } else { doSomeIO(item, callback); } }, function done() { //... }); ``` Just change it to: ```js async.eachSeries(hugeArray, function iterator(item, callback) { if (inCache(item)) { async.setImmediate(function () { callback(null, cache[item]); }); } else { doSomeIO(item, callback); //... ``` Async guards against synchronous functions in some, but not all, cases. If you are still running into stack overflows, you can defer as suggested above, or wrap functions with [`async.ensureAsync`](#ensureAsync) Functions that are asynchronous by their nature do not have this problem and don't need the extra callback deferral. If JavaScript's event loop is still a bit nebulous, check out [this article](http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/) or [this talk](http://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html) for more detailed information about how it works. ### Multiple callbacks Make sure to always `return` when calling a callback early, otherwise you will cause multiple callbacks and unpredictable behavior in many cases. ```js async.waterfall([ function (callback) { getSomething(options, function (err, result) { if (err) { callback(new Error(\"failed getting something:\" + err.message)); // we should return here } // since we did not return, this callback still will be called and // `processData` will be called twice callback(null, result); }); }, processData ], done) ``` It is always good practice to `return callback(err, result)` whenever a callback call is not the last statement of a function. ### Binding a context to an iterator This section is really about `bind`, not about `async`. If you are wondering how to make `async` execute your iterators in a given context, or are confused as to why a method of another library isn't working as an iterator, study this example: ```js // Here is a simple object with an (unnecessarily roundabout) squaring method var AsyncSquaringLibrary = { squareExponent: 2, square: function(number, callback){ var result = Math.pow(number, this.squareExponent); setTimeout(function(){ callback(null, result); }, 200); } }; async.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){ // result is [NaN, NaN, NaN] // This fails because the `this.squareExponent` expression in the square // function is not evaluated in the context of AsyncSquaringLibrary, and is // therefore undefined. }); async.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){ // result is [1, 4, 9] // With the help of bind we can attach a context to the iterator before // passing it to async. Now the square function will be executed in its // 'home' AsyncSquaringLibrary context and the value of `this.squareExponent` // will be as expected. }); ``` ## Download The source is available for download from [GitHub](https://github.com/caolan/async/blob/master/lib/async.js). Alternatively, you can install using Node Package Manager (`npm`): npm install async As well as using Bower: bower install async __Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed ## In the Browser So far it's been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage: ```html ``` ## Documentation Some functions are also available in the following forms: * `Series` - the same as `` but runs only a single async operation at a time * `Limit` - the same as `` but runs a maximum of `limit` async operations at a time ### Collections * [`each`](#each), `eachSeries`, `eachLimit` * [`forEachOf`](#forEachOf), `forEachOfSeries`, `forEachOfLimit` * [`map`](#map), `mapSeries`, `mapLimit` * [`filter`](#filter), `filterSeries`, `filterLimit` * [`reject`](#reject), `rejectSeries`, `rejectLimit` * [`reduce`](#reduce), [`reduceRight`](#reduceRight) * [`detect`](#detect), `detectSeries`, `detectLimit` * [`sortBy`](#sortBy) * [`some`](#some), `someLimit` * [`every`](#every), `everyLimit` * [`concat`](#concat), `concatSeries` ### Control Flow * [`series`](#seriestasks-callback) * [`parallel`](#parallel), `parallelLimit` * [`whilst`](#whilst), [`doWhilst`](#doWhilst) * [`until`](#until), [`doUntil`](#doUntil) * [`during`](#during), [`doDuring`](#doDuring) * [`forever`](#forever) * [`waterfall`](#waterfall) * [`compose`](#compose) * [`seq`](#seq) * [`applyEach`](#applyEach), `applyEachSeries` * [`queue`](#queue), [`priorityQueue`](#priorityQueue) * [`cargo`](#cargo) * [`auto`](#auto) * [`retry`](#retry) * [`iterator`](#iterator) * [`times`](#times), `timesSeries`, `timesLimit` ### Utils * [`apply`](#apply) * [`nextTick`](#nextTick) * [`memoize`](#memoize) * [`unmemoize`](#unmemoize) * [`ensureAsync`](#ensureAsync) * [`constant`](#constant) * [`asyncify`](#asyncify) * [`wrapSync`](#wrapSync) * [`log`](#log) * [`dir`](#dir) * [`noConflict`](#noConflict) ## Collections ### each(arr, iterator, [callback]) Applies the function `iterator` to each item in `arr`, in parallel. The `iterator` is called with an item from the list, and a callback for when it has finished. If the `iterator` passes an error to its `callback`, the main `callback` (for the `each` function) is immediately called with the error. Note, that since this function applies `iterator` to each item in parallel, there is no guarantee that the iterator functions will complete in order. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A function to apply to each item in `arr`. The iterator is passed a `callback(err)` which must be called once it has completed. If no error has occurred, the `callback` should be run without arguments or with an explicit `null` argument. The array index is not passed to the iterator. If you need the index, use [`forEachOf`](#forEachOf). * `callback(err)` - *Optional* A callback which is called when all `iterator` functions have finished, or an error occurs. __Examples__ ```js // assuming openFiles is an array of file names and saveFile is a function // to save the modified contents of that file: async.each(openFiles, saveFile, function(err){ // if any of the saves produced an error, err would equal that error }); ``` ```js // assuming openFiles is an array of file names async.each(openFiles, function(file, callback) { // Perform operation on file here. console.log('Processing file ' + file); if( file.length > 32 ) { console.log('This file name is too long'); callback('File name too long'); } else { // Do work to process file here console.log('File processed'); callback(); } }, function(err){ // if any of the file processing produced an error, err would equal that error if( err ) { // One of the iterations produced an error. // All processing will now stop. console.log('A file failed to process'); } else { console.log('All files have been processed successfully'); } }); ``` __Related__ * eachSeries(arr, iterator, [callback]) * eachLimit(arr, limit, iterator, [callback]) --------------------------------------- ### forEachOf(obj, iterator, [callback]) Like `each`, except that it iterates over objects, and passes the key as the second argument to the iterator. __Arguments__ * `obj` - An object or array to iterate over. * `iterator(item, key, callback)` - A function to apply to each item in `obj`. The `key` is the item's key, or index in the case of an array. The iterator is passed a `callback(err)` which must be called once it has completed. If no error has occurred, the callback should be run without arguments or with an explicit `null` argument. * `callback(err)` - *Optional* A callback which is called when all `iterator` functions have finished, or an error occurs. __Example__ ```js var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"}; var configs = {}; async.forEachOf(obj, function (value, key, callback) { fs.readFile(__dirname + value, \"utf8\", function (err, data) { if (err) return callback(err); try { configs[key] = JSON.parse(data); } catch (e) { return callback(e); } callback(); }) }, function (err) { if (err) console.error(err.message); // configs is now a map of JSON data doSomethingWith(configs); }) ``` __Related__ * forEachOfSeries(obj, iterator, [callback]) * forEachOfLimit(obj, limit, iterator, [callback]) --------------------------------------- ### map(arr, iterator, [callback]) Produces a new array of values by mapping each value in `arr` through the `iterator` function. The `iterator` is called with an item from `arr` and a callback for when it has finished processing. Each of these callback takes 2 arguments: an `error`, and the transformed item from `arr`. If `iterator` passes an error to its callback, the main `callback` (for the `map` function) is immediately called with the error. Note, that since this function applies the `iterator` to each item in parallel, there is no guarantee that the `iterator` functions will complete in order. However, the results array will be in the same order as the original `arr`. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A function to apply to each item in `arr`. The iterator is passed a `callback(err, transformed)` which must be called once it has completed with an error (which can be `null`) and a transformed item. * `callback(err, results)` - *Optional* A callback which is called when all `iterator` functions have finished, or an error occurs. Results is an array of the transformed items from the `arr`. __Example__ ```js async.map(['file1','file2','file3'], fs.stat, function(err, results){ // results is now an array of stats for each file }); ``` __Related__ * mapSeries(arr, iterator, [callback]) * mapLimit(arr, limit, iterator, [callback]) --------------------------------------- ### filter(arr, iterator, [callback]) __Alias:__ `select` Returns a new array of all the values in `arr` which pass an async truth test. _The callback for each `iterator` call only accepts a single argument of `true` or `false`; it does not accept an error argument first!_ This is in-line with the way node libraries work with truth tests like `fs.exists`. This operation is performed in parallel, but the results array will be in the same order as the original. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A truth test to apply to each item in `arr`. The `iterator` is passed a `callback(truthValue)`, which must be called with a boolean argument once it has completed. * `callback(results)` - *Optional* A callback which is called after all the `iterator` functions have finished. __Example__ ```js async.filter(['file1','file2','file3'], fs.exists, function(results){ // results now equals an array of the existing files }); ``` __Related__ * filterSeries(arr, iterator, [callback]) * filterLimit(arr, limit, iterator, [callback]) --------------------------------------- ### reject(arr, iterator, [callback]) The opposite of [`filter`](#filter). Removes values that pass an `async` truth test. __Related__ * rejectSeries(arr, iterator, [callback]) * rejectLimit(arr, limit, iterator, [callback]) --------------------------------------- ### reduce(arr, memo, iterator, [callback]) __Aliases:__ `inject`, `foldl` Reduces `arr` into a single value using an async `iterator` to return each successive step. `memo` is the initial state of the reduction. This function only operates in series. For performance reasons, it may make sense to split a call to this function into a parallel map, and then use the normal `Array.prototype.reduce` on the results. This function is for situations where each step in the reduction needs to be async; if you can get the data before reducing it, then it's probably a good idea to do so. __Arguments__ * `arr` - An array to iterate over. * `memo` - The initial state of the reduction. * `iterator(memo, item, callback)` - A function applied to each item in the array to produce the next step in the reduction. The `iterator` is passed a `callback(err, reduction)` which accepts an optional error as its first argument, and the state of the reduction as the second. If an error is passed to the callback, the reduction is stopped and the main `callback` is immediately called with the error. * `callback(err, result)` - *Optional* A callback which is called after all the `iterator` functions have finished. Result is the reduced value. __Example__ ```js async.reduce([1,2,3], 0, function(memo, item, callback){ // pointless async: process.nextTick(function(){ callback(null, memo + item) }); }, function(err, result){ // result is now equal to the last value of memo, which is 6 }); ``` --------------------------------------- ### reduceRight(arr, memo, iterator, [callback]) __Alias:__ `foldr` Same as [`reduce`](#reduce), only operates on `arr` in reverse order. --------------------------------------- ### detect(arr, iterator, [callback]) Returns the first value in `arr` that passes an async truth test. The `iterator` is applied in parallel, meaning the first iterator to return `true` will fire the detect `callback` with that result. That means the result might not be the first item in the original `arr` (in terms of order) that passes the test. If order within the original `arr` is important, then look at [`detectSeries`](#detectSeries). __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A truth test to apply to each item in `arr`. The iterator is passed a `callback(truthValue)` which must be called with a boolean argument once it has completed. **Note: this callback does not take an error as its first argument.** * `callback(result)` - *Optional* A callback which is called as soon as any iterator returns `true`, or after all the `iterator` functions have finished. Result will be the first item in the array that passes the truth test (iterator) or the value `undefined` if none passed. **Note: this callback does not take an error as its first argument.** __Example__ ```js async.detect(['file1','file2','file3'], fs.exists, function(result){ // result now equals the first file in the list that exists }); ``` __Related__ * detectSeries(arr, iterator, [callback]) * detectLimit(arr, limit, iterator, [callback]) --------------------------------------- ### sortBy(arr, iterator, [callback]) Sorts a list by the results of running each `arr` value through an async `iterator`. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A function to apply to each item in `arr`. The iterator is passed a `callback(err, sortValue)` which must be called once it has completed with an error (which can be `null`) and a value to use as the sort criteria. * `callback(err, results)` - *Optional* A callback which is called after all the `iterator` functions have finished, or an error occurs. Results is the items from the original `arr` sorted by the values returned by the `iterator` calls. __Example__ ```js async.sortBy(['file1','file2','file3'], function(file, callback){ fs.stat(file, function(err, stats){ callback(err, stats.mtime); }); }, function(err, results){ // results is now the original array of files sorted by // modified date }); ``` __Sort Order__ By modifying the callback parameter the sorting order can be influenced: ```js //ascending order async.sortBy([1,9,3,5], function(x, callback){ callback(null, x); }, function(err,result){ //result callback } ); //descending order async.sortBy([1,9,3,5], function(x, callback){ callback(null, x*-1); // ### some(arr, iterator, [callback]) __Alias:__ `any` Returns `true` if at least one element in the `arr` satisfies an async test. _The callback for each iterator call only accepts a single argument of `true` or `false`; it does not accept an error argument first!_ This is in-line with the way node libraries work with truth tests like `fs.exists`. Once any iterator call returns `true`, the main `callback` is immediately called. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A truth test to apply to each item in the array in parallel. The iterator is passed a `callback(truthValue)`` which must be called with a boolean argument once it has completed. * `callback(result)` - *Optional* A callback which is called as soon as any iterator returns `true`, or after all the iterator functions have finished. Result will be either `true` or `false` depending on the values of the async tests. **Note: the callbacks do not take an error as their first argument.** __Example__ ```js async.some(['file1','file2','file3'], fs.exists, function(result){ // if result is true then at least one of the files exists }); ``` __Related__ * someLimit(arr, limit, iterator, callback) --------------------------------------- ### every(arr, iterator, [callback]) __Alias:__ `all` Returns `true` if every element in `arr` satisfies an async test. _The callback for each `iterator` call only accepts a single argument of `true` or `false`; it does not accept an error argument first!_ This is in-line with the way node libraries work with truth tests like `fs.exists`. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A truth test to apply to each item in the array in parallel. The iterator is passed a `callback(truthValue)` which must be called with a boolean argument once it has completed. * `callback(result)` - *Optional* A callback which is called as soon as any iterator returns `false`, or after all the iterator functions have finished. Result will be either `true` or `false` depending on the values of the async tests. **Note: the callbacks do not take an error as their first argument.** __Example__ ```js async.every(['file1','file2','file3'], fs.exists, function(result){ // if result is true then every file exists }); ``` __Related__ * everyLimit(arr, limit, iterator, callback) --------------------------------------- ### concat(arr, iterator, [callback]) Applies `iterator` to each item in `arr`, concatenating the results. Returns the concatenated list. The `iterator`s are called in parallel, and the results are concatenated as they return. There is no guarantee that the results array will be returned in the original order of `arr` passed to the `iterator` function. __Arguments__ * `arr` - An array to iterate over. * `iterator(item, callback)` - A function to apply to each item in `arr`. The iterator is passed a `callback(err, results)` which must be called once it has completed with an error (which can be `null`) and an array of results. * `callback(err, results)` - *Optional* A callback which is called after all the `iterator` functions have finished, or an error occurs. Results is an array containing the concatenated results of the `iterator` function. __Example__ ```js async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){ // files is now a list of filenames that exist in the 3 directories }); ``` __Related__ * concatSeries(arr, iterator, [callback]) ## Control Flow ### series(tasks, [callback]) Run the functions in the `tasks` array in series, each one running once the previous function has completed. If any functions in the series pass an error to its callback, no more functions are run, and `callback` is immediately called with the value of the error. Otherwise, `callback` receives an array of results when `tasks` have completed. It is also possible to use an object instead of an array. Each property will be run as a function, and the results will be passed to the final `callback` as an object instead of an array. This can be a more readable way of handling results from [`series`](#series). **Note** that while many implementations preserve the order of object properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6) explicitly states that > The mechanics and order of enumerating the properties is not specified. So if you rely on the order in which your series of functions are executed, and want this to work on all platforms, consider using an array. __Arguments__ * `tasks` - An array or object containing functions to run, each function is passed a `callback(err, result)` it must call on completion with an error `err` (which can be `null`) and an optional `result` value. * `callback(err, results)` - An optional callback to run once all the functions have completed. This function gets a results array (or object) containing all the result arguments passed to the `task` callbacks. __Example__ ```js async.series([ function(callback){ // do some stuff ... callback(null, 'one'); }, function(callback){ // do some more stuff ... callback(null, 'two'); } ], // optional callback function(err, results){ // results is now equal to ['one', 'two'] }); // an example using an object instead of an array async.series({ one: function(callback){ setTimeout(function(){ callback(null, 1); }, 200); }, two: function(callback){ setTimeout(function(){ callback(null, 2); }, 100); } }, function(err, results) { // results is now equal to: {one: 1, two: 2} }); ``` --------------------------------------- ### parallel(tasks, [callback]) Run the `tasks` array of functions in parallel, without waiting until the previous function has completed. If any of the functions pass an error to its callback, the main `callback` is immediately called with the value of the error. Once the `tasks` have completed, the results are passed to the final `callback` as an array. **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about parallel execution of code. If your tasks do not use any timers or perform any I/O, they will actually be executed in series. Any synchronous setup sections for each task will happen one after the other. JavaScript remains single-threaded. It is also possible to use an object instead of an array. Each property will be run as a function and the results will be passed to the final `callback` as an object instead of an array. This can be a more readable way of handling results from [`parallel`](#parallel). __Arguments__ * `tasks` - An array or object containing functions to run. Each function is passed a `callback(err, result)` which it must call on completion with an error `err` (which can be `null`) and an optional `result` value. * `callback(err, results)` - An optional callback to run once all the functions have completed successfully. This function gets a results array (or object) containing all the result arguments passed to the task callbacks. __Example__ ```js async.parallel([ function(callback){ setTimeout(function(){ callback(null, 'one'); }, 200); }, function(callback){ setTimeout(function(){ callback(null, 'two'); }, 100); } ], // optional callback function(err, results){ // the results array will equal ['one','two'] even though // the second function had a shorter timeout. }); // an example using an object instead of an array async.parallel({ one: function(callback){ setTimeout(function(){ callback(null, 1); }, 200); }, two: function(callback){ setTimeout(function(){ callback(null, 2); }, 100); } }, function(err, results) { // results is now equals to: {one: 1, two: 2} }); ``` __Related__ * parallelLimit(tasks, limit, [callback]) --------------------------------------- ### whilst(test, fn, callback) Repeatedly call `fn`, while `test` returns `true`. Calls `callback` when stopped, or an error occurs. __Arguments__ * `test()` - synchronous truth test to perform before each execution of `fn`. * `fn(callback)` - A function which is called each time `test` passes. The function is passed a `callback(err)`, which must be called once it has completed with an optional `err` argument. * `callback(err, [results])` - A callback which is called after the test function has failed and repeated execution of `fn` has stopped. `callback` will be passed an error and any arguments passed to the final `fn`'s callback. __Example__ ```js var count = 0; async.whilst( function () { return count ### doWhilst(fn, test, callback) The post-check version of [`whilst`](#whilst). To reflect the difference in the order of operations, the arguments `test` and `fn` are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript. --------------------------------------- ### until(test, fn, callback) Repeatedly call `fn` until `test` returns `true`. Calls `callback` when stopped, or an error occurs. `callback` will be passed an error and any arguments passed to the final `fn`'s callback. The inverse of [`whilst`](#whilst). --------------------------------------- ### doUntil(fn, test, callback) Like [`doWhilst`](#doWhilst), except the `test` is inverted. Note the argument ordering differs from `until`. --------------------------------------- ### during(test, fn, callback) Like [`whilst`](#whilst), except the `test` is an asynchronous function that is passed a callback in the form of `function (err, truth)`. If error is passed to `test` or `fn`, the main callback is immediately called with the value of the error. __Example__ ```js var count = 0; async.during( function (callback) { return callback(null, count ### doDuring(fn, test, callback) The post-check version of [`during`](#during). To reflect the difference in the order of operations, the arguments `test` and `fn` are switched. Also a version of [`doWhilst`](#doWhilst) with asynchronous `test` function. --------------------------------------- ### forever(fn, [errback]) Calls the asynchronous function `fn` with a callback parameter that allows it to call itself again, in series, indefinitely. If an error is passed to the callback then `errback` is called with the error, and execution stops, otherwise it will never be called. ```js async.forever( function(next) { // next is suitable for passing to things that need a callback(err [, whatever]); // it will result in this function being called again. }, function(err) { // if next is called with a value in its first parameter, it will appear // in here as 'err', and execution will stop. } ); ``` --------------------------------------- ### waterfall(tasks, [callback]) Runs the `tasks` array of functions in series, each passing their results to the next in the array. However, if any of the `tasks` pass an error to their own callback, the next function is not executed, and the main `callback` is immediately called with the error. __Arguments__ * `tasks` - An array of functions to run, each function is passed a `callback(err, result1, result2, ...)` it must call on completion. The first argument is an error (which can be `null`) and any further arguments will be passed as arguments in order to the next task. * `callback(err, [results])` - An optional callback to run once all the functions have completed. This will be passed the results of the last task's callback. __Example__ ```js async.waterfall([ function(callback) { callback(null, 'one', 'two'); }, function(arg1, arg2, callback) { // arg1 now equals 'one' and arg2 now equals 'two' callback(null, 'three'); }, function(arg1, callback) { // arg1 now equals 'three' callback(null, 'done'); } ], function (err, result) { // result now equals 'done' }); ``` Or, with named functions: ```js async.waterfall([ myFirstFunction, mySecondFunction, myLastFunction, ], function (err, result) { // result now equals 'done' }); function myFirstFunction(callback) { callback(null, 'one', 'two'); } function mySecondFunction(arg1, arg2, callback) { // arg1 now equals 'one' and arg2 now equals 'two' callback(null, 'three'); } function myLastFunction(arg1, callback) { // arg1 now equals 'three' callback(null, 'done'); } ``` Or, if you need to pass any argument to the first function: ```js async.waterfall([ async.apply(myFirstFunction, 'zero'), mySecondFunction, myLastFunction, ], function (err, result) { // result now equals 'done' }); function myFirstFunction(arg1, callback) { // arg1 now equals 'zero' callback(null, 'one', 'two'); } function mySecondFunction(arg1, arg2, callback) { // arg1 now equals 'one' and arg2 now equals 'two' callback(null, 'three'); } function myLastFunction(arg1, callback) { // arg1 now equals 'three' callback(null, 'done'); } ``` --------------------------------------- ### compose(fn1, fn2...) Creates a function which is a composition of the passed asynchronous functions. Each function consumes the return value of the function that follows. Composing functions `f()`, `g()`, and `h()` would produce the result of `f(g(h()))`, only this version uses callbacks to obtain the return values. Each function is executed with the `this` binding of the composed function. __Arguments__ * `functions...` - the asynchronous functions to compose __Example__ ```js function add1(n, callback) { setTimeout(function () { callback(null, n + 1); }, 10); } function mul3(n, callback) { setTimeout(function () { callback(null, n * 3); }, 10); } var add1mul3 = async.compose(mul3, add1); add1mul3(4, function (err, result) { // result now equals 15 }); ``` --------------------------------------- ### seq(fn1, fn2...) Version of the compose function that is more natural to read. Each function consumes the return value of the previous function. It is the equivalent of [`compose`](#compose) with the arguments reversed. Each function is executed with the `this` binding of the composed function. __Arguments__ * `functions...` - the asynchronous functions to compose __Example__ ```js // Requires lodash (or underscore), express3 and dresende's orm2. // Part of an app, that fetches cats of the logged user. // This example uses `seq` function to avoid overnesting and error // handling clutter. app.get('/cats', function(request, response) { var User = request.models.User; async.seq( _.bind(User.get, User), // 'User.get' has signature (id, callback(err, data)) function(user, fn) { user.getCats(fn); // 'getCats' has signature (callback(err, data)) } )(req.session.user_id, function (err, cats) { if (err) { console.error(err); response.json({ status: 'error', message: err.message }); } else { response.json({ status: 'ok', message: 'Cats found', data: cats }); } }); }); ``` --------------------------------------- ### applyEach(fns, args..., callback) Applies the provided arguments to each function in the array, calling `callback` after all functions have completed. If you only provide the first argument, then it will return a function which lets you pass in the arguments as if it were a single function call. __Arguments__ * `fns` - the asynchronous functions to all call with the same arguments * `args...` - any number of separate arguments to pass to the function * `callback` - the final argument should be the callback, called when all functions have completed processing __Example__ ```js async.applyEach([enableSearch, updateSchema], 'bucket', callback); // partial application example: async.each( buckets, async.applyEach([enableSearch, updateSchema]), callback ); ``` __Related__ * applyEachSeries(tasks, args..., [callback]) --------------------------------------- ### queue(worker, [concurrency]) Creates a `queue` object with the specified `concurrency`. Tasks added to the `queue` are processed in parallel (up to the `concurrency` limit). If all `worker`s are in progress, the task is queued until one becomes available. Once a `worker` completes a `task`, that `task`'s callback is called. __Arguments__ * `worker(task, callback)` - An asynchronous function for processing a queued task, which must call its `callback(err)` argument when finished, with an optional `error` as an argument. If you want to handle errors from an individual task, pass a callback to `q.push()`. * `concurrency` - An `integer` for determining how many `worker` functions should be run in parallel. If omitted, the concurrency defaults to `1`. If the concurrency is `0`, an error is thrown. __Queue objects__ The `queue` object returned by this function has the following properties and methods: * `length()` - a function returning the number of items waiting to be processed. * `started` - a function returning whether or not any items have been pushed and processed by the queue * `running()` - a function returning the number of items currently being processed. * `workersList()` - a function returning the array of items currently being processed. * `idle()` - a function returning false if there are items waiting or being processed, or true if not. * `concurrency` - an integer for determining how many `worker` functions should be run in parallel. This property can be changed after a `queue` is created to alter the concurrency on-the-fly. * `push(task, [callback])` - add a new task to the `queue`. Calls `callback` once the `worker` has finished processing the task. Instead of a single task, a `tasks` array can be submitted. The respective callback is used for every task in the list. * `unshift(task, [callback])` - add a new task to the front of the `queue`. * `saturated` - a callback that is called when the `queue` length hits the `concurrency` limit, and further tasks will be queued. * `empty` - a callback that is called when the last item from the `queue` is given to a `worker`. * `drain` - a callback that is called when the last item from the `queue` has returned from the `worker`. * `paused` - a boolean for determining whether the queue is in a paused state * `pause()` - a function that pauses the processing of tasks until `resume()` is called. * `resume()` - a function that resumes the processing of queued tasks when the queue is paused. * `kill()` - a function that removes the `drain` callback and empties remaining tasks from the queue forcing it to go idle. __Example__ ```js // create a queue object with concurrency 2 var q = async.queue(function (task, callback) { console.log('hello ' + task.name); callback(); }, 2); // assign a callback q.drain = function() { console.log('all items have been processed'); } // add some items to the queue q.push({name: 'foo'}, function (err) { console.log('finished processing foo'); }); q.push({name: 'bar'}, function (err) { console.log('finished processing bar'); }); // add some items to the queue (batch-wise) q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) { console.log('finished processing item'); }); // add some items to the front of the queue q.unshift({name: 'bar'}, function (err) { console.log('finished processing bar'); }); ``` --------------------------------------- ### priorityQueue(worker, concurrency) The same as [`queue`](#queue) only tasks are assigned a priority and completed in ascending priority order. There are two differences between `queue` and `priorityQueue` objects: * `push(task, priority, [callback])` - `priority` should be a number. If an array of `tasks` is given, all tasks will be assigned the same priority. * The `unshift` method was removed. --------------------------------------- ### cargo(worker, [payload]) Creates a `cargo` object with the specified payload. Tasks added to the cargo will be processed altogether (up to the `payload` limit). If the `worker` is in progress, the task is queued until it becomes available. Once the `worker` has completed some tasks, each callback of those tasks is called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966) for how `cargo` and `queue` work. While [queue](#queue) passes only one task to one of a group of workers at a time, cargo passes an array of tasks to a single worker, repeating when the worker is finished. __Arguments__ * `worker(tasks, callback)` - An asynchronous function for processing an array of queued tasks, which must call its `callback(err)` argument when finished, with an optional `err` argument. * `payload` - An optional `integer` for determining how many tasks should be processed per round; if omitted, the default is unlimited. __Cargo objects__ The `cargo` object returned by this function has the following properties and methods: * `length()` - A function returning the number of items waiting to be processed. * `payload` - An `integer` for determining how many tasks should be process per round. This property can be changed after a `cargo` is created to alter the payload on-the-fly. * `push(task, [callback])` - Adds `task` to the `queue`. The callback is called once the `worker` has finished processing the task. Instead of a single task, an array of `tasks` can be submitted. The respective callback is used for every task in the list. * `saturated` - A callback that is called when the `queue.length()` hits the concurrency and further tasks will be queued. * `empty` - A callback that is called when the last item from the `queue` is given to a `worker`. * `drain` - A callback that is called when the last item from the `queue` has returned from the `worker`. * `idle()`, `pause()`, `resume()`, `kill()` - cargo inherits all of the same methods and event calbacks as [`queue`](#queue) __Example__ ```js // create a cargo object with payload 2 var cargo = async.cargo(function (tasks, callback) { for(var i=0; i ### auto(tasks, [concurrency], [callback]) Determines the best order for running the functions in `tasks`, based on their requirements. Each function can optionally depend on other functions being completed first, and each function is run as soon as its requirements are satisfied. If any of the functions pass an error to their callback, the `auto` sequence will stop. Further tasks will not execute (so any other functions depending on it will not run), and the main `callback` is immediately called with the error. Functions also receive an object containing the results of functions which have completed so far. Note, all functions are called with a `results` object as a second argument, so it is unsafe to pass functions in the `tasks` object which cannot handle the extra argument. For example, this snippet of code: ```js async.auto({ readData: async.apply(fs.readFile, 'data.txt', 'utf-8') }, callback); ``` will have the effect of calling `readFile` with the results object as the last argument, which will fail: ```js fs.readFile('data.txt', 'utf-8', cb, {}); ``` Instead, wrap the call to `readFile` in a function which does not forward the `results` object: ```js async.auto({ readData: function(cb, results){ fs.readFile('data.txt', 'utf-8', cb); } }, callback); ``` __Arguments__ * `tasks` - An object. Each of its properties is either a function or an array of requirements, with the function itself the last item in the array. The object's key of a property serves as the name of the task defined by that property, i.e. can be used when specifying requirements for other tasks. The function receives two arguments: (1) a `callback(err, result)` which must be called when finished, passing an `error` (which can be `null`) and the result of the function's execution, and (2) a `results` object, containing the results of the previously executed functions. * `concurrency` - An optional `integer` for determining the maximum number of tasks that can be run in parallel. By default, as many as possible. * `callback(err, results)` - An optional callback which is called when all the tasks have been completed. It receives the `err` argument if any `tasks` pass an error to their callback. Results are always returned; however, if an error occurs, no further `tasks` will be performed, and the results object will only contain partial results. __Example__ ```js async.auto({ get_data: function(callback){ console.log('in get_data'); // async code to get some data callback(null, 'data', 'converted to array'); }, make_folder: function(callback){ console.log('in make_folder'); // async code to create a directory to store a file in // this is run at the same time as getting the data callback(null, 'folder'); }, write_file: ['get_data', 'make_folder', function(callback, results){ console.log('in write_file', JSON.stringify(results)); // once there is some data and the directory exists, // write the data to a file in the directory callback(null, 'filename'); }], email_link: ['write_file', function(callback, results){ console.log('in email_link', JSON.stringify(results)); // once the file is written let's email a link to it... // results.write_file contains the filename returned by write_file. callback(null, {'file':results.write_file, 'email':'user@example.com'}); }] }, function(err, results) { console.log('err = ', err); console.log('results = ', results); }); ``` This is a fairly trivial example, but to do this using the basic parallel and series functions would look like this: ```js async.parallel([ function(callback){ console.log('in get_data'); // async code to get some data callback(null, 'data', 'converted to array'); }, function(callback){ console.log('in make_folder'); // async code to create a directory to store a file in // this is run at the same time as getting the data callback(null, 'folder'); } ], function(err, results){ async.series([ function(callback){ console.log('in write_file', JSON.stringify(results)); // once there is some data and the directory exists, // write the data to a file in the directory results.push('filename'); callback(null); }, function(callback){ console.log('in email_link', JSON.stringify(results)); // once the file is written let's email a link to it... callback(null, {'file':results.pop(), 'email':'user@example.com'}); } ]); }); ``` For a complicated series of `async` tasks, using the [`auto`](#auto) function makes adding new tasks much easier (and the code more readable). --------------------------------------- ### retry([opts = {times: 5, interval: 0}| 5], task, [callback]) Attempts to get a successful response from `task` no more than `times` times before returning an error. If the task is successful, the `callback` will be passed the result of the successful task. If all attempts fail, the callback will be passed the error and result (if any) of the final attempt. __Arguments__ * `opts` - Can be either an object with `times` and `interval` or a number. * `times` - The number of attempts to make before giving up. The default is `5`. * `interval` - The time to wait between retries, in milliseconds. The default is `0`. * If `opts` is a number, the number specifies the number of times to retry, with the default interval of `0`. * `task(callback, results)` - A function which receives two arguments: (1) a `callback(err, result)` which must be called when finished, passing `err` (which can be `null`) and the `result` of the function's execution, and (2) a `results` object, containing the results of the previously executed functions (if nested inside another control flow). * `callback(err, results)` - An optional callback which is called when the task has succeeded, or after the final failed attempt. It receives the `err` and `result` arguments of the last attempt at completing the `task`. The [`retry`](#retry) function can be used as a stand-alone control flow by passing a callback, as shown below: ```js // try calling apiMethod 3 times async.retry(3, apiMethod, function(err, result) { // do something with the result }); ``` ```js // try calling apiMethod 3 times, waiting 200 ms between each retry async.retry({times: 3, interval: 200}, apiMethod, function(err, result) { // do something with the result }); ``` ```js // try calling apiMethod the default 5 times no delay between each retry async.retry(apiMethod, function(err, result) { // do something with the result }); ``` It can also be embedded within other control flow functions to retry individual methods that are not as reliable, like this: ```js async.auto({ users: api.getUsers.bind(api), payments: async.retry(3, api.getPayments.bind(api)) }, function(err, results) { // do something with the results }); ``` --------------------------------------- ### iterator(tasks) Creates an iterator function which calls the next function in the `tasks` array, returning a continuation to call the next one after that. It's also possible to “peek” at the next iterator with `iterator.next()`. This function is used internally by the `async` module, but can be useful when you want to manually control the flow of functions in series. __Arguments__ * `tasks` - An array of functions to run. __Example__ ```js var iterator = async.iterator([ function(){ sys.p('one'); }, function(){ sys.p('two'); }, function(){ sys.p('three'); } ]); node> var iterator2 = iterator(); 'one' node> var iterator3 = iterator2(); 'two' node> iterator3(); 'three' node> var nextfn = iterator2.next(); node> nextfn(); 'three' ``` --------------------------------------- ### apply(function, arguments..) Creates a continuation function with some arguments already applied. Useful as a shorthand when combined with other control flow functions. Any arguments passed to the returned function are added to the arguments originally passed to apply. __Arguments__ * `function` - The function you want to eventually apply all arguments to. * `arguments...` - Any number of arguments to automatically apply when the continuation is called. __Example__ ```js // using apply async.parallel([ async.apply(fs.writeFile, 'testfile1', 'test1'), async.apply(fs.writeFile, 'testfile2', 'test2'), ]); // the same process without using apply async.parallel([ function(callback){ fs.writeFile('testfile1', 'test1', callback); }, function(callback){ fs.writeFile('testfile2', 'test2', callback); } ]); ``` It's possible to pass any number of additional arguments when calling the continuation: ```js node> var fn = async.apply(sys.puts, 'one'); node> fn('two', 'three'); one two three ``` --------------------------------------- ### nextTick(callback), setImmediate(callback) Calls `callback` on a later loop around the event loop. In Node.js this just calls `process.nextTick`; in the browser it falls back to `setImmediate(callback)` if available, otherwise `setTimeout(callback, 0)`, which means other higher priority events may precede the execution of `callback`. This is used internally for browser-compatibility purposes. __Arguments__ * `callback` - The function to call on a later loop around the event loop. __Example__ ```js var call_order = []; async.nextTick(function(){ call_order.push('two'); // call_order now equals ['one','two'] }); call_order.push('one') ``` ### times(n, iterator, [callback]) Calls the `iterator` function `n` times, and accumulates results in the same manner you would use with [`map`](#map). __Arguments__ * `n` - The number of times to run the function. * `iterator` - The function to call `n` times. * `callback` - see [`map`](#map) __Example__ ```js // Pretend this is some complicated async factory var createUser = function(id, callback) { callback(null, { id: 'user' + id }) } // generate 5 users async.times(5, function(n, next){ createUser(n, function(err, user) { next(err, user) }) }, function(err, users) { // we should now have 5 users }); ``` __Related__ * timesSeries(n, iterator, [callback]) * timesLimit(n, limit, iterator, [callback]) ## Utils ### memoize(fn, [hasher]) Caches the results of an `async` function. When creating a hash to store function results against, the callback is omitted from the hash and an optional hash function can be used. If no hash function is specified, the first argument is used as a hash key, which may work reasonably if it is a string or a data type that converts to a distinct string. Note that objects and arrays will not behave reasonably. Neither will cases where the other arguments are significant. In such cases, specify your own hash function. The cache of results is exposed as the `memo` property of the function returned by `memoize`. __Arguments__ * `fn` - The function to proxy and cache results from. * `hasher` - An optional function for generating a custom hash for storing results. It has all the arguments applied to it apart from the callback, and must be synchronous. __Example__ ```js var slow_fn = function (name, callback) { // do something callback(null, result); }; var fn = async.memoize(slow_fn); // fn can now be used as if it were slow_fn fn('some name', function () { // callback }); ``` ### unmemoize(fn) Undoes a [`memoize`](#memoize)d function, reverting it to the original, unmemoized form. Handy for testing. __Arguments__ * `fn` - the memoized function --------------------------------------- ### ensureAsync(fn) Wrap an async function and ensure it calls its callback on a later tick of the event loop. If the function already calls its callback on a next tick, no extra deferral is added. This is useful for preventing stack overflows (`RangeError: Maximum call stack size exceeded`) and generally keeping [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony) contained. __Arguments__ * `fn` - an async function, one that expects a node-style callback as its last argument Returns a wrapped function with the exact same call signature as the function passed in. __Example__ ```js function sometimesAsync(arg, callback) { if (cache[arg]) { return callback(null, cache[arg]); // this would be synchronous!! } else { doSomeIO(arg, callback); // this IO would be asynchronous } } // this has a risk of stack overflows if many results are cached in a row async.mapSeries(args, sometimesAsync, done); // this will defer sometimesAsync's callback if necessary, // preventing stack overflows async.mapSeries(args, async.ensureAsync(sometimesAsync), done); ``` --------------------------------------- ### constant(values...) Returns a function that when called, calls-back with the values provided. Useful as the first function in a `waterfall`, or for plugging values in to `auto`. __Example__ ```js async.waterfall([ async.constant(42), function (value, next) { // value === 42 }, //... ], callback); async.waterfall([ async.constant(filename, \"utf8\"), fs.readFile, function (fileData, next) { //... } //... ], callback); async.auto({ hostname: async.constant(\"https://server.net/\"), port: findFreePort, launchServer: [\"hostname\", \"port\", function (cb, options) { startServer(options, cb); }], //... }, callback); ``` --------------------------------------- ### asyncify(func) __Alias:__ `wrapSync` Take a sync function and make it async, passing its return value to a callback. This is useful for plugging sync functions into a waterfall, series, or other async functions. Any arguments passed to the generated function will be passed to the wrapped function (except for the final callback argument). Errors thrown will be passed to the callback. __Example__ ```js async.waterfall([ async.apply(fs.readFile, filename, \"utf8\"), async.asyncify(JSON.parse), function (data, next) { // data is the result of parsing the text. // If there was a parsing error, it would have been caught. } ], callback) ``` If the function passed to `asyncify` returns a Promise, that promises's resolved/rejected state will be used to call the callback, rather than simply the synchronous return value. Example: ```js async.waterfall([ async.apply(fs.readFile, filename, \"utf8\"), async.asyncify(function (contents) { return db.model.create(contents); }), function (model, next) { // `model` is the instantiated model object. // If there was an error, this function would be skipped. } ], callback) ``` This also means you can asyncify ES2016 `async` functions. ```js var q = async.queue(async.asyncify(async function (file) { var intermediateStep = await processFile(file); return await somePromise(intermediateStep) })); q.push(files); ``` --------------------------------------- ### log(function, arguments) Logs the result of an `async` function to the `console`. Only works in Node.js or in browsers that support `console.log` and `console.error` (such as FF and Chrome). If multiple arguments are returned from the async function, `console.log` is called on each argument in order. __Arguments__ * `function` - The function you want to eventually apply all arguments to. * `arguments...` - Any number of arguments to apply to the function. __Example__ ```js var hello = function(name, callback){ setTimeout(function(){ callback(null, 'hello ' + name); }, 1000); }; ``` ```js node> async.log(hello, 'world'); 'hello world' ``` --------------------------------------- ### dir(function, arguments) Logs the result of an `async` function to the `console` using `console.dir` to display the properties of the resulting object. Only works in Node.js or in browsers that support `console.dir` and `console.error` (such as FF and Chrome). If multiple arguments are returned from the async function, `console.dir` is called on each argument in order. __Arguments__ * `function` - The function you want to eventually apply all arguments to. * `arguments...` - Any number of arguments to apply to the function. __Example__ ```js var hello = function(name, callback){ setTimeout(function(){ callback(null, {hello: name}); }, 1000); }; ``` ```js node> async.dir(hello, 'world'); {hello: 'world'} ``` --------------------------------------- ### noConflict() Changes the value of `async` back to its original value, returning a reference to the `async` object."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/README.md","tags":[],"body":"# gulp-util [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status][depstat-image]][depstat-url] ## Information Packagegulp-util Description Utility functions for gulp plugins Node Version >= 0.10 ## Usage ```javascript var gutil = require('gulp-util'); gutil.log('stuff happened', 'Really it did', gutil.colors.magenta('123')); gutil.beep(); gutil.replaceExtension('file.coffee', '.js'); // file.js var opt = { name: 'todd', file: someGulpFile }; gutil.template('test ', opt) // test todd /js/hi.js ``` ### log(msg...) Logs stuff. Already prefixed with [gulp] and all that. If you pass in multiple arguments it will join them by a space. The default gulp coloring using gutil.colors.: ``` values (files, module names, etc.) = cyan numbers (times, counts, etc) = magenta ``` ### colors Is an instance of [chalk](https://github.com/sindresorhus/chalk). ### replaceExtension(path, newExtension) Replaces a file extension in a path. Returns the new path. ### isStream(obj) Returns true or false if an object is a stream. ### isBuffer(obj) Returns true or false if an object is a Buffer. ### template(string[, data]) This is a lodash.template function wrapper. You must pass in a valid gulp file object so it is available to the user or it will error. You can not configure any of the delimiters. Look at the [lodash docs](http://lodash.com/docs#template) for more info. ## new File(obj) This is just [vinyl](https://github.com/wearefractal/vinyl) ```javascript var file = new gutil.File({ base: path.join(__dirname, './fixtures/'), cwd: __dirname, path: path.join(__dirname, './fixtures/test.coffee') }); ``` ## noop() Returns a stream that does nothing but pass data straight through. ```javascript // gulp should be called like this : // $ gulp --type production gulp.task('scripts', function() { gulp.src('src/**/*.js') .pipe(concat('script.js')) .pipe(gutil.env.type === 'production' ? uglify() : gutil.noop()) .pipe(gulp.dest('dist/')); }); ``` ## buffer(cb) This is similar to es.wait but instead of buffering text into one string it buffers anything into an array (so very useful for file objects). Returns a stream that can be piped to. The stream will emit one data event after the stream piped to it has ended. The data will be the same array passed to the callback. Callback is optional and receives two arguments: error and data ```javascript gulp.src('stuff/*.js') .pipe(gutil.buffer(function(err, files) { })); ``` ## new PluginError(pluginName, message[, options]) - pluginName should be the module name of your plugin - message can be a string or an existing error - By default the stack will not be shown. Set `options.showStack` to true if you think the stack is important for your error. - If you pass an error in as the message the stack will be pulled from that, otherwise one will be created. - Note that if you pass in a custom stack string you need to include the message along with that. - Error properties will be included in `err.toString()`. Can be omitted by including `{showProperties: false}` in the options. These are all acceptable forms of instantiation: ```javascript var err = new gutil.PluginError('test', { message: 'something broke' }); var err = new gutil.PluginError({ plugin: 'test', message: 'something broke' }); var err = new gutil.PluginError('test', 'something broke'); var err = new gutil.PluginError('test', 'something broke', {showStack: true}); var existingError = new Error('OMG'); var err = new gutil.PluginError('test', existingError, {showStack: true}); ``` [npm-url]: https://www.npmjs.com/package/gulp-util [npm-image]: https://badge.fury.io/js/gulp-util.svg [travis-url]: https://travis-ci.org/gulpjs/gulp-util [travis-image]: https://img.shields.io/travis/gulpjs/gulp-util.svg?branch=master [coveralls-url]: https://coveralls.io/r/gulpjs/gulp-util [coveralls-image]: https://img.shields.io/coveralls/gulpjs/gulp-util.svg [depstat-url]: https://david-dm.org/gulpjs/gulp-util [depstat-image]: https://david-dm.org/gulpjs/gulp-util.svg"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/array-differ/readme.md","tags":[],"body":"# array-differ [![Build Status](https://travis-ci.org/sindresorhus/array-differ.svg?branch=master)](https://travis-ci.org/sindresorhus/array-differ) > Create an array with values that are present in the first input array but not additional ones ## Install ```sh $ npm install --save array-differ ``` ## Usage ```js var arrayDiffer = require('array-differ'); arrayDiffer([2, 3, 4], [3, 50]); //=> [2, 4] ``` ## API ### arrayDiffer(input, values, [values, ...]) Returns the new array. #### input Type: `array` #### values Type: `array` Arrays of values to exclude. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/array-uniq/readme.md","tags":[],"body":"# array-uniq [![Build Status](https://travis-ci.org/sindresorhus/array-uniq.svg?branch=master)](https://travis-ci.org/sindresorhus/array-uniq) > Create an array without duplicates It's already pretty fast, but will be much faster when [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) becomes available in V8 (especially with large arrays). ## Install ``` $ npm install --save array-uniq ``` ## Usage ```js const arrayUniq = require('array-uniq'); arrayUniq([1, 1, 2, 3, 3]); //=> [1, 2, 3] arrayUniq(['foo', 'foo', 'bar', 'foo']); //=> ['foo', 'bar'] ``` ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/beeper/readme.md","tags":[],"body":"# beeper [![Build Status](https://travis-ci.org/sindresorhus/beeper.svg?branch=master)](https://travis-ci.org/sindresorhus/beeper) > Make your terminal beep ![](https://cloud.githubusercontent.com/assets/170270/5261236/f8471100-7a49-11e4-81af-96cd09a522d9.gif) Useful as an attention grabber e.g. when an error happens. ## Install ``` $ npm install --save beeper ``` ## Usage ```js var beeper = require('beeper'); beeper(); // beep one time beeper(3); // beep three times beeper('****-*-*'); // beep, beep, beep, beep, pause, beep, pause, beep ``` ## API It will not beep if stdout is not TTY or if the user supplies the `--no-beep` flag. ### beeper([count|melody], [callback]) #### count Type: `number` Default: `1` How many times you want it to beep. #### melody Type: `string` Construct your own melody by supplying a string of `*` for beep `-` for pause. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/chalk/node_modules/ansi-styles/readme.md","tags":[],"body":"# ansi-styles [![Build Status](https://travis-ci.org/chalk/ansi-styles.svg?branch=master)](https://travis-ci.org/chalk/ansi-styles) > [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors_and_Styles) for styling strings in the terminal You probably want the higher-level [chalk](https://github.com/chalk/chalk) module for styling your strings. ![](screenshot.png) ## Install ``` $ npm install --save ansi-styles ``` ## Usage ```js var ansi = require('ansi-styles'); console.log(ansi.green.open + 'Hello world!' + ansi.green.close); ``` ## API Each style has an `open` and `close` property. ## Styles ### Modifiers - `reset` - `bold` - `dim` - `italic` *(not widely supported)* - `underline` - `inverse` - `hidden` - `strikethrough` *(not widely supported)* ### Colors - `black` - `red` - `green` - `yellow` - `blue` - `magenta` - `cyan` - `white` - `gray` ### Background colors - `bgBlack` - `bgRed` - `bgGreen` - `bgYellow` - `bgBlue` - `bgMagenta` - `bgCyan` - `bgWhite` ## Advanced usage By default you get a map of styles, but the styles are also available as groups. They are non-enumerable so they don't show up unless you access them explicitly. This makes it easier to expose only a subset in a higher-level module. - `ansi.modifiers` - `ansi.colors` - `ansi.bgColors` ###### Example ```js console.log(ansi.colors.green.open); ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/chalk/node_modules/escape-string-regexp/readme.md","tags":[],"body":"# escape-string-regexp [![Build Status](https://travis-ci.org/sindresorhus/escape-string-regexp.svg?branch=master)](https://travis-ci.org/sindresorhus/escape-string-regexp) > Escape RegExp special characters ## Install ``` $ npm install --save escape-string-regexp ``` ## Usage ```js const escapeStringRegexp = require('escape-string-regexp'); const escapedString = escapeStringRegexp('how much $ for a unicorn?'); //=> 'how much \\$ for a unicorn\\?' new RegExp(escapedString); ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/chalk/node_modules/has-ansi/node_modules/ansi-regex/readme.md","tags":[],"body":"# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex) > Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save ansi-regex ``` ## Usage ```js var ansiRegex = require('ansi-regex'); ansiRegex().test('\\u001b[4mcake\\u001b[0m'); //=> true ansiRegex().test('cake'); //=> false '\\u001b[4mcake\\u001b[0m'.match(ansiRegex()); //=> ['\\u001b[4m', '\\u001b[0m'] ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/chalk/node_modules/has-ansi/readme.md","tags":[],"body":"# has-ansi [![Build Status](https://travis-ci.org/sindresorhus/has-ansi.svg?branch=master)](https://travis-ci.org/sindresorhus/has-ansi) > Check if a string has [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save has-ansi ``` ## Usage ```js var hasAnsi = require('has-ansi'); hasAnsi('\\u001b[4mcake\\u001b[0m'); //=> true hasAnsi('cake'); //=> false ``` ## Related - [has-ansi-cli](https://github.com/sindresorhus/has-ansi-cli) - CLI for this module - [strip-ansi](https://github.com/sindresorhus/strip-ansi) - Strip ANSI escape codes - [ansi-regex](https://github.com/sindresorhus/ansi-regex) - Regular expression for matching ANSI escape codes - [chalk](https://github.com/sindresorhus/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/chalk/node_modules/strip-ansi/node_modules/ansi-regex/readme.md","tags":[],"body":"# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex) > Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save ansi-regex ``` ## Usage ```js var ansiRegex = require('ansi-regex'); ansiRegex().test('\\u001b[4mcake\\u001b[0m'); //=> true ansiRegex().test('cake'); //=> false '\\u001b[4mcake\\u001b[0m'.match(ansiRegex()); //=> ['\\u001b[4m', '\\u001b[0m'] ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/chalk/node_modules/strip-ansi/readme.md","tags":[],"body":"# strip-ansi [![Build Status](https://travis-ci.org/chalk/strip-ansi.svg?branch=master)](https://travis-ci.org/chalk/strip-ansi) > Strip [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save strip-ansi ``` ## Usage ```js var stripAnsi = require('strip-ansi'); stripAnsi('\\u001b[4mcake\\u001b[0m'); //=> 'cake' ``` ## Related - [strip-ansi-cli](https://github.com/chalk/strip-ansi-cli) - CLI for this module - [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes - [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/chalk/node_modules/supports-color/readme.md","tags":[],"body":"# supports-color [![Build Status](https://travis-ci.org/chalk/supports-color.svg?branch=master)](https://travis-ci.org/chalk/supports-color) > Detect whether a terminal supports color ## Install ``` $ npm install --save supports-color ``` ## Usage ```js var supportsColor = require('supports-color'); if (supportsColor) { console.log('Terminal supports color'); } ``` It obeys the `--color` and `--no-color` CLI flags. For situations where using `--color` is not possible, add an environment variable `FORCE_COLOR` with any value to force color. Trumps `--no-color`. ## Related - [supports-color-cli](https://github.com/chalk/supports-color-cli) - CLI for this module - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/chalk/readme.md","tags":[],"body":"> Terminal string styling done right [![Build Status](https://travis-ci.org/chalk/chalk.svg?branch=master)](https://travis-ci.org/chalk/chalk) [![Coverage Status](https://coveralls.io/repos/chalk/chalk/badge.svg?branch=master)](https://coveralls.io/r/chalk/chalk?branch=master) [![](http://img.shields.io/badge/unicorn-approved-ff69b4.svg)](https://www.youtube.com/watch?v=9auOCbH5Ns4) [colors.js](https://github.com/Marak/colors.js) used to be the most popular string styling module, but it has serious deficiencies like extending `String.prototype` which causes all kinds of [problems](https://github.com/yeoman/yo/issues/68). Although there are other ones, they either do too much or not enough. **Chalk is a clean and focused alternative.** ![](https://github.com/chalk/ansi-styles/raw/master/screenshot.png) ## Why - Highly performant - Doesn't extend `String.prototype` - Expressive API - Ability to nest styles - Clean and focused - Auto-detects color support - Actively maintained - [Used by ~4500 modules](https://www.npmjs.com/browse/depended/chalk) as of July 15, 2015 ## Install ``` $ npm install --save chalk ``` ## Usage Chalk comes with an easy to use composable API where you just chain and nest the styles you want. ```js var chalk = require('chalk'); // style a string chalk.blue('Hello world!'); // combine styled and normal strings chalk.blue('Hello') + 'World' + chalk.red('!'); // compose multiple styles using the chainable API chalk.blue.bgRed.bold('Hello world!'); // pass in multiple arguments chalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz'); // nest styles chalk.red('Hello', chalk.underline.bgBlue('world') + '!'); // nest styles of the same type even (color, underline, background) chalk.green( 'I am a green line ' + chalk.blue.underline.bold('with a blue substring') + ' that becomes green again!' ); ``` Easily define your own themes. ```js var chalk = require('chalk'); var error = chalk.bold.red; console.log(error('Error!')); ``` Take advantage of console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data). ```js var name = 'Sindre'; console.log(chalk.green('Hello %s'), name); //=> Hello Sindre ``` ## API ### chalk.`[....](string, [string...])` Example: `chalk.red.bold.underline('Hello', 'world');` Chain [styles](#styles) and call the last one as a method with a string argument. Order doesn't matter, and later styles take precedent in case of a conflict. This simply means that `Chalk.red.yellow.green` is equivalent to `Chalk.green`. Multiple arguments will be separated by space. ### chalk.enabled Color support is automatically detected, but you can override it by setting the `enabled` property. You should however only do this in your own code as it applies globally to all chalk consumers. If you need to change this in a reusable module create a new instance: ```js var ctx = new chalk.constructor({enabled: false}); ``` ### chalk.supportsColor Detect whether the terminal [supports color](https://github.com/chalk/supports-color). Used internally and handled for you, but exposed for convenience. Can be overridden by the user with the flags `--color` and `--no-color`. For situations where using `--color` is not possible, add an environment variable `FORCE_COLOR` with any value to force color. Trumps `--no-color`. ### chalk.styles Exposes the styles as [ANSI escape codes](https://github.com/chalk/ansi-styles). Generally not useful, but you might need just the `.open` or `.close` escape code if you're mixing externally styled strings with your own. ```js var chalk = require('chalk'); console.log(chalk.styles.red); //=> {open: '\\u001b[31m', close: '\\u001b[39m'} console.log(chalk.styles.red.open + 'Hello' + chalk.styles.red.close); ``` ### chalk.hasColor(string) Check whether a string [has color](https://github.com/chalk/has-ansi). ### chalk.stripColor(string) [Strip color](https://github.com/chalk/strip-ansi) from a string. Can be useful in combination with `.supportsColor` to strip color on externally styled text when it's not supported. Example: ```js var chalk = require('chalk'); var styledString = getText(); if (!chalk.supportsColor) { styledString = chalk.stripColor(styledString); } ``` ## Styles ### Modifiers - `reset` - `bold` - `dim` - `italic` *(not widely supported)* - `underline` - `inverse` - `hidden` - `strikethrough` *(not widely supported)* ### Colors - `black` - `red` - `green` - `yellow` - `blue` *(on Windows the bright version is used as normal blue is illegible)* - `magenta` - `cyan` - `white` - `gray` ### Background colors - `bgBlack` - `bgRed` - `bgGreen` - `bgYellow` - `bgBlue` - `bgMagenta` - `bgCyan` - `bgWhite` ## 256-colors Chalk does not support anything other than the base eight colors, which guarantees it will work on all terminals and systems. Some terminals, specifically `xterm` compliant ones, will support the full range of 8-bit colors. For this the lower level [ansi-256-colors](https://github.com/jbnicolai/ansi-256-colors) package can be used. ## Windows If you're on Windows, do yourself a favor and use [`cmder`](http://bliker.github.io/cmder/) instead of `cmd.exe`. ## Related - [chalk-cli](https://github.com/chalk/chalk-cli) - CLI for this module - [ansi-styles](https://github.com/chalk/ansi-styles/) - ANSI escape codes for styling strings in the terminal - [supports-color](https://github.com/chalk/supports-color/) - Detect whether a terminal supports color - [strip-ansi](https://github.com/chalk/strip-ansi) - Strip ANSI escape codes - [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes - [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes - [wrap-ansi](https://github.com/chalk/wrap-ansi) - Wordwrap a string with ANSI escape codes ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/Readme.md","tags":[],"body":"# dateformat A node.js package for Steven Levithan's excellent [dateFormat()][dateformat] function. [![Build Status](https://travis-ci.org/felixge/node-dateformat.svg)](https://travis-ci.org/felixge/node-dateformat) ## Modifications * Removed the `Date.prototype.format` method. Sorry folks, but extending native prototypes is for suckers. * Added a `module.exports = dateFormat;` statement at the bottom * Added the placeholder `N` to get the ISO 8601 numeric representation of the day of the week ## Installation ```bash $ npm install dateformat $ dateformat --help ``` ## Usage As taken from Steven's post, modified to match the Modifications listed above: ```js var dateFormat = require('dateformat'); var now = new Date(); // Basic usage dateFormat(now, \"dddd, mmmm dS, yyyy, h:MM:ss TT\"); // Saturday, June 9th, 2007, 5:46:21 PM // You can use one of several named masks dateFormat(now, \"isoDateTime\"); // 2007-06-09T17:46:21 // ...Or add your own dateFormat.masks.hammerTime = 'HH:MM! \"Can\\'t touch this!\"'; dateFormat(now, \"hammerTime\"); // 17:46! Can't touch this! // When using the standalone dateFormat function, // you can also provide the date as a string dateFormat(\"Jun 9 2007\", \"fullDate\"); // Saturday, June 9, 2007 // Note that if you don't include the mask argument, // dateFormat.masks.default is used dateFormat(now); // Sat Jun 09 2007 17:46:21 // And if you don't include the date argument, // the current date and time is used dateFormat(); // Sat Jun 09 2007 17:46:22 // You can also skip the date argument (as long as your mask doesn't // contain any numbers), in which case the current date/time is used dateFormat(\"longTime\"); // 5:46:22 PM EST // And finally, you can convert local time to UTC time. Simply pass in // true as an additional argument (no argument skipping allowed in this case): dateFormat(now, \"longTime\", true); // 10:46:21 PM UTC // ...Or add the prefix \"UTC:\" or \"GMT:\" to your mask. dateFormat(now, \"UTC:h:MM:ss TT Z\"); // 10:46:21 PM UTC // You can also get the ISO 8601 week of the year: dateFormat(now, \"W\"); // 42 // and also get the ISO 8601 numeric representation of the day of the week: dateFormat(now,\"N\"); // 6 ``` ## License (c) 2007-2009 Steven Levithan [stevenlevithan.com][stevenlevithan], MIT license. [dateformat]: http://blog.stevenlevithan.com/archives/date-time-format [stevenlevithan]: http://stevenlevithan.com/"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/get-stdin/readme.md","tags":[],"body":"# get-stdin [![Build Status](https://travis-ci.org/sindresorhus/get-stdin.svg?branch=master)](https://travis-ci.org/sindresorhus/get-stdin) > Easier stdin ## Install ```sh $ npm install --save get-stdin ``` ## Usage ```js // example.js var stdin = require('get-stdin'); stdin(function (data) { console.log(data); //=> unicorns }); ``` ```sh $ echo unicorns | node example.js unicorns ``` ## API ### stdin(callback) Get `stdin` as a string. ### stdin.buffer(callback) Get `stdin` as a buffer. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/camelcase-keys/node_modules/camelcase/readme.md","tags":[],"body":"# camelcase [![Build Status](https://travis-ci.org/sindresorhus/camelcase.svg?branch=master)](https://travis-ci.org/sindresorhus/camelcase) > Convert a dash/dot/underscore/space separated string to camelCase: `foo-bar` → `fooBar` ## Install ``` $ npm install --save camelcase ``` ## Usage ```js const camelCase = require('camelcase'); camelCase('foo-bar'); //=> 'fooBar' camelCase('foo_bar'); //=> 'fooBar' camelCase('Foo-Bar'); //=> 'fooBar' camelCase('--foo.bar'); //=> 'fooBar' camelCase('__foo__bar__'); //=> 'fooBar' camelCase('foo bar'); //=> 'fooBar' console.log(process.argv[3]); //=> '--foo-bar' camelCase(process.argv[3]); //=> 'fooBar' camelCase('foo', 'bar'); //=> 'fooBar' camelCase('__foo__', '--bar'); //=> 'fooBar' ``` ## Related - [decamelize](https://github.com/sindresorhus/decamelize) - The inverse of this module - [uppercamelcase](https://github.com/SamVerschueren/uppercamelcase) - Like this module, but to PascalCase instead of camelCase ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/camelcase-keys/readme.md","tags":[],"body":"# camelcase-keys [![Build Status](https://travis-ci.org/sindresorhus/camelcase-keys.svg?branch=master)](https://travis-ci.org/sindresorhus/camelcase-keys) > Convert object keys to camelCase using [`camelcase`](https://github.com/sindresorhus/camelcase) ## Install ``` $ npm install --save camelcase-keys ``` ## Usage ```js const camelcaseKeys = require('camelcase-keys'); camelcaseKeys({'foo-bar': true}); //=> {fooBar: true} const argv = require('minimist')(process.argv.slice(2)); //=> {_: [], 'foo-bar': true} camelcaseKeys(argv); //=> {_: [], fooBar: true} ``` ## API ### camelcaseKeys(input, [options]) #### input Type: `object` Object to camelCase. #### options Type: `object` ##### exclude Type: `array` Default: `[]` Exclude keys from being camelCased. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/decamelize/readme.md","tags":[],"body":"# decamelize [![Build Status](https://travis-ci.org/sindresorhus/decamelize.svg?branch=master)](https://travis-ci.org/sindresorhus/decamelize) > Convert a camelized string into a lowercased one with a custom separator > Example: `unicornRainbow` → `unicorn_rainbow` ## Install ``` $ npm install --save decamelize ``` ## Usage ```js const decamelize = require('decamelize'); decamelize('unicornRainbow'); //=> 'unicorn_rainbow' decamelize('unicornRainbow', '-'); //=> 'unicorn-rainbow' ``` ## API ### decamelize(input, [separator]) #### input Type: `string` #### separator Type: `string` Default: `_` ## Related See [`camelcase`](https://github.com/sindresorhus/camelcase) for the inverse. ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/loud-rejection/node_modules/currently-unhandled/node_modules/array-find-index/readme.md","tags":[],"body":"# array-find-index [![Build Status](https://travis-ci.org/sindresorhus/array-find-index.svg?branch=master)](https://travis-ci.org/sindresorhus/array-find-index) > ES2015 [`Array#findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save array-find-index ``` ## Usage ```js arrayFindIndex = require('array-find-index'); arrayFindIndex(['rainbow', 'unicorn', 'pony'], x => x === 'unicorn'); //=> 1 ``` ## API Same as `Array#findIndex()`, but with the input array as the first argument. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/loud-rejection/node_modules/currently-unhandled/readme.md","tags":[],"body":"# currently-unhandled [![Build Status](https://travis-ci.org/jamestalmage/currently-unhandled.svg?branch=master)](https://travis-ci.org/jamestalmage/currently-unhandled) [![Coverage Status](https://coveralls.io/repos/github/jamestalmage/currently-unhandled/badge.svg?branch=master)](https://coveralls.io/github/jamestalmage/currently-unhandled?branch=master) > Track the list of currently unhandled promise rejections. ## Install ``` $ npm install --save currently-unhandled ``` ## Usage ```js const currentlyUnhandled = require('currently-unhandled')(); // [{promise: p, reason: fooError}]' p.catch(() => {}); // on the next tick - handled promise is now removed from the list: currentlyUnhandled(); //=> []; ``` ## API ### currentlyUnhandled() Returns an array of objects with `promise` and `reason` properties representing the rejected promises that currently do not have a rejection handler. The list grows and shrinks as unhandledRejections are published, and later handled. ## Browser Support This module can be bundled with `browserify`. At time of writing, it will work with native Promises in the Chrome browser only. For best cross-browser support, use `bluebird` instead of native Promise support in browsers. ## License MIT © [James Talmage](http://github.com/jamestalmage)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/loud-rejection/node_modules/signal-exit/CHANGELOG.md","tags":[],"body":"# Change Log All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines. # [3.0.0](https://github.com/tapjs/signal-exit/compare/v2.1.2...v3.0.0) (2016-06-13) ### Bug Fixes * get our test suite running on Windows ([#23](https://github.com/tapjs/signal-exit/issues/23)) ([6f3eda8](https://github.com/tapjs/signal-exit/commit/6f3eda8)) * hooking SIGPROF was interfering with profilers see [#21](https://github.com/tapjs/signal-exit/issues/21) ([#24](https://github.com/tapjs/signal-exit/issues/24)) ([1248a4c](https://github.com/tapjs/signal-exit/commit/1248a4c)) ### BREAKING CHANGES * signal-exit no longer wires into SIGPROF"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/loud-rejection/node_modules/signal-exit/README.md","tags":[],"body":"# signal-exit [![Build Status](https://travis-ci.org/tapjs/signal-exit.png)](https://travis-ci.org/tapjs/signal-exit) [![Coverage](https://coveralls.io/repos/tapjs/signal-exit/badge.svg?branch=master)](https://coveralls.io/r/tapjs/signal-exit?branch=master) [![NPM version](https://img.shields.io/npm/v/signal-exit.svg)](https://www.npmjs.com/package/signal-exit) [![Windows Tests](https://img.shields.io/appveyor/ci/bcoe/signal-exit/master.svg?label=Windows%20Tests)](https://ci.appveyor.com/project/bcoe/signal-exit) [![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version) When you want to fire an event no matter how a process exits: * reaching the end of execution. * explicitly having `process.exit(code)` called. * having `process.kill(pid, sig)` called. * receiving a fatal signal from outside the process Use `signal-exit`. ```js var onExit = require('signal-exit') onExit(function (code, signal) { console.log('process exited!') }) ``` ## API `var remove = onExit(function (code, signal) {}, options)` The return value of the function is a function that will remove the handler. Note that the function *only* fires for signals if the signal would cause the proces to exit. That is, there are no other listeners, and it is a fatal signal. ## Options * `alwaysLast`: Run this handler after any other signal or exit handlers. This causes `process.emit` to be monkeypatched."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/loud-rejection/readme.md","tags":[],"body":"# loud-rejection [![Build Status](https://travis-ci.org/sindresorhus/loud-rejection.svg?branch=master)](https://travis-ci.org/sindresorhus/loud-rejection) [![Coverage Status](https://coveralls.io/repos/github/sindresorhus/loud-rejection/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/loud-rejection?branch=master) > Make unhandled promise rejections fail loudly instead of the default [silent fail](https://gist.github.com/benjamingr/0237932cee84712951a2) By default, promises fail silently if you don't attach a `.catch()` handler to them. Use this in top-level things like tests, CLI tools, apps, etc, **but not in reusable modules.** Not needed in the browser as unhandled promises are shown in the console. ## Install ``` $ npm install --save loud-rejection ``` ## Usage ```js const loudRejection = require('loud-rejection'); const promiseFn = require('promise-fn'); // Install the unhandledRejection listeners loudRejection(); promiseFn(); ``` Without this module it's more verbose and you might even miss some that will fail silently: ```js const promiseFn = require('promise-fn'); function error(err) { console.error(err.stack); process.exit(1); } promiseFn().catch(error); ``` ### Register script Alternatively to the above, you may simply require `loud-rejection/register` and the unhandledRejection listener will be automagically installed for you. This is handy for ES2015 imports: ```js import 'loud-rejection/register'; ``` ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/map-obj/readme.md","tags":[],"body":"# map-obj [![Build Status](https://travis-ci.org/sindresorhus/map-obj.svg?branch=master)](https://travis-ci.org/sindresorhus/map-obj) > Map object keys and values into a new object ## Install ``` $ npm install --save map-obj ``` ## Usage ```js var mapObj = require('map-obj'); var newObject = mapObj({foo: 'bar'}, function (key, value, object) { // first element is the new key and second is the new value // here we reverse the order return [value, key]; }); //=> {bar: 'foo'} ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/README.md","tags":[],"body":"# normalize-package-data [![Build Status](https://travis-ci.org/npm/normalize-package-data.png?branch=master)](https://travis-ci.org/npm/normalize-package-data) normalize-package data exports a function that normalizes package metadata. This data is typically found in a package.json file, but in principle could come from any source - for example the npm registry. normalize-package-data is used by [read-package-json](https://npmjs.org/package/read-package-json) to normalize the data it reads from a package.json file. In turn, read-package-json is used by [npm](https://npmjs.org/package/npm) and various npm-related tools. ## Installation ``` npm install normalize-package-data ``` ## Usage Basic usage is really simple. You call the function that normalize-package-data exports. Let's call it `normalizeData`. ```javascript normalizeData = require('normalize-package-data') packageData = fs.readFileSync(\"package.json\") normalizeData(packageData) // packageData is now normalized ``` #### Strict mode You may activate strict validation by passing true as the second argument. ```javascript normalizeData = require('normalize-package-data') packageData = fs.readFileSync(\"package.json\") warnFn = function(msg) { console.error(msg) } normalizeData(packageData, true) // packageData is now normalized ``` If strict mode is activated, only Semver 2.0 version strings are accepted. Otherwise, Semver 1.0 strings are accepted as well. Packages must have a name, and the name field must not have contain leading or trailing whitespace. #### Warnings Optionally, you may pass a \"warning\" function. It gets called whenever the `normalizeData` function encounters something that doesn't look right. It indicates less than perfect input data. ```javascript normalizeData = require('normalize-package-data') packageData = fs.readFileSync(\"package.json\") warnFn = function(msg) { console.error(msg) } normalizeData(packageData, warnFn) // packageData is now normalized. Any number of warnings may have been logged. ``` You may combine strict validation with warnings by passing `true` as the second argument, and `warnFn` as third. When `private` field is set to `true`, warnings will be suppressed. ### Potential exceptions If the supplied data has an invalid name or version vield, `normalizeData` will throw an error. Depending on where you call `normalizeData`, you may want to catch these errors so can pass them to a callback. ## What normalization (currently) entails * The value of `name` field gets trimmed (unless in strict mode). * The value of the `version` field gets cleaned by `semver.clean`. See [documentation for the semver module](https://github.com/isaacs/node-semver). * If `name` and/or `version` fields are missing, they are set to empty strings. * If `files` field is not an array, it will be removed. * If `bin` field is a string, then `bin` field will become an object with `name` set to the value of the `name` field, and `bin` set to the original string value. * If `man` field is a string, it will become an array with the original string as its sole member. * If `keywords` field is string, it is considered to be a list of keywords separated by one or more white-space characters. It gets converted to an array by splitting on `\\s+`. * All people fields (`author`, `maintainers`, `contributors`) get converted into objects with name, email and url properties. * If `bundledDependencies` field (a typo) exists and `bundleDependencies` field does not, `bundledDependencies` will get renamed to `bundleDependencies`. * If the value of any of the dependencies fields (`dependencies`, `devDependencies`, `optionalDependencies`) is a string, it gets converted into an object with familiar `name=>value` pairs. * The values in `optionalDependencies` get added to `dependencies`. The `optionalDependencies` array is left untouched. * As of v2: Dependencies that point at known hosted git providers (currently: github, bitbucket, gitlab) will have their URLs canonicalized, but protocols will be preserved. * As of v2: Dependencies that use shortcuts for hosted git providers (`org/proj`, `github:org/proj`, `bitbucket:org/proj`, `gitlab:org/proj`, `gist:docid`) will have the shortcut left in place. (In the case of github, the `org/proj` form will be expanded to `github:org/proj`.) THIS MARKS A BREAKING CHANGE FROM V1, where the shorcut was previously expanded to a URL. * If `description` field does not exist, but `readme` field does, then (more or less) the first paragraph of text that's found in the readme is taken as value for `description`. * If `repository` field is a string, it will become an object with `url` set to the original string value, and `type` set to `\"git\"`. * If `repository.url` is not a valid url, but in the style of \"[owner-name]/[repo-name]\", `repository.url` will be set to git+https://github.com/[owner-name]/[repo-name].git * If `bugs` field is a string, the value of `bugs` field is changed into an object with `url` set to the original string value. * If `bugs` field does not exist, but `repository` field points to a repository hosted on GitHub, the value of the `bugs` field gets set to an url in the form of https://github.com/[owner-name]/[repo-name]/issues . If the repository field points to a GitHub Gist repo url, the associated http url is chosen. * If `bugs` field is an object, the resulting value only has email and url properties. If email and url properties are not strings, they are ignored. If no valid values for either email or url is found, bugs field will be removed. * If `homepage` field is not a string, it will be removed. * If the url in the `homepage` field does not specify a protocol, then http is assumed. For example, `myproject.org` will be changed to `http://myproject.org`. * If `homepage` field does not exist, but `repository` field points to a repository hosted on GitHub, the value of the `homepage` field gets set to an url in the form of https://github.com/[owner-name]/[repo-name]/ . If the repository field points to a GitHub Gist repo url, the associated http url is chosen. ### Rules for name field If `name` field is given, the value of the name field must be a string. The string may not: * start with a period. * contain the following characters: `/@\\s+%` * contain and characters that would need to be encoded for use in urls. * resemble the word `node_modules` or `favicon.ico` (case doesn't matter). ### Rules for version field If `version` field is given, the value of the version field must be a valid *semver* string, as determined by the `semver.valid` method. See [documentation for the semver module](https://github.com/isaacs/node-semver). ### Rules for license field The `license` field should be a valid *SPDX license expression* or one of the special values allowed by [validate-npm-package-license](https://npmjs.com/packages/validate-npm-package-license). See [documentation for the license field in package.json](https://docs.npmjs.com/files/package.json#license). ## Credits This package contains code based on read-package-json written by Isaac Z. Schlueter. Used with permisson. ## License normalize-package-data is released under the [BSD 2-Clause License](http://opensource.org/licenses/MIT). Copyright (c) 2013 Meryn Stol"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/hosted-git-info/README.md","tags":[],"body":"# hosted-git-info This will let you identify and transform various git hosts URLs between protocols. It also can tell you what the URL is for the raw path for particular file for direct access without git. ## Usage ```javascript var hostedGitInfo = require(\"hosted-git-info\") var info = hostedGitInfo.fromUrl(\"git@github.com:npm/hosted-git-info.git\") /* info looks like: { type: \"github\", domain: \"github.com\", user: \"npm\", project: \"hosted-git-info\" } */ ``` If the URL can't be matched with a git host, `null` will be returned. We can match git, ssh and https urls. Additionally, we can match ssh connect strings (`git@github.com:npm/hosted-git-info`) and shortcuts (eg, `github:npm/hosted-git-info`). Github specifically, is detected in the case of a third, unprefixed, form: `npm/hosted-git-info`. If it does match, the returned object has properties of: * info.type -- The short name of the service * info.domain -- The domain for git protocol use * info.user -- The name of the user/org on the git host * info.project -- The name of the project on the git host And methods of: * info.file(path) Given the path of a file relative to the repository, returns a URL for directly fetching it from the githost. If no committish was set then `master` will be used as the default. For example `hostedGitInfo.fromUrl(\"git@github.com:npm/hosted-git-info.git#v1.0.0\").file(\"package.json\")` would return `https://raw.githubusercontent.com/npm/hosted-git-info/v1.0.0/package.json` * info.shortcut() eg, `github:npm/hosted-git-info` * info.browse() eg, `https://github.com/npm/hosted-git-info/tree/v1.2.0` * info.bugs() eg, `https://github.com/npm/hosted-git-info/issues` * info.docs() eg, `https://github.com/npm/hosted-git-info/tree/v1.2.0#readme` * info.https() eg, `git+https://github.com/npm/hosted-git-info.git` * info.sshurl() eg, `git+ssh://git@github.com/npm/hosted-git-info.git` * info.ssh() eg, `git@github.com:npm/hosted-git-info.git` * info.path() eg, `npm/hosted-git-info` * info.getDefaultRepresentation() Returns the default output type. The default output type is based on the string you passed in to be parsed * info.toString() Uses the getDefaultRepresentation to call one of the other methods to get a URL for this resource. As such `hostedGitInfo.fromUrl(url).toString()` will give you a normalized version of the URL that still uses the same protocol. Shortcuts will still be returned as shortcuts, but the special case github form of `org/project` will be normalized to `github:org/project`. SSH connect strings will be normalized into `git+ssh` URLs. ## Supported hosts Currently this supports Github, Bitbucket and Gitlab. Pull requests for additional hosts welcome."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/is-builtin-module/node_modules/builtin-modules/readme.md","tags":[],"body":"# builtin-modules [![Build Status](https://travis-ci.org/sindresorhus/builtin-modules.svg?branch=master)](https://travis-ci.org/sindresorhus/builtin-modules) > List of the Node.js builtin modules The list is just a [JSON file](builtin-modules.json) and can be used wherever. ## Install ``` $ npm install --save builtin-modules ``` ## Usage ```js var builtinModules = require('builtin-modules'); console.log(builinModules); //=> ['assert', 'buffer', ...] ``` ## API Returns an array of builtin modules fetched from the running Node.js version. ### Static list This module also comes bundled with a static array of builtin modules generated from the latest Node.js version. You can get it with `require('builtin-modules/static');` ## Related - [is-builtin-module](https://github.com/sindresorhus/is-builtin-module) - Check if a string matches the name of a Node.js builtin module ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/is-builtin-module/readme.md","tags":[],"body":"# is-builtin-module [![Build Status](https://travis-ci.org/sindresorhus/is-builtin-module.svg?branch=master)](https://travis-ci.org/sindresorhus/is-builtin-module) > Check if a string matches the name of a Node.js builtin module ## Install ``` $ npm install --save is-builtin-module ``` ## Usage ```js var isBuiltinModule = require('is-builtin-module'); isBuiltinModule('fs'); //=> true isBuiltinModule('unicorn'); //=> false :( ``` ## Related - [builtin-modules](https://github.com/sindresorhus/builtin-modules) - List of the Node.js builtin modules ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/semver/README.md","tags":[],"body":"semver(1) -- The semantic versioner for npm =========================================== ## Usage $ npm install semver semver.valid('1.2.3') // '1.2.3' semver.valid('a.b.c') // null semver.clean(' =v1.2.3 ') // '1.2.3' semver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true semver.gt('1.2.3', '9.8.7') // false semver.lt('1.2.3', '9.8.7') // true As a command-line utility: $ semver -h SemVer 5.1.0 A JavaScript implementation of the http://semver.org/ specification Copyright Isaac Z. Schlueter Usage: semver [options] [ [...]] Prints valid versions sorted by SemVer precedence Options: -r --range Print versions that match the specified range. -i --increment [] Increment a version by the specified level. Level can be one of: major, minor, patch, premajor, preminor, prepatch, or prerelease. Default level is 'patch'. Only one version may be specified. --preid Identifier to be used to prefix premajor, preminor, prepatch or prerelease version increments. -l --loose Interpret versions and ranges loosely Program exits successfully if any valid version satisfies all supplied ranges, and prints all satisfying versions. If no satisfying versions are found, then exits failure. Versions are printed in ascending order, so supplying multiple versions to the utility will just sort them. ## Versions A \"version\" is described by the `v2.0.0` specification found at . A leading `\"=\"` or `\"v\"` character is stripped off and ignored. ## Ranges A `version range` is a set of `comparators` which specify versions that satisfy the range. A `comparator` is composed of an `operator` and a `version`. The set of primitive `operators` is: * `` Greater than * `>=` Greater than or equal to * `=` Equal. If no operator is specified, then equality is assumed, so this operator is optional, but MAY be included. For example, the comparator `>=1.2.7` would match the versions `1.2.7`, `1.2.8`, `2.5.3`, and `1.3.9`, but not the versions `1.2.6` or `1.1.0`. Comparators can be joined by whitespace to form a `comparator set`, which is satisfied by the **intersection** of all of the comparators it includes. A range is composed of one or more comparator sets, joined by `||`. A version matches a range if and only if every comparator in at least one of the `||`-separated comparator sets is satisfied by the version. For example, the range `>=1.2.7 =1.2.9 1.2.3-alpha.3` would be allowed to match the version `1.2.3-alpha.7`, but it would *not* be satisfied by `3.4.5-alpha.9`, even though `3.4.5-alpha.9` is technically \"greater than\" `1.2.3-alpha.3` according to the SemVer sort rules. The version range only accepts prerelease tags on the `1.2.3` version. The version `3.4.5` *would* satisfy the range, because it does not have a prerelease flag, and `3.4.5` is greater than `1.2.3-alpha.7`. The purpose for this behavior is twofold. First, prerelease versions frequently are updated very quickly, and contain many breaking changes that are (by the author's design) not yet fit for public consumption. Therefore, by default, they are excluded from range matching semantics. Second, a user who has opted into using a prerelease version has clearly indicated the intent to use *that specific* set of alpha/beta/rc versions. By including a prerelease tag in the range, the user is indicating that they are aware of the risk. However, it is still not appropriate to assume that they have opted into taking a similar risk on the *next* set of prerelease versions. #### Prerelease Identifiers The method `.inc` takes an additional `identifier` string argument that will append the value of the string as a prerelease identifier: ```javascript > semver.inc('1.2.3', 'prerelease', 'beta') '1.2.4-beta.0' ``` command-line example: ```shell $ semver 1.2.3 -i prerelease --preid beta 1.2.4-beta.0 ``` Which then can be used to increment further: ```shell $ semver 1.2.4-beta.0 -i prerelease 1.2.4-beta.1 ``` ### Advanced Range Syntax Advanced range syntax desugars to primitive comparators in deterministic ways. Advanced ranges may be combined in the same way as primitive comparators using white space or `||`. #### Hyphen Ranges `X.Y.Z - A.B.C` Specifies an inclusive set. * `1.2.3 - 2.3.4` := `>=1.2.3 =1.2.0 =1.2.3 =1.2.3 =0.0.0` (Any version satisfies) * `1.x` := `>=1.0.0 =1.2.0 =0.0.0` * `1` := `1.x.x` := `>=1.0.0 =1.2.0 =1.2.3 =1.2.3 =1.2.0 =1.2.0 =1.0.0 =1.0.0 =0.2.3 =0.2.3 =0.2.0 =0.2.0 =0.0.0 =0.0.0 =1.2.3-beta.2 =0.1.0`, and *no* updates for versions `0.0.X`. Many authors treat a `0.x` version as if the `x` were the major \"breaking-change\" indicator. Caret ranges are ideal when an author may make breaking changes between `0.2.4` and `0.3.0` releases, which is a common practice. However, it presumes that there will *not* be breaking changes between `0.2.4` and `0.2.5`. It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices. * `^1.2.3` := `>=1.2.3 =0.2.3 =0.0.3 =1.2.3-beta.2 =0.0.3-beta =1.2.0 =0.0.0 =0.0.0 =1.0.0 =0.0.0 ' | '>=' | ' ['alpha', 1]` * `major(v)`: Return the major version number. * `minor(v)`: Return the minor version number. * `patch(v)`: Return the patch version number. ### Comparison * `gt(v1, v2)`: `v1 > v2` * `gte(v1, v2)`: `v1 >= v2` * `lt(v1, v2)`: `v1 '` or `'2.0.0` would have a hole from `1.2.9` until `2.0.0`, so the version `1.2.10` would not be greater than the range (because `2.0.1` satisfies, which is higher), nor less than the range (since `1.2.8` satisfies, which is lower), and it also does not satisfy the range. If you want to know if a version satisfies or does not satisfy a range, use the `satisfies(version, range)` function."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/validate-npm-package-license/README.md","tags":[],"body":"validate-npm-package-license ============================ Give me a string and I'll tell you if it's a valid npm package license string. ```javascript var valid = require('validate-npm-package-license'); ``` SPDX license identifiers are valid license strings: ```javascript var assert = require('assert'); var validSPDXExpression = { validForNewPackages: true, validForOldPackages: true, spdx: true }; assert.deepEqual(valid('MIT'), validSPDXExpression); assert.deepEqual(valid('BSD-2-Clause'), validSPDXExpression); assert.deepEqual(valid('Apache-2.0'), validSPDXExpression); assert.deepEqual(valid('ISC'), validSPDXExpression); ``` The function will return a warning and suggestion for nearly-correct license identifiers: ```javascript assert.deepEqual( valid('Apache 2.0'), { validForOldPackages: false, validForNewPackages: false, warnings: [ 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN \"', 'license is similar to the valid expression \"Apache-2.0\"' ] } ); ``` SPDX expressions are valid, too ... ```javascript // Simple SPDX license expression for dual licensing assert.deepEqual( valid('(GPL-3.0 OR BSD-2-Clause)'), validSPDXExpression ); ``` ... except if they contain `LicenseRef`: ```javascript var warningAboutLicenseRef = { validForOldPackages: false, validForNewPackages: false, spdx: true, warnings: [ 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN \"', ] }; assert.deepEqual( valid('LicenseRef-Made-Up'), warningAboutLicenseRef ); assert.deepEqual( valid('(MIT OR LicenseRef-Made-Up)'), warningAboutLicenseRef ); ``` If you can't describe your licensing terms with standardized SPDX identifiers, put the terms in a file in the package and point users there: ```javascript assert.deepEqual( valid('SEE LICENSE IN LICENSE.txt'), { validForNewPackages: true, validForOldPackages: true, inFile: 'LICENSE.txt' } ); assert.deepEqual( valid('SEE LICENSE IN license.md'), { validForNewPackages: true, validForOldPackages: true, inFile: 'license.md' } ); ``` If there aren't any licensing terms, use `UNLICENSED`: ```javascript var unlicensed = { validForNewPackages: true, validForOldPackages: true, unlicensed: true }; assert.deepEqual(valid('UNLICENSED'), unlicensed); assert.deepEqual(valid('UNLICENCED'), unlicensed); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-correct/README.md","tags":[],"body":"```javascript var correct = require('spdx-correct'); var assert = require('assert'); assert.equal(correct('mit'), 'MIT') assert.equal(correct('Apache 2'), 'Apache-2.0') assert(correct('No idea what license') === null) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-correct/node_modules/spdx-license-ids/README.md","tags":[],"body":"# spdx-license-ids A list of [SPDX license](https://spdx.org/licenses/) identifiers [**Download JSON**](https://raw.githubusercontent.com/shinnn/spdx-license-ids/master/spdx-license-ids.json) ## Use as a JavaScript Library [![NPM version](https://img.shields.io/npm/v/spdx-license-ids.svg)](https://www.npmjs.org/package/spdx-license-ids) [![Bower version](https://img.shields.io/bower/v/spdx-license-ids.svg)](https://github.com/shinnn/spdx-license-ids/releases) [![Build Status](https://travis-ci.org/shinnn/spdx-license-ids.svg?branch=master)](https://travis-ci.org/shinnn/spdx-license-ids) [![Coverage Status](https://img.shields.io/coveralls/shinnn/spdx-license-ids.svg)](https://coveralls.io/r/shinnn/spdx-license-ids) [![devDependency Status](https://david-dm.org/shinnn/spdx-license-ids/dev-status.svg)](https://david-dm.org/shinnn/spdx-license-ids#info=devDependencies) ### Installation #### Package managers ##### [npm](https://www.npmjs.com/) ```sh npm install spdx-license-ids ``` ##### [bower](http://bower.io/) ```sh bower install spdx-license-ids ``` ##### [Duo](http://duojs.org/) ```javascript const spdxLicenseIds = require('shinnn/spdx-license-ids'); ``` #### Standalone [Download the script file directly.](https://raw.githubusercontent.com/shinnn/spdx-license-ids/master/spdx-license-ids-browser.js) ### API #### spdxLicenseIds Type: `Array` of `String` It returns an array of SPDX license identifiers. ```javascript const spdxLicenseIds = require('spdx-license-ids'); //=> ['Glide', 'Abstyles', 'AFL-1.1', ... ] ``` ## License [The Unlicense](./LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-expression-parse/README.md","tags":[],"body":"```javascript var parse = require('spdx-expression-parse') var assert = require('assert') var firstAST = { left: { license: 'LGPL-2.1' }, conjunction: 'or', right: { left: { license: 'BSD-3-Clause' }, conjunction: 'and', right: { license: 'MIT' } } } assert.deepEqual( parse('(LGPL-2.1 OR BSD-3-Clause AND MIT)'), firstAST) var secondAST = { left: { license: 'MIT' }, conjunction: 'and', right: { left: { license: 'LGPL-2.1', plus: true }, conjunction: 'and', right: { license: 'BSD-3-Clause' } } } assert.deepEqual( parse('(MIT AND (LGPL-2.1+ AND BSD-3-Clause))'), secondAST) // We handle all the bare SPDX license and exception ids as well. require('spdx-license-ids').forEach(function(id) { assert.deepEqual( parse(id), { license: id }) require('spdx-exceptions').forEach(function(e) { assert.deepEqual( parse(id + ' WITH ' + e), { license: id, exception: e }) }) }) ``` --- [The Software Package Data Exchange (SPDX) specification](http://spdx.org) is the work of the [Linux Foundation](http://www.linuxfoundation.org) and its contributors, and is licensed under the terms of [the Creative Commons Attribution License 3.0 Unported (SPDX: \"CC-BY-3.0\")](http://spdx.org/licenses/CC-BY-3.0). \"SPDX\" is a United States federally registered trademark of the Linux Foundation."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-expression-parse/node_modules/spdx-exceptions/README.md","tags":[],"body":"The package exports an array of strings."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-expression-parse/node_modules/spdx-license-ids/README.md","tags":[],"body":"# spdx-license-ids A list of [SPDX license](https://spdx.org/licenses/) identifiers [**Download JSON**](https://raw.githubusercontent.com/shinnn/spdx-license-ids/master/spdx-license-ids.json) ## Use as a JavaScript Library [![NPM version](https://img.shields.io/npm/v/spdx-license-ids.svg)](https://www.npmjs.org/package/spdx-license-ids) [![Bower version](https://img.shields.io/bower/v/spdx-license-ids.svg)](https://github.com/shinnn/spdx-license-ids/releases) [![Build Status](https://travis-ci.org/shinnn/spdx-license-ids.svg?branch=master)](https://travis-ci.org/shinnn/spdx-license-ids) [![Coverage Status](https://img.shields.io/coveralls/shinnn/spdx-license-ids.svg)](https://coveralls.io/r/shinnn/spdx-license-ids) [![devDependency Status](https://david-dm.org/shinnn/spdx-license-ids/dev-status.svg)](https://david-dm.org/shinnn/spdx-license-ids#info=devDependencies) ### Installation #### Package managers ##### [npm](https://www.npmjs.com/) ```sh npm install spdx-license-ids ``` ##### [bower](http://bower.io/) ```sh bower install spdx-license-ids ``` ##### [Duo](http://duojs.org/) ```javascript const spdxLicenseIds = require('shinnn/spdx-license-ids'); ``` #### Standalone [Download the script file directly.](https://raw.githubusercontent.com/shinnn/spdx-license-ids/master/spdx-license-ids-browser.js) ### API #### spdxLicenseIds Type: `Array` of `String` It returns an array of SPDX license identifiers. ```javascript const spdxLicenseIds = require('spdx-license-ids'); //=> ['Glide', 'Abstyles', 'AFL-1.1', ... ] ``` ## License [The Unlicense](./LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/object-assign/readme.md","tags":[],"body":"# object-assign [![Build Status](https://travis-ci.org/sindresorhus/object-assign.svg?branch=master)](https://travis-ci.org/sindresorhus/object-assign) > ES2015 [`Object.assign()`](http://www.2ality.com/2014/01/object-assign.html) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save object-assign ``` ## Usage ```js const objectAssign = require('object-assign'); objectAssign({foo: 0}, {bar: 1}); //=> {foo: 0, bar: 1} // multiple sources objectAssign({foo: 0}, {bar: 1}, {baz: 2}); //=> {foo: 0, bar: 1, baz: 2} // overwrites equal keys objectAssign({foo: 0}, {foo: 1}, {foo: 2}); //=> {foo: 2} // ignores null and undefined sources objectAssign({foo: 0}, null, {bar: 1}, undefined); //=> {foo: 0, bar: 1} ``` ## API ### objectAssign(target, source, [source, ...]) Assigns enumerable own properties of `source` objects to the `target` object and returns the `target` object. Additional `source` objects will overwrite previous ones. ## Resources - [ES2015 spec - Object.assign](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign) ## Related - [deep-assign](https://github.com/sindresorhus/deep-assign) - Recursive `Object.assign()` ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/find-up/node_modules/path-exists/readme.md","tags":[],"body":"# path-exists [![Build Status](https://travis-ci.org/sindresorhus/path-exists.svg?branch=master)](https://travis-ci.org/sindresorhus/path-exists) > Check if a path exists Because [`fs.exists()`](https://nodejs.org/api/fs.html#fs_fs_exists_path_callback) is being [deprecated](https://github.com/iojs/io.js/issues/103), but there's still a genuine use-case of being able to check if a path exists for other purposes than doing IO with it. Never use this before handling a file though: > In particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions: another process may remove the file between the calls to `fs.exists()` and `fs.open()`. Just open the file and handle the error when it's not there. ## Install ``` $ npm install --save path-exists ``` ## Usage ```js // foo.js var pathExists = require('path-exists'); pathExists('foo.js').then(function (exists) { console.log(exists); //=> true }); ``` ## API ### pathExists(path) Returns a promise that resolves to a boolean of whether the path exists. ### pathExists.sync(path) Returns a boolean of whether the path exists. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/find-up/node_modules/pinkie-promise/node_modules/pinkie/readme.md","tags":[],"body":"> Itty bitty little widdle twinkie pinkie [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation [![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie) [![Coverage Status](https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&service=github)](https://coveralls.io/github/floatdrop/pinkie?branch=master) There are [tons of Promise implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone) out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in Node.js land (it should be browserify-able though). ## Install ``` $ npm install --save pinkie ``` ## Usage ```js var fs = require('fs'); var Promise = require('pinkie'); new Promise(function (resolve, reject) { fs.readFile('foo.json', 'utf8', function (err, data) { if (err) { reject(err); return; } resolve(data); }); }); //=> Promise ``` ### API `pinkie` exports bare [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation and polyfills [Node.js rejection events](https://nodejs.org/api/process.html#process_event_unhandledrejection). In case you forgot: #### new Promise(executor) Returns new instance of `Promise`. ##### executor *Required* Type: `function` Function with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. #### pinkie.all(promises) Returns a promise that resolves when all of the promises in the `promises` Array argument have resolved. #### pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise. #### pinkie.reject(reason) Returns a Promise object that is rejected with the given `reason`. #### pinkie.resolve(value) Returns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`. ## Related - [pinkie-promise](https://github.com/floatdrop/pinkie-promise) - Returns the native Promise or this module ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/find-up/node_modules/pinkie-promise/readme.md","tags":[],"body":"# pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise) > [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) ponyfill Module exports global Promise object (if available) or [`pinkie`](http://github.com/floatdrop/pinkie) Promise polyfill. ## Install ``` $ npm install --save pinkie-promise ``` ## Usage ```js var Promise = require('pinkie-promise'); new Promise(function (resolve) { resolve('unicorns'); }); //=> Promise { 'unicorns' } ``` ## Related - [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/find-up/readme.md","tags":[],"body":"# find-up [![Build Status](https://travis-ci.org/sindresorhus/find-up.svg?branch=master)](https://travis-ci.org/sindresorhus/find-up) > Find a file by walking up parent directories ## Install ``` $ npm install --save find-up ``` ## Usage ``` / └── Users └── sindresorhus ├── unicorn.png └── foo └── bar ├── baz └── example.js ``` ```js // example.js const findUp = require('find-up'); findUp('unicorn.png').then(filepath => { console.log(filepath); //=> '/Users/sindresorhus/unicorn.png' }); ``` ## API ### findUp(filename, [options]) Returns a promise for the filepath or `null`. ### findUp.sync(filename, [options]) Returns a filepath or `null`. #### filename Type: `string` Filename of the file to find. #### options ##### cwd Type: `string` Default: `process.cwd()` Directory to start from. ## Related - [find-up-cli](https://github.com/sindresorhus/find-up-cli) - CLI for this module - [pkg-up](https://github.com/sindresorhus/pkg-up) - Find the closest package.json file - [pkg-dir](https://github.com/sindresorhus/pkg-dir) - Find the root directory of an npm package ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/graceful-fs/README.md","tags":[],"body":"# graceful-fs graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors. ## Improvements over [fs module](http://api.nodejs.org/fs.html) * Queues up `open` and `readdir` calls, and retries them once something closes if there is an EMFILE error from too many file descriptors. * fixes `lchmod` for Node versions prior to 0.6.2. * implements `fs.lutimes` if possible. Otherwise it becomes a noop. * ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or `lchown` if the user isn't root. * makes `lchmod` and `lchown` become noops, if not available. * retries reading a file if `read` results in EAGAIN error. On Windows, it retries renaming a file for up to one second if `EACCESS` or `EPERM` error occurs, likely because antivirus software has locked the directory. ## USAGE ```javascript // use just like fs var fs = require('graceful-fs') // now go and do stuff with it... fs.readFileSync('some-file-or-whatever') ``` ## Global Patching If you want to patch the global fs module (or any other fs-like module) you can do this: ```javascript // Make sure to read the caveat below. var realFs = require('fs') var gracefulFs = require('graceful-fs') gracefulFs.gracefulify(realFs) ``` This should only ever be done at the top-level application layer, in order to delay on EMFILE errors from any fs-using dependencies. You should **not** do this in a library, because it can cause unexpected delays in other parts of the program. ## Changes This module is fairly stable at this point, and used by a lot of things. That being said, because it implements a subtle behavior change in a core part of the node API, even modest changes can be extremely breaking, and the versioning is thus biased towards bumping the major when in doubt. The main change between major versions has been switching between providing a fully-patched `fs` module vs monkey-patching the node core builtin, and the approach by which a non-monkey-patched `fs` was created. The goal is to trade `EMFILE` errors for slower fs operations. So, if you try to open a zillion files, rather than crashing, `open` operations will be queued up and wait for something else to `close`. There are advantages to each approach. Monkey-patching the fs means that no `EMFILE` errors can possibly occur anywhere in your application, because everything is using the same core `fs` module, which is patched. However, it can also obviously cause undesirable side-effects, especially if the module is loaded multiple times. Implementing a separate-but-identical patched `fs` module is more surgical (and doesn't run the risk of patching multiple times), but also imposes the challenge of keeping in sync with the core module. The current approach loads the `fs` module, and then creates a lookalike object that has all the same methods, except a few that are patched. It is safe to use in all versions of Node from 0.8 through 7.0. ### v4 * Do not monkey-patch the fs module. This module may now be used as a drop-in dep, and users can opt into monkey-patching the fs builtin if their app requires it. ### v3 * Monkey-patch fs, because the eval approach no longer works on recent node. * fixed possible type-error throw if rename fails on windows * verify that we *never* get EMFILE errors * Ignore ENOSYS from chmod/chown * clarify that graceful-fs must be used as a drop-in ### v2.1.0 * Use eval rather than monkey-patching fs. * readdir: Always sort the results * win32: requeue a file if error has an OK status ### v2.0 * A return to monkey patching * wrap process.cwd ### v1.1 * wrap readFile * Wrap fs.writeFile. * readdir protection * Don't clobber the fs builtin * Handle fs.read EAGAIN errors by trying again * Expose the curOpen counter * No-op lchown/lchmod if not implemented * fs.rename patch only for win32 * Patch fs.rename to handle AV software on Windows * Close #4 Chown should not fail on einval or eperm if non-root * Fix isaacs/fstream#1 Only wrap fs one time * Fix #3 Start at 1024 max files, then back off on EMFILE * lutimes that doens't blow up on Linux * A full on-rewrite using a queue instead of just swallowing the EMFILE error * Wrap Read/Write streams as well ### 1.0 * Update engines for node 0.6 * Be lstat-graceful on Windows * first"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/parse-json/node_modules/error-ex/README.md","tags":[],"body":"# node-error-ex [![Travis-CI.org Build Status](https://img.shields.io/travis/Qix-/node-error-ex.svg?style=flat-square)](https://travis-ci.org/Qix-/node-error-ex) [![Coveralls.io Coverage Rating](https://img.shields.io/coveralls/Qix-/node-error-ex.svg?style=flat-square)](https://coveralls.io/r/Qix-/node-error-ex) > Easily subclass and customize new Error types ## Examples To include in your project: ```javascript var errorEx = require('error-ex'); ``` To create an error message type with a specific name (note, that `ErrorFn.name` will not reflect this): ```javascript var JSONError = errorEx('JSONError'); var err = new JSONError('error'); err.name; //-> JSONError throw err; //-> JSONError: error ``` To add a stack line: ```javascript var JSONError = errorEx('JSONError', {fileName: errorEx.line('in %s')}); var err = new JSONError('error') err.fileName = '/a/b/c/foo.json'; throw err; //-> (line 2)-> in /a/b/c/foo.json ``` To append to the error message: ```javascript var JSONError = errorEx('JSONError', {fileName: errorEx.append('in %s')}); var err = new JSONError('error'); err.fileName = '/a/b/c/foo.json'; throw err; //-> JSONError: error in /a/b/c/foo.json ``` ## API #### `errorEx([name], [properties])` Creates a new ErrorEx error type - `name`: the name of the new type (appears in the error message upon throw; defaults to `Error.name`) - `properties`: if supplied, used as a key/value dictionary of properties to use when building up the stack message. Keys are property names that are looked up on the error message, and then passed to function values. - `line`: if specified and is a function, return value is added as a stack entry (error-ex will indent for you). Passed the property value given the key. - `stack`: if specified and is a function, passed the value of the property using the key, and the raw stack lines as a second argument. Takes no return value (but the stack can be modified directly). - `message`: if specified and is a function, return value is used as new `.message` value upon get. Passed the property value of the property named by key, and the existing message is passed as the second argument as an array of lines (suitable for multi-line messages). Returns a constructor (Function) that can be used just like the regular Error constructor. ```javascript var errorEx = require('error-ex'); var BasicError = errorEx(); var NamedError = errorEx('NamedError'); // -- var AdvancedError = errorEx('AdvancedError', { foo: { line: function (value, stack) { if (value) { return 'bar ' + value; } return null; } } } var err = new AdvancedError('hello, world'); err.foo = 'baz'; throw err; /* AdvancedError: hello, world bar baz at tryReadme() (readme.js:20:1) */ ``` #### `errorEx.line(str)` Creates a stack line using a delimiter > This is a helper function. It is to be used in lieu of writing a value object > for `properties` values. - `str`: The string to create - Use the delimiter `%s` to specify where in the string the value should go ```javascript var errorEx = require('error-ex'); var FileError = errorEx('FileError', {fileName: errorEx.line('in %s')}); var err = new FileError('problem reading file'); err.fileName = '/a/b/c/d/foo.js'; throw err; /* FileError: problem reading file in /a/b/c/d/foo.js at tryReadme() (readme.js:7:1) */ ``` #### `errorEx.append(str)` Appends to the `error.message` string > This is a helper function. It is to be used in lieu of writing a value object > for `properties` values. - `str`: The string to append - Use the delimiter `%s` to specify where in the string the value should go ```javascript var errorEx = require('error-ex'); var SyntaxError = errorEx('SyntaxError', {fileName: errorEx.append('in %s')}); var err = new SyntaxError('improper indentation'); err.fileName = '/a/b/c/d/foo.js'; throw err; /* SyntaxError: improper indentation in /a/b/c/d/foo.js at tryReadme() (readme.js:7:1) */ ``` ## License Licensed under the [MIT License](http://opensource.org/licenses/MIT). You can find a copy of it in [LICENSE](LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/parse-json/node_modules/error-ex/node_modules/is-arrayish/README.md","tags":[],"body":"# node-is-arrayish [![Travis-CI.org Build Status](https://img.shields.io/travis/Qix-/node-is-arrayish.svg?style=flat-square)](https://travis-ci.org/Qix-/node-is-arrayish) [![Coveralls.io Coverage Rating](https://img.shields.io/coveralls/Qix-/node-is-arrayish.svg?style=flat-square)](https://coveralls.io/r/Qix-/node-is-arrayish) > Determines if an object can be used like an Array ## Example ```javascript var isArrayish = require('is-arrayish'); isArrayish([]); // true isArrayish({__proto__: []}); // true isArrayish({}); // false isArrayish({length:10}); // false ``` ## License Licensed under the [MIT License](http://opensource.org/licenses/MIT). You can find a copy of it in [LICENSE](LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/parse-json/readme.md","tags":[],"body":"# parse-json [![Build Status](https://travis-ci.org/sindresorhus/parse-json.svg?branch=master)](https://travis-ci.org/sindresorhus/parse-json) > Parse JSON with more helpful errors ## Install ``` $ npm install --save parse-json ``` ## Usage ```js var parseJson = require('parse-json'); var json = '{\\n\\t\"foo\": true,\\n}'; JSON.parse(json); /* undefined:3 } ^ SyntaxError: Unexpected token } */ parseJson(json); /* JSONError: Trailing comma in object at 3:1 } ^ */ parseJson(json, 'foo.json'); /* JSONError: Trailing comma in object at 3:1 in foo.json } ^ */ // you can also add the filename at a later point try { parseJson(json); } catch (err) { err.fileName = 'foo.json'; throw err; } /* JSONError: Trailing comma in object at 3:1 in foo.json } ^ */ ``` ## API ### parseJson(input, [reviver], [filename]) #### input Type: `string` #### reviver Type: `function` Prescribes how the value originally produced by parsing is transformed, before being returned. See [`JSON.parse` docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter ) for more. #### filename Type: `string` Filename displayed in the error message. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/pify/readme.md","tags":[],"body":"# pify [![Build Status](https://travis-ci.org/sindresorhus/pify.svg?branch=master)](https://travis-ci.org/sindresorhus/pify) > Promisify a callback-style function ## Install ``` $ npm install --save pify ``` ## Usage ```js const fs = require('fs'); const pify = require('pify'); // promisify a single function pify(fs.readFile)('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); // or promisify all methods in a module pify(fs).readFile('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); ``` ## API ### pify(input, [promiseModule], [options]) Returns a promise wrapped version of the supplied function or module. #### input Type: `function`, `object` Callback-style function or module whose methods you want to promisify. #### promiseModule Type: `function` Custom promise module to use instead of the native one. Check out [`pinkie-promise`](https://github.com/floatdrop/pinkie-promise) if you need a tiny promise polyfill. #### options ##### multiArgs Type: `boolean` Default: `false` By default, the promisified function will only return the second argument from the callback, which works fine for most APIs. This option can be useful for modules like `request` that return multiple arguments. Turning this on will make it return an array of all arguments from the callback, excluding the error argument, instead of just the second argument. ```js const request = require('request'); const pify = require('pify'); pify(request, {multiArgs: true})('https://sindresorhus.com').then(result => { const [httpResponse, body] = result; }); ``` ##### include Type: `array` of (`string`|`regex`) Methods in a module to promisify. Remaining methods will be left untouched. ##### exclude Type: `array` of (`string`|`regex`) Default: `[/.+Sync$/]` Methods in a module **not** to promisify. Methods with names ending with `'Sync'` are excluded by default. ##### excludeMain Type: `boolean` Default: `false` By default, if given module is a function itself, this function will be promisified. Turn this option on if you want to promisify only methods of the module. ```js const pify = require('pify'); function fn() { return true; } fn.method = (data, callback) => { setImmediate(() => { callback(data, null); }); }; // promisify methods but not fn() const promiseFn = pify(fn, {excludeMain: true}); if (promiseFn()) { promiseFn.method('hi').then(data => { console.log(data); }); } ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/pinkie-promise/node_modules/pinkie/readme.md","tags":[],"body":"> Itty bitty little widdle twinkie pinkie [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation [![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie) [![Coverage Status](https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&service=github)](https://coveralls.io/github/floatdrop/pinkie?branch=master) There are [tons of Promise implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone) out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in Node.js land (it should be browserify-able though). ## Install ``` $ npm install --save pinkie ``` ## Usage ```js var fs = require('fs'); var Promise = require('pinkie'); new Promise(function (resolve, reject) { fs.readFile('foo.json', 'utf8', function (err, data) { if (err) { reject(err); return; } resolve(data); }); }); //=> Promise ``` ### API `pinkie` exports bare [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation and polyfills [Node.js rejection events](https://nodejs.org/api/process.html#process_event_unhandledrejection). In case you forgot: #### new Promise(executor) Returns new instance of `Promise`. ##### executor *Required* Type: `function` Function with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. #### pinkie.all(promises) Returns a promise that resolves when all of the promises in the `promises` Array argument have resolved. #### pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise. #### pinkie.reject(reason) Returns a Promise object that is rejected with the given `reason`. #### pinkie.resolve(value) Returns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`. ## Related - [pinkie-promise](https://github.com/floatdrop/pinkie-promise) - Returns the native Promise or this module ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/pinkie-promise/readme.md","tags":[],"body":"# pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise) > [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) ponyfill Module exports global Promise object (if available) or [`pinkie`](http://github.com/floatdrop/pinkie) Promise polyfill. ## Install ``` $ npm install --save pinkie-promise ``` ## Usage ```js var Promise = require('pinkie-promise'); new Promise(function (resolve) { resolve('unicorns'); }); //=> Promise { 'unicorns' } ``` ## Related - [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/strip-bom/node_modules/is-utf8/README.md","tags":[],"body":"#utf8 detector Detect if a Buffer is utf8 encoded. It need The minimum amount of bytes is 4. ```javascript var fs = require('fs'); var isUtf8 = require('is-utf8'); var ansi = fs.readFileSync('ansi.txt'); var utf8 = fs.readFileSync('utf8.txt'); console.log('ansi.txt is utf8: '+isUtf8(ansi)); //false console.log('utf8.txt is utf8: '+isUtf8(utf8)); //true ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/strip-bom/readme.md","tags":[],"body":"# strip-bom [![Build Status](https://travis-ci.org/sindresorhus/strip-bom.svg?branch=master)](https://travis-ci.org/sindresorhus/strip-bom) > Strip UTF-8 [byte order mark](http://en.wikipedia.org/wiki/Byte_order_mark#UTF-8) (BOM) from a string/buffer From Wikipedia: > The Unicode Standard permits the BOM in UTF-8, but does not require nor recommend its use. Byte order has no meaning in UTF-8. ## Install ``` $ npm install --save strip-bom ``` ## Usage ```js var fs = require('fs'); var stripBom = require('strip-bom'); stripBom('\\uFEFFunicorn'); //=> 'unicorn' stripBom(fs.readFileSync('unicorn.txt')); //=> 'unicorn' ``` ## Related - [strip-bom-cli](https://github.com/sindresorhus/strip-bom-cli) - CLI for this module - [strip-bom-stream](https://github.com/sindresorhus/strip-bom-stream) - Stream version of this module ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/readme.md","tags":[],"body":"# load-json-file [![Build Status](https://travis-ci.org/sindresorhus/load-json-file.svg?branch=master)](https://travis-ci.org/sindresorhus/load-json-file) > Read and parse a JSON file [Strips UTF-8 BOM](https://github.com/sindresorhus/strip-bom), uses [`graceful-fs`](https://github.com/isaacs/node-graceful-fs), and throws more [helpful JSON errors](https://github.com/sindresorhus/parse-json). ## Install ``` $ npm install --save load-json-file ``` ## Usage ```js const loadJsonFile = require('load-json-file'); loadJsonFile('foo.json').then(json => { console.log(json); //=> {foo: true} }); ``` ## API ### loadJsonFile(filepath) Returns a promise that resolves to the parsed JSON. ### loadJsonFile.sync(filepath) Returns the parsed JSON. ## Related - [write-json-file](https://github.com/sindresorhus/write-json-file) - Stringify and write JSON to a file atomically ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/node_modules/graceful-fs/README.md","tags":[],"body":"# graceful-fs graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors. ## Improvements over [fs module](http://api.nodejs.org/fs.html) * Queues up `open` and `readdir` calls, and retries them once something closes if there is an EMFILE error from too many file descriptors. * fixes `lchmod` for Node versions prior to 0.6.2. * implements `fs.lutimes` if possible. Otherwise it becomes a noop. * ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or `lchown` if the user isn't root. * makes `lchmod` and `lchown` become noops, if not available. * retries reading a file if `read` results in EAGAIN error. On Windows, it retries renaming a file for up to one second if `EACCESS` or `EPERM` error occurs, likely because antivirus software has locked the directory. ## USAGE ```javascript // use just like fs var fs = require('graceful-fs') // now go and do stuff with it... fs.readFileSync('some-file-or-whatever') ``` ## Global Patching If you want to patch the global fs module (or any other fs-like module) you can do this: ```javascript // Make sure to read the caveat below. var realFs = require('fs') var gracefulFs = require('graceful-fs') gracefulFs.gracefulify(realFs) ``` This should only ever be done at the top-level application layer, in order to delay on EMFILE errors from any fs-using dependencies. You should **not** do this in a library, because it can cause unexpected delays in other parts of the program. ## Changes This module is fairly stable at this point, and used by a lot of things. That being said, because it implements a subtle behavior change in a core part of the node API, even modest changes can be extremely breaking, and the versioning is thus biased towards bumping the major when in doubt. The main change between major versions has been switching between providing a fully-patched `fs` module vs monkey-patching the node core builtin, and the approach by which a non-monkey-patched `fs` was created. The goal is to trade `EMFILE` errors for slower fs operations. So, if you try to open a zillion files, rather than crashing, `open` operations will be queued up and wait for something else to `close`. There are advantages to each approach. Monkey-patching the fs means that no `EMFILE` errors can possibly occur anywhere in your application, because everything is using the same core `fs` module, which is patched. However, it can also obviously cause undesirable side-effects, especially if the module is loaded multiple times. Implementing a separate-but-identical patched `fs` module is more surgical (and doesn't run the risk of patching multiple times), but also imposes the challenge of keeping in sync with the core module. The current approach loads the `fs` module, and then creates a lookalike object that has all the same methods, except a few that are patched. It is safe to use in all versions of Node from 0.8 through 7.0. ### v4 * Do not monkey-patch the fs module. This module may now be used as a drop-in dep, and users can opt into monkey-patching the fs builtin if their app requires it. ### v3 * Monkey-patch fs, because the eval approach no longer works on recent node. * fixed possible type-error throw if rename fails on windows * verify that we *never* get EMFILE errors * Ignore ENOSYS from chmod/chown * clarify that graceful-fs must be used as a drop-in ### v2.1.0 * Use eval rather than monkey-patching fs. * readdir: Always sort the results * win32: requeue a file if error has an OK status ### v2.0 * A return to monkey patching * wrap process.cwd ### v1.1 * wrap readFile * Wrap fs.writeFile. * readdir protection * Don't clobber the fs builtin * Handle fs.read EAGAIN errors by trying again * Expose the curOpen counter * No-op lchown/lchmod if not implemented * fs.rename patch only for win32 * Patch fs.rename to handle AV software on Windows * Close #4 Chown should not fail on einval or eperm if non-root * Fix isaacs/fstream#1 Only wrap fs one time * Fix #3 Start at 1024 max files, then back off on EMFILE * lutimes that doens't blow up on Linux * A full on-rewrite using a queue instead of just swallowing the EMFILE error * Wrap Read/Write streams as well ### 1.0 * Update engines for node 0.6 * Be lstat-graceful on Windows * first"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/node_modules/pify/readme.md","tags":[],"body":"# pify [![Build Status](https://travis-ci.org/sindresorhus/pify.svg?branch=master)](https://travis-ci.org/sindresorhus/pify) > Promisify a callback-style function ## Install ``` $ npm install --save pify ``` ## Usage ```js const fs = require('fs'); const pify = require('pify'); // promisify a single function pify(fs.readFile)('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); // or promisify all methods in a module pify(fs).readFile('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); ``` ## API ### pify(input, [promiseModule], [options]) Returns a promise wrapped version of the supplied function or module. #### input Type: `function`, `object` Callback-style function or module whose methods you want to promisify. #### promiseModule Type: `function` Custom promise module to use instead of the native one. Check out [`pinkie-promise`](https://github.com/floatdrop/pinkie-promise) if you need a tiny promise polyfill. #### options ##### multiArgs Type: `boolean` Default: `false` By default, the promisified function will only return the second argument from the callback, which works fine for most APIs. This option can be useful for modules like `request` that return multiple arguments. Turning this on will make it return an array of all arguments from the callback, excluding the error argument, instead of just the second argument. ```js const request = require('request'); const pify = require('pify'); pify(request, {multiArgs: true})('https://sindresorhus.com').then(result => { const [httpResponse, body] = result; }); ``` ##### include Type: `array` of (`string`|`regex`) Methods in a module to promisify. Remaining methods will be left untouched. ##### exclude Type: `array` of (`string`|`regex`) Default: `[/.+Sync$/]` Methods in a module **not** to promisify. Methods with names ending with `'Sync'` are excluded by default. ##### excludeMain Type: `boolean` Default: `false` By default, if given module is a function itself, this function will be promisified. Turn this option on if you want to promisify only methods of the module. ```js const pify = require('pify'); function fn() { return true; } fn.method = (data, callback) => { setImmediate(() => { callback(data, null); }); }; // promisify methods but not fn() const promiseFn = pify(fn, {excludeMain: true}); if (promiseFn()) { promiseFn.method('hi').then(data => { console.log(data); }); } ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/node_modules/pinkie-promise/node_modules/pinkie/readme.md","tags":[],"body":"> Itty bitty little widdle twinkie pinkie [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation [![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie) [![Coverage Status](https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&service=github)](https://coveralls.io/github/floatdrop/pinkie?branch=master) There are [tons of Promise implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone) out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in Node.js land (it should be browserify-able though). ## Install ``` $ npm install --save pinkie ``` ## Usage ```js var fs = require('fs'); var Promise = require('pinkie'); new Promise(function (resolve, reject) { fs.readFile('foo.json', 'utf8', function (err, data) { if (err) { reject(err); return; } resolve(data); }); }); //=> Promise ``` ### API `pinkie` exports bare [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation and polyfills [Node.js rejection events](https://nodejs.org/api/process.html#process_event_unhandledrejection). In case you forgot: #### new Promise(executor) Returns new instance of `Promise`. ##### executor *Required* Type: `function` Function with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. #### pinkie.all(promises) Returns a promise that resolves when all of the promises in the `promises` Array argument have resolved. #### pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise. #### pinkie.reject(reason) Returns a Promise object that is rejected with the given `reason`. #### pinkie.resolve(value) Returns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`. ## Related - [pinkie-promise](https://github.com/floatdrop/pinkie-promise) - Returns the native Promise or this module ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/node_modules/pinkie-promise/readme.md","tags":[],"body":"# pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise) > [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) ponyfill Module exports global Promise object (if available) or [`pinkie`](http://github.com/floatdrop/pinkie) Promise polyfill. ## Install ``` $ npm install --save pinkie-promise ``` ## Usage ```js var Promise = require('pinkie-promise'); new Promise(function (resolve) { resolve('unicorns'); }); //=> Promise { 'unicorns' } ``` ## Related - [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/readme.md","tags":[],"body":"# path-type [![Build Status](https://travis-ci.org/sindresorhus/path-type.svg?branch=master)](https://travis-ci.org/sindresorhus/path-type) > Check if a path is a file, directory, or symlink ## Install ``` $ npm install --save path-type ``` ## Usage ```js var pathType = require('path-type'); pathType.file('package.json').then(function (isFile) { console.log(isFile); //=> true }) ``` ## API ### .file(path) ### .dir(path) ### .symlink(path) Returns a promise that resolves to a boolean of whether the path is the checked type. ### .fileSync(path) ### .dirSync(path) ### .symlinkSync(path) Returns a boolean of whether the path is the checked type. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/readme.md","tags":[],"body":"# read-pkg [![Build Status](https://travis-ci.org/sindresorhus/read-pkg.svg?branch=master)](https://travis-ci.org/sindresorhus/read-pkg) > Read a package.json file ## Why - [Gracefully handles filesystem issues](https://github.com/isaacs/node-graceful-fs) - [Strips UTF-8 BOM](https://github.com/sindresorhus/strip-bom) - [Throws more helpful JSON errors](https://github.com/sindresorhus/parse-json) - [Normalizes the data](https://github.com/npm/normalize-package-data#what-normalization-currently-entails) ## Install ``` $ npm install --save read-pkg ``` ## Usage ```js var readPkg = require('read-pkg'); readPkg().then(function (pkg) { console.log(pkg); //=> {name: 'read-pkg', ...} }); readPkg(__dirname).then(function (pkg) { console.log(pkg); //=> {name: 'read-pkg', ...} }); readPkg(path.join('unicorn', 'package.json')).then(function (pkg) { console.log(pkg); //=> {name: 'read-pkg', ...} }); ``` ## API ### readPkg([path], [options]) Returns a promise that resolves to the parsed JSON. ### readPkg.sync([path], [options]) Returns the parsed JSON. #### path Type: `string` Default: `.` Path to a `package.json` file or its directory. #### options ##### normalize Type: `boolean` Default: `true` [Normalize](https://github.com/npm/normalize-package-data#what-normalization-currently-entails) the package data. ## Related - [read-pkg-up](https://github.com/sindresorhus/read-pkg-up) - Read the closest package.json file - [write-pkg](https://github.com/sindresorhus/write-pkg) - Write a `package.json` file - [load-json-file](https://github.com/sindresorhus/load-json-file) - Read and parse a JSON file ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/readme.md","tags":[],"body":"# read-pkg-up [![Build Status](https://travis-ci.org/sindresorhus/read-pkg-up.svg?branch=master)](https://travis-ci.org/sindresorhus/read-pkg-up) > Read the closest package.json file ## Why - [Finds the closest package.json](https://github.com/sindresorhus/find-up) - [Gracefully handles filesystem issues](https://github.com/isaacs/node-graceful-fs) - [Strips UTF-8 BOM](https://github.com/sindresorhus/strip-bom) - [Throws more helpful JSON errors](https://github.com/sindresorhus/parse-json) - [Normalizes the data](https://github.com/npm/normalize-package-data#what-normalization-currently-entails) ## Install ``` $ npm install --save read-pkg-up ``` ## Usage ```js var readPkgUp = require('read-pkg-up'); readPkgUp().then(function (result) { console.log(result); /* { pkg: { name: 'awesome-package', version: '1.0.0', ... }, path: '/Users/sindresorhus/dev/awesome-package' } */ }); ``` ## API ### readPkgUp([options]) Returns a promise that resolves to a result object. ### readPkgUp.sync([options]) Returns a result object. #### options ##### cwd Type: `string` Default: `.` Directory to start looking for a package.json file. ##### normalize Type: `boolean` Default: `true` [Normalize](https://github.com/npm/normalize-package-data#what-normalization-currently-entails) the package data. ## Related - [read-pkg](https://github.com/sindresorhus/read-pkg) - Read a package.json file - [find-up](https://github.com/sindresorhus/find-up) - Find a file by walking up parent directories - [pkg-conf](https://github.com/sindresorhus/pkg-conf) - Get namespaced config from the closest package.json ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/redent/node_modules/indent-string/node_modules/repeating/node_modules/is-finite/node_modules/number-is-nan/readme.md","tags":[],"body":"# number-is-nan [![Build Status](https://travis-ci.org/sindresorhus/number-is-nan.svg?branch=master)](https://travis-ci.org/sindresorhus/number-is-nan) > ES6 [`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save number-is-nan ``` ## Usage ```js var numberIsNan = require('number-is-nan'); numberIsNan(NaN); //=> true numberIsNan('unicorn'); //=> false ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/redent/node_modules/indent-string/node_modules/repeating/node_modules/is-finite/readme.md","tags":[],"body":"# is-finite [![Build Status](https://travis-ci.org/sindresorhus/is-finite.svg?branch=master)](https://travis-ci.org/sindresorhus/is-finite) > ES6 [`Number.isFinite()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ```sh $ npm install --save is-finite ``` ## Usage ```js var numIsFinite = require('is-finite'); numIsFinite(4); //=> true numIsFinite(Infinity); //=> false ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/redent/node_modules/indent-string/node_modules/repeating/readme.md","tags":[],"body":"# repeating [![Build Status](https://travis-ci.org/sindresorhus/repeating.svg?branch=master)](https://travis-ci.org/sindresorhus/repeating) > Repeat a string - fast ## Install ``` $ npm install --save repeating ``` ## Usage ```js const repeating = require('repeating'); repeating('unicorn ', 100); //=> 'unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn ' ``` ## Related - [repeating-cli](https://github.com/sindresorhus/repeating-cli) - CLI for this module ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/redent/node_modules/indent-string/readme.md","tags":[],"body":"# indent-string [![Build Status](https://travis-ci.org/sindresorhus/indent-string.svg?branch=master)](https://travis-ci.org/sindresorhus/indent-string) > Indent each line in a string ## Install ``` $ npm install --save indent-string ``` ## Usage ```js var indentString = require('indent-string'); indentString('Unicorns\\nRainbows', '♥', 4); //=> ♥♥♥♥Unicorns //=> ♥♥♥♥Rainbows ``` ## API ### indentString(string, indent, count) #### string **Required** Type: `string` The string you want to indent. #### indent **Required** Type: `string` The string to use for the indent. #### count Type: `number` Default: `1` How many times you want `indent` repeated. ## Related - [indent-string-cli](https://github.com/sindresorhus/indent-string-cli) - CLI for this module - [strip-indent](https://github.com/sindresorhus/strip-indent) - Strip leading whitespace from every line in a string ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/redent/node_modules/strip-indent/readme.md","tags":[],"body":"# strip-indent [![Build Status](https://travis-ci.org/sindresorhus/strip-indent.svg?branch=master)](https://travis-ci.org/sindresorhus/strip-indent) > Strip leading whitespace from every line in a string The line with the least number of leading whitespace, ignoring empty lines, determines the number to remove. Useful for removing redundant indentation. ## Install ```sh $ npm install --save strip-indent ``` ## Usage ```js var str = '\\tunicorn\\n\\t\\tcake'; /* unicorn cake */ stripIndent('\\tunicorn\\n\\t\\tcake'); /* unicorn cake */ ``` ## CLI ```sh $ npm install --global strip-indent ``` ```sh $ strip-indent --help Usage strip-indent echo | strip-indent Example echo '\\tunicorn\\n\\t\\tcake' | strip-indent unicorn cake ``` ## Related - [indent-string](https://github.com/sindresorhus/indent-string) - Indent each line in a string ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/redent/readme.md","tags":[],"body":"# redent [![Build Status](https://travis-ci.org/sindresorhus/redent.svg?branch=master)](https://travis-ci.org/sindresorhus/redent) > [Strip redundant indentation](https://github.com/sindresorhus/strip-indent) and [indent the string](https://github.com/sindresorhus/indent-string) ## Install ``` $ npm install --save redent ``` ## Usage ```js const redent = require('redent'); redent('\\n foo\\n bar\\n', 1); //=> '\\n foo\\n bar\\n' ``` ## API ### redent(input, [count], [indent]) #### input Type: `string` #### count Type: `number` Default: `0` How many times you want `indent` repeated. #### indent Type: `string` Default: `' '` The string to use for the indent. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/trim-newlines/readme.md","tags":[],"body":"# trim-newlines [![Build Status](https://travis-ci.org/sindresorhus/trim-newlines.svg?branch=master)](https://travis-ci.org/sindresorhus/trim-newlines) > Trim [newlines](https://en.wikipedia.org/wiki/Newline) from the start and/or end of a string ## Install ``` $ npm install --save trim-newlines ``` ## Usage ```js var trimNewlines = require('trim-newlines'); trimNewlines('\\nunicorn\\r\\n'); //=> 'unicorn' ``` ## API ### trimNewlines(input) Trim from the start and end of a string. ### trimNewlines.start(input) Trim from the start of a string. ### trimNewlines.end(input) Trim from the end of a string. ## Related - [trim-left](https://github.com/sindresorhus/trim-left) - Similar to `String#trim()` but removes only whitespace on the left - [trim-right](https://github.com/sindresorhus/trim-right) - Similar to `String#trim()` but removes only whitespace on the right. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/readme.md","tags":[],"body":"# meow [![Build Status](https://travis-ci.org/sindresorhus/meow.svg?branch=master)](https://travis-ci.org/sindresorhus/meow) > CLI app helper ![](meow.gif) ## Features - Parses arguments using [minimist](https://github.com/substack/minimist) - Converts flags to [camelCase](https://github.com/sindresorhus/camelcase) - Outputs version when `--version` - Outputs description and supplied help text when `--help` - Makes unhandled rejected promises [fail loudly](https://github.com/sindresorhus/loud-rejection) instead of the default silent fail - Sets the process title to the binary name defined in package.json ## Install ``` $ npm install --save meow ``` ## Usage ``` $ ./foo-app.js unicorns --rainbow-cake ``` ```js #!/usr/bin/env node 'use strict'; const meow = require('meow'); const foo = require('./'); const cli = meow(` Usage $ foo Options -r, --rainbow Include a rainbow Examples $ foo unicorns --rainbow 🌈 unicorns 🌈 `, { alias: { r: 'rainbow' } }); /* { input: ['unicorns'], flags: {rainbow: true}, ... } */ foo(cli.input[0], cli.flags); ``` ## API ### meow(options, [minimistOptions]) Returns an object with: - `input` *(array)* - Non-flag arguments - `flags` *(object)* - Flags converted to camelCase - `pkg` *(object)* - The `package.json` object - `help` *(object)* - The help text used with `--help` - `showHelp([code=0])` *(function)* - Show the help text and exit with `code` #### options Type: `object`, `array`, `string` Can either be a string/array that is the `help` or an options object. ##### description Type: `string`, `boolean` Default: The package.json `\"description\"` property A description to show above the help text. Set it to `false` to disable it altogether. ##### help Type: `string`, `boolean` The help text you want shown. The input is reindented and starting/ending newlines are trimmed which means you can use a [template literal](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/template_strings) without having to care about using the correct amount of indent. If it's an array each item will be a line. *(Still supported, but you should use a template literal instead.)* The description will be shown above your help text automatically. Set it to `false` to disable it altogether. ##### version Type: `string`, `boolean` Default: The package.json `\"version\"` property Set a custom version output. Set it to `false` to disable it altogether. ##### pkg Type: `string`, `object` Default: Closest package.json upwards Relative path to package.json or as an object. ##### argv Type: `array` Default: `process.argv.slice(2)` Custom arguments object. #### minimistOptions Type: `object` Default: `{}` Minimist [options](https://github.com/substack/minimist#var-argv--parseargsargs-opts). Keys passed to the minimist `default` option are [decamelized](https://github.com/sindresorhus/decamelize), so you can for example pass in `fooBar: 'baz'` and have it be the default for the `--foo-bar` flag. ## Promises Meow will make unhandled rejected promises [fail loudly](https://github.com/sindresorhus/loud-rejection) instead of the default silent fail. Meaning you don't have to manually `.catch()` promises used in your CLI. ## Tips See [`chalk`](https://github.com/chalk/chalk) if you want to colorize the terminal output. See [`get-stdin`](https://github.com/sindresorhus/get-stdin) if you want to accept input from stdin. See [`update-notifier`](https://github.com/yeoman/update-notifier) if you want update notifications. See [`configstore`](https://github.com/yeoman/configstore) if you need to persist some data. [More useful CLI utilities.](https://github.com/sindresorhus/awesome-nodejs#command-line-utilities) ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/fancy-log/README.md","tags":[],"body":"# fancy-log [![Travis Build Status](https://img.shields.io/travis/js-cli/fancy-log.svg?branch=master&label=travis&style=flat-square)](https://travis-ci.org/js-cli/fancy-log) Log things, prefixed with a timestamp __This module was pulled out of gulp-util for use inside the CLI__ ## Usage ```js var log = require('fancy-log'); log('a message'); // [16:27:02] a message log.error('oh no!'); // [16:27:02] oh no! ``` ## API ### `log(msg...)` Logs the message as if you called `console.log` but prefixes the output with the current time in HH:MM:ss format. ### `log.error(msg...)` Logs ths message as if you called `console.error` but prefixes the output with the current time in HH:MM:ss format. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/fancy-log/node_modules/time-stamp/README.md","tags":[],"body":"# time-stamp [![NPM version](https://img.shields.io/npm/v/time-stamp.svg?style=flat)](https://www.npmjs.com/package/time-stamp) [![NPM downloads](https://img.shields.io/npm/dm/time-stamp.svg?style=flat)](https://npmjs.org/package/time-stamp) [![Build Status](https://img.shields.io/travis/jonschlinkert/time-stamp.svg?style=flat)](https://travis-ci.org/jonschlinkert/time-stamp) > Get a formatted timestamp. ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install time-stamp --save ``` ## Usage ```js var timestamp = require('time-stamp'); timestamp(); //=> '2015:04:01' timestamp('YYYY:MM:DD'); //=> '2015:04:01' timestamp('[YYYY:MM:DD]'); //=> '[2015:04:01]' timestamp('YYYY/MM/DD'); //=> '2015/04/01' timestamp('YYYY:MM'); //=> '2015:04' timestamp('YYYY'); //=> '2015' timestamp('MM'); //=> '04' timestamp('DD'); //=> '01' timestamp('HH'); //=> '01' timestamp('mm'); //=> '59' timestamp('ss'); //=> '09' timestamp('ms'); //=> '783' ``` **Valid patterns** * `YYYY`: full year (ex: **2015**) * `MM`: month (ex: **04**) * `DD`: day (ex: **01**) * `HH`: hours (ex: **12**) * `mm`: minutes (ex: **59**) * `ss`: seconds (ex: **09**) * `ms`: milliseconds (ex: **532**) ## Related projects You might also be interested in these projects: * [days](https://www.npmjs.com/package/days): Days of the week. | [homepage](https://github.com/jonschlinkert/days) * [iso-week](https://www.npmjs.com/package/iso-week): Get the ISO week of the year. | [homepage](https://github.com/jonschlinkert/iso-week) * [month](https://www.npmjs.com/package/month): Get the name or number of the current month or any month of the year. | [homepage](https://github.com/datetime/month) * [months](https://www.npmjs.com/package/months): Months of the year. | [homepage](https://github.com/jonschlinkert/months) * [o-clock](https://www.npmjs.com/package/o-clock): Simple utility for displaying the time in 12-hour clock format. | [homepage](https://github.com/jonschlinkert/o-clock) * [seconds](https://www.npmjs.com/package/seconds): Get the number of seconds for a minute, hour, day and week. | [homepage](https://github.com/jonschlinkert/seconds) * [week](https://www.npmjs.com/package/week): Get the current week number. | [homepage](https://github.com/jonschlinkert/week) * [weekday](https://www.npmjs.com/package/weekday): Get the name and number of the current weekday. Or get the name of the… [more](https://www.npmjs.com/package/weekday) | [homepage](https://github.com/jonschlinkert/weekday) * [year](https://www.npmjs.com/package/year): Simple utility to get the current year with 2 or 4 digits. | [homepage](https://github.com/jonschlinkert/year) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/time-stamp/issues/new). ## Building docs Generate readme and API documentation with [verb](https://github.com/verbose/verb): ```sh $ npm install verb && npm run docs ``` Or, if [verb](https://github.com/verbose/verb) is installed globally: ```sh $ verb ``` ## Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ## Author **Jon Schlinkert** Follow me on GitHub or Twitter for updates about time-stamp and my other libraries: * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert). Released under the [MIT license](https://github.com/jonschlinkert/time-stamp/blob/master/LICENSE). *** _This file was generated by [verb](https://github.com/verbose/verb), v, on April 07, 2016._"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/gulplog/CHANGELOG.md","tags":[],"body":"# gulplog changelog ## 1.0.0 - Initial release - No implementation changed since initial commit ## 0.0.0 - Experimentation"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/gulplog/README.md","tags":[],"body":"# gulplog [![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Gitter chat][gitter-image]][gitter-url] Logger for gulp and gulp plugins ## Usage ```js var logger = require('gulplog'); // logs strings logger.debug('The MOST verbose!'); logger.info('Some important info'); logger.warn('All the warnings to you'); logger.error('OH NO! SOMETHING HAPPENED!'); // supports util.format! logger.info('%s style!', 'printf'); // log anything logger.debug({ my: 'obj' }); logger.info([1, 2, 3]); ``` ## API Logging (and level of logging) is controlled by [`gulp-cli`][gulp-cli-url] #### logger.debug(msg) Highest log level. Typically used for debugging purposes. If the first argument is a string, all arguments are passed to node's [`util.format()`][util-format-url] before being emitted. #### logger.info(msg) Standard log level. Typically used for user information. If the first argument is a string, all arguments are passed to node's [`util.format()`][util-format-url] before being emitted. #### logger.warn(msg) Warning log level. Typically used for warnings. If the first argument is a string, all arguments are passed to node's [`util.format()`][util-format-url] before being emitted. #### logger.error(msg) Error log level. Typically used when things went horribly wrong. If the first argument is a string, all arguments are passed to node's [`util.format()`][util-format-url] before being emitted. ## License MIT [downloads-image]: http://img.shields.io/npm/dm/gulplog.svg [npm-url]: https://npmjs.org/package/gulplog [npm-image]: http://img.shields.io/npm/v/gulplog.svg [travis-url]: https://travis-ci.org/gulpjs/gulplog [travis-image]: http://img.shields.io/travis/gulpjs/gulplog.svg [gitter-url]: https://gitter.im/gulpjs/gulp [gitter-image]: https://badges.gitter.im/gulpjs/gulp.png [gulp-cli-url]: https://github.com/gulpjs/gulp-cli [util-format-url]: https://nodejs.org/docs/latest/api/util.html#util_util_format_format"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/gulplog/node_modules/glogg/README.md","tags":[],"body":"# glogg [![Travis Build Status](https://img.shields.io/travis/undertakerjs/glogg/master.svg?label=travis&style=flat-square)](https://travis-ci.org/undertakerjs/glogg) Global logging utility ## Usage ```js var getLogger = require('glogg'); var logger = getLogger('my-namespace'); // logs strings logger.debug('The MOST verbose!'); logger.info('Some important info'); logger.warn('All the warnings to you'); logger.error('OH NO! SOMETHING HAPPENED!'); // supports util.format! logger.info('%s style!', 'printf'); // log anything logger.debug({ my: 'obj' }); logger.info([1, 2, 3]); // somewhere else logger.on('info', function(msg){ // do something with msg }); // must be handled to avoid crashing process logger.on('error', function(msg){ // now it won't crash }); ``` ## API __Note: This module makes no assumptions about the log levels and they will always be emitted. If you are looking to filter some out, your listeners will need to have extra logic.__ ### getLogger([namespace]) Create a new logger at the given namespace (or the default if no namespace is provided). Returns an augmented [`sparkles`](https://github.com/phated/sparkles) EventEmitter object with 4 methods: `debug()`, `info()`, `warn()` and `error()`. When called, these methods emit an event with the same name. If the first argument is a string, the arguments are passed through node's `util.format()` before being emitted. Other parts of a node program can get the logger by namespace and listen for the events to be emitted. #### logger.debug(msg) Emits a `debug` event with the given `msg`. If the first argument is a string, all arguments are passed to node's `util.format()` before being emitted. #### logger.info(msg) Emits a `info` event with the given `msg`. If the first argument is a string, all arguments are passed to node's `util.format()` before being emitted. #### logger.warn(msg) Emits a `warn` event with the given `msg`. If the first argument is a string, all arguments are passed to node's `util.format()` before being emitted. #### logger.error(msg) Emits a `error` event with the given `msg`. If the first argument is a string, all arguments are passed to node's `util.format()` before being emitted. __Note: You must handle this event in some way or the node process will crash when an `error` event is emitted.__ #### logger.on(event, fn) Standard API from node's `EventEmitter`. Use this to listen for events from the logger methods. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/gulplog/node_modules/glogg/node_modules/sparkles/README.md","tags":[],"body":"sparkles ======== [![Build Status](https://travis-ci.org/phated/sparkles.svg?branch=master)](https://travis-ci.org/phated/sparkles) Namespaced global event emitter ## Usage Sparkles exports a function that returns a singleton `EventEmitter`. This EE can be shared across your application, whether or not node loads multiple copies. ```js var sparkles = require('sparkles')(); // make sure to call the function sparkles.on('my-event', function(evt){ console.log('my-event handled', evt); }); sparkles.emit('my-event', { my: 'event' }); ``` ## API ### sparkles(namespace) Returns an EventEmitter that is shared amongst the provided namespace. If no namespace is provided, returns a default EventEmitter. ### sparkles.exists(namespace); Checks whether a namespace exists and returns true or false. ## Why the name? This is a \"global emitter\"; shortened: \"glitter\" but it was already taken; so we got sparkles instead :smile: ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/has-gulplog/README.md","tags":[],"body":"# has-gulplog Check if gulplog is available before attempting to use it"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/has-gulplog/node_modules/sparkles/README.md","tags":[],"body":"sparkles ======== [![Build Status](https://travis-ci.org/phated/sparkles.svg?branch=master)](https://travis-ci.org/phated/sparkles) Namespaced global event emitter ## Usage Sparkles exports a function that returns a singleton `EventEmitter`. This EE can be shared across your application, whether or not node loads multiple copies. ```js var sparkles = require('sparkles')(); // make sure to call the function sparkles.on('my-event', function(evt){ console.log('my-event handled', evt); }); sparkles.emit('my-event', { my: 'event' }); ``` ## API ### sparkles(namespace) Returns an EventEmitter that is shared amongst the provided namespace. If no namespace is provided, returns a default EventEmitter. ### sparkles.exists(namespace); Checks whether a namespace exists and returns true or false. ## Why the name? This is a \"global emitter\"; shortened: \"glitter\" but it was already taken; so we got sparkles instead :smile: ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash._reescape/README.md","tags":[],"body":"# lodash._reescape v3.0.0 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `reEscape` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._reescape ``` In Node.js/io.js: ```js var reEscape = require('lodash._reescape'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.0-npm-packages/lodash._reescape) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash._reevaluate/README.md","tags":[],"body":"# lodash._reevaluate v3.0.0 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `reEvaluate` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._reevaluate ``` In Node.js/io.js: ```js var reEvaluate = require('lodash._reevaluate'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.0-npm-packages/lodash._reevaluate) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash._reinterpolate/README.md","tags":[],"body":"# lodash._reinterpolate v3.0.0 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `reInterpolate` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._reinterpolate ``` In Node.js/io.js: ```js var reInterpolate = require('lodash._reinterpolate'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.0-npm-packages/lodash._reinterpolate) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/README.md","tags":[],"body":"# lodash.template v3.6.2 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) `_.template` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.template ``` In Node.js/io.js: ```js var template = require('lodash.template'); ``` See the [documentation](https://lodash.com/docs#template) or [package source](https://github.com/lodash/lodash/blob/3.6.2-npm-packages/lodash.template) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash._basecopy/README.md","tags":[],"body":"# lodash._basecopy v3.0.1 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `baseCopy` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._basecopy ``` In Node.js/io.js: ```js var baseCopy = require('lodash._basecopy'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.1-npm-packages/lodash._basecopy) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash._basetostring/README.md","tags":[],"body":"# lodash._basetostring v3.0.1 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `baseToString` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._basetostring ``` In Node.js/io.js: ```js var baseToString = require('lodash._basetostring'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.1-npm-packages/lodash._basetostring) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash._basevalues/README.md","tags":[],"body":"# lodash._basevalues v3.0.0 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `baseValues` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._basevalues ``` In Node.js/io.js: ```js var baseValues = require('lodash._basevalues'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.0-npm-packages/lodash._basevalues) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash._isiterateecall/README.md","tags":[],"body":"# lodash._isiterateecall v3.0.9 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `isIterateeCall` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._isiterateecall ``` In Node.js/io.js: ```js var isIterateeCall = require('lodash._isiterateecall'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.9-npm-packages/lodash._isiterateecall) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.escape/README.md","tags":[],"body":"# lodash.escape v3.2.0 The [lodash](https://lodash.com/) method `_.escape` exported as a [Node.js](https://nodejs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.escape ``` In Node.js: ```js var escape = require('lodash.escape'); ``` See the [documentation](https://lodash.com/docs#escape) or [package source](https://github.com/lodash/lodash/blob/3.2.0-npm-packages/lodash.escape) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.escape/node_modules/lodash._root/README.md","tags":[],"body":"# lodash._root v3.0.1 The internal [lodash](https://lodash.com/) function `root` exported as a [Node.js](https://nodejs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._root ``` In Node.js: ```js var root = require('lodash._root'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.1-npm-packages/lodash._root) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.keys/README.md","tags":[],"body":"# lodash.keys v3.1.2 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) `_.keys` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.keys ``` In Node.js/io.js: ```js var keys = require('lodash.keys'); ``` See the [documentation](https://lodash.com/docs#keys) or [package source](https://github.com/lodash/lodash/blob/3.1.2-npm-packages/lodash.keys) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.keys/node_modules/lodash._getnative/README.md","tags":[],"body":"# lodash._getnative v3.9.1 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `getNative` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._getnative ``` In Node.js/io.js: ```js var getNative = require('lodash._getnative'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.9.1-npm-packages/lodash._getnative) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.keys/node_modules/lodash.isarguments/README.md","tags":[],"body":"# lodash.isarguments v3.0.8 The [lodash](https://lodash.com/) method `_.isArguments` exported as a [Node.js](https://nodejs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.isarguments ``` In Node.js: ```js var isArguments = require('lodash.isarguments'); ``` See the [documentation](https://lodash.com/docs#isArguments) or [package source](https://github.com/lodash/lodash/blob/3.0.8-npm-packages/lodash.isarguments) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.keys/node_modules/lodash.isarray/README.md","tags":[],"body":"# lodash.isarray v3.0.4 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) `_.isArray` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.isarray ``` In Node.js/io.js: ```js var isArray = require('lodash.isarray'); ``` See the [documentation](https://lodash.com/docs#isArray) or [package source](https://github.com/lodash/lodash/blob/3.0.4-npm-packages/lodash.isarray) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.restparam/README.md","tags":[],"body":"# lodash.restparam v3.6.1 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) `_.restParam` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.restparam ``` In Node.js/io.js: ```js var restParam = require('lodash.restparam'); ``` See the [documentation](https://lodash.com/docs#restParam) or [package source](https://github.com/lodash/lodash/blob/3.6.1-npm-packages/lodash.restparam) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.templatesettings/README.md","tags":[],"body":"# lodash.templatesettings v3.1.1 The [lodash](https://lodash.com/) method `_.templateSettings` exported as a [Node.js](https://nodejs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.templatesettings ``` In Node.js: ```js var templateSettings = require('lodash.templatesettings'); ``` See the [documentation](https://lodash.com/docs#templateSettings) or [package source](https://github.com/lodash/lodash/blob/3.1.1-npm-packages/lodash.templatesettings) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/minimist/readme.markdown","tags":[],"body":"# minimist parse argument options This module is the guts of optimist's argument parser without all the fanciful decoration. [![browser support](https://ci.testling.com/substack/minimist.png)](http://ci.testling.com/substack/minimist) [![build status](https://secure.travis-ci.org/substack/minimist.png)](http://travis-ci.org/substack/minimist) # example ``` js var argv = require('minimist')(process.argv.slice(2)); console.dir(argv); ``` ``` $ node example/parse.js -a beep -b boop { _: [], a: 'beep', b: 'boop' } ``` ``` $ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz { _: [ 'foo', 'bar', 'baz' ], x: 3, y: 4, n: 5, a: true, b: true, c: true, beep: 'boop' } ``` # methods ``` js var parseArgs = require('minimist') ``` ## var argv = parseArgs(args, opts={}) Return an argument object `argv` populated with the array arguments from `args`. `argv._` contains all the arguments that didn't have an option associated with them. Numeric-looking arguments will be returned as numbers unless `opts.string` or `opts.boolean` is set for that argument name. Any arguments after `'--'` will not be parsed and will end up in `argv._`. options can be: * `opts.string` - a string or array of strings argument names to always treat as strings * `opts.boolean` - a boolean, string or array of strings to always treat as booleans. if `true` will treat all double hyphenated arguments without equal signs as boolean (e.g. affects `--foo`, not `-f` or `--foo=bar`) * `opts.alias` - an object mapping string names to strings or arrays of string argument names to use as aliases * `opts.default` - an object mapping string argument names to default values * `opts.stopEarly` - when true, populate `argv._` with everything after the first non-option * `opts['--']` - when true, populate `argv._` with everything before the `--` and `argv['--']` with everything after the `--`. Here's an example: * `opts.unknown` - a function which is invoked with a command line parameter not defined in the `opts` configuration object. If the function returns `false`, the unknown option is not added to `argv`. ``` > require('./')('one two three -- four five --six'.split(' '), { '--': true }) { _: [ 'one', 'two', 'three' ], '--': [ 'four', 'five', '--six' ] } ``` Note that with `opts['--']` set, parsing for arguments still stops after the `--`. # install With [npm](https://npmjs.org) do: ``` npm install minimist ``` # license MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/multipipe/History.md","tags":[],"body":"0.1.1 / 2014-06-01 ================== * update duplexer2 dep 0.1.0 / 2014-05-24 ================== * add optional callback 0.0.2 / 2014-02-20 ================== * fix infinite loop 0.0.1 / 2014-01-15 ================== * fix error bubbling 0.0.0 / 2014-01-13 ================== * initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/multipipe/Readme.md","tags":[],"body":"# multipipe A better `Stream#pipe` that creates duplex streams and lets you handle errors in one place. [![build status](https://secure.travis-ci.org/segmentio/multipipe.png)](http://travis-ci.org/segmentio/multipipe) ## Example ```js var pipe = require('multipipe'); // pipe streams var stream = pipe(streamA, streamB, streamC); // centralized error handling stream.on('error', fn); // creates a new stream source.pipe(stream).pipe(dest); // optional callback on finish or error pipe(streamA, streamB, streamC, function(err){ // ... }); ``` ## Duplex streams Write to the pipe and you'll really write to the first stream, read from the pipe and you'll read from the last stream. ```js var stream = pipe(a, b, c); source .pipe(stream) .pipe(destination); ``` In this example the flow of data is: * source -> * a -> * b -> * c -> * destination ## Error handling Each `pipe` forwards the errors the streams it wraps emit, so you have one central place to handle errors: ```js var stream = pipe(a, b, c); stream.on('error', function(err){ // called three times }); a.emit('error', new Error); b.emit('error', new Error); c.emit('error', new Error); ``` ## API ### pipe(stream, ...) Pass a variable number of streams and each will be piped to the next one. A stream will be returned that wraps passed in streams in a way that errors will be forwarded and you can write to and/or read from it. Pass a function as last argument to be called on `error` or `finish` of the last stream. ## Installation ```bash $ npm install multipipe ``` ## License The MIT License (MIT) Copyright (c) 2014 Segment.io Inc. Copyright (c) 2014 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/LICENSE.md","tags":[],"body":"Copyright (c) 2013, Deoxxa Development ====================================== All rights reserved. -------------------- Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of Deoxxa Development nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY DEOXXA DEVELOPMENT ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL DEOXXA DEVELOPMENT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/README.md","tags":[],"body":"duplexer2 [![build status](https://travis-ci.org/deoxxa/duplexer2.png)](https://travis-ci.org/deoxxa/fork) ========= Like duplexer (http://npm.im/duplexer) but using streams2. Overview -------- duplexer2 is a reimplementation of [duplexer](http://npm.im/duplexer) using the readable-stream API which is standard in node as of v0.10. Everything largely works the same. Installation ------------ Available via [npm](http://npmjs.org/): > $ npm install duplexer2 Or via git: > $ git clone git://github.com/deoxxa/duplexer2.git node_modules/duplexer2 API --- **duplexer2** Creates a new `DuplexWrapper` object, which is the actual class that implements most of the fun stuff. All that fun stuff is hidden. DON'T LOOK. ```javascript duplexer2([options], writable, readable) ``` ```javascript var duplex = duplexer2(new stream.Writable(), new stream.Readable()); ``` Arguments * __options__ - an object specifying the regular `stream.Duplex` options, as well as the properties described below. * __writable__ - a writable stream * __readable__ - a readable stream Options * __bubbleErrors__ - a boolean value that specifies whether to bubble errors from the underlying readable/writable streams. Default is `true`. Example ------- Also see [example.js](https://github.com/deoxxa/duplexer2/blob/master/example.js). Code: ```javascript var stream = require(\"stream\"); var duplexer2 = require(\"duplexer2\"); var writable = new stream.Writable({objectMode: true}), readable = new stream.Readable({objectMode: true}); writable._write = function _write(input, encoding, done) { if (readable.push(input)) { return done(); } else { readable.once(\"drain\", done); } }; readable._read = function _read(n) { // no-op }; // simulate the readable thing closing after a bit writable.once(\"finish\", function() { setTimeout(function() { readable.push(null); }, 500); }); var duplex = duplexer2(writable, readable); duplex.on(\"data\", function(e) { console.log(\"got data\", JSON.stringify(e)); }); duplex.on(\"finish\", function() { console.log(\"got finish event\"); }); duplex.on(\"end\", function() { console.log(\"got end event\"); }); duplex.write(\"oh, hi there\", function() { console.log(\"finished writing\"); }); duplex.end(function() { console.log(\"finished ending\"); }); ``` Output: ``` got data \"oh, hi there\" finished writing got finish event finished ending got end event ``` License ------- 3-clause BSD. A copy is included with the source. Contact ------- * GitHub ([deoxxa](http://github.com/deoxxa)) * Twitter ([@deoxxa](http://twitter.com/deoxxa)) * Email ([deoxxa@fknsrs.biz](mailto:deoxxa@fknsrs.biz))"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/node_modules/readable-stream/README.md","tags":[],"body":"# readable-stream ***Node-core streams for userland*** [![NPM](https://nodei.co/npm/readable-stream.png?downloads=true&downloadRank=true)](https://nodei.co/npm/readable-stream/) [![NPM](https://nodei.co/npm-dl/readable-stream.png&months=6&height=3)](https://nodei.co/npm/readable-stream/) This package is a mirror of the Streams2 and Streams3 implementations in Node-core. If you want to guarantee a stable streams base, regardless of what version of Node you, or the users of your libraries are using, use **readable-stream** *only* and avoid the *\"stream\"* module in Node-core. **readable-stream** comes in two major versions, v1.0.x and v1.1.x. The former tracks the Streams2 implementation in Node 0.10, including bug-fixes and minor improvements as they are added. The latter tracks Streams3 as it develops in Node 0.11; we will likely see a v1.2.x branch for Node 0.12. **readable-stream** uses proper patch-level versioning so if you pin to `\"~1.0.0\"` you’ll get the latest Node 0.10 Streams2 implementation, including any fixes and minor non-breaking improvements. The patch-level versions of 1.0.x and 1.1.x should mirror the patch-level versions of Node-core releases. You should prefer the **1.0.x** releases for now and when you’re ready to start using Streams3, pin to `\"~1.1.0\"`"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/node_modules/readable-stream/node_modules/core-util-is/README.md","tags":[],"body":"# core-util-is The `util.is*` functions introduced in Node v0.12."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/node_modules/readable-stream/node_modules/inherits/README.md","tags":[],"body":"Browser-friendly inheritance fully compatible with standard node.js [inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor). This package exports standard `inherits` from node.js `util` module in node environment, but also provides alternative browser-friendly implementation through [browser field](https://gist.github.com/shtylman/4339901). Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of `util`. It also has a shim for old browsers with no `Object.create` support. While keeping you sure you are using standard `inherits` implementation in node.js environment, it allows bundlers such as [browserify](https://github.com/substack/node-browserify) to not include full `util` package to your client code if all you need is just `inherits` function. It worth, because browser shim for `util` package is large and `inherits` is often the single function you need from it. It's recommended to use this package instead of `require('util').inherits` for any code that has chances to be used not only in node.js but in browser too. ## usage ```js var inherits = require('inherits'); // then use exactly as the standard one ``` ## note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js `inherits`. If you are using version ~1.0 and planning to switch to ~2.0, be careful: * new version uses `super_` instead of `super` for referencing superclass * new version overwrites current prototype while old one preserves any existing fields on it"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/node_modules/readable-stream/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/node_modules/readable-stream/node_modules/string_decoder/README.md","tags":[],"body":"**string_decoder.js** (`require('string_decoder')`) from Node.js core Copyright Joyent, Inc. and other Node contributors. See LICENCE file for details. Version numbers match the versions found in Node core, e.g. 0.10.24 matches Node 0.10.24, likewise 0.11.10 matches Node 0.11.10. **Prefer the stable version over the unstable.** The *build/* directory contains a build script that will scrape the source from the [joyent/node](https://github.com/joyent/node) repo given a specific Node version."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/object-assign/readme.md","tags":[],"body":"# object-assign [![Build Status](https://travis-ci.org/sindresorhus/object-assign.svg?branch=master)](https://travis-ci.org/sindresorhus/object-assign) > ES6 [`Object.assign()`](http://www.2ality.com/2014/01/object-assign.html) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ```sh $ npm install --save object-assign ``` ## Usage ```js var objectAssign = require('object-assign'); objectAssign({foo: 0}, {bar: 1}); //=> {foo: 0, bar: 1} // multiple sources objectAssign({foo: 0}, {bar: 1}, {baz: 2}); //=> {foo: 0, bar: 1, baz: 2} // overwrites equal keys objectAssign({foo: 0}, {foo: 1}, {foo: 2}); //=> {foo: 2} // ignores null and undefined sources objectAssign({foo: 0}, null, {bar: 1}, undefined); //=> {foo: 0, bar: 1} ``` ## API ### objectAssign(target, source, [source, ...]) Assigns enumerable own properties of `source` objects to the `target` object and returns the `target` object. Additional `source` objects will overwrite previous ones. ## Resources - [ES6 spec - Object.assign](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign) ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/replace-ext/README.md","tags":[],"body":"# replace-ext [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status][david-image]][david-url] ## Information Packagereplace-ext Description Replaces a file extension with another one Node Version >= 0.4 ## Usage ```javascript var replaceExt = require('replace-ext'); var path = '/some/dir/file.js'; var npath = replaceExt(path, '.coffee'); console.log(npath); // /some/dir/file.coffee ``` [npm-url]: https://npmjs.org/package/replace-ext [npm-image]: https://badge.fury.io/js/replace-ext.png [travis-url]: https://travis-ci.org/wearefractal/replace-ext [travis-image]: https://travis-ci.org/wearefractal/replace-ext.png?branch=master [coveralls-url]: https://coveralls.io/r/wearefractal/replace-ext [coveralls-image]: https://coveralls.io/repos/wearefractal/replace-ext/badge.png [depstat-url]: https://david-dm.org/wearefractal/replace-ext [depstat-image]: https://david-dm.org/wearefractal/replace-ext.png [david-url]: https://david-dm.org/wearefractal/replace-ext [david-image]: https://david-dm.org/wearefractal/replace-ext.png?theme=shields.io"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/vinyl/README.md","tags":[],"body":"# vinyl [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status](https://david-dm.org/wearefractal/vinyl.png?theme=shields.io)](https://david-dm.org/wearefractal/vinyl) ## Information PackagevinylDescriptionA virtual file formatNode Version>= 0.9 ## What is this? Read this for more info about how this plays into the grand scheme of things [https://medium.com/@eschoff/3828e8126466](https://medium.com/@eschoff/3828e8126466) ## File ```javascript var File = require('vinyl'); var coffeeFile = new File({ cwd: \"/\", base: \"/test/\", path: \"/test/file.coffee\", contents: new Buffer(\"test = 123\") }); ``` ### isVinyl When checking if an object is a vinyl file, you should not use instanceof. Use the isVinyl function instead. ```js var File = require('vinyl'); var dummy = new File({stuff}); var notAFile = {}; File.isVinyl(dummy); // true File.isVinyl(notAFile); // false ``` ### constructor(options) #### options.cwd Type: `String`Default: `process.cwd()` #### options.base Used for relative pathing. Typically where a glob starts. Type: `String`Default: `options.cwd` #### options.path Full path to the file. Type: `String`Default: `undefined` #### options.history Path history. Has no effect if `options.path` is passed. Type: `Array`Default: `options.path ? [options.path] : []` #### options.stat The result of an fs.stat call. See [fs.Stats](http://nodejs.org/api/fs.html#fs_class_fs_stats) for more information. Type: `fs.Stats`Default: `null` #### options.contents File contents. Type: `Buffer, Stream, or null`Default: `null` ### isBuffer() Returns true if file.contents is a Buffer. ### isStream() Returns true if file.contents is a Stream. ### isNull() Returns true if file.contents is null. ### clone([opt]) Returns a new File object with all attributes cloned.By default custom attributes are deep-cloned. If opt or opt.deep is false, custom attributes will not be deep-cloned. If opt.contents is false, it will copy file.contents Buffer's reference. ### pipe(stream[, opt]) If file.contents is a Buffer, it will write it to the stream. If file.contents is a Stream, it will pipe it to the stream. If file.contents is null, it will do nothing. If opt.end is false, the destination stream will not be ended (same as node core). Returns the stream. ### inspect() Returns a pretty String interpretation of the File. Useful for console.log. ### contents The [Stream](https://nodejs.org/api/stream.html#stream_stream) or [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer) of the file as it was passed in via options, or as the result of modification. For example: ```js if (file.isBuffer()) { console.log(file.contents.toString()); // logs out the string of contents } ``` ### path Absolute pathname string or `undefined`. Setting to a different value pushes the old value to `history`. ### history Array of `path` values the file object has had, from `history[0]` (original) through `history[history.length - 1]` (current). `history` and its elements should normally be treated as read-only and only altered indirectly by setting `path`. ### relative Returns path.relative for the file base and file path. Example: ```javascript var file = new File({ cwd: \"/\", base: \"/test/\", path: \"/test/file.coffee\" }); console.log(file.relative); // file.coffee ``` ### dirname Gets and sets path.dirname for the file path. Example: ```javascript var file = new File({ cwd: \"/\", base: \"/test/\", path: \"/test/file.coffee\" }); console.log(file.dirname); // /test file.dirname = '/specs'; console.log(file.dirname); // /specs console.log(file.path); // /specs/file.coffee ` ``` ### basename Gets and sets path.basename for the file path. Example: ```javascript var file = new File({ cwd: \"/\", base: \"/test/\", path: \"/test/file.coffee\" }); console.log(file.basename); // file.coffee file.basename = 'file.js'; console.log(file.basename); // file.js console.log(file.path); // /test/file.js ` ``` ### extname Gets and sets path.extname for the file path. Example: ```javascript var file = new File({ cwd: \"/\", base: \"/test/\", path: \"/test/file.coffee\" }); console.log(file.extname); // .coffee file.extname = '.js'; console.log(file.extname); // .js console.log(file.path); // /test/file.js ` ``` [npm-url]: https://npmjs.org/package/vinyl [npm-image]: https://badge.fury.io/js/vinyl.png [travis-url]: https://travis-ci.org/wearefractal/vinyl [travis-image]: https://travis-ci.org/wearefractal/vinyl.png?branch=master [coveralls-url]: https://coveralls.io/r/wearefractal/vinyl [coveralls-image]: https://coveralls.io/repos/wearefractal/vinyl/badge.png [depstat-url]: https://david-dm.org/wearefractal/vinyl [depstat-image]: https://david-dm.org/wearefractal/vinyl.png"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/vinyl/node_modules/clone-stats/LICENSE.md","tags":[],"body":"## The MIT License (MIT) ## Copyright (c) 2014 Hugh Kennedy Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/vinyl/node_modules/clone-stats/README.md","tags":[],"body":"# clone-stats [![Flattr this!](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=hughskennedy&url=http://github.com/hughsk/clone-stats&title=clone-stats&description=hughsk/clone-stats%20on%20GitHub&language=en_GB&tags=flattr,github,javascript&category=software)[![experimental](http://hughsk.github.io/stability-badges/dist/experimental.svg)](http://github.com/hughsk/stability-badges) # Safely clone node's [`fs.Stats`](http://nodejs.org/api/fs.html#fs_class_fs_stats) instances without losing their class methods, i.e. `stat.isDirectory()` and co. ## Usage ## [![clone-stats](https://nodei.co/npm/clone-stats.png?mini=true)](https://nodei.co/npm/clone-stats) ### `copy = require('clone-stats')(stat)` ### Returns a clone of the original `fs.Stats` instance (`stat`). ## License ## MIT. See [LICENSE.md](http://github.com/hughsk/clone-stats/blob/master/LICENSE.md) for details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/vinyl/node_modules/clone/README.md","tags":[],"body":"# clone [![build status](https://secure.travis-ci.org/pvorb/node-clone.png)](http://travis-ci.org/pvorb/node-clone) [![info badge](https://nodei.co/npm/clone.png?downloads=true&downloadRank=true&stars=true)](http://npm-stat.com/charts.html?package=clone) offers foolproof _deep cloning_ of objects, arrays, numbers, strings etc. in JavaScript. ## Installation npm install clone (It also works with browserify, ender or standalone.) ## Example ~~~ javascript var clone = require('clone'); var a, b; a = { foo: { bar: 'baz' } }; // initial value of a b = clone(a); // clone a -> b a.foo.bar = 'foo'; // change a console.log(a); // show a console.log(b); // show b ~~~ This will print: ~~~ javascript { foo: { bar: 'foo' } } { foo: { bar: 'baz' } } ~~~ **clone** masters cloning simple objects (even with custom prototype), arrays, Date objects, and RegExp objects. Everything is cloned recursively, so that you can clone dates in arrays in objects, for example. ## API `clone(val, circular, depth)` * `val` -- the value that you want to clone, any type allowed * `circular` -- boolean Call `clone` with `circular` set to `false` if you are certain that `obj` contains no circular references. This will give better performance if needed. There is no error if `undefined` or `null` is passed as `obj`. * `depth` -- depth to which the object is to be cloned (optional, defaults to infinity) `clone.clonePrototype(obj)` * `obj` -- the object that you want to clone Does a prototype clone as [described by Oran Looney](http://oranlooney.com/functional-javascript/). ## Circular References ~~~ javascript var a, b; a = { hello: 'world' }; a.myself = a; b = clone(a); console.log(b); ~~~ This will print: ~~~ javascript { hello: \"world\", myself: [Circular] } ~~~ So, `b.myself` points to `b`, not `a`. Neat! ## Test npm test ## Caveat Some special objects like a socket or `process.stdout`/`stderr` are known to not be cloneable. If you find other objects that cannot be cloned, please [open an issue](https://github.com/pvorb/node-clone/issues/new). ## Bugs and Issues If you encounter any bugs or issues, feel free to [open an issue at github](https://github.com/pvorb/node-clone/issues) or send me an email to . I also always like to hear from you, if you’re using my code. ## License Copyright © 2011-2015 [Paul Vorbach](http://paul.vorba.ch/) and [contributors](https://github.com/pvorb/node-clone/graphs/contributors). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/vinyl/node_modules/clone/test-apart-ctx.html","tags":[],"body":"Clone Test-Suite (Browser)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/gulp-util/node_modules/vinyl/node_modules/clone/test.html","tags":[],"body":"Clone Test-Suite (Browser) Clone Test-Suite (Browser) Tests started: ; Tests finished: ."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/lodash/README.md","tags":[],"body":"# lodash v4.13.1 The [Lodash](https://lodash.com/) library exported as [Node.js](https://nodejs.org/) modules. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash ``` In Node.js: ```js // Load the full build. var _ = require('lodash'); // Load the core build. var _ = require('lodash/core'); // Load the fp build for immutable auto-curried iteratee-first data-last methods. var fp = require('lodash/fp'); // Load a method category. var array = require('lodash/array'); var object = require('lodash/fp/object'); // Load a single method for smaller builds with browserify/rollup/webpack. var chunk = require('lodash/chunk'); var extend = require('lodash/fp/extend'); ``` See the [package source](https://github.com/lodash/lodash/tree/4.13.1-npm) for more details. **Note:** Don’t assign values to the [special variable](http://nodejs.org/api/repl.html#repl_repl_features) `_` in the Node.js Install [n_](https://www.npmjs.com/package/n_) for a REPL that includes `lodash` by default. ## Support Tested in Chrome 49-50, Firefox 45-46, IE 9-11, Edge 13, Safari 8-9, Node.js 0.10-6, & PhantomJS 1.9.8. Automated [browser](https://saucelabs.com/u/lodash) & [CI](https://travis-ci.org/lodash/lodash/) test runs are available."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/README.md","tags":[],"body":"# through2 [![NPM](https://nodei.co/npm/through2.png?downloads&downloadRank)](https://nodei.co/npm/through2/) **A tiny wrapper around Node streams.Transform (Streams2) to avoid explicit subclassing noise** Inspired by [Dominic Tarr](https://github.com/dominictarr)'s [through](https://github.com/dominictarr/through) in that it's so much easier to make a stream out of a function than it is to set up the prototype chain properly: `through(function (chunk) { ... })`. Note: As 2.x.x this module starts using **Streams3** instead of Stream2. To continue using a Streams2 version use `npm install through2@0` to fetch the latest version of 0.x.x. More information about Streams2 vs Streams3 and recommendations see the article **[Why I don't use Node's core 'stream' module](http://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html)**. ```js fs.createReadStream('ex.txt') .pipe(through2(function (chunk, enc, callback) { for (var i = 0; i through2([ options, ] [ transformFunction ] [, flushFunction ]) Consult the **[stream.Transform](http://nodejs.org/docs/latest/api/stream.html#stream_class_stream_transform)** documentation for the exact rules of the `transformFunction` (i.e. `this._transform`) and the optional `flushFunction` (i.e. `this._flush`). ### options The options argument is optional and is passed straight through to `stream.Transform`. So you can use `objectMode:true` if you are processing non-binary streams (or just use `through2.obj()`). The `options` argument is first, unlike standard convention, because if I'm passing in an anonymous function then I'd prefer for the options argument to not get lost at the end of the call: ```js fs.createReadStream('/tmp/important.dat') .pipe(through2({ objectMode: true, allowHalfOpen: false }, function (chunk, enc, cb) { cb(null, 'wut?') // note we can use the second argument on the callback // to provide data as an alternative to this.push('wut?') } ) .pipe(fs.createWriteStream('/tmp/wut.txt')) ``` ### transformFunction The `transformFunction` must have the following signature: `function (chunk, encoding, callback) {}`. A minimal implementation should call the `callback` function to indicate that the transformation is done, even if that transformation means discarding the chunk. To queue a new chunk, call `this.push(chunk)`—this can be called as many times as required before the `callback()` if you have multiple pieces to send on. Alternatively, you may use `callback(err, chunk)` as shorthand for emitting a single chunk or an error. If you **do not provide a `transformFunction`** then you will get a simple pass-through stream. ### flushFunction The optional `flushFunction` is provided as the last argument (2nd or 3rd, depending on whether you've supplied options) is called just prior to the stream ending. Can be used to finish up any processing that may be in progress. ```js fs.createReadStream('/tmp/important.dat') .pipe(through2( function (chunk, enc, cb) { cb(null, chunk) }, // transform is a noop function (cb) { // flush function this.push('tacking on an extra buffer to the end'); cb(); } )) .pipe(fs.createWriteStream('/tmp/wut.txt')); ``` through2.ctor([ options, ] transformFunction[, flushFunction ]) Instead of returning a `stream.Transform` instance, `through2.ctor()` returns a **constructor** for a custom Transform. This is useful when you want to use the same transform logic in multiple instances. ```js var FToC = through2.ctor({objectMode: true}, function (record, encoding, callback) { if (record.temp != null && record.unit == \"F\") { record.temp = ( ( record.temp - 32 ) * 5 ) / 9 record.unit = \"C\" } this.push(record) callback() }) // Create instances of FToC like so: var converter = new FToC() // Or: var converter = FToC() // Or specify/override options when you instantiate, if you prefer: var converter = FToC({objectMode: true}) ``` ## See Also - [through2-map](https://github.com/brycebaril/through2-map) - Array.prototype.map analog for streams. - [through2-filter](https://github.com/brycebaril/through2-filter) - Array.prototype.filter analog for streams. - [through2-reduce](https://github.com/brycebaril/through2-reduce) - Array.prototype.reduce analog for streams. - [through2-spy](https://github.com/brycebaril/through2-spy) - Wrapper for simple stream.PassThrough spies. - the [mississippi stream utility collection](https://github.com/maxogden/mississippi) includes `through2` as well as many more useful stream modules similar to this one ## License **through2** is Copyright (c) 2013 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licensed under the MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/node_modules/readable-stream/README.md","tags":[],"body":"# readable-stream ***Node-core v5.8.0 streams for userland*** [![Build Status](https://travis-ci.org/nodejs/readable-stream.svg?branch=master)](https://travis-ci.org/nodejs/readable-stream) [![NPM](https://nodei.co/npm/readable-stream.png?downloads=true&downloadRank=true)](https://nodei.co/npm/readable-stream/) [![NPM](https://nodei.co/npm-dl/readable-stream.png?&months=6&height=3)](https://nodei.co/npm/readable-stream/) [![Sauce Test Status](https://saucelabs.com/browser-matrix/readable-stream.svg)](https://saucelabs.com/u/readable-stream) ```bash npm install --save readable-stream ``` ***Node-core streams for userland*** This package is a mirror of the Streams2 and Streams3 implementations in Node-core, including [documentation](doc/stream.markdown). If you want to guarantee a stable streams base, regardless of what version of Node you, or the users of your libraries are using, use **readable-stream** *only* and avoid the *\"stream\"* module in Node-core, for background see [this blogpost](http://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html). As of version 2.0.0 **readable-stream** uses semantic versioning. # Streams WG Team Members * **Chris Dickinson** ([@chrisdickinson](https://github.com/chrisdickinson)) - Release GPG key: 9554F04D7259F04124DE6B476D5A82AC7E37093B * **Calvin Metcalf** ([@calvinmetcalf](https://github.com/calvinmetcalf)) - Release GPG key: F3EF5F62A87FC27A22E643F714CE4FF5015AA242 * **Rod Vagg** ([@rvagg](https://github.com/rvagg)) - Release GPG key: DD8F2338BAE7501E3DD5AC78C273792F7D83545D * **Sam Newman** ([@sonewman](https://github.com/sonewman)) * **Mathias Buus** ([@mafintosh](https://github.com/mafintosh)) * **Domenic Denicola** ([@domenic](https://github.com/domenic))"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/node_modules/readable-stream/doc/stream.markdown","tags":[],"body":"# Stream Stability: 2 - Stable A stream is an abstract interface implemented by various objects in Node.js. For example a [request to an HTTP server][http-incoming-message] is a stream, as is [`process.stdout`][]. Streams are readable, writable, or both. All streams are instances of [`EventEmitter`][]. You can load the Stream base classes by doing `require('stream')`. There are base classes provided for [Readable][] streams, [Writable][] streams, [Duplex][] streams, and [Transform][] streams. This document is split up into 3 sections: 1. The first section explains the parts of the API that you need to be aware of to use streams in your programs. 2. The second section explains the parts of the API that you need to use if you implement your own custom streams yourself. The API is designed to make this easy for you to do. 3. The third section goes into more depth about how streams work, including some of the internal mechanisms and functions that you should probably not modify unless you definitely know what you are doing. ## API for Stream Consumers Streams can be either [Readable][], [Writable][], or both ([Duplex][]). All streams are EventEmitters, but they also have other custom methods and properties depending on whether they are Readable, Writable, or Duplex. If a stream is both Readable and Writable, then it implements all of the methods and events. So, a [Duplex][] or [Transform][] stream is fully described by this API, though their implementation may be somewhat different. It is not necessary to implement Stream interfaces in order to consume streams in your programs. If you **are** implementing streaming interfaces in your own program, please also refer to [API for Stream Implementors][]. Almost all Node.js programs, no matter how simple, use Streams in some way. Here is an example of using Streams in an Node.js program: ```js const http = require('http'); var server = http.createServer( (req, res) => { // req is an http.IncomingMessage, which is a Readable Stream // res is an http.ServerResponse, which is a Writable Stream var body = ''; // we want to get the data as utf8 strings // If you don't set an encoding, then you'll get Buffer objects req.setEncoding('utf8'); // Readable streams emit 'data' events once a listener is added req.on('data', (chunk) => { body += chunk; }); // the end event tells you that you have entire body req.on('end', () => { try { var data = JSON.parse(body); } catch (er) { // uh oh! bad json! res.statusCode = 400; return res.end(`error: ${er.message}`); } // write back something interesting to the user: res.write(typeof data); res.end(); }); }); server.listen(1337); // $ curl localhost:1337 -d '{}' // object // $ curl localhost:1337 -d '\"foo\"' // string // $ curl localhost:1337 -d 'not json' // error: Unexpected token o ``` ### Class: stream.Duplex Duplex streams are streams that implement both the [Readable][] and [Writable][] interfaces. Examples of Duplex streams include: * [TCP sockets][] * [zlib streams][zlib] * [crypto streams][crypto] ### Class: stream.Readable The Readable stream interface is the abstraction for a *source* of data that you are reading from. In other words, data comes *out* of a Readable stream. A Readable stream will not start emitting data until you indicate that you are ready to receive it. Readable streams have two \"modes\": a **flowing mode** and a **paused mode**. When in flowing mode, data is read from the underlying system and provided to your program as fast as possible. In paused mode, you must explicitly call [`stream.read()`][stream-read] to get chunks of data out. Streams start out in paused mode. **Note**: If no data event handlers are attached, and there are no [`stream.pipe()`][] destinations, and the stream is switched into flowing mode, then data will be lost. You can switch to flowing mode by doing any of the following: * Adding a [`'data'`][] event handler to listen for data. * Calling the [`stream.resume()`][stream-resume] method to explicitly open the flow. * Calling the [`stream.pipe()`][] method to send the data to a [Writable][]. You can switch back to paused mode by doing either of the following: * If there are no pipe destinations, by calling the [`stream.pause()`][stream-pause] method. * If there are pipe destinations, by removing any [`'data'`][] event handlers, and removing all pipe destinations by calling the [`stream.unpipe()`][] method. Note that, for backwards compatibility reasons, removing [`'data'`][] event handlers will **not** automatically pause the stream. Also, if there are piped destinations, then calling [`stream.pause()`][stream-pause] will not guarantee that the stream will *remain* paused once those destinations drain and ask for more data. Examples of readable streams include: * [HTTP responses, on the client][http-incoming-message] * [HTTP requests, on the server][http-incoming-message] * [fs read streams][] * [zlib streams][zlib] * [crypto streams][crypto] * [TCP sockets][] * [child process stdout and stderr][] * [`process.stdin`][] #### Event: 'close' Emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed. The event indicates that no more events will be emitted, and no further computation will occur. Not all streams will emit the `'close'` event. #### Event: 'data' * `chunk` {Buffer|String} The chunk of data. Attaching a `'data'` event listener to a stream that has not been explicitly paused will switch the stream into flowing mode. Data will then be passed as soon as it is available. If you just want to get all the data out of the stream as fast as possible, this is the best way to do so. ```js var readable = getReadableStreamSomehow(); readable.on('data', (chunk) => { console.log('got %d bytes of data', chunk.length); }); ``` #### Event: 'end' This event fires when there will be no more data to read. Note that the `'end'` event **will not fire** unless the data is completely consumed. This can be done by switching into flowing mode, or by calling [`stream.read()`][stream-read] repeatedly until you get to the end. ```js var readable = getReadableStreamSomehow(); readable.on('data', (chunk) => { console.log('got %d bytes of data', chunk.length); }); readable.on('end', () => { console.log('there will be no more data.'); }); ``` #### Event: 'error' * {Error Object} Emitted if there was an error receiving data. #### Event: 'readable' When a chunk of data can be read from the stream, it will emit a `'readable'` event. In some cases, listening for a `'readable'` event will cause some data to be read into the internal buffer from the underlying system, if it hadn't already. ```javascript var readable = getReadableStreamSomehow(); readable.on('readable', () => { // there is some data to read now }); ``` Once the internal buffer is drained, a `'readable'` event will fire again when more data is available. The `'readable'` event is not emitted in the \"flowing\" mode with the sole exception of the last one, on end-of-stream. The `'readable'` event indicates that the stream has new information: either new data is available or the end of the stream has been reached. In the former case, [`stream.read()`][stream-read] will return that data. In the latter case, [`stream.read()`][stream-read] will return null. For instance, in the following example, `foo.txt` is an empty file: ```js const fs = require('fs'); var rr = fs.createReadStream('foo.txt'); rr.on('readable', () => { console.log('readable:', rr.read()); }); rr.on('end', () => { console.log('end'); }); ``` The output of running this script is: ``` $ node test.js readable: null end ``` #### readable.isPaused() * Return: {Boolean} This method returns whether or not the `readable` has been **explicitly** paused by client code (using [`stream.pause()`][stream-pause] without a corresponding [`stream.resume()`][stream-resume]). ```js var readable = new stream.Readable readable.isPaused() // === false readable.pause() readable.isPaused() // === true readable.resume() readable.isPaused() // === false ``` #### readable.pause() * Return: `this` This method will cause a stream in flowing mode to stop emitting [`'data'`][] events, switching out of flowing mode. Any data that becomes available will remain in the internal buffer. ```js var readable = getReadableStreamSomehow(); readable.on('data', (chunk) => { console.log('got %d bytes of data', chunk.length); readable.pause(); console.log('there will be no more data for 1 second'); setTimeout(() => { console.log('now data will start flowing again'); readable.resume(); }, 1000); }); ``` #### readable.pipe(destination[, options]) * `destination` {stream.Writable} The destination for writing data * `options` {Object} Pipe options * `end` {Boolean} End the writer when the reader ends. Default = `true` This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream. Multiple destinations can be piped to safely. ```js var readable = getReadableStreamSomehow(); var writable = fs.createWriteStream('file.txt'); // All the data from readable goes into 'file.txt' readable.pipe(writable); ``` This function returns the destination stream, so you can set up pipe chains like so: ```js var r = fs.createReadStream('file.txt'); var z = zlib.createGzip(); var w = fs.createWriteStream('file.txt.gz'); r.pipe(z).pipe(w); ``` For example, emulating the Unix `cat` command: ```js process.stdin.pipe(process.stdout); ``` By default [`stream.end()`][stream-end] is called on the destination when the source stream emits [`'end'`][], so that `destination` is no longer writable. Pass `{ end: false }` as `options` to keep the destination stream open. This keeps `writer` open so that \"Goodbye\" can be written at the end. ```js reader.pipe(writer, { end: false }); reader.on('end', () => { writer.end('Goodbye\\n'); }); ``` Note that [`process.stderr`][] and [`process.stdout`][] are never closed until the process exits, regardless of the specified options. #### readable.read([size]) * `size` {Number} Optional argument to specify how much data to read. * Return {String|Buffer|Null} The `read()` method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return `null`. If you pass in a `size` argument, then it will return that many bytes. If `size` bytes are not available, then it will return `null`, unless we've ended, in which case it will return the data remaining in the buffer. If you do not specify a `size` argument, then it will return all the data in the internal buffer. This method should only be called in paused mode. In flowing mode, this method is called automatically until the internal buffer is drained. ```js var readable = getReadableStreamSomehow(); readable.on('readable', () => { var chunk; while (null !== (chunk = readable.read())) { console.log('got %d bytes of data', chunk.length); } }); ``` If this method returns a data chunk, then it will also trigger the emission of a [`'data'`][] event. Note that calling [`stream.read([size])`][stream-read] after the [`'end'`][] event has been triggered will return `null`. No runtime error will be raised. #### readable.resume() * Return: `this` This method will cause the readable stream to resume emitting [`'data'`][] events. This method will switch the stream into flowing mode. If you do *not* want to consume the data from a stream, but you *do* want to get to its [`'end'`][] event, you can call [`stream.resume()`][stream-resume] to open the flow of data. ```js var readable = getReadableStreamSomehow(); readable.resume(); readable.on('end', () => { console.log('got to the end, but did not read anything'); }); ``` #### readable.setEncoding(encoding) * `encoding` {String} The encoding to use. * Return: `this` Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects. For example, if you do `readable.setEncoding('utf8')`, then the output data will be interpreted as UTF-8 data, and returned as strings. If you do `readable.setEncoding('hex')`, then the data will be encoded in hexadecimal string format. This properly handles multi-byte characters that would otherwise be potentially mangled if you simply pulled the Buffers directly and called [`buf.toString(encoding)`][] on them. If you want to read the data as strings, always use this method. Also you can disable any encoding at all with `readable.setEncoding(null)`. This approach is very useful if you deal with binary data or with large multi-byte strings spread out over multiple chunks. ```js var readable = getReadableStreamSomehow(); readable.setEncoding('utf8'); readable.on('data', (chunk) => { assert.equal(typeof chunk, 'string'); console.log('got %d characters of string data', chunk.length); }); ``` #### readable.unpipe([destination]) * `destination` {stream.Writable} Optional specific stream to unpipe This method will remove the hooks set up for a previous [`stream.pipe()`][] call. If the destination is not specified, then all pipes are removed. If the destination is specified, but no pipe is set up for it, then this is a no-op. ```js var readable = getReadableStreamSomehow(); var writable = fs.createWriteStream('file.txt'); // All the data from readable goes into 'file.txt', // but only for the first second readable.pipe(writable); setTimeout(() => { console.log('stop writing to file.txt'); readable.unpipe(writable); console.log('manually close the file stream'); writable.end(); }, 1000); ``` #### readable.unshift(chunk) * `chunk` {Buffer|String} Chunk of data to unshift onto the read queue This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party. Note that `stream.unshift(chunk)` cannot be called after the [`'end'`][] event has been triggered; a runtime error will be raised. If you find that you must often call `stream.unshift(chunk)` in your programs, consider implementing a [Transform][] stream instead. (See [API for Stream Implementors][].) ```js // Pull off a header delimited by \\n\\n // use unshift() if we get too much // Call the callback with (error, header, stream) const StringDecoder = require('string_decoder').StringDecoder; function parseHeader(stream, callback) { stream.on('error', callback); stream.on('readable', onReadable); var decoder = new StringDecoder('utf8'); var header = ''; function onReadable() { var chunk; while (null !== (chunk = stream.read())) { var str = decoder.write(chunk); if (str.match(/\\n\\n/)) { // found the header boundary var split = str.split(/\\n\\n/); header += split.shift(); var remaining = split.join('\\n\\n'); var buf = new Buffer(remaining, 'utf8'); if (buf.length) stream.unshift(buf); stream.removeListener('error', callback); stream.removeListener('readable', onReadable); // now the body of the message can be read from the stream. callback(null, header, stream); } else { // still reading the header. header += str; } } } } ``` Note that, unlike [`stream.push(chunk)`][stream-push], `stream.unshift(chunk)` will not end the reading process by resetting the internal reading state of the stream. This can cause unexpected results if `unshift()` is called during a read (i.e. from within a [`stream._read()`][stream-_read] implementation on a custom stream). Following the call to `unshift()` with an immediate [`stream.push('')`][stream-push] will reset the reading state appropriately, however it is best to simply avoid calling `unshift()` while in the process of performing a read. #### readable.wrap(stream) * `stream` {Stream} An \"old style\" readable stream Versions of Node.js prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See [Compatibility][] for more information.) If you are using an older Node.js library that emits [`'data'`][] events and has a [`stream.pause()`][stream-pause] method that is advisory only, then you can use the `wrap()` method to create a [Readable][] stream that uses the old stream as its data source. You will very rarely ever need to call this function, but it exists as a convenience for interacting with old Node.js programs and libraries. For example: ```js const OldReader = require('./old-api-module.js').OldReader; const Readable = require('stream').Readable; const oreader = new OldReader; const myReader = new Readable().wrap(oreader); myReader.on('readable', () => { myReader.read(); // etc. }); ``` ### Class: stream.Transform Transform streams are [Duplex][] streams where the output is in some way computed from the input. They implement both the [Readable][] and [Writable][] interfaces. Examples of Transform streams include: * [zlib streams][zlib] * [crypto streams][crypto] ### Class: stream.Writable The Writable stream interface is an abstraction for a *destination* that you are writing data *to*. Examples of writable streams include: * [HTTP requests, on the client][] * [HTTP responses, on the server][] * [fs write streams][] * [zlib streams][zlib] * [crypto streams][crypto] * [TCP sockets][] * [child process stdin][] * [`process.stdout`][], [`process.stderr`][] #### Event: 'drain' If a [`stream.write(chunk)`][stream-write] call returns `false`, then the `'drain'` event will indicate when it is appropriate to begin writing more data to the stream. ```js // Write the data to the supplied writable stream one million times. // Be attentive to back-pressure. function writeOneMillionTimes(writer, data, encoding, callback) { var i = 1000000; write(); function write() { var ok = true; do { i -= 1; if (i === 0) { // last time! writer.write(data, encoding, callback); } else { // see if we should continue, or wait // don't pass the callback, because we're not done yet. ok = writer.write(data, encoding); } } while (i > 0 && ok); if (i > 0) { // had to stop early! // write some more once it drains writer.once('drain', write); } } } ``` #### Event: 'error' * {Error} Emitted if there was an error when writing or piping data. #### Event: 'finish' When the [`stream.end()`][stream-end] method has been called, and all data has been flushed to the underlying system, this event is emitted. ```javascript var writer = getWritableStreamSomehow(); for (var i = 0; i { console.error('all writes are now complete.'); }); ``` #### Event: 'pipe' * `src` {stream.Readable} source stream that is piping to this writable This is emitted whenever the [`stream.pipe()`][] method is called on a readable stream, adding this writable to its set of destinations. ```js var writer = getWritableStreamSomehow(); var reader = getReadableStreamSomehow(); writer.on('pipe', (src) => { console.error('something is piping into the writer'); assert.equal(src, reader); }); reader.pipe(writer); ``` #### Event: 'unpipe' * `src` {[Readable][] Stream} The source stream that [unpiped][`stream.unpipe()`] this writable This is emitted whenever the [`stream.unpipe()`][] method is called on a readable stream, removing this writable from its set of destinations. ```js var writer = getWritableStreamSomehow(); var reader = getReadableStreamSomehow(); writer.on('unpipe', (src) => { console.error('something has stopped piping into the writer'); assert.equal(src, reader); }); reader.pipe(writer); reader.unpipe(writer); ``` #### writable.cork() Forces buffering of all writes. Buffered data will be flushed either at [`stream.uncork()`][] or at [`stream.end()`][stream-end] call. #### writable.end([chunk][, encoding][, callback]) * `chunk` {String|Buffer} Optional data to write * `encoding` {String} The encoding, if `chunk` is a String * `callback` {Function} Optional callback for when the stream is finished Call this method when no more data will be written to the stream. If supplied, the callback is attached as a listener on the [`'finish'`][] event. Calling [`stream.write()`][stream-write] after calling [`stream.end()`][stream-end] will raise an error. ```js // write 'hello, ' and then end with 'world!' var file = fs.createWriteStream('example.txt'); file.write('hello, '); file.end('world!'); // writing more now is not allowed! ``` #### writable.setDefaultEncoding(encoding) * `encoding` {String} The new default encoding Sets the default encoding for a writable stream. #### writable.uncork() Flush all data, buffered since [`stream.cork()`][] call. #### writable.write(chunk[, encoding][, callback]) * `chunk` {String|Buffer} The data to write * `encoding` {String} The encoding, if `chunk` is a String * `callback` {Function} Callback for when this chunk of data is flushed * Returns: {Boolean} `true` if the data was handled completely. This method writes some data to the underlying system, and calls the supplied callback once the data has been fully handled. The return value indicates if you should continue writing right now. If the data had to be buffered internally, then it will return `false`. Otherwise, it will return `true`. This return value is strictly advisory. You MAY continue to write, even if it returns `false`. However, writes will be buffered in memory, so it is best not to do this excessively. Instead, wait for the [`'drain'`][] event before writing more data. ## API for Stream Implementors To implement any sort of stream, the pattern is the same: 1. Extend the appropriate parent class in your own subclass. (The [`util.inherits()`][] method is particularly helpful for this.) 2. Call the appropriate parent class constructor in your constructor, to be sure that the internal mechanisms are set up properly. 3. Implement one or more specific methods, as detailed below. The class to extend and the method(s) to implement depend on the sort of stream class you are writing: Use-case Class Method(s) to implement Reading only [Readable](#stream_class_stream_readable_1) [_read][stream-_read] Writing only [Writable](#stream_class_stream_writable_1) [_write][stream-_write], [_writev][stream-_writev] Reading and writing [Duplex](#stream_class_stream_duplex_1) [_read][stream-_read], [_write][stream-_write], [_writev][stream-_writev] Operate on written data, then read the result [Transform](#stream_class_stream_transform_1) [_transform][stream-_transform], [_flush][stream-_flush] In your implementation code, it is very important to never call the methods described in [API for Stream Consumers][]. Otherwise, you can potentially cause adverse side effects in programs that consume your streaming interfaces. ### Class: stream.Duplex A \"duplex\" stream is one that is both Readable and Writable, such as a TCP socket connection. Note that `stream.Duplex` is an abstract class designed to be extended with an underlying implementation of the [`stream._read(size)`][stream-_read] and [`stream._write(chunk, encoding, callback)`][stream-_write] methods as you would with a Readable or Writable stream class. Since JavaScript doesn't have multiple prototypal inheritance, this class prototypally inherits from Readable, and then parasitically from Writable. It is thus up to the user to implement both the low-level [`stream._read(n)`][stream-_read] method as well as the low-level [`stream._write(chunk, encoding, callback)`][stream-_write] method on extension duplex classes. #### new stream.Duplex(options) * `options` {Object} Passed to both Writable and Readable constructors. Also has the following fields: * `allowHalfOpen` {Boolean} Default = `true`. If set to `false`, then the stream will automatically end the readable side when the writable side ends and vice versa. * `readableObjectMode` {Boolean} Default = `false`. Sets `objectMode` for readable side of the stream. Has no effect if `objectMode` is `true`. * `writableObjectMode` {Boolean} Default = `false`. Sets `objectMode` for writable side of the stream. Has no effect if `objectMode` is `true`. In classes that extend the Duplex class, make sure to call the constructor so that the buffering settings can be properly initialized. ### Class: stream.PassThrough This is a trivial implementation of a [Transform][] stream that simply passes the input bytes across to the output. Its purpose is mainly for examples and testing, but there are occasionally use cases where it can come in handy as a building block for novel sorts of streams. ### Class: stream.Readable `stream.Readable` is an abstract class designed to be extended with an underlying implementation of the [`stream._read(size)`][stream-_read] method. Please see [API for Stream Consumers][] for how to consume streams in your programs. What follows is an explanation of how to implement Readable streams in your programs. #### new stream.Readable([options]) * `options` {Object} * `highWaterMark` {Number} The maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource. Default = `16384` (16kb), or `16` for `objectMode` streams * `encoding` {String} If specified, then buffers will be decoded to strings using the specified encoding. Default = `null` * `objectMode` {Boolean} Whether this stream should behave as a stream of objects. Meaning that [`stream.read(n)`][stream-read] returns a single value instead of a Buffer of size n. Default = `false` * `read` {Function} Implementation for the [`stream._read()`][stream-_read] method. In classes that extend the Readable class, make sure to call the Readable constructor so that the buffering settings can be properly initialized. #### readable.\\_read(size) * `size` {Number} Number of bytes to read asynchronously Note: **Implement this method, but do NOT call it directly.** This method is prefixed with an underscore because it is internal to the class that defines it and should only be called by the internal Readable class methods. All Readable stream implementations must provide a \\_read method to fetch data from the underlying resource. When `_read()` is called, if data is available from the resource, the `_read()` implementation should start pushing that data into the read queue by calling [`this.push(dataChunk)`][stream-push]. `_read()` should continue reading from the resource and pushing data until push returns `false`, at which point it should stop reading from the resource. Only when `_read()` is called again after it has stopped should it start reading more data from the resource and pushing that data onto the queue. Note: once the `_read()` method is called, it will not be called again until the [`stream.push()`][stream-push] method is called. The `size` argument is advisory. Implementations where a \"read\" is a single call that returns data can use this to know how much data to fetch. Implementations where that is not relevant, such as TCP or TLS, may ignore this argument, and simply provide data whenever it becomes available. There is no need, for example to \"wait\" until `size` bytes are available before calling [`stream.push(chunk)`][stream-push]. #### readable.push(chunk[, encoding]) * `chunk` {Buffer|Null|String} Chunk of data to push into the read queue * `encoding` {String} Encoding of String chunks. Must be a valid Buffer encoding, such as `'utf8'` or `'ascii'` * return {Boolean} Whether or not more pushes should be performed Note: **This method should be called by Readable implementors, NOT by consumers of Readable streams.** If a value other than null is passed, The `push()` method adds a chunk of data into the queue for subsequent stream processors to consume. If `null` is passed, it signals the end of the stream (EOF), after which no more data can be written. The data added with `push()` can be pulled out by calling the [`stream.read()`][stream-read] method when the [`'readable'`][] event fires. This API is designed to be as flexible as possible. For example, you may be wrapping a lower-level source which has some sort of pause/resume mechanism, and a data callback. In those cases, you could wrap the low-level source object by doing something like this: ```js // source is an object with readStop() and readStart() methods, // and an `ondata` member that gets called when it has data, and // an `onend` member that gets called when the data is over. util.inherits(SourceWrapper, Readable); function SourceWrapper(options) { Readable.call(this, options); this._source = getLowlevelSourceObject(); // Every time there's data, we push it into the internal buffer. this._source.ondata = (chunk) => { // if push() returns false, then we need to stop reading from source if (!this.push(chunk)) this._source.readStop(); }; // When the source ends, we push the EOF-signaling `null` chunk this._source.onend = () => { this.push(null); }; } // _read will be called when the stream wants to pull more data in // the advisory size argument is ignored in this case. SourceWrapper.prototype._read = function(size) { this._source.readStart(); }; ``` #### Example: A Counting Stream This is a basic example of a Readable stream. It emits the numerals from 1 to 1,000,000 in ascending order, and then ends. ```js const Readable = require('stream').Readable; const util = require('util'); util.inherits(Counter, Readable); function Counter(opt) { Readable.call(this, opt); this._max = 1000000; this._index = 1; } Counter.prototype._read = function() { var i = this._index++; if (i > this._max) this.push(null); else { var str = '' + i; var buf = new Buffer(str, 'ascii'); this.push(buf); } }; ``` #### Example: SimpleProtocol v1 (Sub-optimal) This is similar to the `parseHeader` function described [here](#stream_readable_unshift_chunk), but implemented as a custom stream. Also, note that this implementation does not convert the incoming data to a string. However, this would be better implemented as a [Transform][] stream. See [SimpleProtocol v2][] for a better implementation. ```js // A parser for a simple data protocol. // The \"header\" is a JSON object, followed by 2 \\n characters, and // then a message body. // // NOTE: This can be done more simply as a Transform stream! // Using Readable directly for this is sub-optimal. See the // alternative example below under the Transform section. const Readable = require('stream').Readable; const util = require('util'); util.inherits(SimpleProtocol, Readable); function SimpleProtocol(source, options) { if (!(this instanceof SimpleProtocol)) return new SimpleProtocol(source, options); Readable.call(this, options); this._inBody = false; this._sawFirstCr = false; // source is a readable stream, such as a socket or file this._source = source; var self = this; source.on('end', () => { self.push(null); }); // give it a kick whenever the source is readable // read(0) will not consume any bytes source.on('readable', () => { self.read(0); }); this._rawHeader = []; this.header = null; } SimpleProtocol.prototype._read = function(n) { if (!this._inBody) { var chunk = this._source.read(); // if the source doesn't have data, we don't have data yet. if (chunk === null) return this.push(''); // check if the chunk has a \\n\\n var split = -1; for (var i = 0; i { // we add an 'end' method, but never consume the data socket.on('end', () => { // It will never get here. socket.end('I got your message (but didnt read it)\\n'); }); }).listen(1337); ``` In versions of Node.js prior to v0.10, the incoming message data would be simply discarded. However, in Node.js v0.10 and beyond, the socket will remain paused forever. The workaround in this situation is to call the [`stream.resume()`][stream-resume] method to start the flow of data: ```js // Workaround net.createServer((socket) => { socket.on('end', () => { socket.end('I got your message (but didnt read it)\\n'); }); // start the flow of data, discarding it. socket.resume(); }).listen(1337); ``` In addition to new Readable streams switching into flowing mode, pre-v0.10 style streams can be wrapped in a Readable class using the [`stream.wrap()`][] method. ### Object Mode Normally, Streams operate on Strings and Buffers exclusively. Streams that are in **object mode** can emit generic JavaScript values other than Buffers and Strings. A Readable stream in object mode will always return a single item from a call to [`stream.read(size)`][stream-read], regardless of what the size argument is. A Writable stream in object mode will always ignore the `encoding` argument to [`stream.write(data, encoding)`][stream-write]. The special value `null` still retains its special value for object mode streams. That is, for object mode readable streams, `null` as a return value from [`stream.read()`][stream-read] indicates that there is no more data, and [`stream.push(null)`][stream-push] will signal the end of stream data (`EOF`). No streams in Node.js core are object mode streams. This pattern is only used by userland streaming libraries. You should set `objectMode` in your stream child class constructor on the options object. Setting `objectMode` mid-stream is not safe. For Duplex streams `objectMode` can be set exclusively for readable or writable side with `readableObjectMode` and `writableObjectMode` respectively. These options can be used to implement parsers and serializers with Transform streams. ```js const util = require('util'); const StringDecoder = require('string_decoder').StringDecoder; const Transform = require('stream').Transform; util.inherits(JSONParseStream, Transform); // Gets \\n-delimited JSON string data, and emits the parsed objects function JSONParseStream() { if (!(this instanceof JSONParseStream)) return new JSONParseStream(); Transform.call(this, { readableObjectMode : true }); this._buffer = ''; this._decoder = new StringDecoder('utf8'); } JSONParseStream.prototype._transform = function(chunk, encoding, cb) { this._buffer += this._decoder.write(chunk); // split on newlines var lines = this._buffer.split(/\\r?\\n/); // keep the last partial line buffered this._buffer = lines.pop(); for (var l = 0; l < lines.length; l++) { var line = lines[l]; try { var obj = JSON.parse(line); } catch (er) { this.emit('error', er); return; } // push the parsed object out to the readable consumer this.push(obj); } cb(); }; JSONParseStream.prototype._flush = function(cb) { // Just handle any leftover var rem = this._buffer.trim(); if (rem) { try { var obj = JSON.parse(rem); } catch (er) { this.emit('error', er); return; } // push the parsed object out to the readable consumer this.push(obj); } cb(); }; ``` ### `stream.read(0)` There are some cases where you want to trigger a refresh of the underlying readable stream mechanisms, without actually consuming any data. In that case, you can call `stream.read(0)`, which will always return null. If the internal read buffer is below the `highWaterMark`, and the stream is not currently reading, then calling `stream.read(0)` will trigger a low-level [`stream._read()`][stream-_read] call. There is almost never a need to do this. However, you will see some cases in Node.js's internals where this is done, particularly in the Readable stream class internals. ### `stream.push('')` Pushing a zero-byte string or Buffer (when not in [Object mode][]) has an interesting side effect. Because it *is* a call to [`stream.push()`][stream-push], it will end the `reading` process. However, it does *not* add any data to the readable buffer, so there's nothing for a user to consume. Very rarely, there are cases where you have no data to provide now, but the consumer of your stream (or, perhaps, another bit of your own code) will know when to check again, by calling [`stream.read(0)`][stream-read]. In those cases, you *may* call `stream.push('')`. So far, the only use case for this functionality is in the [`tls.CryptoStream`][] class, which is deprecated in Node.js/io.js v1.0. If you find that you have to use `stream.push('')`, please consider another approach, because it almost certainly indicates that something is horribly wrong. [`'data'`]: #stream_event_data [`'drain'`]: #stream_event_drain [`'end'`]: #stream_event_end [`'finish'`]: #stream_event_finish [`'readable'`]: #stream_event_readable [`buf.toString(encoding)`]: https://nodejs.org/docs/v5.8.0/api/buffer.html#buffer_buf_tostring_encoding_start_end [`EventEmitter`]: https://nodejs.org/docs/v5.8.0/api/events.html#events_class_eventemitter [`process.stderr`]: https://nodejs.org/docs/v5.8.0/api/process.html#process_process_stderr [`process.stdin`]: https://nodejs.org/docs/v5.8.0/api/process.html#process_process_stdin [`process.stdout`]: https://nodejs.org/docs/v5.8.0/api/process.html#process_process_stdout [`stream.cork()`]: #stream_writable_cork [`stream.pipe()`]: #stream_readable_pipe_destination_options [`stream.uncork()`]: #stream_writable_uncork [`stream.unpipe()`]: #stream_readable_unpipe_destination [`stream.wrap()`]: #stream_readable_wrap_stream [`tls.CryptoStream`]: https://nodejs.org/docs/v5.8.0/api/tls.html#tls_class_cryptostream [`util.inherits()`]: https://nodejs.org/docs/v5.8.0/api/util.html#util_util_inherits_constructor_superconstructor [API for Stream Consumers]: #stream_api_for_stream_consumers [API for Stream Implementors]: #stream_api_for_stream_implementors [child process stdin]: https://nodejs.org/docs/v5.8.0/api/child_process.html#child_process_child_stdin [child process stdout and stderr]: https://nodejs.org/docs/v5.8.0/api/child_process.html#child_process_child_stdout [Compatibility]: #stream_compatibility_with_older_node_js_versions [crypto]: crypto.html [Duplex]: #stream_class_stream_duplex [fs read streams]: https://nodejs.org/docs/v5.8.0/api/fs.html#fs_class_fs_readstream [fs write streams]: https://nodejs.org/docs/v5.8.0/api/fs.html#fs_class_fs_writestream [HTTP requests, on the client]: https://nodejs.org/docs/v5.8.0/api/http.html#http_class_http_clientrequest [HTTP responses, on the server]: https://nodejs.org/docs/v5.8.0/api/http.html#http_class_http_serverresponse [http-incoming-message]: https://nodejs.org/docs/v5.8.0/api/http.html#http_class_http_incomingmessage [Object mode]: #stream_object_mode [Readable]: #stream_class_stream_readable [SimpleProtocol v2]: #stream_example_simpleprotocol_parser_v2 [stream-_flush]: #stream_transform_flush_callback [stream-_read]: #stream_readable_read_size_1 [stream-_transform]: #stream_transform_transform_chunk_encoding_callback [stream-_write]: #stream_writable_write_chunk_encoding_callback_1 [stream-_writev]: #stream_writable_writev_chunks_callback [stream-end]: #stream_writable_end_chunk_encoding_callback [stream-pause]: #stream_readable_pause [stream-push]: #stream_readable_push_chunk_encoding [stream-read]: #stream_readable_read_size [stream-resume]: #stream_readable_resume [stream-write]: #stream_writable_write_chunk_encoding_callback [TCP sockets]: https://nodejs.org/docs/v5.8.0/api/net.html#net_class_net_socket [Transform]: #stream_class_stream_transform [Writable]: #stream_class_stream_writable [zlib]: zlib.html"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md","tags":[],"body":"# streams WG Meeting 2015-01-30 ## Links * **Google Hangouts Video**: http://www.youtube.com/watch?v=I9nDOSGfwZg * **GitHub Issue**: https://github.com/iojs/readable-stream/issues/106 * **Original Minutes Google Doc**: https://docs.google.com/document/d/17aTgLnjMXIrfjgNaTUnHQO7m3xgzHR2VXBTmi03Qii4/ ## Agenda Extracted from https://github.com/iojs/readable-stream/labels/wg-agenda prior to meeting. * adopt a charter [#105](https://github.com/iojs/readable-stream/issues/105) * release and versioning strategy [#101](https://github.com/iojs/readable-stream/issues/101) * simpler stream creation [#102](https://github.com/iojs/readable-stream/issues/102) * proposal: deprecate implicit flowing of streams [#99](https://github.com/iojs/readable-stream/issues/99) ## Minutes ### adopt a charter * group: +1's all around ### What versioning scheme should be adopted? * group: +1’s 3.0.0 * domenic+group: pulling in patches from other sources where appropriate * mikeal: version independently, suggesting versions for io.js * mikeal+domenic: work with TC to notify in advance of changes simpler stream creation ### streamline creation of streams * sam: streamline creation of streams * domenic: nice simple solution posted but, we lose the opportunity to change the model may not be backwards incompatible (double check keys) **action item:** domenic will check ### remove implicit flowing of streams on(‘data’) * add isFlowing / isPaused * mikeal: worrying that we’re documenting polyfill methods – confuses users * domenic: more reflective API is probably good, with warning labels for users * new section for mad scientists (reflective stream access) * calvin: name the “third state” * mikeal: maybe borrow the name from whatwg? * domenic: we’re missing the “third state” * consensus: kind of difficult to name the third state * mikeal: figure out differences in states / compat * mathias: always flow on data – eliminates third state * explore what it breaks **action items:** * ask isaac for ability to list packages by what public io.js APIs they use (esp. Stream) * ask rod/build for infrastructure * **chris**: explore the “flow on data” approach * add isPaused/isFlowing * add new docs section * move isPaused to that section"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/node_modules/readable-stream/node_modules/core-util-is/README.md","tags":[],"body":"# core-util-is The `util.is*` functions introduced in Node v0.12."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/node_modules/readable-stream/node_modules/inherits/README.md","tags":[],"body":"Browser-friendly inheritance fully compatible with standard node.js [inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor). This package exports standard `inherits` from node.js `util` module in node environment, but also provides alternative browser-friendly implementation through [browser field](https://gist.github.com/shtylman/4339901). Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of `util`. It also has a shim for old browsers with no `Object.create` support. While keeping you sure you are using standard `inherits` implementation in node.js environment, it allows bundlers such as [browserify](https://github.com/substack/node-browserify) to not include full `util` package to your client code if all you need is just `inherits` function. It worth, because browser shim for `util` package is large and `inherits` is often the single function you need from it. It's recommended to use this package instead of `require('util').inherits` for any code that has chances to be used not only in node.js but in browser too. ## usage ```js var inherits = require('inherits'); // then use exactly as the standard one ``` ## note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js `inherits`. If you are using version ~1.0 and planning to switch to ~2.0, be careful: * new version uses `super_` instead of `super` for referencing superclass * new version overwrites current prototype while old one preserves any existing fields on it"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/node_modules/readable-stream/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. [![build status](https://secure.travis-ci.org/juliangruber/isarray.svg)](http://travis-ci.org/juliangruber/isarray) [![downloads](https://img.shields.io/npm/dm/isarray.svg)](https://www.npmjs.org/package/isarray) [![browser support](https://ci.testling.com/juliangruber/isarray.png) ](https://ci.testling.com/juliangruber/isarray) ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/node_modules/readable-stream/node_modules/process-nextick-args/license.md","tags":[],"body":"# Copyright (c) 2015 Calvin Metcalf Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. **THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/node_modules/readable-stream/node_modules/process-nextick-args/readme.md","tags":[],"body":"process-nextick-args ===== [![Build Status](https://travis-ci.org/calvinmetcalf/process-nextick-args.svg?branch=master)](https://travis-ci.org/calvinmetcalf/process-nextick-args) ```bash npm install --save process-nextick-args ``` Always be able to pass arguments to process.nextTick, no matter the platform ```js var nextTick = require('process-nextick-args'); nextTick(function (a, b, c) { console.log(a, b, c); }, 'step', 3, 'profit'); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/node_modules/readable-stream/node_modules/string_decoder/README.md","tags":[],"body":"**string_decoder.js** (`require('string_decoder')`) from Node.js core Copyright Joyent, Inc. and other Node contributors. See LICENCE file for details. Version numbers match the versions found in Node core, e.g. 0.10.24 matches Node 0.10.24, likewise 0.11.10 matches Node 0.11.10. **Prefer the stable version over the unstable.** The *build/* directory contains a build script that will scrape the source from the [joyent/node](https://github.com/joyent/node) repo given a specific Node version."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/node_modules/readable-stream/node_modules/util-deprecate/History.md","tags":[],"body":"1.0.2 / 2015-10-07 ================== * use try/catch when checking `localStorage` (#3, @kumavis) 1.0.1 / 2014-11-25 ================== * browser: use `console.warn()` for deprecation calls * browser: more jsdocs 1.0.0 / 2014-04-30 ================== * initial commit"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/node_modules/readable-stream/node_modules/util-deprecate/README.md","tags":[],"body":"util-deprecate ============== ### The Node.js `util.deprecate()` function with browser support In Node.js, this module simply re-exports the `util.deprecate()` function. In the web browser (i.e. via browserify), a browser-specific implementation of the `util.deprecate()` function is used. ## API A `deprecate()` function is the only thing exposed by this module. ``` javascript // setup: exports.foo = deprecate(foo, 'foo() is deprecated, use bar() instead'); // users see: foo(); // foo() is deprecated, use bar() instead foo(); foo(); ``` ## License (The MIT License) Copyright (c) 2014 Nathan Rajlich Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp-shell/node_modules/through2/node_modules/xtend/README.md","tags":[],"body":"# xtend [![browser support][3]][4] [![locked](http://badges.github.io/stability-badges/dist/locked.svg)](http://github.com/badges/stability-badges) Extend like a boss xtend is a basic utility library which allows you to extend an object by appending all of the properties from each object in a list. When there are identical properties, the right-most property takes precedence. ## Examples ```js var extend = require(\"xtend\") // extend returns a new object. Does not mutate arguments var combination = extend({ a: \"a\", b: 'c' }, { b: \"b\" }) // { a: \"a\", b: \"b\" } ``` ## Stability status: Locked ## MIT Licenced [3]: http://ci.testling.com/Raynos/xtend.png [4]: http://ci.testling.com/Raynos/xtend"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/CHANGELOG.md","tags":[],"body":"# gulp changelog ## 3.9.0 - add babel support - add transpiler fallback support - add support for some renamed transpilers (livescript, etc) - add JSCS - update dependecies (liftoff, interpret) - documentation tweaks ## 3.8.11 - fix node 0.12/iojs problems - add node 0.12 and iojs to travis - update dependencies (liftoff, v8flags) - documentation tweaks ## 3.8.10 - add link to spanish docs - update dependencies (archy, semver, mocha, etc) - documentation tweaks ## 3.8.9 - fix local version undefined output - add completion for fish shell - fix powershell completion line splitting - add support for arbitrary node flags (oops, should have been a minor bump) - add v8flags dependency - update dependencies (liftoff) - documentation tweaks ## 3.8.8 - update dependencies (minimist, tildify) - documentation tweaks ## 3.8.7 - handle errors a bit better - update dependencies (gulp-util, semver, etc) - documentation tweaks ## 3.8.6 - remove executable flag from LICENSE - update dependencies (chalk, minimist, liftoff, etc) - documentation tweaks ## 3.8.5 - simplify --silent and --tasks-simple - fix bug in autocomplete where errors would come out ## 3.8.4 - CLI will use exit code 1 on exit when any task fails during the lifetime of the process ## 3.8.3 - Tweak error formatting to work better with PluginErrors and strings ## 3.8.2 - add manpage generation ## 3.8.1 - the CLI now adds process.env.INIT_CWD which is the original cwd it was launched from ## 3.8.0 - update vinyl-fs - gulp.src is now a writable passthrough, this means you can use it to add files to your pipeline at any point - gulp.dest can now take a function to determine the folder This is now possible! ```js gulp.src('lib/*.js') .pipe(uglify()) .pipe(gulp.src('styles/*.css')) .pipe(gulp.dest(function(file){ // I don't know, you can do something cool here return 'build/whatever'; })); ``` ## 3.7.0 - update vinyl-fs to remove BOM from UTF8 files - add --tasks-simple flag for plaintext task listings - updated autocomplete scripts to be simpler and use new --tasks-simple flag - added support for transpilers via liftoff 0.11 and interpret - just npm install your compiler (coffee-script for example) and it will work out of the box ## 3.5.5 - update deps - gulp.dest now support mode option, uses source file mode by default (file.stat.mode) - use chalk for colors in bin - update gulp.env deprecation msg to be more helpful ## 3.5.2 - add -V for version on CLI (unix standard) - -v is deprecated, use -V - add -T as an alias for --tasks - documentation ## 3.5 - added `gulp.watch(globs, tasksArray)` sugar - remove gulp.taskQueue - deprecate gulp.run - deprecate gulp.env - add engineStrict to prevent people with node < 0.9 from installing ## 3.4 - added `--tasks` that prints out the tree of tasks + deps - global cli + local install mismatch is no longer fatal - remove tests for fs stuff - switch core src, dest, and watch to vinyl-fs - internal cleaning ## 3.3.4 - `--base` is now `--cwd` ## 3.3.3 - support for `--base` CLI arg to change where the search for gulpfile/`--require`s starts - support for `--gulpfile` CLI arg to point to a gulpfile specifically ## 3.3.0 - file.contents streams are no longer paused coming out of src - dest now passes files through before they are empty to fix passing to multiple dests ## 3.2.4 - Bug fix - we didn't have any CLI tests ## 3.2.3 - Update dependencies for bug fixes - autocomplete stuff in the completion folder ## 3.2 - File object is now [vinyl](https://github.com/wearefractal/vinyl) - .watch() is now [glob-watcher](https://github.com/wearefractal/glob-watcher) - Fix CLI -v when no gulpfile found - gulp-util updated - Logging moved to CLI bin file - Will cause double logging if you update global CLI to 3.2 but not local - Will cause no logging if you update local to 3.1 but not global CLI - Drop support for < 0.9 ## 3.1.3 - Move isStream and isBuffer to gulp-util ## 3.1 - Move file class to gulp-util ## 3.0 - Ability to pass multiple globs and glob negations to glob-stream - Breaking change to the way glob-stream works - File object is now a class - file.shortened changed to file.relative - file.cwd added - Break out getStats to avoid nesting - Major code reorganization ## 2.7 - Breaking change to the way options are passed to glob-stream - Introduce new File object to ease pain of computing shortened names (now a getter) ## 2.4 - 2.6 - Moved stuff to gulp-util - Quit exposing createGlobStream (just use the glob-stream module) - More logging - Prettier time durations - Tons of documentation changes - gulp.trigger(tasks...) as a through stream ## 1.2-2.4 (11/12/13) - src buffer=false fixed for 0.8 and 0.9 (remember to .resume() on these versions before consuming) - CLI completely rewritten - Colorful logging - Uses local version of gulp to run tasks - Uses findup to locate gulpfile (so you can run it anywhere in your project) - chdir to gulpfile directory before loading it - Correct exit codes on errors - silent flag added to gulp to disable logging - Fixes to task orchestration (3rd party) - Better support for globbed directories (thanks @robrich) ## 1.2 (10/28/13) - Can specify buffer=false on src streams to make file.content a stream - Can specify read=false on src streams to disable file.content ## 1.1 (10/21/13) - Can specify run callback - Can specify task dependencies - Tasks can accept callback or return promise - `gulp.verbose` exposes run-time internals ## 1.0 (9/26/13) - Specify dependency versions - Updated docs ## 0.2 (8/6/13) - Rename .files() to .src() and .folder() to .dest() ## 0.1 (7/18/13) - Initial Release"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/README.md","tags":[],"body":"The streaming build system [![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url] ## What is gulp? - **Automation** - gulp is a toolkit that helps you automate painful or time-consuming tasks in your development workflow. - **Platform-agnostic** - Integrations are built into all major IDEs and people are using gulp with PHP, .NET, Node.js, Java, and other platforms. - **Strong Ecosystem** - Use npm modules to do anything you want + over 2000 curated plugins for streaming file transformations - **Simple** - By providing only a minimal API surface, gulp is easy to learn and simple to use ## Documentation For a Getting started guide, API docs, recipes, making a plugin, etc. check out or docs! - Need something reliable? Check out the [documentation for the current release](/docs/README.md)! - Want to help us test the latest and greatest? Check out the [documentation for the next release](https://github.com/gulpjs/gulp/tree/4.0)! ## Sample `gulpfile.js` This file will give you a taste of what gulp does. ```js var gulp = require('gulp'); var coffee = require('gulp-coffee'); var concat = require('gulp-concat'); var uglify = require('gulp-uglify'); var imagemin = require('gulp-imagemin'); var sourcemaps = require('gulp-sourcemaps'); var del = require('del'); var paths = { scripts: ['client/js/**/*.coffee', '!client/external/**/*.coffee'], images: 'client/img/**/*' }; // Not all tasks need to use streams // A gulpfile is just another node program and you can use any package available on npm gulp.task('clean', function() { // You can use multiple globbing patterns as you would with `gulp.src` return del(['build']); }); gulp.task('scripts', ['clean'], function() { // Minify and copy all JavaScript (except vendor scripts) // with sourcemaps all the way down return gulp.src(paths.scripts) .pipe(sourcemaps.init()) .pipe(coffee()) .pipe(uglify()) .pipe(concat('all.min.js')) .pipe(sourcemaps.write()) .pipe(gulp.dest('build/js')); }); // Copy all static images gulp.task('images', ['clean'], function() { return gulp.src(paths.images) // Pass in options to the task .pipe(imagemin({optimizationLevel: 5})) .pipe(gulp.dest('build/img')); }); // Rerun the task when a file changes gulp.task('watch', function() { gulp.watch(paths.scripts, ['scripts']); gulp.watch(paths.images, ['images']); }); // The default task (called when you run `gulp` from cli) gulp.task('default', ['watch', 'scripts', 'images']); ``` ## Incremental Builds We recommend these plugins: - [gulp-changed](https://github.com/sindresorhus/gulp-changed) - only pass through changed files - [gulp-cached](https://github.com/contra/gulp-cached) - in-memory file cache, not for operation on sets of files - [gulp-remember](https://github.com/ahaurw01/gulp-remember) - pairs nicely with gulp-cached - [gulp-newer](https://github.com/tschaub/gulp-newer) - pass through newer source files only, supports many:1 source:dest ## Want to contribute? Anyone can help make this project better - check out our [Contributing guide](/CONTRIBUTING.md)! [downloads-image]: https://img.shields.io/npm/dm/gulp.svg [npm-url]: https://www.npmjs.com/package/gulp [npm-image]: https://img.shields.io/npm/v/gulp.svg [travis-url]: https://travis-ci.org/gulpjs/gulp [travis-image]: https://img.shields.io/travis/gulpjs/gulp.svg [coveralls-url]: https://coveralls.io/r/gulpjs/gulp [coveralls-image]: https://img.shields.io/coveralls/gulpjs/gulp/master.svg [gitter-url]: https://gitter.im/gulpjs/gulp [gitter-image]: https://badges.gitter.im/gulpjs/gulp.png"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/completion/README.md","tags":[],"body":"# Completion for gulp > Thanks to grunt team and Tyler Kellen To enable tasks auto-completion in shell you should add `eval \"$(gulp --completion=shell)\"` in your `.shellrc` file. ## Bash Add `eval \"$(gulp --completion=bash)\"` to `~/.bashrc`. ## Zsh Add `eval \"$(gulp --completion=zsh)\"` to `~/.zshrc`. ## Powershell Add `Invoke-Expression ((gulp --completion=powershell) -join [System.Environment]::NewLine)` to `$PROFILE`. ## Fish Add `gulp --completion=fish | source` to `~/.config/fish/config.fish`."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/archy/readme.markdown","tags":[],"body":"# archy Render nested hierarchies `npm ls` style with unicode pipes. [![browser support](http://ci.testling.com/substack/node-archy.png)](http://ci.testling.com/substack/node-archy) [![build status](https://secure.travis-ci.org/substack/node-archy.png)](http://travis-ci.org/substack/node-archy) # example ``` js var archy = require('archy'); var s = archy({ label : 'beep', nodes : [ 'ity', { label : 'boop', nodes : [ { label : 'o_O', nodes : [ { label : 'oh', nodes : [ 'hello', 'puny' ] }, 'human' ] }, 'party\\ntime!' ] } ] }); console.log(s); ``` output ``` beep ├── ity └─┬ boop ├─┬ o_O │ ├─┬ oh │ │ ├── hello │ │ └── puny │ └── human └── party time! ``` # methods var archy = require('archy') ## archy(obj, prefix='', opts={}) Return a string representation of `obj` with unicode pipe characters like how `npm ls` looks. `obj` should be a tree of nested objects with `'label'` and `'nodes'` fields. `'label'` is a string of text to display at a node level and `'nodes'` is an array of the descendents of the current node. If a node is a string, that string will be used as the `'label'` and an empty array of `'nodes'` will be used. `prefix` gets prepended to all the lines and is used by the algorithm to recursively update. If `'label'` has newlines they will be indented at the present indentation level with the current prefix. To disable unicode results in favor of all-ansi output set `opts.unicode` to `false`. # install With [npm](http://npmjs.org) do: ``` npm install archy ``` # license MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/chalk/node_modules/ansi-styles/readme.md","tags":[],"body":"# ansi-styles [![Build Status](https://travis-ci.org/chalk/ansi-styles.svg?branch=master)](https://travis-ci.org/chalk/ansi-styles) > [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors_and_Styles) for styling strings in the terminal You probably want the higher-level [chalk](https://github.com/chalk/chalk) module for styling your strings. ![](screenshot.png) ## Install ``` $ npm install --save ansi-styles ``` ## Usage ```js var ansi = require('ansi-styles'); console.log(ansi.green.open + 'Hello world!' + ansi.green.close); ``` ## API Each style has an `open` and `close` property. ## Styles ### Modifiers - `reset` - `bold` - `dim` - `italic` *(not widely supported)* - `underline` - `inverse` - `hidden` - `strikethrough` *(not widely supported)* ### Colors - `black` - `red` - `green` - `yellow` - `blue` - `magenta` - `cyan` - `white` - `gray` ### Background colors - `bgBlack` - `bgRed` - `bgGreen` - `bgYellow` - `bgBlue` - `bgMagenta` - `bgCyan` - `bgWhite` ## Advanced usage By default you get a map of styles, but the styles are also available as groups. They are non-enumerable so they don't show up unless you access them explicitly. This makes it easier to expose only a subset in a higher-level module. - `ansi.modifiers` - `ansi.colors` - `ansi.bgColors` ###### Example ```js console.log(ansi.colors.green.open); ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/chalk/node_modules/escape-string-regexp/readme.md","tags":[],"body":"# escape-string-regexp [![Build Status](https://travis-ci.org/sindresorhus/escape-string-regexp.svg?branch=master)](https://travis-ci.org/sindresorhus/escape-string-regexp) > Escape RegExp special characters ## Install ``` $ npm install --save escape-string-regexp ``` ## Usage ```js const escapeStringRegexp = require('escape-string-regexp'); const escapedString = escapeStringRegexp('how much $ for a unicorn?'); //=> 'how much \\$ for a unicorn\\?' new RegExp(escapedString); ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/chalk/node_modules/has-ansi/node_modules/ansi-regex/readme.md","tags":[],"body":"# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex) > Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save ansi-regex ``` ## Usage ```js var ansiRegex = require('ansi-regex'); ansiRegex().test('\\u001b[4mcake\\u001b[0m'); //=> true ansiRegex().test('cake'); //=> false '\\u001b[4mcake\\u001b[0m'.match(ansiRegex()); //=> ['\\u001b[4m', '\\u001b[0m'] ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/chalk/node_modules/has-ansi/readme.md","tags":[],"body":"# has-ansi [![Build Status](https://travis-ci.org/sindresorhus/has-ansi.svg?branch=master)](https://travis-ci.org/sindresorhus/has-ansi) > Check if a string has [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save has-ansi ``` ## Usage ```js var hasAnsi = require('has-ansi'); hasAnsi('\\u001b[4mcake\\u001b[0m'); //=> true hasAnsi('cake'); //=> false ``` ## Related - [has-ansi-cli](https://github.com/sindresorhus/has-ansi-cli) - CLI for this module - [strip-ansi](https://github.com/sindresorhus/strip-ansi) - Strip ANSI escape codes - [ansi-regex](https://github.com/sindresorhus/ansi-regex) - Regular expression for matching ANSI escape codes - [chalk](https://github.com/sindresorhus/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/chalk/node_modules/strip-ansi/node_modules/ansi-regex/readme.md","tags":[],"body":"# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex) > Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save ansi-regex ``` ## Usage ```js var ansiRegex = require('ansi-regex'); ansiRegex().test('\\u001b[4mcake\\u001b[0m'); //=> true ansiRegex().test('cake'); //=> false '\\u001b[4mcake\\u001b[0m'.match(ansiRegex()); //=> ['\\u001b[4m', '\\u001b[0m'] ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/chalk/node_modules/strip-ansi/readme.md","tags":[],"body":"# strip-ansi [![Build Status](https://travis-ci.org/chalk/strip-ansi.svg?branch=master)](https://travis-ci.org/chalk/strip-ansi) > Strip [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) ## Install ``` $ npm install --save strip-ansi ``` ## Usage ```js var stripAnsi = require('strip-ansi'); stripAnsi('\\u001b[4mcake\\u001b[0m'); //=> 'cake' ``` ## Related - [strip-ansi-cli](https://github.com/chalk/strip-ansi-cli) - CLI for this module - [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes - [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/chalk/node_modules/supports-color/readme.md","tags":[],"body":"# supports-color [![Build Status](https://travis-ci.org/chalk/supports-color.svg?branch=master)](https://travis-ci.org/chalk/supports-color) > Detect whether a terminal supports color ## Install ``` $ npm install --save supports-color ``` ## Usage ```js var supportsColor = require('supports-color'); if (supportsColor) { console.log('Terminal supports color'); } ``` It obeys the `--color` and `--no-color` CLI flags. For situations where using `--color` is not possible, add an environment variable `FORCE_COLOR` with any value to force color. Trumps `--no-color`. ## Related - [supports-color-cli](https://github.com/chalk/supports-color-cli) - CLI for this module - [chalk](https://github.com/chalk/chalk) - Terminal string styling done right ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/chalk/readme.md","tags":[],"body":"> Terminal string styling done right [![Build Status](https://travis-ci.org/chalk/chalk.svg?branch=master)](https://travis-ci.org/chalk/chalk) [![Coverage Status](https://coveralls.io/repos/chalk/chalk/badge.svg?branch=master)](https://coveralls.io/r/chalk/chalk?branch=master) [![](http://img.shields.io/badge/unicorn-approved-ff69b4.svg)](https://www.youtube.com/watch?v=9auOCbH5Ns4) [colors.js](https://github.com/Marak/colors.js) used to be the most popular string styling module, but it has serious deficiencies like extending `String.prototype` which causes all kinds of [problems](https://github.com/yeoman/yo/issues/68). Although there are other ones, they either do too much or not enough. **Chalk is a clean and focused alternative.** ![](https://github.com/chalk/ansi-styles/raw/master/screenshot.png) ## Why - Highly performant - Doesn't extend `String.prototype` - Expressive API - Ability to nest styles - Clean and focused - Auto-detects color support - Actively maintained - [Used by ~4500 modules](https://www.npmjs.com/browse/depended/chalk) as of July 15, 2015 ## Install ``` $ npm install --save chalk ``` ## Usage Chalk comes with an easy to use composable API where you just chain and nest the styles you want. ```js var chalk = require('chalk'); // style a string chalk.blue('Hello world!'); // combine styled and normal strings chalk.blue('Hello') + 'World' + chalk.red('!'); // compose multiple styles using the chainable API chalk.blue.bgRed.bold('Hello world!'); // pass in multiple arguments chalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz'); // nest styles chalk.red('Hello', chalk.underline.bgBlue('world') + '!'); // nest styles of the same type even (color, underline, background) chalk.green( 'I am a green line ' + chalk.blue.underline.bold('with a blue substring') + ' that becomes green again!' ); ``` Easily define your own themes. ```js var chalk = require('chalk'); var error = chalk.bold.red; console.log(error('Error!')); ``` Take advantage of console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data). ```js var name = 'Sindre'; console.log(chalk.green('Hello %s'), name); //=> Hello Sindre ``` ## API ### chalk.`[....](string, [string...])` Example: `chalk.red.bold.underline('Hello', 'world');` Chain [styles](#styles) and call the last one as a method with a string argument. Order doesn't matter, and later styles take precedent in case of a conflict. This simply means that `Chalk.red.yellow.green` is equivalent to `Chalk.green`. Multiple arguments will be separated by space. ### chalk.enabled Color support is automatically detected, but you can override it by setting the `enabled` property. You should however only do this in your own code as it applies globally to all chalk consumers. If you need to change this in a reusable module create a new instance: ```js var ctx = new chalk.constructor({enabled: false}); ``` ### chalk.supportsColor Detect whether the terminal [supports color](https://github.com/chalk/supports-color). Used internally and handled for you, but exposed for convenience. Can be overridden by the user with the flags `--color` and `--no-color`. For situations where using `--color` is not possible, add an environment variable `FORCE_COLOR` with any value to force color. Trumps `--no-color`. ### chalk.styles Exposes the styles as [ANSI escape codes](https://github.com/chalk/ansi-styles). Generally not useful, but you might need just the `.open` or `.close` escape code if you're mixing externally styled strings with your own. ```js var chalk = require('chalk'); console.log(chalk.styles.red); //=> {open: '\\u001b[31m', close: '\\u001b[39m'} console.log(chalk.styles.red.open + 'Hello' + chalk.styles.red.close); ``` ### chalk.hasColor(string) Check whether a string [has color](https://github.com/chalk/has-ansi). ### chalk.stripColor(string) [Strip color](https://github.com/chalk/strip-ansi) from a string. Can be useful in combination with `.supportsColor` to strip color on externally styled text when it's not supported. Example: ```js var chalk = require('chalk'); var styledString = getText(); if (!chalk.supportsColor) { styledString = chalk.stripColor(styledString); } ``` ## Styles ### Modifiers - `reset` - `bold` - `dim` - `italic` *(not widely supported)* - `underline` - `inverse` - `hidden` - `strikethrough` *(not widely supported)* ### Colors - `black` - `red` - `green` - `yellow` - `blue` *(on Windows the bright version is used as normal blue is illegible)* - `magenta` - `cyan` - `white` - `gray` ### Background colors - `bgBlack` - `bgRed` - `bgGreen` - `bgYellow` - `bgBlue` - `bgMagenta` - `bgCyan` - `bgWhite` ## 256-colors Chalk does not support anything other than the base eight colors, which guarantees it will work on all terminals and systems. Some terminals, specifically `xterm` compliant ones, will support the full range of 8-bit colors. For this the lower level [ansi-256-colors](https://github.com/jbnicolai/ansi-256-colors) package can be used. ## Windows If you're on Windows, do yourself a favor and use [`cmder`](http://bliker.github.io/cmder/) instead of `cmd.exe`. ## Related - [chalk-cli](https://github.com/chalk/chalk-cli) - CLI for this module - [ansi-styles](https://github.com/chalk/ansi-styles/) - ANSI escape codes for styling strings in the terminal - [supports-color](https://github.com/chalk/supports-color/) - Detect whether a terminal supports color - [strip-ansi](https://github.com/chalk/strip-ansi) - Strip ANSI escape codes - [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes - [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes - [wrap-ansi](https://github.com/chalk/wrap-ansi) - Wordwrap a string with ANSI escape codes ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/deprecated/README.md","tags":[],"body":"# deprecated [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status][david-image]][david-url] ## Information Packagedeprecated Description Tool for deprecating things Node Version >= 0.9 ## Usage ```javascript var oldfn = function(a,b) { return a+b; }; // returns a new wrapper function that logs the deprecated function once var somefn = deprecated('dont use this anymore', console.log, oldfn); var someobj = {}; // set up a getter/set for field that logs deprecated message once deprecated('dont use this anymore', console.log, someobj, 'a', 123); console.log(someobj.a); // 123 ``` [npm-url]: https://npmjs.org/package/deprecated [npm-image]: https://badge.fury.io/js/deprecated.png [travis-url]: https://travis-ci.org/wearefractal/deprecated [travis-image]: https://travis-ci.org/wearefractal/deprecated.png?branch=master [coveralls-url]: https://coveralls.io/r/wearefractal/deprecated [coveralls-image]: https://coveralls.io/repos/wearefractal/deprecated/badge.png [depstat-url]: https://david-dm.org/wearefractal/deprecated [depstat-image]: https://david-dm.org/wearefractal/deprecated.png [david-url]: https://david-dm.org/wearefractal/deprecated [david-image]: https://david-dm.org/wearefractal/deprecated.png?theme=shields.io"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/README.md","tags":[],"body":"# gulp-util [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status][depstat-image]][depstat-url] ## Information Packagegulp-util Description Utility functions for gulp plugins Node Version >= 0.10 ## Usage ```javascript var gutil = require('gulp-util'); gutil.log('stuff happened', 'Really it did', gutil.colors.magenta('123')); gutil.beep(); gutil.replaceExtension('file.coffee', '.js'); // file.js var opt = { name: 'todd', file: someGulpFile }; gutil.template('test ', opt) // test todd /js/hi.js ``` ### log(msg...) Logs stuff. Already prefixed with [gulp] and all that. If you pass in multiple arguments it will join them by a space. The default gulp coloring using gutil.colors.: ``` values (files, module names, etc.) = cyan numbers (times, counts, etc) = magenta ``` ### colors Is an instance of [chalk](https://github.com/sindresorhus/chalk). ### replaceExtension(path, newExtension) Replaces a file extension in a path. Returns the new path. ### isStream(obj) Returns true or false if an object is a stream. ### isBuffer(obj) Returns true or false if an object is a Buffer. ### template(string[, data]) This is a lodash.template function wrapper. You must pass in a valid gulp file object so it is available to the user or it will error. You can not configure any of the delimiters. Look at the [lodash docs](http://lodash.com/docs#template) for more info. ## new File(obj) This is just [vinyl](https://github.com/wearefractal/vinyl) ```javascript var file = new gutil.File({ base: path.join(__dirname, './fixtures/'), cwd: __dirname, path: path.join(__dirname, './fixtures/test.coffee') }); ``` ## noop() Returns a stream that does nothing but pass data straight through. ```javascript // gulp should be called like this : // $ gulp --type production gulp.task('scripts', function() { gulp.src('src/**/*.js') .pipe(concat('script.js')) .pipe(gutil.env.type === 'production' ? uglify() : gutil.noop()) .pipe(gulp.dest('dist/')); }); ``` ## buffer(cb) This is similar to es.wait but instead of buffering text into one string it buffers anything into an array (so very useful for file objects). Returns a stream that can be piped to. The stream will emit one data event after the stream piped to it has ended. The data will be the same array passed to the callback. Callback is optional and receives two arguments: error and data ```javascript gulp.src('stuff/*.js') .pipe(gutil.buffer(function(err, files) { })); ``` ## new PluginError(pluginName, message[, options]) - pluginName should be the module name of your plugin - message can be a string or an existing error - By default the stack will not be shown. Set `options.showStack` to true if you think the stack is important for your error. - If you pass an error in as the message the stack will be pulled from that, otherwise one will be created. - Note that if you pass in a custom stack string you need to include the message along with that. - Error properties will be included in `err.toString()`. Can be omitted by including `{showProperties: false}` in the options. These are all acceptable forms of instantiation: ```javascript var err = new gutil.PluginError('test', { message: 'something broke' }); var err = new gutil.PluginError({ plugin: 'test', message: 'something broke' }); var err = new gutil.PluginError('test', 'something broke'); var err = new gutil.PluginError('test', 'something broke', {showStack: true}); var existingError = new Error('OMG'); var err = new gutil.PluginError('test', existingError, {showStack: true}); ``` [npm-url]: https://www.npmjs.com/package/gulp-util [npm-image]: https://badge.fury.io/js/gulp-util.svg [travis-url]: https://travis-ci.org/gulpjs/gulp-util [travis-image]: https://img.shields.io/travis/gulpjs/gulp-util.svg?branch=master [coveralls-url]: https://coveralls.io/r/gulpjs/gulp-util [coveralls-image]: https://img.shields.io/coveralls/gulpjs/gulp-util.svg [depstat-url]: https://david-dm.org/gulpjs/gulp-util [depstat-image]: https://david-dm.org/gulpjs/gulp-util.svg"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/array-differ/readme.md","tags":[],"body":"# array-differ [![Build Status](https://travis-ci.org/sindresorhus/array-differ.svg?branch=master)](https://travis-ci.org/sindresorhus/array-differ) > Create an array with values that are present in the first input array but not additional ones ## Install ```sh $ npm install --save array-differ ``` ## Usage ```js var arrayDiffer = require('array-differ'); arrayDiffer([2, 3, 4], [3, 50]); //=> [2, 4] ``` ## API ### arrayDiffer(input, values, [values, ...]) Returns the new array. #### input Type: `array` #### values Type: `array` Arrays of values to exclude. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/array-uniq/readme.md","tags":[],"body":"# array-uniq [![Build Status](https://travis-ci.org/sindresorhus/array-uniq.svg?branch=master)](https://travis-ci.org/sindresorhus/array-uniq) > Create an array without duplicates It's already pretty fast, but will be much faster when [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) becomes available in V8 (especially with large arrays). ## Install ``` $ npm install --save array-uniq ``` ## Usage ```js const arrayUniq = require('array-uniq'); arrayUniq([1, 1, 2, 3, 3]); //=> [1, 2, 3] arrayUniq(['foo', 'foo', 'bar', 'foo']); //=> ['foo', 'bar'] ``` ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/beeper/readme.md","tags":[],"body":"# beeper [![Build Status](https://travis-ci.org/sindresorhus/beeper.svg?branch=master)](https://travis-ci.org/sindresorhus/beeper) > Make your terminal beep ![](https://cloud.githubusercontent.com/assets/170270/5261236/f8471100-7a49-11e4-81af-96cd09a522d9.gif) Useful as an attention grabber e.g. when an error happens. ## Install ``` $ npm install --save beeper ``` ## Usage ```js var beeper = require('beeper'); beeper(); // beep one time beeper(3); // beep three times beeper('****-*-*'); // beep, beep, beep, beep, pause, beep, pause, beep ``` ## API It will not beep if stdout is not TTY or if the user supplies the `--no-beep` flag. ### beeper([count|melody], [callback]) #### count Type: `number` Default: `1` How many times you want it to beep. #### melody Type: `string` Construct your own melody by supplying a string of `*` for beep `-` for pause. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/Readme.md","tags":[],"body":"# dateformat A node.js package for Steven Levithan's excellent [dateFormat()][dateformat] function. [![Build Status](https://travis-ci.org/felixge/node-dateformat.svg)](https://travis-ci.org/felixge/node-dateformat) ## Modifications * Removed the `Date.prototype.format` method. Sorry folks, but extending native prototypes is for suckers. * Added a `module.exports = dateFormat;` statement at the bottom * Added the placeholder `N` to get the ISO 8601 numeric representation of the day of the week ## Installation ```bash $ npm install dateformat $ dateformat --help ``` ## Usage As taken from Steven's post, modified to match the Modifications listed above: ```js var dateFormat = require('dateformat'); var now = new Date(); // Basic usage dateFormat(now, \"dddd, mmmm dS, yyyy, h:MM:ss TT\"); // Saturday, June 9th, 2007, 5:46:21 PM // You can use one of several named masks dateFormat(now, \"isoDateTime\"); // 2007-06-09T17:46:21 // ...Or add your own dateFormat.masks.hammerTime = 'HH:MM! \"Can\\'t touch this!\"'; dateFormat(now, \"hammerTime\"); // 17:46! Can't touch this! // When using the standalone dateFormat function, // you can also provide the date as a string dateFormat(\"Jun 9 2007\", \"fullDate\"); // Saturday, June 9, 2007 // Note that if you don't include the mask argument, // dateFormat.masks.default is used dateFormat(now); // Sat Jun 09 2007 17:46:21 // And if you don't include the date argument, // the current date and time is used dateFormat(); // Sat Jun 09 2007 17:46:22 // You can also skip the date argument (as long as your mask doesn't // contain any numbers), in which case the current date/time is used dateFormat(\"longTime\"); // 5:46:22 PM EST // And finally, you can convert local time to UTC time. Simply pass in // true as an additional argument (no argument skipping allowed in this case): dateFormat(now, \"longTime\", true); // 10:46:21 PM UTC // ...Or add the prefix \"UTC:\" or \"GMT:\" to your mask. dateFormat(now, \"UTC:h:MM:ss TT Z\"); // 10:46:21 PM UTC // You can also get the ISO 8601 week of the year: dateFormat(now, \"W\"); // 42 // and also get the ISO 8601 numeric representation of the day of the week: dateFormat(now,\"N\"); // 6 ``` ## License (c) 2007-2009 Steven Levithan [stevenlevithan.com][stevenlevithan], MIT license. [dateformat]: http://blog.stevenlevithan.com/archives/date-time-format [stevenlevithan]: http://stevenlevithan.com/"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/get-stdin/readme.md","tags":[],"body":"# get-stdin [![Build Status](https://travis-ci.org/sindresorhus/get-stdin.svg?branch=master)](https://travis-ci.org/sindresorhus/get-stdin) > Easier stdin ## Install ```sh $ npm install --save get-stdin ``` ## Usage ```js // example.js var stdin = require('get-stdin'); stdin(function (data) { console.log(data); //=> unicorns }); ``` ```sh $ echo unicorns | node example.js unicorns ``` ## API ### stdin(callback) Get `stdin` as a string. ### stdin.buffer(callback) Get `stdin` as a buffer. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/camelcase-keys/node_modules/camelcase/readme.md","tags":[],"body":"# camelcase [![Build Status](https://travis-ci.org/sindresorhus/camelcase.svg?branch=master)](https://travis-ci.org/sindresorhus/camelcase) > Convert a dash/dot/underscore/space separated string to camelCase: `foo-bar` → `fooBar` ## Install ``` $ npm install --save camelcase ``` ## Usage ```js const camelCase = require('camelcase'); camelCase('foo-bar'); //=> 'fooBar' camelCase('foo_bar'); //=> 'fooBar' camelCase('Foo-Bar'); //=> 'fooBar' camelCase('--foo.bar'); //=> 'fooBar' camelCase('__foo__bar__'); //=> 'fooBar' camelCase('foo bar'); //=> 'fooBar' console.log(process.argv[3]); //=> '--foo-bar' camelCase(process.argv[3]); //=> 'fooBar' camelCase('foo', 'bar'); //=> 'fooBar' camelCase('__foo__', '--bar'); //=> 'fooBar' ``` ## Related - [decamelize](https://github.com/sindresorhus/decamelize) - The inverse of this module - [uppercamelcase](https://github.com/SamVerschueren/uppercamelcase) - Like this module, but to PascalCase instead of camelCase ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/camelcase-keys/readme.md","tags":[],"body":"# camelcase-keys [![Build Status](https://travis-ci.org/sindresorhus/camelcase-keys.svg?branch=master)](https://travis-ci.org/sindresorhus/camelcase-keys) > Convert object keys to camelCase using [`camelcase`](https://github.com/sindresorhus/camelcase) ## Install ``` $ npm install --save camelcase-keys ``` ## Usage ```js const camelcaseKeys = require('camelcase-keys'); camelcaseKeys({'foo-bar': true}); //=> {fooBar: true} const argv = require('minimist')(process.argv.slice(2)); //=> {_: [], 'foo-bar': true} camelcaseKeys(argv); //=> {_: [], fooBar: true} ``` ## API ### camelcaseKeys(input, [options]) #### input Type: `object` Object to camelCase. #### options Type: `object` ##### exclude Type: `array` Default: `[]` Exclude keys from being camelCased. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/decamelize/readme.md","tags":[],"body":"# decamelize [![Build Status](https://travis-ci.org/sindresorhus/decamelize.svg?branch=master)](https://travis-ci.org/sindresorhus/decamelize) > Convert a camelized string into a lowercased one with a custom separator > Example: `unicornRainbow` → `unicorn_rainbow` ## Install ``` $ npm install --save decamelize ``` ## Usage ```js const decamelize = require('decamelize'); decamelize('unicornRainbow'); //=> 'unicorn_rainbow' decamelize('unicornRainbow', '-'); //=> 'unicorn-rainbow' ``` ## API ### decamelize(input, [separator]) #### input Type: `string` #### separator Type: `string` Default: `_` ## Related See [`camelcase`](https://github.com/sindresorhus/camelcase) for the inverse. ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/loud-rejection/node_modules/currently-unhandled/node_modules/array-find-index/readme.md","tags":[],"body":"# array-find-index [![Build Status](https://travis-ci.org/sindresorhus/array-find-index.svg?branch=master)](https://travis-ci.org/sindresorhus/array-find-index) > ES2015 [`Array#findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save array-find-index ``` ## Usage ```js arrayFindIndex = require('array-find-index'); arrayFindIndex(['rainbow', 'unicorn', 'pony'], x => x === 'unicorn'); //=> 1 ``` ## API Same as `Array#findIndex()`, but with the input array as the first argument. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/loud-rejection/node_modules/currently-unhandled/readme.md","tags":[],"body":"# currently-unhandled [![Build Status](https://travis-ci.org/jamestalmage/currently-unhandled.svg?branch=master)](https://travis-ci.org/jamestalmage/currently-unhandled) [![Coverage Status](https://coveralls.io/repos/github/jamestalmage/currently-unhandled/badge.svg?branch=master)](https://coveralls.io/github/jamestalmage/currently-unhandled?branch=master) > Track the list of currently unhandled promise rejections. ## Install ``` $ npm install --save currently-unhandled ``` ## Usage ```js const currentlyUnhandled = require('currently-unhandled')(); // [{promise: p, reason: fooError}]' p.catch(() => {}); // on the next tick - handled promise is now removed from the list: currentlyUnhandled(); //=> []; ``` ## API ### currentlyUnhandled() Returns an array of objects with `promise` and `reason` properties representing the rejected promises that currently do not have a rejection handler. The list grows and shrinks as unhandledRejections are published, and later handled. ## Browser Support This module can be bundled with `browserify`. At time of writing, it will work with native Promises in the Chrome browser only. For best cross-browser support, use `bluebird` instead of native Promise support in browsers. ## License MIT © [James Talmage](http://github.com/jamestalmage)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/loud-rejection/node_modules/signal-exit/CHANGELOG.md","tags":[],"body":"# Change Log All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines. # [3.0.0](https://github.com/tapjs/signal-exit/compare/v2.1.2...v3.0.0) (2016-06-13) ### Bug Fixes * get our test suite running on Windows ([#23](https://github.com/tapjs/signal-exit/issues/23)) ([6f3eda8](https://github.com/tapjs/signal-exit/commit/6f3eda8)) * hooking SIGPROF was interfering with profilers see [#21](https://github.com/tapjs/signal-exit/issues/21) ([#24](https://github.com/tapjs/signal-exit/issues/24)) ([1248a4c](https://github.com/tapjs/signal-exit/commit/1248a4c)) ### BREAKING CHANGES * signal-exit no longer wires into SIGPROF"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/loud-rejection/node_modules/signal-exit/README.md","tags":[],"body":"# signal-exit [![Build Status](https://travis-ci.org/tapjs/signal-exit.png)](https://travis-ci.org/tapjs/signal-exit) [![Coverage](https://coveralls.io/repos/tapjs/signal-exit/badge.svg?branch=master)](https://coveralls.io/r/tapjs/signal-exit?branch=master) [![NPM version](https://img.shields.io/npm/v/signal-exit.svg)](https://www.npmjs.com/package/signal-exit) [![Windows Tests](https://img.shields.io/appveyor/ci/bcoe/signal-exit/master.svg?label=Windows%20Tests)](https://ci.appveyor.com/project/bcoe/signal-exit) [![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version) When you want to fire an event no matter how a process exits: * reaching the end of execution. * explicitly having `process.exit(code)` called. * having `process.kill(pid, sig)` called. * receiving a fatal signal from outside the process Use `signal-exit`. ```js var onExit = require('signal-exit') onExit(function (code, signal) { console.log('process exited!') }) ``` ## API `var remove = onExit(function (code, signal) {}, options)` The return value of the function is a function that will remove the handler. Note that the function *only* fires for signals if the signal would cause the proces to exit. That is, there are no other listeners, and it is a fatal signal. ## Options * `alwaysLast`: Run this handler after any other signal or exit handlers. This causes `process.emit` to be monkeypatched."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/loud-rejection/readme.md","tags":[],"body":"# loud-rejection [![Build Status](https://travis-ci.org/sindresorhus/loud-rejection.svg?branch=master)](https://travis-ci.org/sindresorhus/loud-rejection) [![Coverage Status](https://coveralls.io/repos/github/sindresorhus/loud-rejection/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/loud-rejection?branch=master) > Make unhandled promise rejections fail loudly instead of the default [silent fail](https://gist.github.com/benjamingr/0237932cee84712951a2) By default, promises fail silently if you don't attach a `.catch()` handler to them. Use this in top-level things like tests, CLI tools, apps, etc, **but not in reusable modules.** Not needed in the browser as unhandled promises are shown in the console. ## Install ``` $ npm install --save loud-rejection ``` ## Usage ```js const loudRejection = require('loud-rejection'); const promiseFn = require('promise-fn'); // Install the unhandledRejection listeners loudRejection(); promiseFn(); ``` Without this module it's more verbose and you might even miss some that will fail silently: ```js const promiseFn = require('promise-fn'); function error(err) { console.error(err.stack); process.exit(1); } promiseFn().catch(error); ``` ### Register script Alternatively to the above, you may simply require `loud-rejection/register` and the unhandledRejection listener will be automagically installed for you. This is handy for ES2015 imports: ```js import 'loud-rejection/register'; ``` ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/map-obj/readme.md","tags":[],"body":"# map-obj [![Build Status](https://travis-ci.org/sindresorhus/map-obj.svg?branch=master)](https://travis-ci.org/sindresorhus/map-obj) > Map object keys and values into a new object ## Install ``` $ npm install --save map-obj ``` ## Usage ```js var mapObj = require('map-obj'); var newObject = mapObj({foo: 'bar'}, function (key, value, object) { // first element is the new key and second is the new value // here we reverse the order return [value, key]; }); //=> {bar: 'foo'} ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/README.md","tags":[],"body":"# normalize-package-data [![Build Status](https://travis-ci.org/npm/normalize-package-data.png?branch=master)](https://travis-ci.org/npm/normalize-package-data) normalize-package data exports a function that normalizes package metadata. This data is typically found in a package.json file, but in principle could come from any source - for example the npm registry. normalize-package-data is used by [read-package-json](https://npmjs.org/package/read-package-json) to normalize the data it reads from a package.json file. In turn, read-package-json is used by [npm](https://npmjs.org/package/npm) and various npm-related tools. ## Installation ``` npm install normalize-package-data ``` ## Usage Basic usage is really simple. You call the function that normalize-package-data exports. Let's call it `normalizeData`. ```javascript normalizeData = require('normalize-package-data') packageData = fs.readFileSync(\"package.json\") normalizeData(packageData) // packageData is now normalized ``` #### Strict mode You may activate strict validation by passing true as the second argument. ```javascript normalizeData = require('normalize-package-data') packageData = fs.readFileSync(\"package.json\") warnFn = function(msg) { console.error(msg) } normalizeData(packageData, true) // packageData is now normalized ``` If strict mode is activated, only Semver 2.0 version strings are accepted. Otherwise, Semver 1.0 strings are accepted as well. Packages must have a name, and the name field must not have contain leading or trailing whitespace. #### Warnings Optionally, you may pass a \"warning\" function. It gets called whenever the `normalizeData` function encounters something that doesn't look right. It indicates less than perfect input data. ```javascript normalizeData = require('normalize-package-data') packageData = fs.readFileSync(\"package.json\") warnFn = function(msg) { console.error(msg) } normalizeData(packageData, warnFn) // packageData is now normalized. Any number of warnings may have been logged. ``` You may combine strict validation with warnings by passing `true` as the second argument, and `warnFn` as third. When `private` field is set to `true`, warnings will be suppressed. ### Potential exceptions If the supplied data has an invalid name or version vield, `normalizeData` will throw an error. Depending on where you call `normalizeData`, you may want to catch these errors so can pass them to a callback. ## What normalization (currently) entails * The value of `name` field gets trimmed (unless in strict mode). * The value of the `version` field gets cleaned by `semver.clean`. See [documentation for the semver module](https://github.com/isaacs/node-semver). * If `name` and/or `version` fields are missing, they are set to empty strings. * If `files` field is not an array, it will be removed. * If `bin` field is a string, then `bin` field will become an object with `name` set to the value of the `name` field, and `bin` set to the original string value. * If `man` field is a string, it will become an array with the original string as its sole member. * If `keywords` field is string, it is considered to be a list of keywords separated by one or more white-space characters. It gets converted to an array by splitting on `\\s+`. * All people fields (`author`, `maintainers`, `contributors`) get converted into objects with name, email and url properties. * If `bundledDependencies` field (a typo) exists and `bundleDependencies` field does not, `bundledDependencies` will get renamed to `bundleDependencies`. * If the value of any of the dependencies fields (`dependencies`, `devDependencies`, `optionalDependencies`) is a string, it gets converted into an object with familiar `name=>value` pairs. * The values in `optionalDependencies` get added to `dependencies`. The `optionalDependencies` array is left untouched. * As of v2: Dependencies that point at known hosted git providers (currently: github, bitbucket, gitlab) will have their URLs canonicalized, but protocols will be preserved. * As of v2: Dependencies that use shortcuts for hosted git providers (`org/proj`, `github:org/proj`, `bitbucket:org/proj`, `gitlab:org/proj`, `gist:docid`) will have the shortcut left in place. (In the case of github, the `org/proj` form will be expanded to `github:org/proj`.) THIS MARKS A BREAKING CHANGE FROM V1, where the shorcut was previously expanded to a URL. * If `description` field does not exist, but `readme` field does, then (more or less) the first paragraph of text that's found in the readme is taken as value for `description`. * If `repository` field is a string, it will become an object with `url` set to the original string value, and `type` set to `\"git\"`. * If `repository.url` is not a valid url, but in the style of \"[owner-name]/[repo-name]\", `repository.url` will be set to git+https://github.com/[owner-name]/[repo-name].git * If `bugs` field is a string, the value of `bugs` field is changed into an object with `url` set to the original string value. * If `bugs` field does not exist, but `repository` field points to a repository hosted on GitHub, the value of the `bugs` field gets set to an url in the form of https://github.com/[owner-name]/[repo-name]/issues . If the repository field points to a GitHub Gist repo url, the associated http url is chosen. * If `bugs` field is an object, the resulting value only has email and url properties. If email and url properties are not strings, they are ignored. If no valid values for either email or url is found, bugs field will be removed. * If `homepage` field is not a string, it will be removed. * If the url in the `homepage` field does not specify a protocol, then http is assumed. For example, `myproject.org` will be changed to `http://myproject.org`. * If `homepage` field does not exist, but `repository` field points to a repository hosted on GitHub, the value of the `homepage` field gets set to an url in the form of https://github.com/[owner-name]/[repo-name]/ . If the repository field points to a GitHub Gist repo url, the associated http url is chosen. ### Rules for name field If `name` field is given, the value of the name field must be a string. The string may not: * start with a period. * contain the following characters: `/@\\s+%` * contain and characters that would need to be encoded for use in urls. * resemble the word `node_modules` or `favicon.ico` (case doesn't matter). ### Rules for version field If `version` field is given, the value of the version field must be a valid *semver* string, as determined by the `semver.valid` method. See [documentation for the semver module](https://github.com/isaacs/node-semver). ### Rules for license field The `license` field should be a valid *SPDX license expression* or one of the special values allowed by [validate-npm-package-license](https://npmjs.com/packages/validate-npm-package-license). See [documentation for the license field in package.json](https://docs.npmjs.com/files/package.json#license). ## Credits This package contains code based on read-package-json written by Isaac Z. Schlueter. Used with permisson. ## License normalize-package-data is released under the [BSD 2-Clause License](http://opensource.org/licenses/MIT). Copyright (c) 2013 Meryn Stol"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/hosted-git-info/README.md","tags":[],"body":"# hosted-git-info This will let you identify and transform various git hosts URLs between protocols. It also can tell you what the URL is for the raw path for particular file for direct access without git. ## Usage ```javascript var hostedGitInfo = require(\"hosted-git-info\") var info = hostedGitInfo.fromUrl(\"git@github.com:npm/hosted-git-info.git\") /* info looks like: { type: \"github\", domain: \"github.com\", user: \"npm\", project: \"hosted-git-info\" } */ ``` If the URL can't be matched with a git host, `null` will be returned. We can match git, ssh and https urls. Additionally, we can match ssh connect strings (`git@github.com:npm/hosted-git-info`) and shortcuts (eg, `github:npm/hosted-git-info`). Github specifically, is detected in the case of a third, unprefixed, form: `npm/hosted-git-info`. If it does match, the returned object has properties of: * info.type -- The short name of the service * info.domain -- The domain for git protocol use * info.user -- The name of the user/org on the git host * info.project -- The name of the project on the git host And methods of: * info.file(path) Given the path of a file relative to the repository, returns a URL for directly fetching it from the githost. If no committish was set then `master` will be used as the default. For example `hostedGitInfo.fromUrl(\"git@github.com:npm/hosted-git-info.git#v1.0.0\").file(\"package.json\")` would return `https://raw.githubusercontent.com/npm/hosted-git-info/v1.0.0/package.json` * info.shortcut() eg, `github:npm/hosted-git-info` * info.browse() eg, `https://github.com/npm/hosted-git-info/tree/v1.2.0` * info.bugs() eg, `https://github.com/npm/hosted-git-info/issues` * info.docs() eg, `https://github.com/npm/hosted-git-info/tree/v1.2.0#readme` * info.https() eg, `git+https://github.com/npm/hosted-git-info.git` * info.sshurl() eg, `git+ssh://git@github.com/npm/hosted-git-info.git` * info.ssh() eg, `git@github.com:npm/hosted-git-info.git` * info.path() eg, `npm/hosted-git-info` * info.getDefaultRepresentation() Returns the default output type. The default output type is based on the string you passed in to be parsed * info.toString() Uses the getDefaultRepresentation to call one of the other methods to get a URL for this resource. As such `hostedGitInfo.fromUrl(url).toString()` will give you a normalized version of the URL that still uses the same protocol. Shortcuts will still be returned as shortcuts, but the special case github form of `org/project` will be normalized to `github:org/project`. SSH connect strings will be normalized into `git+ssh` URLs. ## Supported hosts Currently this supports Github, Bitbucket and Gitlab. Pull requests for additional hosts welcome."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/is-builtin-module/node_modules/builtin-modules/readme.md","tags":[],"body":"# builtin-modules [![Build Status](https://travis-ci.org/sindresorhus/builtin-modules.svg?branch=master)](https://travis-ci.org/sindresorhus/builtin-modules) > List of the Node.js builtin modules The list is just a [JSON file](builtin-modules.json) and can be used wherever. ## Install ``` $ npm install --save builtin-modules ``` ## Usage ```js var builtinModules = require('builtin-modules'); console.log(builinModules); //=> ['assert', 'buffer', ...] ``` ## API Returns an array of builtin modules fetched from the running Node.js version. ### Static list This module also comes bundled with a static array of builtin modules generated from the latest Node.js version. You can get it with `require('builtin-modules/static');` ## Related - [is-builtin-module](https://github.com/sindresorhus/is-builtin-module) - Check if a string matches the name of a Node.js builtin module ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/is-builtin-module/readme.md","tags":[],"body":"# is-builtin-module [![Build Status](https://travis-ci.org/sindresorhus/is-builtin-module.svg?branch=master)](https://travis-ci.org/sindresorhus/is-builtin-module) > Check if a string matches the name of a Node.js builtin module ## Install ``` $ npm install --save is-builtin-module ``` ## Usage ```js var isBuiltinModule = require('is-builtin-module'); isBuiltinModule('fs'); //=> true isBuiltinModule('unicorn'); //=> false :( ``` ## Related - [builtin-modules](https://github.com/sindresorhus/builtin-modules) - List of the Node.js builtin modules ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/validate-npm-package-license/README.md","tags":[],"body":"validate-npm-package-license ============================ Give me a string and I'll tell you if it's a valid npm package license string. ```javascript var valid = require('validate-npm-package-license'); ``` SPDX license identifiers are valid license strings: ```javascript var assert = require('assert'); var validSPDXExpression = { validForNewPackages: true, validForOldPackages: true, spdx: true }; assert.deepEqual(valid('MIT'), validSPDXExpression); assert.deepEqual(valid('BSD-2-Clause'), validSPDXExpression); assert.deepEqual(valid('Apache-2.0'), validSPDXExpression); assert.deepEqual(valid('ISC'), validSPDXExpression); ``` The function will return a warning and suggestion for nearly-correct license identifiers: ```javascript assert.deepEqual( valid('Apache 2.0'), { validForOldPackages: false, validForNewPackages: false, warnings: [ 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN \"', 'license is similar to the valid expression \"Apache-2.0\"' ] } ); ``` SPDX expressions are valid, too ... ```javascript // Simple SPDX license expression for dual licensing assert.deepEqual( valid('(GPL-3.0 OR BSD-2-Clause)'), validSPDXExpression ); ``` ... except if they contain `LicenseRef`: ```javascript var warningAboutLicenseRef = { validForOldPackages: false, validForNewPackages: false, spdx: true, warnings: [ 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN \"', ] }; assert.deepEqual( valid('LicenseRef-Made-Up'), warningAboutLicenseRef ); assert.deepEqual( valid('(MIT OR LicenseRef-Made-Up)'), warningAboutLicenseRef ); ``` If you can't describe your licensing terms with standardized SPDX identifiers, put the terms in a file in the package and point users there: ```javascript assert.deepEqual( valid('SEE LICENSE IN LICENSE.txt'), { validForNewPackages: true, validForOldPackages: true, inFile: 'LICENSE.txt' } ); assert.deepEqual( valid('SEE LICENSE IN license.md'), { validForNewPackages: true, validForOldPackages: true, inFile: 'license.md' } ); ``` If there aren't any licensing terms, use `UNLICENSED`: ```javascript var unlicensed = { validForNewPackages: true, validForOldPackages: true, unlicensed: true }; assert.deepEqual(valid('UNLICENSED'), unlicensed); assert.deepEqual(valid('UNLICENCED'), unlicensed); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-correct/README.md","tags":[],"body":"```javascript var correct = require('spdx-correct'); var assert = require('assert'); assert.equal(correct('mit'), 'MIT') assert.equal(correct('Apache 2'), 'Apache-2.0') assert(correct('No idea what license') === null) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-correct/node_modules/spdx-license-ids/README.md","tags":[],"body":"# spdx-license-ids A list of [SPDX license](https://spdx.org/licenses/) identifiers [**Download JSON**](https://raw.githubusercontent.com/shinnn/spdx-license-ids/master/spdx-license-ids.json) ## Use as a JavaScript Library [![NPM version](https://img.shields.io/npm/v/spdx-license-ids.svg)](https://www.npmjs.org/package/spdx-license-ids) [![Bower version](https://img.shields.io/bower/v/spdx-license-ids.svg)](https://github.com/shinnn/spdx-license-ids/releases) [![Build Status](https://travis-ci.org/shinnn/spdx-license-ids.svg?branch=master)](https://travis-ci.org/shinnn/spdx-license-ids) [![Coverage Status](https://img.shields.io/coveralls/shinnn/spdx-license-ids.svg)](https://coveralls.io/r/shinnn/spdx-license-ids) [![devDependency Status](https://david-dm.org/shinnn/spdx-license-ids/dev-status.svg)](https://david-dm.org/shinnn/spdx-license-ids#info=devDependencies) ### Installation #### Package managers ##### [npm](https://www.npmjs.com/) ```sh npm install spdx-license-ids ``` ##### [bower](http://bower.io/) ```sh bower install spdx-license-ids ``` ##### [Duo](http://duojs.org/) ```javascript const spdxLicenseIds = require('shinnn/spdx-license-ids'); ``` #### Standalone [Download the script file directly.](https://raw.githubusercontent.com/shinnn/spdx-license-ids/master/spdx-license-ids-browser.js) ### API #### spdxLicenseIds Type: `Array` of `String` It returns an array of SPDX license identifiers. ```javascript const spdxLicenseIds = require('spdx-license-ids'); //=> ['Glide', 'Abstyles', 'AFL-1.1', ... ] ``` ## License [The Unlicense](./LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-expression-parse/README.md","tags":[],"body":"```javascript var parse = require('spdx-expression-parse') var assert = require('assert') var firstAST = { left: { license: 'LGPL-2.1' }, conjunction: 'or', right: { left: { license: 'BSD-3-Clause' }, conjunction: 'and', right: { license: 'MIT' } } } assert.deepEqual( parse('(LGPL-2.1 OR BSD-3-Clause AND MIT)'), firstAST) var secondAST = { left: { license: 'MIT' }, conjunction: 'and', right: { left: { license: 'LGPL-2.1', plus: true }, conjunction: 'and', right: { license: 'BSD-3-Clause' } } } assert.deepEqual( parse('(MIT AND (LGPL-2.1+ AND BSD-3-Clause))'), secondAST) // We handle all the bare SPDX license and exception ids as well. require('spdx-license-ids').forEach(function(id) { assert.deepEqual( parse(id), { license: id }) require('spdx-exceptions').forEach(function(e) { assert.deepEqual( parse(id + ' WITH ' + e), { license: id, exception: e }) }) }) ``` --- [The Software Package Data Exchange (SPDX) specification](http://spdx.org) is the work of the [Linux Foundation](http://www.linuxfoundation.org) and its contributors, and is licensed under the terms of [the Creative Commons Attribution License 3.0 Unported (SPDX: \"CC-BY-3.0\")](http://spdx.org/licenses/CC-BY-3.0). \"SPDX\" is a United States federally registered trademark of the Linux Foundation."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-expression-parse/node_modules/spdx-exceptions/README.md","tags":[],"body":"The package exports an array of strings."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-package-data/node_modules/validate-npm-package-license/node_modules/spdx-expression-parse/node_modules/spdx-license-ids/README.md","tags":[],"body":"# spdx-license-ids A list of [SPDX license](https://spdx.org/licenses/) identifiers [**Download JSON**](https://raw.githubusercontent.com/shinnn/spdx-license-ids/master/spdx-license-ids.json) ## Use as a JavaScript Library [![NPM version](https://img.shields.io/npm/v/spdx-license-ids.svg)](https://www.npmjs.org/package/spdx-license-ids) [![Bower version](https://img.shields.io/bower/v/spdx-license-ids.svg)](https://github.com/shinnn/spdx-license-ids/releases) [![Build Status](https://travis-ci.org/shinnn/spdx-license-ids.svg?branch=master)](https://travis-ci.org/shinnn/spdx-license-ids) [![Coverage Status](https://img.shields.io/coveralls/shinnn/spdx-license-ids.svg)](https://coveralls.io/r/shinnn/spdx-license-ids) [![devDependency Status](https://david-dm.org/shinnn/spdx-license-ids/dev-status.svg)](https://david-dm.org/shinnn/spdx-license-ids#info=devDependencies) ### Installation #### Package managers ##### [npm](https://www.npmjs.com/) ```sh npm install spdx-license-ids ``` ##### [bower](http://bower.io/) ```sh bower install spdx-license-ids ``` ##### [Duo](http://duojs.org/) ```javascript const spdxLicenseIds = require('shinnn/spdx-license-ids'); ``` #### Standalone [Download the script file directly.](https://raw.githubusercontent.com/shinnn/spdx-license-ids/master/spdx-license-ids-browser.js) ### API #### spdxLicenseIds Type: `Array` of `String` It returns an array of SPDX license identifiers. ```javascript const spdxLicenseIds = require('spdx-license-ids'); //=> ['Glide', 'Abstyles', 'AFL-1.1', ... ] ``` ## License [The Unlicense](./LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/object-assign/readme.md","tags":[],"body":"# object-assign [![Build Status](https://travis-ci.org/sindresorhus/object-assign.svg?branch=master)](https://travis-ci.org/sindresorhus/object-assign) > ES2015 [`Object.assign()`](http://www.2ality.com/2014/01/object-assign.html) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save object-assign ``` ## Usage ```js const objectAssign = require('object-assign'); objectAssign({foo: 0}, {bar: 1}); //=> {foo: 0, bar: 1} // multiple sources objectAssign({foo: 0}, {bar: 1}, {baz: 2}); //=> {foo: 0, bar: 1, baz: 2} // overwrites equal keys objectAssign({foo: 0}, {foo: 1}, {foo: 2}); //=> {foo: 2} // ignores null and undefined sources objectAssign({foo: 0}, null, {bar: 1}, undefined); //=> {foo: 0, bar: 1} ``` ## API ### objectAssign(target, source, [source, ...]) Assigns enumerable own properties of `source` objects to the `target` object and returns the `target` object. Additional `source` objects will overwrite previous ones. ## Resources - [ES2015 spec - Object.assign](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign) ## Related - [deep-assign](https://github.com/sindresorhus/deep-assign) - Recursive `Object.assign()` ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/find-up/node_modules/path-exists/readme.md","tags":[],"body":"# path-exists [![Build Status](https://travis-ci.org/sindresorhus/path-exists.svg?branch=master)](https://travis-ci.org/sindresorhus/path-exists) > Check if a path exists Because [`fs.exists()`](https://nodejs.org/api/fs.html#fs_fs_exists_path_callback) is being [deprecated](https://github.com/iojs/io.js/issues/103), but there's still a genuine use-case of being able to check if a path exists for other purposes than doing IO with it. Never use this before handling a file though: > In particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions: another process may remove the file between the calls to `fs.exists()` and `fs.open()`. Just open the file and handle the error when it's not there. ## Install ``` $ npm install --save path-exists ``` ## Usage ```js // foo.js var pathExists = require('path-exists'); pathExists('foo.js').then(function (exists) { console.log(exists); //=> true }); ``` ## API ### pathExists(path) Returns a promise that resolves to a boolean of whether the path exists. ### pathExists.sync(path) Returns a boolean of whether the path exists. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/find-up/node_modules/pinkie-promise/node_modules/pinkie/readme.md","tags":[],"body":"> Itty bitty little widdle twinkie pinkie [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation [![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie) [![Coverage Status](https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&service=github)](https://coveralls.io/github/floatdrop/pinkie?branch=master) There are [tons of Promise implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone) out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in Node.js land (it should be browserify-able though). ## Install ``` $ npm install --save pinkie ``` ## Usage ```js var fs = require('fs'); var Promise = require('pinkie'); new Promise(function (resolve, reject) { fs.readFile('foo.json', 'utf8', function (err, data) { if (err) { reject(err); return; } resolve(data); }); }); //=> Promise ``` ### API `pinkie` exports bare [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation and polyfills [Node.js rejection events](https://nodejs.org/api/process.html#process_event_unhandledrejection). In case you forgot: #### new Promise(executor) Returns new instance of `Promise`. ##### executor *Required* Type: `function` Function with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. #### pinkie.all(promises) Returns a promise that resolves when all of the promises in the `promises` Array argument have resolved. #### pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise. #### pinkie.reject(reason) Returns a Promise object that is rejected with the given `reason`. #### pinkie.resolve(value) Returns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`. ## Related - [pinkie-promise](https://github.com/floatdrop/pinkie-promise) - Returns the native Promise or this module ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/find-up/node_modules/pinkie-promise/readme.md","tags":[],"body":"# pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise) > [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) ponyfill Module exports global Promise object (if available) or [`pinkie`](http://github.com/floatdrop/pinkie) Promise polyfill. ## Install ``` $ npm install --save pinkie-promise ``` ## Usage ```js var Promise = require('pinkie-promise'); new Promise(function (resolve) { resolve('unicorns'); }); //=> Promise { 'unicorns' } ``` ## Related - [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/find-up/readme.md","tags":[],"body":"# find-up [![Build Status](https://travis-ci.org/sindresorhus/find-up.svg?branch=master)](https://travis-ci.org/sindresorhus/find-up) > Find a file by walking up parent directories ## Install ``` $ npm install --save find-up ``` ## Usage ``` / └── Users └── sindresorhus ├── unicorn.png └── foo └── bar ├── baz └── example.js ``` ```js // example.js const findUp = require('find-up'); findUp('unicorn.png').then(filepath => { console.log(filepath); //=> '/Users/sindresorhus/unicorn.png' }); ``` ## API ### findUp(filename, [options]) Returns a promise for the filepath or `null`. ### findUp.sync(filename, [options]) Returns a filepath or `null`. #### filename Type: `string` Filename of the file to find. #### options ##### cwd Type: `string` Default: `process.cwd()` Directory to start from. ## Related - [find-up-cli](https://github.com/sindresorhus/find-up-cli) - CLI for this module - [pkg-up](https://github.com/sindresorhus/pkg-up) - Find the closest package.json file - [pkg-dir](https://github.com/sindresorhus/pkg-dir) - Find the root directory of an npm package ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/graceful-fs/README.md","tags":[],"body":"# graceful-fs graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors. ## Improvements over [fs module](http://api.nodejs.org/fs.html) * Queues up `open` and `readdir` calls, and retries them once something closes if there is an EMFILE error from too many file descriptors. * fixes `lchmod` for Node versions prior to 0.6.2. * implements `fs.lutimes` if possible. Otherwise it becomes a noop. * ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or `lchown` if the user isn't root. * makes `lchmod` and `lchown` become noops, if not available. * retries reading a file if `read` results in EAGAIN error. On Windows, it retries renaming a file for up to one second if `EACCESS` or `EPERM` error occurs, likely because antivirus software has locked the directory. ## USAGE ```javascript // use just like fs var fs = require('graceful-fs') // now go and do stuff with it... fs.readFileSync('some-file-or-whatever') ``` ## Global Patching If you want to patch the global fs module (or any other fs-like module) you can do this: ```javascript // Make sure to read the caveat below. var realFs = require('fs') var gracefulFs = require('graceful-fs') gracefulFs.gracefulify(realFs) ``` This should only ever be done at the top-level application layer, in order to delay on EMFILE errors from any fs-using dependencies. You should **not** do this in a library, because it can cause unexpected delays in other parts of the program. ## Changes This module is fairly stable at this point, and used by a lot of things. That being said, because it implements a subtle behavior change in a core part of the node API, even modest changes can be extremely breaking, and the versioning is thus biased towards bumping the major when in doubt. The main change between major versions has been switching between providing a fully-patched `fs` module vs monkey-patching the node core builtin, and the approach by which a non-monkey-patched `fs` was created. The goal is to trade `EMFILE` errors for slower fs operations. So, if you try to open a zillion files, rather than crashing, `open` operations will be queued up and wait for something else to `close`. There are advantages to each approach. Monkey-patching the fs means that no `EMFILE` errors can possibly occur anywhere in your application, because everything is using the same core `fs` module, which is patched. However, it can also obviously cause undesirable side-effects, especially if the module is loaded multiple times. Implementing a separate-but-identical patched `fs` module is more surgical (and doesn't run the risk of patching multiple times), but also imposes the challenge of keeping in sync with the core module. The current approach loads the `fs` module, and then creates a lookalike object that has all the same methods, except a few that are patched. It is safe to use in all versions of Node from 0.8 through 7.0. ### v4 * Do not monkey-patch the fs module. This module may now be used as a drop-in dep, and users can opt into monkey-patching the fs builtin if their app requires it. ### v3 * Monkey-patch fs, because the eval approach no longer works on recent node. * fixed possible type-error throw if rename fails on windows * verify that we *never* get EMFILE errors * Ignore ENOSYS from chmod/chown * clarify that graceful-fs must be used as a drop-in ### v2.1.0 * Use eval rather than monkey-patching fs. * readdir: Always sort the results * win32: requeue a file if error has an OK status ### v2.0 * A return to monkey patching * wrap process.cwd ### v1.1 * wrap readFile * Wrap fs.writeFile. * readdir protection * Don't clobber the fs builtin * Handle fs.read EAGAIN errors by trying again * Expose the curOpen counter * No-op lchown/lchmod if not implemented * fs.rename patch only for win32 * Patch fs.rename to handle AV software on Windows * Close #4 Chown should not fail on einval or eperm if non-root * Fix isaacs/fstream#1 Only wrap fs one time * Fix #3 Start at 1024 max files, then back off on EMFILE * lutimes that doens't blow up on Linux * A full on-rewrite using a queue instead of just swallowing the EMFILE error * Wrap Read/Write streams as well ### 1.0 * Update engines for node 0.6 * Be lstat-graceful on Windows * first"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/parse-json/node_modules/error-ex/README.md","tags":[],"body":"# node-error-ex [![Travis-CI.org Build Status](https://img.shields.io/travis/Qix-/node-error-ex.svg?style=flat-square)](https://travis-ci.org/Qix-/node-error-ex) [![Coveralls.io Coverage Rating](https://img.shields.io/coveralls/Qix-/node-error-ex.svg?style=flat-square)](https://coveralls.io/r/Qix-/node-error-ex) > Easily subclass and customize new Error types ## Examples To include in your project: ```javascript var errorEx = require('error-ex'); ``` To create an error message type with a specific name (note, that `ErrorFn.name` will not reflect this): ```javascript var JSONError = errorEx('JSONError'); var err = new JSONError('error'); err.name; //-> JSONError throw err; //-> JSONError: error ``` To add a stack line: ```javascript var JSONError = errorEx('JSONError', {fileName: errorEx.line('in %s')}); var err = new JSONError('error') err.fileName = '/a/b/c/foo.json'; throw err; //-> (line 2)-> in /a/b/c/foo.json ``` To append to the error message: ```javascript var JSONError = errorEx('JSONError', {fileName: errorEx.append('in %s')}); var err = new JSONError('error'); err.fileName = '/a/b/c/foo.json'; throw err; //-> JSONError: error in /a/b/c/foo.json ``` ## API #### `errorEx([name], [properties])` Creates a new ErrorEx error type - `name`: the name of the new type (appears in the error message upon throw; defaults to `Error.name`) - `properties`: if supplied, used as a key/value dictionary of properties to use when building up the stack message. Keys are property names that are looked up on the error message, and then passed to function values. - `line`: if specified and is a function, return value is added as a stack entry (error-ex will indent for you). Passed the property value given the key. - `stack`: if specified and is a function, passed the value of the property using the key, and the raw stack lines as a second argument. Takes no return value (but the stack can be modified directly). - `message`: if specified and is a function, return value is used as new `.message` value upon get. Passed the property value of the property named by key, and the existing message is passed as the second argument as an array of lines (suitable for multi-line messages). Returns a constructor (Function) that can be used just like the regular Error constructor. ```javascript var errorEx = require('error-ex'); var BasicError = errorEx(); var NamedError = errorEx('NamedError'); // -- var AdvancedError = errorEx('AdvancedError', { foo: { line: function (value, stack) { if (value) { return 'bar ' + value; } return null; } } } var err = new AdvancedError('hello, world'); err.foo = 'baz'; throw err; /* AdvancedError: hello, world bar baz at tryReadme() (readme.js:20:1) */ ``` #### `errorEx.line(str)` Creates a stack line using a delimiter > This is a helper function. It is to be used in lieu of writing a value object > for `properties` values. - `str`: The string to create - Use the delimiter `%s` to specify where in the string the value should go ```javascript var errorEx = require('error-ex'); var FileError = errorEx('FileError', {fileName: errorEx.line('in %s')}); var err = new FileError('problem reading file'); err.fileName = '/a/b/c/d/foo.js'; throw err; /* FileError: problem reading file in /a/b/c/d/foo.js at tryReadme() (readme.js:7:1) */ ``` #### `errorEx.append(str)` Appends to the `error.message` string > This is a helper function. It is to be used in lieu of writing a value object > for `properties` values. - `str`: The string to append - Use the delimiter `%s` to specify where in the string the value should go ```javascript var errorEx = require('error-ex'); var SyntaxError = errorEx('SyntaxError', {fileName: errorEx.append('in %s')}); var err = new SyntaxError('improper indentation'); err.fileName = '/a/b/c/d/foo.js'; throw err; /* SyntaxError: improper indentation in /a/b/c/d/foo.js at tryReadme() (readme.js:7:1) */ ``` ## License Licensed under the [MIT License](http://opensource.org/licenses/MIT). You can find a copy of it in [LICENSE](LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/parse-json/node_modules/error-ex/node_modules/is-arrayish/README.md","tags":[],"body":"# node-is-arrayish [![Travis-CI.org Build Status](https://img.shields.io/travis/Qix-/node-is-arrayish.svg?style=flat-square)](https://travis-ci.org/Qix-/node-is-arrayish) [![Coveralls.io Coverage Rating](https://img.shields.io/coveralls/Qix-/node-is-arrayish.svg?style=flat-square)](https://coveralls.io/r/Qix-/node-is-arrayish) > Determines if an object can be used like an Array ## Example ```javascript var isArrayish = require('is-arrayish'); isArrayish([]); // true isArrayish({__proto__: []}); // true isArrayish({}); // false isArrayish({length:10}); // false ``` ## License Licensed under the [MIT License](http://opensource.org/licenses/MIT). You can find a copy of it in [LICENSE](LICENSE)."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/parse-json/readme.md","tags":[],"body":"# parse-json [![Build Status](https://travis-ci.org/sindresorhus/parse-json.svg?branch=master)](https://travis-ci.org/sindresorhus/parse-json) > Parse JSON with more helpful errors ## Install ``` $ npm install --save parse-json ``` ## Usage ```js var parseJson = require('parse-json'); var json = '{\\n\\t\"foo\": true,\\n}'; JSON.parse(json); /* undefined:3 } ^ SyntaxError: Unexpected token } */ parseJson(json); /* JSONError: Trailing comma in object at 3:1 } ^ */ parseJson(json, 'foo.json'); /* JSONError: Trailing comma in object at 3:1 in foo.json } ^ */ // you can also add the filename at a later point try { parseJson(json); } catch (err) { err.fileName = 'foo.json'; throw err; } /* JSONError: Trailing comma in object at 3:1 in foo.json } ^ */ ``` ## API ### parseJson(input, [reviver], [filename]) #### input Type: `string` #### reviver Type: `function` Prescribes how the value originally produced by parsing is transformed, before being returned. See [`JSON.parse` docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter ) for more. #### filename Type: `string` Filename displayed in the error message. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/pify/readme.md","tags":[],"body":"# pify [![Build Status](https://travis-ci.org/sindresorhus/pify.svg?branch=master)](https://travis-ci.org/sindresorhus/pify) > Promisify a callback-style function ## Install ``` $ npm install --save pify ``` ## Usage ```js const fs = require('fs'); const pify = require('pify'); // promisify a single function pify(fs.readFile)('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); // or promisify all methods in a module pify(fs).readFile('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); ``` ## API ### pify(input, [promiseModule], [options]) Returns a promise wrapped version of the supplied function or module. #### input Type: `function`, `object` Callback-style function or module whose methods you want to promisify. #### promiseModule Type: `function` Custom promise module to use instead of the native one. Check out [`pinkie-promise`](https://github.com/floatdrop/pinkie-promise) if you need a tiny promise polyfill. #### options ##### multiArgs Type: `boolean` Default: `false` By default, the promisified function will only return the second argument from the callback, which works fine for most APIs. This option can be useful for modules like `request` that return multiple arguments. Turning this on will make it return an array of all arguments from the callback, excluding the error argument, instead of just the second argument. ```js const request = require('request'); const pify = require('pify'); pify(request, {multiArgs: true})('https://sindresorhus.com').then(result => { const [httpResponse, body] = result; }); ``` ##### include Type: `array` of (`string`|`regex`) Methods in a module to promisify. Remaining methods will be left untouched. ##### exclude Type: `array` of (`string`|`regex`) Default: `[/.+Sync$/]` Methods in a module **not** to promisify. Methods with names ending with `'Sync'` are excluded by default. ##### excludeMain Type: `boolean` Default: `false` By default, if given module is a function itself, this function will be promisified. Turn this option on if you want to promisify only methods of the module. ```js const pify = require('pify'); function fn() { return true; } fn.method = (data, callback) => { setImmediate(() => { callback(data, null); }); }; // promisify methods but not fn() const promiseFn = pify(fn, {excludeMain: true}); if (promiseFn()) { promiseFn.method('hi').then(data => { console.log(data); }); } ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/pinkie-promise/node_modules/pinkie/readme.md","tags":[],"body":"> Itty bitty little widdle twinkie pinkie [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation [![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie) [![Coverage Status](https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&service=github)](https://coveralls.io/github/floatdrop/pinkie?branch=master) There are [tons of Promise implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone) out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in Node.js land (it should be browserify-able though). ## Install ``` $ npm install --save pinkie ``` ## Usage ```js var fs = require('fs'); var Promise = require('pinkie'); new Promise(function (resolve, reject) { fs.readFile('foo.json', 'utf8', function (err, data) { if (err) { reject(err); return; } resolve(data); }); }); //=> Promise ``` ### API `pinkie` exports bare [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation and polyfills [Node.js rejection events](https://nodejs.org/api/process.html#process_event_unhandledrejection). In case you forgot: #### new Promise(executor) Returns new instance of `Promise`. ##### executor *Required* Type: `function` Function with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. #### pinkie.all(promises) Returns a promise that resolves when all of the promises in the `promises` Array argument have resolved. #### pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise. #### pinkie.reject(reason) Returns a Promise object that is rejected with the given `reason`. #### pinkie.resolve(value) Returns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`. ## Related - [pinkie-promise](https://github.com/floatdrop/pinkie-promise) - Returns the native Promise or this module ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/pinkie-promise/readme.md","tags":[],"body":"# pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise) > [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) ponyfill Module exports global Promise object (if available) or [`pinkie`](http://github.com/floatdrop/pinkie) Promise polyfill. ## Install ``` $ npm install --save pinkie-promise ``` ## Usage ```js var Promise = require('pinkie-promise'); new Promise(function (resolve) { resolve('unicorns'); }); //=> Promise { 'unicorns' } ``` ## Related - [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/strip-bom/node_modules/is-utf8/README.md","tags":[],"body":"#utf8 detector Detect if a Buffer is utf8 encoded. It need The minimum amount of bytes is 4. ```javascript var fs = require('fs'); var isUtf8 = require('is-utf8'); var ansi = fs.readFileSync('ansi.txt'); var utf8 = fs.readFileSync('utf8.txt'); console.log('ansi.txt is utf8: '+isUtf8(ansi)); //false console.log('utf8.txt is utf8: '+isUtf8(utf8)); //true ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/strip-bom/readme.md","tags":[],"body":"# strip-bom [![Build Status](https://travis-ci.org/sindresorhus/strip-bom.svg?branch=master)](https://travis-ci.org/sindresorhus/strip-bom) > Strip UTF-8 [byte order mark](http://en.wikipedia.org/wiki/Byte_order_mark#UTF-8) (BOM) from a string/buffer From Wikipedia: > The Unicode Standard permits the BOM in UTF-8, but does not require nor recommend its use. Byte order has no meaning in UTF-8. ## Install ``` $ npm install --save strip-bom ``` ## Usage ```js var fs = require('fs'); var stripBom = require('strip-bom'); stripBom('\\uFEFFunicorn'); //=> 'unicorn' stripBom(fs.readFileSync('unicorn.txt')); //=> 'unicorn' ``` ## Related - [strip-bom-cli](https://github.com/sindresorhus/strip-bom-cli) - CLI for this module - [strip-bom-stream](https://github.com/sindresorhus/strip-bom-stream) - Stream version of this module ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/readme.md","tags":[],"body":"# load-json-file [![Build Status](https://travis-ci.org/sindresorhus/load-json-file.svg?branch=master)](https://travis-ci.org/sindresorhus/load-json-file) > Read and parse a JSON file [Strips UTF-8 BOM](https://github.com/sindresorhus/strip-bom), uses [`graceful-fs`](https://github.com/isaacs/node-graceful-fs), and throws more [helpful JSON errors](https://github.com/sindresorhus/parse-json). ## Install ``` $ npm install --save load-json-file ``` ## Usage ```js const loadJsonFile = require('load-json-file'); loadJsonFile('foo.json').then(json => { console.log(json); //=> {foo: true} }); ``` ## API ### loadJsonFile(filepath) Returns a promise that resolves to the parsed JSON. ### loadJsonFile.sync(filepath) Returns the parsed JSON. ## Related - [write-json-file](https://github.com/sindresorhus/write-json-file) - Stringify and write JSON to a file atomically ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/node_modules/graceful-fs/README.md","tags":[],"body":"# graceful-fs graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors. ## Improvements over [fs module](http://api.nodejs.org/fs.html) * Queues up `open` and `readdir` calls, and retries them once something closes if there is an EMFILE error from too many file descriptors. * fixes `lchmod` for Node versions prior to 0.6.2. * implements `fs.lutimes` if possible. Otherwise it becomes a noop. * ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or `lchown` if the user isn't root. * makes `lchmod` and `lchown` become noops, if not available. * retries reading a file if `read` results in EAGAIN error. On Windows, it retries renaming a file for up to one second if `EACCESS` or `EPERM` error occurs, likely because antivirus software has locked the directory. ## USAGE ```javascript // use just like fs var fs = require('graceful-fs') // now go and do stuff with it... fs.readFileSync('some-file-or-whatever') ``` ## Global Patching If you want to patch the global fs module (or any other fs-like module) you can do this: ```javascript // Make sure to read the caveat below. var realFs = require('fs') var gracefulFs = require('graceful-fs') gracefulFs.gracefulify(realFs) ``` This should only ever be done at the top-level application layer, in order to delay on EMFILE errors from any fs-using dependencies. You should **not** do this in a library, because it can cause unexpected delays in other parts of the program. ## Changes This module is fairly stable at this point, and used by a lot of things. That being said, because it implements a subtle behavior change in a core part of the node API, even modest changes can be extremely breaking, and the versioning is thus biased towards bumping the major when in doubt. The main change between major versions has been switching between providing a fully-patched `fs` module vs monkey-patching the node core builtin, and the approach by which a non-monkey-patched `fs` was created. The goal is to trade `EMFILE` errors for slower fs operations. So, if you try to open a zillion files, rather than crashing, `open` operations will be queued up and wait for something else to `close`. There are advantages to each approach. Monkey-patching the fs means that no `EMFILE` errors can possibly occur anywhere in your application, because everything is using the same core `fs` module, which is patched. However, it can also obviously cause undesirable side-effects, especially if the module is loaded multiple times. Implementing a separate-but-identical patched `fs` module is more surgical (and doesn't run the risk of patching multiple times), but also imposes the challenge of keeping in sync with the core module. The current approach loads the `fs` module, and then creates a lookalike object that has all the same methods, except a few that are patched. It is safe to use in all versions of Node from 0.8 through 7.0. ### v4 * Do not monkey-patch the fs module. This module may now be used as a drop-in dep, and users can opt into monkey-patching the fs builtin if their app requires it. ### v3 * Monkey-patch fs, because the eval approach no longer works on recent node. * fixed possible type-error throw if rename fails on windows * verify that we *never* get EMFILE errors * Ignore ENOSYS from chmod/chown * clarify that graceful-fs must be used as a drop-in ### v2.1.0 * Use eval rather than monkey-patching fs. * readdir: Always sort the results * win32: requeue a file if error has an OK status ### v2.0 * A return to monkey patching * wrap process.cwd ### v1.1 * wrap readFile * Wrap fs.writeFile. * readdir protection * Don't clobber the fs builtin * Handle fs.read EAGAIN errors by trying again * Expose the curOpen counter * No-op lchown/lchmod if not implemented * fs.rename patch only for win32 * Patch fs.rename to handle AV software on Windows * Close #4 Chown should not fail on einval or eperm if non-root * Fix isaacs/fstream#1 Only wrap fs one time * Fix #3 Start at 1024 max files, then back off on EMFILE * lutimes that doens't blow up on Linux * A full on-rewrite using a queue instead of just swallowing the EMFILE error * Wrap Read/Write streams as well ### 1.0 * Update engines for node 0.6 * Be lstat-graceful on Windows * first"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/node_modules/pify/readme.md","tags":[],"body":"# pify [![Build Status](https://travis-ci.org/sindresorhus/pify.svg?branch=master)](https://travis-ci.org/sindresorhus/pify) > Promisify a callback-style function ## Install ``` $ npm install --save pify ``` ## Usage ```js const fs = require('fs'); const pify = require('pify'); // promisify a single function pify(fs.readFile)('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); // or promisify all methods in a module pify(fs).readFile('package.json', 'utf8').then(data => { console.log(JSON.parse(data).name); //=> 'pify' }); ``` ## API ### pify(input, [promiseModule], [options]) Returns a promise wrapped version of the supplied function or module. #### input Type: `function`, `object` Callback-style function or module whose methods you want to promisify. #### promiseModule Type: `function` Custom promise module to use instead of the native one. Check out [`pinkie-promise`](https://github.com/floatdrop/pinkie-promise) if you need a tiny promise polyfill. #### options ##### multiArgs Type: `boolean` Default: `false` By default, the promisified function will only return the second argument from the callback, which works fine for most APIs. This option can be useful for modules like `request` that return multiple arguments. Turning this on will make it return an array of all arguments from the callback, excluding the error argument, instead of just the second argument. ```js const request = require('request'); const pify = require('pify'); pify(request, {multiArgs: true})('https://sindresorhus.com').then(result => { const [httpResponse, body] = result; }); ``` ##### include Type: `array` of (`string`|`regex`) Methods in a module to promisify. Remaining methods will be left untouched. ##### exclude Type: `array` of (`string`|`regex`) Default: `[/.+Sync$/]` Methods in a module **not** to promisify. Methods with names ending with `'Sync'` are excluded by default. ##### excludeMain Type: `boolean` Default: `false` By default, if given module is a function itself, this function will be promisified. Turn this option on if you want to promisify only methods of the module. ```js const pify = require('pify'); function fn() { return true; } fn.method = (data, callback) => { setImmediate(() => { callback(data, null); }); }; // promisify methods but not fn() const promiseFn = pify(fn, {excludeMain: true}); if (promiseFn()) { promiseFn.method('hi').then(data => { console.log(data); }); } ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/node_modules/pinkie-promise/node_modules/pinkie/readme.md","tags":[],"body":"> Itty bitty little widdle twinkie pinkie [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation [![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie) [![Coverage Status](https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&service=github)](https://coveralls.io/github/floatdrop/pinkie?branch=master) There are [tons of Promise implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone) out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in Node.js land (it should be browserify-able though). ## Install ``` $ npm install --save pinkie ``` ## Usage ```js var fs = require('fs'); var Promise = require('pinkie'); new Promise(function (resolve, reject) { fs.readFile('foo.json', 'utf8', function (err, data) { if (err) { reject(err); return; } resolve(data); }); }); //=> Promise ``` ### API `pinkie` exports bare [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation and polyfills [Node.js rejection events](https://nodejs.org/api/process.html#process_event_unhandledrejection). In case you forgot: #### new Promise(executor) Returns new instance of `Promise`. ##### executor *Required* Type: `function` Function with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. #### pinkie.all(promises) Returns a promise that resolves when all of the promises in the `promises` Array argument have resolved. #### pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise. #### pinkie.reject(reason) Returns a Promise object that is rejected with the given `reason`. #### pinkie.resolve(value) Returns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`. ## Related - [pinkie-promise](https://github.com/floatdrop/pinkie-promise) - Returns the native Promise or this module ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/node_modules/pinkie-promise/readme.md","tags":[],"body":"# pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise) > [ES2015 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) ponyfill Module exports global Promise object (if available) or [`pinkie`](http://github.com/floatdrop/pinkie) Promise polyfill. ## Install ``` $ npm install --save pinkie-promise ``` ## Usage ```js var Promise = require('pinkie-promise'); new Promise(function (resolve) { resolve('unicorns'); }); //=> Promise { 'unicorns' } ``` ## Related - [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function ## License MIT © [Vsevolod Strukchinsky](http://github.com/floatdrop)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/path-type/readme.md","tags":[],"body":"# path-type [![Build Status](https://travis-ci.org/sindresorhus/path-type.svg?branch=master)](https://travis-ci.org/sindresorhus/path-type) > Check if a path is a file, directory, or symlink ## Install ``` $ npm install --save path-type ``` ## Usage ```js var pathType = require('path-type'); pathType.file('package.json').then(function (isFile) { console.log(isFile); //=> true }) ``` ## API ### .file(path) ### .dir(path) ### .symlink(path) Returns a promise that resolves to a boolean of whether the path is the checked type. ### .fileSync(path) ### .dirSync(path) ### .symlinkSync(path) Returns a boolean of whether the path is the checked type. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/node_modules/read-pkg/readme.md","tags":[],"body":"# read-pkg [![Build Status](https://travis-ci.org/sindresorhus/read-pkg.svg?branch=master)](https://travis-ci.org/sindresorhus/read-pkg) > Read a package.json file ## Why - [Gracefully handles filesystem issues](https://github.com/isaacs/node-graceful-fs) - [Strips UTF-8 BOM](https://github.com/sindresorhus/strip-bom) - [Throws more helpful JSON errors](https://github.com/sindresorhus/parse-json) - [Normalizes the data](https://github.com/npm/normalize-package-data#what-normalization-currently-entails) ## Install ``` $ npm install --save read-pkg ``` ## Usage ```js var readPkg = require('read-pkg'); readPkg().then(function (pkg) { console.log(pkg); //=> {name: 'read-pkg', ...} }); readPkg(__dirname).then(function (pkg) { console.log(pkg); //=> {name: 'read-pkg', ...} }); readPkg(path.join('unicorn', 'package.json')).then(function (pkg) { console.log(pkg); //=> {name: 'read-pkg', ...} }); ``` ## API ### readPkg([path], [options]) Returns a promise that resolves to the parsed JSON. ### readPkg.sync([path], [options]) Returns the parsed JSON. #### path Type: `string` Default: `.` Path to a `package.json` file or its directory. #### options ##### normalize Type: `boolean` Default: `true` [Normalize](https://github.com/npm/normalize-package-data#what-normalization-currently-entails) the package data. ## Related - [read-pkg-up](https://github.com/sindresorhus/read-pkg-up) - Read the closest package.json file - [write-pkg](https://github.com/sindresorhus/write-pkg) - Write a `package.json` file - [load-json-file](https://github.com/sindresorhus/load-json-file) - Read and parse a JSON file ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/read-pkg-up/readme.md","tags":[],"body":"# read-pkg-up [![Build Status](https://travis-ci.org/sindresorhus/read-pkg-up.svg?branch=master)](https://travis-ci.org/sindresorhus/read-pkg-up) > Read the closest package.json file ## Why - [Finds the closest package.json](https://github.com/sindresorhus/find-up) - [Gracefully handles filesystem issues](https://github.com/isaacs/node-graceful-fs) - [Strips UTF-8 BOM](https://github.com/sindresorhus/strip-bom) - [Throws more helpful JSON errors](https://github.com/sindresorhus/parse-json) - [Normalizes the data](https://github.com/npm/normalize-package-data#what-normalization-currently-entails) ## Install ``` $ npm install --save read-pkg-up ``` ## Usage ```js var readPkgUp = require('read-pkg-up'); readPkgUp().then(function (result) { console.log(result); /* { pkg: { name: 'awesome-package', version: '1.0.0', ... }, path: '/Users/sindresorhus/dev/awesome-package' } */ }); ``` ## API ### readPkgUp([options]) Returns a promise that resolves to a result object. ### readPkgUp.sync([options]) Returns a result object. #### options ##### cwd Type: `string` Default: `.` Directory to start looking for a package.json file. ##### normalize Type: `boolean` Default: `true` [Normalize](https://github.com/npm/normalize-package-data#what-normalization-currently-entails) the package data. ## Related - [read-pkg](https://github.com/sindresorhus/read-pkg) - Read a package.json file - [find-up](https://github.com/sindresorhus/find-up) - Find a file by walking up parent directories - [pkg-conf](https://github.com/sindresorhus/pkg-conf) - Get namespaced config from the closest package.json ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/redent/node_modules/indent-string/node_modules/repeating/node_modules/is-finite/node_modules/number-is-nan/readme.md","tags":[],"body":"# number-is-nan [![Build Status](https://travis-ci.org/sindresorhus/number-is-nan.svg?branch=master)](https://travis-ci.org/sindresorhus/number-is-nan) > ES6 [`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save number-is-nan ``` ## Usage ```js var numberIsNan = require('number-is-nan'); numberIsNan(NaN); //=> true numberIsNan('unicorn'); //=> false ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/redent/node_modules/indent-string/node_modules/repeating/node_modules/is-finite/readme.md","tags":[],"body":"# is-finite [![Build Status](https://travis-ci.org/sindresorhus/is-finite.svg?branch=master)](https://travis-ci.org/sindresorhus/is-finite) > ES6 [`Number.isFinite()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ```sh $ npm install --save is-finite ``` ## Usage ```js var numIsFinite = require('is-finite'); numIsFinite(4); //=> true numIsFinite(Infinity); //=> false ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/redent/node_modules/indent-string/node_modules/repeating/readme.md","tags":[],"body":"# repeating [![Build Status](https://travis-ci.org/sindresorhus/repeating.svg?branch=master)](https://travis-ci.org/sindresorhus/repeating) > Repeat a string - fast ## Install ``` $ npm install --save repeating ``` ## Usage ```js const repeating = require('repeating'); repeating('unicorn ', 100); //=> 'unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn unicorn ' ``` ## Related - [repeating-cli](https://github.com/sindresorhus/repeating-cli) - CLI for this module ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/redent/node_modules/indent-string/readme.md","tags":[],"body":"# indent-string [![Build Status](https://travis-ci.org/sindresorhus/indent-string.svg?branch=master)](https://travis-ci.org/sindresorhus/indent-string) > Indent each line in a string ## Install ``` $ npm install --save indent-string ``` ## Usage ```js var indentString = require('indent-string'); indentString('Unicorns\\nRainbows', '♥', 4); //=> ♥♥♥♥Unicorns //=> ♥♥♥♥Rainbows ``` ## API ### indentString(string, indent, count) #### string **Required** Type: `string` The string you want to indent. #### indent **Required** Type: `string` The string to use for the indent. #### count Type: `number` Default: `1` How many times you want `indent` repeated. ## Related - [indent-string-cli](https://github.com/sindresorhus/indent-string-cli) - CLI for this module - [strip-indent](https://github.com/sindresorhus/strip-indent) - Strip leading whitespace from every line in a string ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/redent/node_modules/strip-indent/readme.md","tags":[],"body":"# strip-indent [![Build Status](https://travis-ci.org/sindresorhus/strip-indent.svg?branch=master)](https://travis-ci.org/sindresorhus/strip-indent) > Strip leading whitespace from every line in a string The line with the least number of leading whitespace, ignoring empty lines, determines the number to remove. Useful for removing redundant indentation. ## Install ```sh $ npm install --save strip-indent ``` ## Usage ```js var str = '\\tunicorn\\n\\t\\tcake'; /* unicorn cake */ stripIndent('\\tunicorn\\n\\t\\tcake'); /* unicorn cake */ ``` ## CLI ```sh $ npm install --global strip-indent ``` ```sh $ strip-indent --help Usage strip-indent echo | strip-indent Example echo '\\tunicorn\\n\\t\\tcake' | strip-indent unicorn cake ``` ## Related - [indent-string](https://github.com/sindresorhus/indent-string) - Indent each line in a string ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/redent/readme.md","tags":[],"body":"# redent [![Build Status](https://travis-ci.org/sindresorhus/redent.svg?branch=master)](https://travis-ci.org/sindresorhus/redent) > [Strip redundant indentation](https://github.com/sindresorhus/strip-indent) and [indent the string](https://github.com/sindresorhus/indent-string) ## Install ``` $ npm install --save redent ``` ## Usage ```js const redent = require('redent'); redent('\\n foo\\n bar\\n', 1); //=> '\\n foo\\n bar\\n' ``` ## API ### redent(input, [count], [indent]) #### input Type: `string` #### count Type: `number` Default: `0` How many times you want `indent` repeated. #### indent Type: `string` Default: `' '` The string to use for the indent. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/trim-newlines/readme.md","tags":[],"body":"# trim-newlines [![Build Status](https://travis-ci.org/sindresorhus/trim-newlines.svg?branch=master)](https://travis-ci.org/sindresorhus/trim-newlines) > Trim [newlines](https://en.wikipedia.org/wiki/Newline) from the start and/or end of a string ## Install ``` $ npm install --save trim-newlines ``` ## Usage ```js var trimNewlines = require('trim-newlines'); trimNewlines('\\nunicorn\\r\\n'); //=> 'unicorn' ``` ## API ### trimNewlines(input) Trim from the start and end of a string. ### trimNewlines.start(input) Trim from the start of a string. ### trimNewlines.end(input) Trim from the end of a string. ## Related - [trim-left](https://github.com/sindresorhus/trim-left) - Similar to `String#trim()` but removes only whitespace on the left - [trim-right](https://github.com/sindresorhus/trim-right) - Similar to `String#trim()` but removes only whitespace on the right. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/readme.md","tags":[],"body":"# meow [![Build Status](https://travis-ci.org/sindresorhus/meow.svg?branch=master)](https://travis-ci.org/sindresorhus/meow) > CLI app helper ![](meow.gif) ## Features - Parses arguments using [minimist](https://github.com/substack/minimist) - Converts flags to [camelCase](https://github.com/sindresorhus/camelcase) - Outputs version when `--version` - Outputs description and supplied help text when `--help` - Makes unhandled rejected promises [fail loudly](https://github.com/sindresorhus/loud-rejection) instead of the default silent fail - Sets the process title to the binary name defined in package.json ## Install ``` $ npm install --save meow ``` ## Usage ``` $ ./foo-app.js unicorns --rainbow-cake ``` ```js #!/usr/bin/env node 'use strict'; const meow = require('meow'); const foo = require('./'); const cli = meow(` Usage $ foo Options -r, --rainbow Include a rainbow Examples $ foo unicorns --rainbow 🌈 unicorns 🌈 `, { alias: { r: 'rainbow' } }); /* { input: ['unicorns'], flags: {rainbow: true}, ... } */ foo(cli.input[0], cli.flags); ``` ## API ### meow(options, [minimistOptions]) Returns an object with: - `input` *(array)* - Non-flag arguments - `flags` *(object)* - Flags converted to camelCase - `pkg` *(object)* - The `package.json` object - `help` *(object)* - The help text used with `--help` - `showHelp([code=0])` *(function)* - Show the help text and exit with `code` #### options Type: `object`, `array`, `string` Can either be a string/array that is the `help` or an options object. ##### description Type: `string`, `boolean` Default: The package.json `\"description\"` property A description to show above the help text. Set it to `false` to disable it altogether. ##### help Type: `string`, `boolean` The help text you want shown. The input is reindented and starting/ending newlines are trimmed which means you can use a [template literal](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/template_strings) without having to care about using the correct amount of indent. If it's an array each item will be a line. *(Still supported, but you should use a template literal instead.)* The description will be shown above your help text automatically. Set it to `false` to disable it altogether. ##### version Type: `string`, `boolean` Default: The package.json `\"version\"` property Set a custom version output. Set it to `false` to disable it altogether. ##### pkg Type: `string`, `object` Default: Closest package.json upwards Relative path to package.json or as an object. ##### argv Type: `array` Default: `process.argv.slice(2)` Custom arguments object. #### minimistOptions Type: `object` Default: `{}` Minimist [options](https://github.com/substack/minimist#var-argv--parseargsargs-opts). Keys passed to the minimist `default` option are [decamelized](https://github.com/sindresorhus/decamelize), so you can for example pass in `fooBar: 'baz'` and have it be the default for the `--foo-bar` flag. ## Promises Meow will make unhandled rejected promises [fail loudly](https://github.com/sindresorhus/loud-rejection) instead of the default silent fail. Meaning you don't have to manually `.catch()` promises used in your CLI. ## Tips See [`chalk`](https://github.com/chalk/chalk) if you want to colorize the terminal output. See [`get-stdin`](https://github.com/sindresorhus/get-stdin) if you want to accept input from stdin. See [`update-notifier`](https://github.com/yeoman/update-notifier) if you want update notifications. See [`configstore`](https://github.com/yeoman/configstore) if you need to persist some data. [More useful CLI utilities.](https://github.com/sindresorhus/awesome-nodejs#command-line-utilities) ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/fancy-log/README.md","tags":[],"body":"# fancy-log [![Travis Build Status](https://img.shields.io/travis/js-cli/fancy-log.svg?branch=master&label=travis&style=flat-square)](https://travis-ci.org/js-cli/fancy-log) Log things, prefixed with a timestamp __This module was pulled out of gulp-util for use inside the CLI__ ## Usage ```js var log = require('fancy-log'); log('a message'); // [16:27:02] a message log.error('oh no!'); // [16:27:02] oh no! ``` ## API ### `log(msg...)` Logs the message as if you called `console.log` but prefixes the output with the current time in HH:MM:ss format. ### `log.error(msg...)` Logs ths message as if you called `console.error` but prefixes the output with the current time in HH:MM:ss format. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/fancy-log/node_modules/time-stamp/README.md","tags":[],"body":"# time-stamp [![NPM version](https://img.shields.io/npm/v/time-stamp.svg?style=flat)](https://www.npmjs.com/package/time-stamp) [![NPM downloads](https://img.shields.io/npm/dm/time-stamp.svg?style=flat)](https://npmjs.org/package/time-stamp) [![Build Status](https://img.shields.io/travis/jonschlinkert/time-stamp.svg?style=flat)](https://travis-ci.org/jonschlinkert/time-stamp) > Get a formatted timestamp. ## Install Install with [npm](https://www.npmjs.com/): ```sh $ npm install time-stamp --save ``` ## Usage ```js var timestamp = require('time-stamp'); timestamp(); //=> '2015:04:01' timestamp('YYYY:MM:DD'); //=> '2015:04:01' timestamp('[YYYY:MM:DD]'); //=> '[2015:04:01]' timestamp('YYYY/MM/DD'); //=> '2015/04/01' timestamp('YYYY:MM'); //=> '2015:04' timestamp('YYYY'); //=> '2015' timestamp('MM'); //=> '04' timestamp('DD'); //=> '01' timestamp('HH'); //=> '01' timestamp('mm'); //=> '59' timestamp('ss'); //=> '09' timestamp('ms'); //=> '783' ``` **Valid patterns** * `YYYY`: full year (ex: **2015**) * `MM`: month (ex: **04**) * `DD`: day (ex: **01**) * `HH`: hours (ex: **12**) * `mm`: minutes (ex: **59**) * `ss`: seconds (ex: **09**) * `ms`: milliseconds (ex: **532**) ## Related projects You might also be interested in these projects: * [days](https://www.npmjs.com/package/days): Days of the week. | [homepage](https://github.com/jonschlinkert/days) * [iso-week](https://www.npmjs.com/package/iso-week): Get the ISO week of the year. | [homepage](https://github.com/jonschlinkert/iso-week) * [month](https://www.npmjs.com/package/month): Get the name or number of the current month or any month of the year. | [homepage](https://github.com/datetime/month) * [months](https://www.npmjs.com/package/months): Months of the year. | [homepage](https://github.com/jonschlinkert/months) * [o-clock](https://www.npmjs.com/package/o-clock): Simple utility for displaying the time in 12-hour clock format. | [homepage](https://github.com/jonschlinkert/o-clock) * [seconds](https://www.npmjs.com/package/seconds): Get the number of seconds for a minute, hour, day and week. | [homepage](https://github.com/jonschlinkert/seconds) * [week](https://www.npmjs.com/package/week): Get the current week number. | [homepage](https://github.com/jonschlinkert/week) * [weekday](https://www.npmjs.com/package/weekday): Get the name and number of the current weekday. Or get the name of the… [more](https://www.npmjs.com/package/weekday) | [homepage](https://github.com/jonschlinkert/weekday) * [year](https://www.npmjs.com/package/year): Simple utility to get the current year with 2 or 4 digits. | [homepage](https://github.com/jonschlinkert/year) ## Contributing Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/time-stamp/issues/new). ## Building docs Generate readme and API documentation with [verb](https://github.com/verbose/verb): ```sh $ npm install verb && npm run docs ``` Or, if [verb](https://github.com/verbose/verb) is installed globally: ```sh $ verb ``` ## Running tests Install dev dependencies: ```sh $ npm install -d && npm test ``` ## Author **Jon Schlinkert** Follow me on GitHub or Twitter for updates about time-stamp and my other libraries: * [github/jonschlinkert](https://github.com/jonschlinkert) * [twitter/jonschlinkert](http://twitter.com/jonschlinkert) ## License Copyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert). Released under the [MIT license](https://github.com/jonschlinkert/time-stamp/blob/master/LICENSE). *** _This file was generated by [verb](https://github.com/verbose/verb), v, on April 07, 2016._"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/gulplog/CHANGELOG.md","tags":[],"body":"# gulplog changelog ## 1.0.0 - Initial release - No implementation changed since initial commit ## 0.0.0 - Experimentation"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/gulplog/README.md","tags":[],"body":"# gulplog [![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Gitter chat][gitter-image]][gitter-url] Logger for gulp and gulp plugins ## Usage ```js var logger = require('gulplog'); // logs strings logger.debug('The MOST verbose!'); logger.info('Some important info'); logger.warn('All the warnings to you'); logger.error('OH NO! SOMETHING HAPPENED!'); // supports util.format! logger.info('%s style!', 'printf'); // log anything logger.debug({ my: 'obj' }); logger.info([1, 2, 3]); ``` ## API Logging (and level of logging) is controlled by [`gulp-cli`][gulp-cli-url] #### logger.debug(msg) Highest log level. Typically used for debugging purposes. If the first argument is a string, all arguments are passed to node's [`util.format()`][util-format-url] before being emitted. #### logger.info(msg) Standard log level. Typically used for user information. If the first argument is a string, all arguments are passed to node's [`util.format()`][util-format-url] before being emitted. #### logger.warn(msg) Warning log level. Typically used for warnings. If the first argument is a string, all arguments are passed to node's [`util.format()`][util-format-url] before being emitted. #### logger.error(msg) Error log level. Typically used when things went horribly wrong. If the first argument is a string, all arguments are passed to node's [`util.format()`][util-format-url] before being emitted. ## License MIT [downloads-image]: http://img.shields.io/npm/dm/gulplog.svg [npm-url]: https://npmjs.org/package/gulplog [npm-image]: http://img.shields.io/npm/v/gulplog.svg [travis-url]: https://travis-ci.org/gulpjs/gulplog [travis-image]: http://img.shields.io/travis/gulpjs/gulplog.svg [gitter-url]: https://gitter.im/gulpjs/gulp [gitter-image]: https://badges.gitter.im/gulpjs/gulp.png [gulp-cli-url]: https://github.com/gulpjs/gulp-cli [util-format-url]: https://nodejs.org/docs/latest/api/util.html#util_util_format_format"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/gulplog/node_modules/glogg/README.md","tags":[],"body":"# glogg [![Travis Build Status](https://img.shields.io/travis/undertakerjs/glogg/master.svg?label=travis&style=flat-square)](https://travis-ci.org/undertakerjs/glogg) Global logging utility ## Usage ```js var getLogger = require('glogg'); var logger = getLogger('my-namespace'); // logs strings logger.debug('The MOST verbose!'); logger.info('Some important info'); logger.warn('All the warnings to you'); logger.error('OH NO! SOMETHING HAPPENED!'); // supports util.format! logger.info('%s style!', 'printf'); // log anything logger.debug({ my: 'obj' }); logger.info([1, 2, 3]); // somewhere else logger.on('info', function(msg){ // do something with msg }); // must be handled to avoid crashing process logger.on('error', function(msg){ // now it won't crash }); ``` ## API __Note: This module makes no assumptions about the log levels and they will always be emitted. If you are looking to filter some out, your listeners will need to have extra logic.__ ### getLogger([namespace]) Create a new logger at the given namespace (or the default if no namespace is provided). Returns an augmented [`sparkles`](https://github.com/phated/sparkles) EventEmitter object with 4 methods: `debug()`, `info()`, `warn()` and `error()`. When called, these methods emit an event with the same name. If the first argument is a string, the arguments are passed through node's `util.format()` before being emitted. Other parts of a node program can get the logger by namespace and listen for the events to be emitted. #### logger.debug(msg) Emits a `debug` event with the given `msg`. If the first argument is a string, all arguments are passed to node's `util.format()` before being emitted. #### logger.info(msg) Emits a `info` event with the given `msg`. If the first argument is a string, all arguments are passed to node's `util.format()` before being emitted. #### logger.warn(msg) Emits a `warn` event with the given `msg`. If the first argument is a string, all arguments are passed to node's `util.format()` before being emitted. #### logger.error(msg) Emits a `error` event with the given `msg`. If the first argument is a string, all arguments are passed to node's `util.format()` before being emitted. __Note: You must handle this event in some way or the node process will crash when an `error` event is emitted.__ #### logger.on(event, fn) Standard API from node's `EventEmitter`. Use this to listen for events from the logger methods. ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/gulplog/node_modules/glogg/node_modules/sparkles/README.md","tags":[],"body":"sparkles ======== [![Build Status](https://travis-ci.org/phated/sparkles.svg?branch=master)](https://travis-ci.org/phated/sparkles) Namespaced global event emitter ## Usage Sparkles exports a function that returns a singleton `EventEmitter`. This EE can be shared across your application, whether or not node loads multiple copies. ```js var sparkles = require('sparkles')(); // make sure to call the function sparkles.on('my-event', function(evt){ console.log('my-event handled', evt); }); sparkles.emit('my-event', { my: 'event' }); ``` ## API ### sparkles(namespace) Returns an EventEmitter that is shared amongst the provided namespace. If no namespace is provided, returns a default EventEmitter. ### sparkles.exists(namespace); Checks whether a namespace exists and returns true or false. ## Why the name? This is a \"global emitter\"; shortened: \"glitter\" but it was already taken; so we got sparkles instead :smile: ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/has-gulplog/README.md","tags":[],"body":"# has-gulplog Check if gulplog is available before attempting to use it"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/has-gulplog/node_modules/sparkles/README.md","tags":[],"body":"sparkles ======== [![Build Status](https://travis-ci.org/phated/sparkles.svg?branch=master)](https://travis-ci.org/phated/sparkles) Namespaced global event emitter ## Usage Sparkles exports a function that returns a singleton `EventEmitter`. This EE can be shared across your application, whether or not node loads multiple copies. ```js var sparkles = require('sparkles')(); // make sure to call the function sparkles.on('my-event', function(evt){ console.log('my-event handled', evt); }); sparkles.emit('my-event', { my: 'event' }); ``` ## API ### sparkles(namespace) Returns an EventEmitter that is shared amongst the provided namespace. If no namespace is provided, returns a default EventEmitter. ### sparkles.exists(namespace); Checks whether a namespace exists and returns true or false. ## Why the name? This is a \"global emitter\"; shortened: \"glitter\" but it was already taken; so we got sparkles instead :smile: ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash._reescape/README.md","tags":[],"body":"# lodash._reescape v3.0.0 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `reEscape` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._reescape ``` In Node.js/io.js: ```js var reEscape = require('lodash._reescape'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.0-npm-packages/lodash._reescape) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash._reevaluate/README.md","tags":[],"body":"# lodash._reevaluate v3.0.0 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `reEvaluate` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._reevaluate ``` In Node.js/io.js: ```js var reEvaluate = require('lodash._reevaluate'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.0-npm-packages/lodash._reevaluate) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash._reinterpolate/README.md","tags":[],"body":"# lodash._reinterpolate v3.0.0 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `reInterpolate` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._reinterpolate ``` In Node.js/io.js: ```js var reInterpolate = require('lodash._reinterpolate'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.0-npm-packages/lodash._reinterpolate) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/README.md","tags":[],"body":"# lodash.template v3.6.2 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) `_.template` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.template ``` In Node.js/io.js: ```js var template = require('lodash.template'); ``` See the [documentation](https://lodash.com/docs#template) or [package source](https://github.com/lodash/lodash/blob/3.6.2-npm-packages/lodash.template) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash._basecopy/README.md","tags":[],"body":"# lodash._basecopy v3.0.1 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `baseCopy` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._basecopy ``` In Node.js/io.js: ```js var baseCopy = require('lodash._basecopy'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.1-npm-packages/lodash._basecopy) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash._basetostring/README.md","tags":[],"body":"# lodash._basetostring v3.0.1 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `baseToString` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._basetostring ``` In Node.js/io.js: ```js var baseToString = require('lodash._basetostring'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.1-npm-packages/lodash._basetostring) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash._basevalues/README.md","tags":[],"body":"# lodash._basevalues v3.0.0 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `baseValues` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._basevalues ``` In Node.js/io.js: ```js var baseValues = require('lodash._basevalues'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.0-npm-packages/lodash._basevalues) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash._isiterateecall/README.md","tags":[],"body":"# lodash._isiterateecall v3.0.9 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `isIterateeCall` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._isiterateecall ``` In Node.js/io.js: ```js var isIterateeCall = require('lodash._isiterateecall'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.9-npm-packages/lodash._isiterateecall) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.escape/README.md","tags":[],"body":"# lodash.escape v3.2.0 The [lodash](https://lodash.com/) method `_.escape` exported as a [Node.js](https://nodejs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.escape ``` In Node.js: ```js var escape = require('lodash.escape'); ``` See the [documentation](https://lodash.com/docs#escape) or [package source](https://github.com/lodash/lodash/blob/3.2.0-npm-packages/lodash.escape) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.escape/node_modules/lodash._root/README.md","tags":[],"body":"# lodash._root v3.0.1 The internal [lodash](https://lodash.com/) function `root` exported as a [Node.js](https://nodejs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._root ``` In Node.js: ```js var root = require('lodash._root'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.0.1-npm-packages/lodash._root) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.keys/README.md","tags":[],"body":"# lodash.keys v3.1.2 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) `_.keys` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.keys ``` In Node.js/io.js: ```js var keys = require('lodash.keys'); ``` See the [documentation](https://lodash.com/docs#keys) or [package source](https://github.com/lodash/lodash/blob/3.1.2-npm-packages/lodash.keys) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.keys/node_modules/lodash._getnative/README.md","tags":[],"body":"# lodash._getnative v3.9.1 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) internal `getNative` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash._getnative ``` In Node.js/io.js: ```js var getNative = require('lodash._getnative'); ``` See the [package source](https://github.com/lodash/lodash/blob/3.9.1-npm-packages/lodash._getnative) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.keys/node_modules/lodash.isarguments/README.md","tags":[],"body":"# lodash.isarguments v3.0.8 The [lodash](https://lodash.com/) method `_.isArguments` exported as a [Node.js](https://nodejs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.isarguments ``` In Node.js: ```js var isArguments = require('lodash.isarguments'); ``` See the [documentation](https://lodash.com/docs#isArguments) or [package source](https://github.com/lodash/lodash/blob/3.0.8-npm-packages/lodash.isarguments) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.keys/node_modules/lodash.isarray/README.md","tags":[],"body":"# lodash.isarray v3.0.4 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) `_.isArray` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.isarray ``` In Node.js/io.js: ```js var isArray = require('lodash.isarray'); ``` See the [documentation](https://lodash.com/docs#isArray) or [package source](https://github.com/lodash/lodash/blob/3.0.4-npm-packages/lodash.isarray) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.restparam/README.md","tags":[],"body":"# lodash.restparam v3.6.1 The [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash’s](https://lodash.com/) `_.restParam` exported as a [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.restparam ``` In Node.js/io.js: ```js var restParam = require('lodash.restparam'); ``` See the [documentation](https://lodash.com/docs#restParam) or [package source](https://github.com/lodash/lodash/blob/3.6.1-npm-packages/lodash.restparam) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/lodash.template/node_modules/lodash.templatesettings/README.md","tags":[],"body":"# lodash.templatesettings v3.1.1 The [lodash](https://lodash.com/) method `_.templateSettings` exported as a [Node.js](https://nodejs.org/) module. ## Installation Using npm: ```bash $ {sudo -H} npm i -g npm $ npm i --save lodash.templatesettings ``` In Node.js: ```js var templateSettings = require('lodash.templatesettings'); ``` See the [documentation](https://lodash.com/docs#templateSettings) or [package source](https://github.com/lodash/lodash/blob/3.1.1-npm-packages/lodash.templatesettings) for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/multipipe/History.md","tags":[],"body":"0.1.1 / 2014-06-01 ================== * update duplexer2 dep 0.1.0 / 2014-05-24 ================== * add optional callback 0.0.2 / 2014-02-20 ================== * fix infinite loop 0.0.1 / 2014-01-15 ================== * fix error bubbling 0.0.0 / 2014-01-13 ================== * initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/multipipe/Readme.md","tags":[],"body":"# multipipe A better `Stream#pipe` that creates duplex streams and lets you handle errors in one place. [![build status](https://secure.travis-ci.org/segmentio/multipipe.png)](http://travis-ci.org/segmentio/multipipe) ## Example ```js var pipe = require('multipipe'); // pipe streams var stream = pipe(streamA, streamB, streamC); // centralized error handling stream.on('error', fn); // creates a new stream source.pipe(stream).pipe(dest); // optional callback on finish or error pipe(streamA, streamB, streamC, function(err){ // ... }); ``` ## Duplex streams Write to the pipe and you'll really write to the first stream, read from the pipe and you'll read from the last stream. ```js var stream = pipe(a, b, c); source .pipe(stream) .pipe(destination); ``` In this example the flow of data is: * source -> * a -> * b -> * c -> * destination ## Error handling Each `pipe` forwards the errors the streams it wraps emit, so you have one central place to handle errors: ```js var stream = pipe(a, b, c); stream.on('error', function(err){ // called three times }); a.emit('error', new Error); b.emit('error', new Error); c.emit('error', new Error); ``` ## API ### pipe(stream, ...) Pass a variable number of streams and each will be piped to the next one. A stream will be returned that wraps passed in streams in a way that errors will be forwarded and you can write to and/or read from it. Pass a function as last argument to be called on `error` or `finish` of the last stream. ## Installation ```bash $ npm install multipipe ``` ## License The MIT License (MIT) Copyright (c) 2014 Segment.io Inc. Copyright (c) 2014 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/LICENSE.md","tags":[],"body":"Copyright (c) 2013, Deoxxa Development ====================================== All rights reserved. -------------------- Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of Deoxxa Development nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY DEOXXA DEVELOPMENT ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL DEOXXA DEVELOPMENT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/README.md","tags":[],"body":"duplexer2 [![build status](https://travis-ci.org/deoxxa/duplexer2.png)](https://travis-ci.org/deoxxa/fork) ========= Like duplexer (http://npm.im/duplexer) but using streams2. Overview -------- duplexer2 is a reimplementation of [duplexer](http://npm.im/duplexer) using the readable-stream API which is standard in node as of v0.10. Everything largely works the same. Installation ------------ Available via [npm](http://npmjs.org/): > $ npm install duplexer2 Or via git: > $ git clone git://github.com/deoxxa/duplexer2.git node_modules/duplexer2 API --- **duplexer2** Creates a new `DuplexWrapper` object, which is the actual class that implements most of the fun stuff. All that fun stuff is hidden. DON'T LOOK. ```javascript duplexer2([options], writable, readable) ``` ```javascript var duplex = duplexer2(new stream.Writable(), new stream.Readable()); ``` Arguments * __options__ - an object specifying the regular `stream.Duplex` options, as well as the properties described below. * __writable__ - a writable stream * __readable__ - a readable stream Options * __bubbleErrors__ - a boolean value that specifies whether to bubble errors from the underlying readable/writable streams. Default is `true`. Example ------- Also see [example.js](https://github.com/deoxxa/duplexer2/blob/master/example.js). Code: ```javascript var stream = require(\"stream\"); var duplexer2 = require(\"duplexer2\"); var writable = new stream.Writable({objectMode: true}), readable = new stream.Readable({objectMode: true}); writable._write = function _write(input, encoding, done) { if (readable.push(input)) { return done(); } else { readable.once(\"drain\", done); } }; readable._read = function _read(n) { // no-op }; // simulate the readable thing closing after a bit writable.once(\"finish\", function() { setTimeout(function() { readable.push(null); }, 500); }); var duplex = duplexer2(writable, readable); duplex.on(\"data\", function(e) { console.log(\"got data\", JSON.stringify(e)); }); duplex.on(\"finish\", function() { console.log(\"got finish event\"); }); duplex.on(\"end\", function() { console.log(\"got end event\"); }); duplex.write(\"oh, hi there\", function() { console.log(\"finished writing\"); }); duplex.end(function() { console.log(\"finished ending\"); }); ``` Output: ``` got data \"oh, hi there\" finished writing got finish event finished ending got end event ``` License ------- 3-clause BSD. A copy is included with the source. Contact ------- * GitHub ([deoxxa](http://github.com/deoxxa)) * Twitter ([@deoxxa](http://twitter.com/deoxxa)) * Email ([deoxxa@fknsrs.biz](mailto:deoxxa@fknsrs.biz))"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/node_modules/readable-stream/README.md","tags":[],"body":"# readable-stream ***Node-core streams for userland*** [![NPM](https://nodei.co/npm/readable-stream.png?downloads=true&downloadRank=true)](https://nodei.co/npm/readable-stream/) [![NPM](https://nodei.co/npm-dl/readable-stream.png&months=6&height=3)](https://nodei.co/npm/readable-stream/) This package is a mirror of the Streams2 and Streams3 implementations in Node-core. If you want to guarantee a stable streams base, regardless of what version of Node you, or the users of your libraries are using, use **readable-stream** *only* and avoid the *\"stream\"* module in Node-core. **readable-stream** comes in two major versions, v1.0.x and v1.1.x. The former tracks the Streams2 implementation in Node 0.10, including bug-fixes and minor improvements as they are added. The latter tracks Streams3 as it develops in Node 0.11; we will likely see a v1.2.x branch for Node 0.12. **readable-stream** uses proper patch-level versioning so if you pin to `\"~1.0.0\"` you’ll get the latest Node 0.10 Streams2 implementation, including any fixes and minor non-breaking improvements. The patch-level versions of 1.0.x and 1.1.x should mirror the patch-level versions of Node-core releases. You should prefer the **1.0.x** releases for now and when you’re ready to start using Streams3, pin to `\"~1.1.0\"`"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/node_modules/readable-stream/node_modules/core-util-is/README.md","tags":[],"body":"# core-util-is The `util.is*` functions introduced in Node v0.12."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/node_modules/readable-stream/node_modules/inherits/README.md","tags":[],"body":"Browser-friendly inheritance fully compatible with standard node.js [inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor). This package exports standard `inherits` from node.js `util` module in node environment, but also provides alternative browser-friendly implementation through [browser field](https://gist.github.com/shtylman/4339901). Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of `util`. It also has a shim for old browsers with no `Object.create` support. While keeping you sure you are using standard `inherits` implementation in node.js environment, it allows bundlers such as [browserify](https://github.com/substack/node-browserify) to not include full `util` package to your client code if all you need is just `inherits` function. It worth, because browser shim for `util` package is large and `inherits` is often the single function you need from it. It's recommended to use this package instead of `require('util').inherits` for any code that has chances to be used not only in node.js but in browser too. ## usage ```js var inherits = require('inherits'); // then use exactly as the standard one ``` ## note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js `inherits`. If you are using version ~1.0 and planning to switch to ~2.0, be careful: * new version uses `super_` instead of `super` for referencing superclass * new version overwrites current prototype while old one preserves any existing fields on it"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/node_modules/readable-stream/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/multipipe/node_modules/duplexer2/node_modules/readable-stream/node_modules/string_decoder/README.md","tags":[],"body":"**string_decoder.js** (`require('string_decoder')`) from Node.js core Copyright Joyent, Inc. and other Node contributors. See LICENCE file for details. Version numbers match the versions found in Node core, e.g. 0.10.24 matches Node 0.10.24, likewise 0.11.10 matches Node 0.11.10. **Prefer the stable version over the unstable.** The *build/* directory contains a build script that will scrape the source from the [joyent/node](https://github.com/joyent/node) repo given a specific Node version."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/object-assign/readme.md","tags":[],"body":"# object-assign [![Build Status](https://travis-ci.org/sindresorhus/object-assign.svg?branch=master)](https://travis-ci.org/sindresorhus/object-assign) > ES6 [`Object.assign()`](http://www.2ality.com/2014/01/object-assign.html) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ```sh $ npm install --save object-assign ``` ## Usage ```js var objectAssign = require('object-assign'); objectAssign({foo: 0}, {bar: 1}); //=> {foo: 0, bar: 1} // multiple sources objectAssign({foo: 0}, {bar: 1}, {baz: 2}); //=> {foo: 0, bar: 1, baz: 2} // overwrites equal keys objectAssign({foo: 0}, {foo: 1}, {foo: 2}); //=> {foo: 2} // ignores null and undefined sources objectAssign({foo: 0}, null, {bar: 1}, undefined); //=> {foo: 0, bar: 1} ``` ## API ### objectAssign(target, source, [source, ...]) Assigns enumerable own properties of `source` objects to the `target` object and returns the `target` object. Additional `source` objects will overwrite previous ones. ## Resources - [ES6 spec - Object.assign](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign) ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/replace-ext/README.md","tags":[],"body":"# replace-ext [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status][david-image]][david-url] ## Information Packagereplace-ext Description Replaces a file extension with another one Node Version >= 0.4 ## Usage ```javascript var replaceExt = require('replace-ext'); var path = '/some/dir/file.js'; var npath = replaceExt(path, '.coffee'); console.log(npath); // /some/dir/file.coffee ``` [npm-url]: https://npmjs.org/package/replace-ext [npm-image]: https://badge.fury.io/js/replace-ext.png [travis-url]: https://travis-ci.org/wearefractal/replace-ext [travis-image]: https://travis-ci.org/wearefractal/replace-ext.png?branch=master [coveralls-url]: https://coveralls.io/r/wearefractal/replace-ext [coveralls-image]: https://coveralls.io/repos/wearefractal/replace-ext/badge.png [depstat-url]: https://david-dm.org/wearefractal/replace-ext [depstat-image]: https://david-dm.org/wearefractal/replace-ext.png [david-url]: https://david-dm.org/wearefractal/replace-ext [david-image]: https://david-dm.org/wearefractal/replace-ext.png?theme=shields.io"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/README.md","tags":[],"body":"# through2 [![NPM](https://nodei.co/npm/through2.png?downloads&downloadRank)](https://nodei.co/npm/through2/) **A tiny wrapper around Node streams.Transform (Streams2) to avoid explicit subclassing noise** Inspired by [Dominic Tarr](https://github.com/dominictarr)'s [through](https://github.com/dominictarr/through) in that it's so much easier to make a stream out of a function than it is to set up the prototype chain properly: `through(function (chunk) { ... })`. Note: As 2.x.x this module starts using **Streams3** instead of Stream2. To continue using a Streams2 version use `npm install through2@0` to fetch the latest version of 0.x.x. More information about Streams2 vs Streams3 and recommendations see the article **[Why I don't use Node's core 'stream' module](http://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html)**. ```js fs.createReadStream('ex.txt') .pipe(through2(function (chunk, enc, callback) { for (var i = 0; i through2([ options, ] [ transformFunction ] [, flushFunction ]) Consult the **[stream.Transform](http://nodejs.org/docs/latest/api/stream.html#stream_class_stream_transform)** documentation for the exact rules of the `transformFunction` (i.e. `this._transform`) and the optional `flushFunction` (i.e. `this._flush`). ### options The options argument is optional and is passed straight through to `stream.Transform`. So you can use `objectMode:true` if you are processing non-binary streams (or just use `through2.obj()`). The `options` argument is first, unlike standard convention, because if I'm passing in an anonymous function then I'd prefer for the options argument to not get lost at the end of the call: ```js fs.createReadStream('/tmp/important.dat') .pipe(through2({ objectMode: true, allowHalfOpen: false }, function (chunk, enc, cb) { cb(null, 'wut?') // note we can use the second argument on the callback // to provide data as an alternative to this.push('wut?') } ) .pipe(fs.createWriteStream('/tmp/wut.txt')) ``` ### transformFunction The `transformFunction` must have the following signature: `function (chunk, encoding, callback) {}`. A minimal implementation should call the `callback` function to indicate that the transformation is done, even if that transformation means discarding the chunk. To queue a new chunk, call `this.push(chunk)`—this can be called as many times as required before the `callback()` if you have multiple pieces to send on. Alternatively, you may use `callback(err, chunk)` as shorthand for emitting a single chunk or an error. If you **do not provide a `transformFunction`** then you will get a simple pass-through stream. ### flushFunction The optional `flushFunction` is provided as the last argument (2nd or 3rd, depending on whether you've supplied options) is called just prior to the stream ending. Can be used to finish up any processing that may be in progress. ```js fs.createReadStream('/tmp/important.dat') .pipe(through2( function (chunk, enc, cb) { cb(null, chunk) }, // transform is a noop function (cb) { // flush function this.push('tacking on an extra buffer to the end'); cb(); } )) .pipe(fs.createWriteStream('/tmp/wut.txt')); ``` through2.ctor([ options, ] transformFunction[, flushFunction ]) Instead of returning a `stream.Transform` instance, `through2.ctor()` returns a **constructor** for a custom Transform. This is useful when you want to use the same transform logic in multiple instances. ```js var FToC = through2.ctor({objectMode: true}, function (record, encoding, callback) { if (record.temp != null && record.unit == \"F\") { record.temp = ( ( record.temp - 32 ) * 5 ) / 9 record.unit = \"C\" } this.push(record) callback() }) // Create instances of FToC like so: var converter = new FToC() // Or: var converter = FToC() // Or specify/override options when you instantiate, if you prefer: var converter = FToC({objectMode: true}) ``` ## See Also - [through2-map](https://github.com/brycebaril/through2-map) - Array.prototype.map analog for streams. - [through2-filter](https://github.com/brycebaril/through2-filter) - Array.prototype.filter analog for streams. - [through2-reduce](https://github.com/brycebaril/through2-reduce) - Array.prototype.reduce analog for streams. - [through2-spy](https://github.com/brycebaril/through2-spy) - Wrapper for simple stream.PassThrough spies. - the [mississippi stream utility collection](https://github.com/maxogden/mississippi) includes `through2` as well as many more useful stream modules similar to this one ## License **through2** is Copyright (c) 2013 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licensed under the MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/node_modules/readable-stream/README.md","tags":[],"body":"# readable-stream ***Node-core v5.8.0 streams for userland*** [![Build Status](https://travis-ci.org/nodejs/readable-stream.svg?branch=master)](https://travis-ci.org/nodejs/readable-stream) [![NPM](https://nodei.co/npm/readable-stream.png?downloads=true&downloadRank=true)](https://nodei.co/npm/readable-stream/) [![NPM](https://nodei.co/npm-dl/readable-stream.png?&months=6&height=3)](https://nodei.co/npm/readable-stream/) [![Sauce Test Status](https://saucelabs.com/browser-matrix/readable-stream.svg)](https://saucelabs.com/u/readable-stream) ```bash npm install --save readable-stream ``` ***Node-core streams for userland*** This package is a mirror of the Streams2 and Streams3 implementations in Node-core, including [documentation](doc/stream.markdown). If you want to guarantee a stable streams base, regardless of what version of Node you, or the users of your libraries are using, use **readable-stream** *only* and avoid the *\"stream\"* module in Node-core, for background see [this blogpost](http://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html). As of version 2.0.0 **readable-stream** uses semantic versioning. # Streams WG Team Members * **Chris Dickinson** ([@chrisdickinson](https://github.com/chrisdickinson)) - Release GPG key: 9554F04D7259F04124DE6B476D5A82AC7E37093B * **Calvin Metcalf** ([@calvinmetcalf](https://github.com/calvinmetcalf)) - Release GPG key: F3EF5F62A87FC27A22E643F714CE4FF5015AA242 * **Rod Vagg** ([@rvagg](https://github.com/rvagg)) - Release GPG key: DD8F2338BAE7501E3DD5AC78C273792F7D83545D * **Sam Newman** ([@sonewman](https://github.com/sonewman)) * **Mathias Buus** ([@mafintosh](https://github.com/mafintosh)) * **Domenic Denicola** ([@domenic](https://github.com/domenic))"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/node_modules/readable-stream/doc/stream.markdown","tags":[],"body":"# Stream Stability: 2 - Stable A stream is an abstract interface implemented by various objects in Node.js. For example a [request to an HTTP server][http-incoming-message] is a stream, as is [`process.stdout`][]. Streams are readable, writable, or both. All streams are instances of [`EventEmitter`][]. You can load the Stream base classes by doing `require('stream')`. There are base classes provided for [Readable][] streams, [Writable][] streams, [Duplex][] streams, and [Transform][] streams. This document is split up into 3 sections: 1. The first section explains the parts of the API that you need to be aware of to use streams in your programs. 2. The second section explains the parts of the API that you need to use if you implement your own custom streams yourself. The API is designed to make this easy for you to do. 3. The third section goes into more depth about how streams work, including some of the internal mechanisms and functions that you should probably not modify unless you definitely know what you are doing. ## API for Stream Consumers Streams can be either [Readable][], [Writable][], or both ([Duplex][]). All streams are EventEmitters, but they also have other custom methods and properties depending on whether they are Readable, Writable, or Duplex. If a stream is both Readable and Writable, then it implements all of the methods and events. So, a [Duplex][] or [Transform][] stream is fully described by this API, though their implementation may be somewhat different. It is not necessary to implement Stream interfaces in order to consume streams in your programs. If you **are** implementing streaming interfaces in your own program, please also refer to [API for Stream Implementors][]. Almost all Node.js programs, no matter how simple, use Streams in some way. Here is an example of using Streams in an Node.js program: ```js const http = require('http'); var server = http.createServer( (req, res) => { // req is an http.IncomingMessage, which is a Readable Stream // res is an http.ServerResponse, which is a Writable Stream var body = ''; // we want to get the data as utf8 strings // If you don't set an encoding, then you'll get Buffer objects req.setEncoding('utf8'); // Readable streams emit 'data' events once a listener is added req.on('data', (chunk) => { body += chunk; }); // the end event tells you that you have entire body req.on('end', () => { try { var data = JSON.parse(body); } catch (er) { // uh oh! bad json! res.statusCode = 400; return res.end(`error: ${er.message}`); } // write back something interesting to the user: res.write(typeof data); res.end(); }); }); server.listen(1337); // $ curl localhost:1337 -d '{}' // object // $ curl localhost:1337 -d '\"foo\"' // string // $ curl localhost:1337 -d 'not json' // error: Unexpected token o ``` ### Class: stream.Duplex Duplex streams are streams that implement both the [Readable][] and [Writable][] interfaces. Examples of Duplex streams include: * [TCP sockets][] * [zlib streams][zlib] * [crypto streams][crypto] ### Class: stream.Readable The Readable stream interface is the abstraction for a *source* of data that you are reading from. In other words, data comes *out* of a Readable stream. A Readable stream will not start emitting data until you indicate that you are ready to receive it. Readable streams have two \"modes\": a **flowing mode** and a **paused mode**. When in flowing mode, data is read from the underlying system and provided to your program as fast as possible. In paused mode, you must explicitly call [`stream.read()`][stream-read] to get chunks of data out. Streams start out in paused mode. **Note**: If no data event handlers are attached, and there are no [`stream.pipe()`][] destinations, and the stream is switched into flowing mode, then data will be lost. You can switch to flowing mode by doing any of the following: * Adding a [`'data'`][] event handler to listen for data. * Calling the [`stream.resume()`][stream-resume] method to explicitly open the flow. * Calling the [`stream.pipe()`][] method to send the data to a [Writable][]. You can switch back to paused mode by doing either of the following: * If there are no pipe destinations, by calling the [`stream.pause()`][stream-pause] method. * If there are pipe destinations, by removing any [`'data'`][] event handlers, and removing all pipe destinations by calling the [`stream.unpipe()`][] method. Note that, for backwards compatibility reasons, removing [`'data'`][] event handlers will **not** automatically pause the stream. Also, if there are piped destinations, then calling [`stream.pause()`][stream-pause] will not guarantee that the stream will *remain* paused once those destinations drain and ask for more data. Examples of readable streams include: * [HTTP responses, on the client][http-incoming-message] * [HTTP requests, on the server][http-incoming-message] * [fs read streams][] * [zlib streams][zlib] * [crypto streams][crypto] * [TCP sockets][] * [child process stdout and stderr][] * [`process.stdin`][] #### Event: 'close' Emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed. The event indicates that no more events will be emitted, and no further computation will occur. Not all streams will emit the `'close'` event. #### Event: 'data' * `chunk` {Buffer|String} The chunk of data. Attaching a `'data'` event listener to a stream that has not been explicitly paused will switch the stream into flowing mode. Data will then be passed as soon as it is available. If you just want to get all the data out of the stream as fast as possible, this is the best way to do so. ```js var readable = getReadableStreamSomehow(); readable.on('data', (chunk) => { console.log('got %d bytes of data', chunk.length); }); ``` #### Event: 'end' This event fires when there will be no more data to read. Note that the `'end'` event **will not fire** unless the data is completely consumed. This can be done by switching into flowing mode, or by calling [`stream.read()`][stream-read] repeatedly until you get to the end. ```js var readable = getReadableStreamSomehow(); readable.on('data', (chunk) => { console.log('got %d bytes of data', chunk.length); }); readable.on('end', () => { console.log('there will be no more data.'); }); ``` #### Event: 'error' * {Error Object} Emitted if there was an error receiving data. #### Event: 'readable' When a chunk of data can be read from the stream, it will emit a `'readable'` event. In some cases, listening for a `'readable'` event will cause some data to be read into the internal buffer from the underlying system, if it hadn't already. ```javascript var readable = getReadableStreamSomehow(); readable.on('readable', () => { // there is some data to read now }); ``` Once the internal buffer is drained, a `'readable'` event will fire again when more data is available. The `'readable'` event is not emitted in the \"flowing\" mode with the sole exception of the last one, on end-of-stream. The `'readable'` event indicates that the stream has new information: either new data is available or the end of the stream has been reached. In the former case, [`stream.read()`][stream-read] will return that data. In the latter case, [`stream.read()`][stream-read] will return null. For instance, in the following example, `foo.txt` is an empty file: ```js const fs = require('fs'); var rr = fs.createReadStream('foo.txt'); rr.on('readable', () => { console.log('readable:', rr.read()); }); rr.on('end', () => { console.log('end'); }); ``` The output of running this script is: ``` $ node test.js readable: null end ``` #### readable.isPaused() * Return: {Boolean} This method returns whether or not the `readable` has been **explicitly** paused by client code (using [`stream.pause()`][stream-pause] without a corresponding [`stream.resume()`][stream-resume]). ```js var readable = new stream.Readable readable.isPaused() // === false readable.pause() readable.isPaused() // === true readable.resume() readable.isPaused() // === false ``` #### readable.pause() * Return: `this` This method will cause a stream in flowing mode to stop emitting [`'data'`][] events, switching out of flowing mode. Any data that becomes available will remain in the internal buffer. ```js var readable = getReadableStreamSomehow(); readable.on('data', (chunk) => { console.log('got %d bytes of data', chunk.length); readable.pause(); console.log('there will be no more data for 1 second'); setTimeout(() => { console.log('now data will start flowing again'); readable.resume(); }, 1000); }); ``` #### readable.pipe(destination[, options]) * `destination` {stream.Writable} The destination for writing data * `options` {Object} Pipe options * `end` {Boolean} End the writer when the reader ends. Default = `true` This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream. Multiple destinations can be piped to safely. ```js var readable = getReadableStreamSomehow(); var writable = fs.createWriteStream('file.txt'); // All the data from readable goes into 'file.txt' readable.pipe(writable); ``` This function returns the destination stream, so you can set up pipe chains like so: ```js var r = fs.createReadStream('file.txt'); var z = zlib.createGzip(); var w = fs.createWriteStream('file.txt.gz'); r.pipe(z).pipe(w); ``` For example, emulating the Unix `cat` command: ```js process.stdin.pipe(process.stdout); ``` By default [`stream.end()`][stream-end] is called on the destination when the source stream emits [`'end'`][], so that `destination` is no longer writable. Pass `{ end: false }` as `options` to keep the destination stream open. This keeps `writer` open so that \"Goodbye\" can be written at the end. ```js reader.pipe(writer, { end: false }); reader.on('end', () => { writer.end('Goodbye\\n'); }); ``` Note that [`process.stderr`][] and [`process.stdout`][] are never closed until the process exits, regardless of the specified options. #### readable.read([size]) * `size` {Number} Optional argument to specify how much data to read. * Return {String|Buffer|Null} The `read()` method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return `null`. If you pass in a `size` argument, then it will return that many bytes. If `size` bytes are not available, then it will return `null`, unless we've ended, in which case it will return the data remaining in the buffer. If you do not specify a `size` argument, then it will return all the data in the internal buffer. This method should only be called in paused mode. In flowing mode, this method is called automatically until the internal buffer is drained. ```js var readable = getReadableStreamSomehow(); readable.on('readable', () => { var chunk; while (null !== (chunk = readable.read())) { console.log('got %d bytes of data', chunk.length); } }); ``` If this method returns a data chunk, then it will also trigger the emission of a [`'data'`][] event. Note that calling [`stream.read([size])`][stream-read] after the [`'end'`][] event has been triggered will return `null`. No runtime error will be raised. #### readable.resume() * Return: `this` This method will cause the readable stream to resume emitting [`'data'`][] events. This method will switch the stream into flowing mode. If you do *not* want to consume the data from a stream, but you *do* want to get to its [`'end'`][] event, you can call [`stream.resume()`][stream-resume] to open the flow of data. ```js var readable = getReadableStreamSomehow(); readable.resume(); readable.on('end', () => { console.log('got to the end, but did not read anything'); }); ``` #### readable.setEncoding(encoding) * `encoding` {String} The encoding to use. * Return: `this` Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects. For example, if you do `readable.setEncoding('utf8')`, then the output data will be interpreted as UTF-8 data, and returned as strings. If you do `readable.setEncoding('hex')`, then the data will be encoded in hexadecimal string format. This properly handles multi-byte characters that would otherwise be potentially mangled if you simply pulled the Buffers directly and called [`buf.toString(encoding)`][] on them. If you want to read the data as strings, always use this method. Also you can disable any encoding at all with `readable.setEncoding(null)`. This approach is very useful if you deal with binary data or with large multi-byte strings spread out over multiple chunks. ```js var readable = getReadableStreamSomehow(); readable.setEncoding('utf8'); readable.on('data', (chunk) => { assert.equal(typeof chunk, 'string'); console.log('got %d characters of string data', chunk.length); }); ``` #### readable.unpipe([destination]) * `destination` {stream.Writable} Optional specific stream to unpipe This method will remove the hooks set up for a previous [`stream.pipe()`][] call. If the destination is not specified, then all pipes are removed. If the destination is specified, but no pipe is set up for it, then this is a no-op. ```js var readable = getReadableStreamSomehow(); var writable = fs.createWriteStream('file.txt'); // All the data from readable goes into 'file.txt', // but only for the first second readable.pipe(writable); setTimeout(() => { console.log('stop writing to file.txt'); readable.unpipe(writable); console.log('manually close the file stream'); writable.end(); }, 1000); ``` #### readable.unshift(chunk) * `chunk` {Buffer|String} Chunk of data to unshift onto the read queue This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party. Note that `stream.unshift(chunk)` cannot be called after the [`'end'`][] event has been triggered; a runtime error will be raised. If you find that you must often call `stream.unshift(chunk)` in your programs, consider implementing a [Transform][] stream instead. (See [API for Stream Implementors][].) ```js // Pull off a header delimited by \\n\\n // use unshift() if we get too much // Call the callback with (error, header, stream) const StringDecoder = require('string_decoder').StringDecoder; function parseHeader(stream, callback) { stream.on('error', callback); stream.on('readable', onReadable); var decoder = new StringDecoder('utf8'); var header = ''; function onReadable() { var chunk; while (null !== (chunk = stream.read())) { var str = decoder.write(chunk); if (str.match(/\\n\\n/)) { // found the header boundary var split = str.split(/\\n\\n/); header += split.shift(); var remaining = split.join('\\n\\n'); var buf = new Buffer(remaining, 'utf8'); if (buf.length) stream.unshift(buf); stream.removeListener('error', callback); stream.removeListener('readable', onReadable); // now the body of the message can be read from the stream. callback(null, header, stream); } else { // still reading the header. header += str; } } } } ``` Note that, unlike [`stream.push(chunk)`][stream-push], `stream.unshift(chunk)` will not end the reading process by resetting the internal reading state of the stream. This can cause unexpected results if `unshift()` is called during a read (i.e. from within a [`stream._read()`][stream-_read] implementation on a custom stream). Following the call to `unshift()` with an immediate [`stream.push('')`][stream-push] will reset the reading state appropriately, however it is best to simply avoid calling `unshift()` while in the process of performing a read. #### readable.wrap(stream) * `stream` {Stream} An \"old style\" readable stream Versions of Node.js prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See [Compatibility][] for more information.) If you are using an older Node.js library that emits [`'data'`][] events and has a [`stream.pause()`][stream-pause] method that is advisory only, then you can use the `wrap()` method to create a [Readable][] stream that uses the old stream as its data source. You will very rarely ever need to call this function, but it exists as a convenience for interacting with old Node.js programs and libraries. For example: ```js const OldReader = require('./old-api-module.js').OldReader; const Readable = require('stream').Readable; const oreader = new OldReader; const myReader = new Readable().wrap(oreader); myReader.on('readable', () => { myReader.read(); // etc. }); ``` ### Class: stream.Transform Transform streams are [Duplex][] streams where the output is in some way computed from the input. They implement both the [Readable][] and [Writable][] interfaces. Examples of Transform streams include: * [zlib streams][zlib] * [crypto streams][crypto] ### Class: stream.Writable The Writable stream interface is an abstraction for a *destination* that you are writing data *to*. Examples of writable streams include: * [HTTP requests, on the client][] * [HTTP responses, on the server][] * [fs write streams][] * [zlib streams][zlib] * [crypto streams][crypto] * [TCP sockets][] * [child process stdin][] * [`process.stdout`][], [`process.stderr`][] #### Event: 'drain' If a [`stream.write(chunk)`][stream-write] call returns `false`, then the `'drain'` event will indicate when it is appropriate to begin writing more data to the stream. ```js // Write the data to the supplied writable stream one million times. // Be attentive to back-pressure. function writeOneMillionTimes(writer, data, encoding, callback) { var i = 1000000; write(); function write() { var ok = true; do { i -= 1; if (i === 0) { // last time! writer.write(data, encoding, callback); } else { // see if we should continue, or wait // don't pass the callback, because we're not done yet. ok = writer.write(data, encoding); } } while (i > 0 && ok); if (i > 0) { // had to stop early! // write some more once it drains writer.once('drain', write); } } } ``` #### Event: 'error' * {Error} Emitted if there was an error when writing or piping data. #### Event: 'finish' When the [`stream.end()`][stream-end] method has been called, and all data has been flushed to the underlying system, this event is emitted. ```javascript var writer = getWritableStreamSomehow(); for (var i = 0; i { console.error('all writes are now complete.'); }); ``` #### Event: 'pipe' * `src` {stream.Readable} source stream that is piping to this writable This is emitted whenever the [`stream.pipe()`][] method is called on a readable stream, adding this writable to its set of destinations. ```js var writer = getWritableStreamSomehow(); var reader = getReadableStreamSomehow(); writer.on('pipe', (src) => { console.error('something is piping into the writer'); assert.equal(src, reader); }); reader.pipe(writer); ``` #### Event: 'unpipe' * `src` {[Readable][] Stream} The source stream that [unpiped][`stream.unpipe()`] this writable This is emitted whenever the [`stream.unpipe()`][] method is called on a readable stream, removing this writable from its set of destinations. ```js var writer = getWritableStreamSomehow(); var reader = getReadableStreamSomehow(); writer.on('unpipe', (src) => { console.error('something has stopped piping into the writer'); assert.equal(src, reader); }); reader.pipe(writer); reader.unpipe(writer); ``` #### writable.cork() Forces buffering of all writes. Buffered data will be flushed either at [`stream.uncork()`][] or at [`stream.end()`][stream-end] call. #### writable.end([chunk][, encoding][, callback]) * `chunk` {String|Buffer} Optional data to write * `encoding` {String} The encoding, if `chunk` is a String * `callback` {Function} Optional callback for when the stream is finished Call this method when no more data will be written to the stream. If supplied, the callback is attached as a listener on the [`'finish'`][] event. Calling [`stream.write()`][stream-write] after calling [`stream.end()`][stream-end] will raise an error. ```js // write 'hello, ' and then end with 'world!' var file = fs.createWriteStream('example.txt'); file.write('hello, '); file.end('world!'); // writing more now is not allowed! ``` #### writable.setDefaultEncoding(encoding) * `encoding` {String} The new default encoding Sets the default encoding for a writable stream. #### writable.uncork() Flush all data, buffered since [`stream.cork()`][] call. #### writable.write(chunk[, encoding][, callback]) * `chunk` {String|Buffer} The data to write * `encoding` {String} The encoding, if `chunk` is a String * `callback` {Function} Callback for when this chunk of data is flushed * Returns: {Boolean} `true` if the data was handled completely. This method writes some data to the underlying system, and calls the supplied callback once the data has been fully handled. The return value indicates if you should continue writing right now. If the data had to be buffered internally, then it will return `false`. Otherwise, it will return `true`. This return value is strictly advisory. You MAY continue to write, even if it returns `false`. However, writes will be buffered in memory, so it is best not to do this excessively. Instead, wait for the [`'drain'`][] event before writing more data. ## API for Stream Implementors To implement any sort of stream, the pattern is the same: 1. Extend the appropriate parent class in your own subclass. (The [`util.inherits()`][] method is particularly helpful for this.) 2. Call the appropriate parent class constructor in your constructor, to be sure that the internal mechanisms are set up properly. 3. Implement one or more specific methods, as detailed below. The class to extend and the method(s) to implement depend on the sort of stream class you are writing: Use-case Class Method(s) to implement Reading only [Readable](#stream_class_stream_readable_1) [_read][stream-_read] Writing only [Writable](#stream_class_stream_writable_1) [_write][stream-_write], [_writev][stream-_writev] Reading and writing [Duplex](#stream_class_stream_duplex_1) [_read][stream-_read], [_write][stream-_write], [_writev][stream-_writev] Operate on written data, then read the result [Transform](#stream_class_stream_transform_1) [_transform][stream-_transform], [_flush][stream-_flush] In your implementation code, it is very important to never call the methods described in [API for Stream Consumers][]. Otherwise, you can potentially cause adverse side effects in programs that consume your streaming interfaces. ### Class: stream.Duplex A \"duplex\" stream is one that is both Readable and Writable, such as a TCP socket connection. Note that `stream.Duplex` is an abstract class designed to be extended with an underlying implementation of the [`stream._read(size)`][stream-_read] and [`stream._write(chunk, encoding, callback)`][stream-_write] methods as you would with a Readable or Writable stream class. Since JavaScript doesn't have multiple prototypal inheritance, this class prototypally inherits from Readable, and then parasitically from Writable. It is thus up to the user to implement both the low-level [`stream._read(n)`][stream-_read] method as well as the low-level [`stream._write(chunk, encoding, callback)`][stream-_write] method on extension duplex classes. #### new stream.Duplex(options) * `options` {Object} Passed to both Writable and Readable constructors. Also has the following fields: * `allowHalfOpen` {Boolean} Default = `true`. If set to `false`, then the stream will automatically end the readable side when the writable side ends and vice versa. * `readableObjectMode` {Boolean} Default = `false`. Sets `objectMode` for readable side of the stream. Has no effect if `objectMode` is `true`. * `writableObjectMode` {Boolean} Default = `false`. Sets `objectMode` for writable side of the stream. Has no effect if `objectMode` is `true`. In classes that extend the Duplex class, make sure to call the constructor so that the buffering settings can be properly initialized. ### Class: stream.PassThrough This is a trivial implementation of a [Transform][] stream that simply passes the input bytes across to the output. Its purpose is mainly for examples and testing, but there are occasionally use cases where it can come in handy as a building block for novel sorts of streams. ### Class: stream.Readable `stream.Readable` is an abstract class designed to be extended with an underlying implementation of the [`stream._read(size)`][stream-_read] method. Please see [API for Stream Consumers][] for how to consume streams in your programs. What follows is an explanation of how to implement Readable streams in your programs. #### new stream.Readable([options]) * `options` {Object} * `highWaterMark` {Number} The maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource. Default = `16384` (16kb), or `16` for `objectMode` streams * `encoding` {String} If specified, then buffers will be decoded to strings using the specified encoding. Default = `null` * `objectMode` {Boolean} Whether this stream should behave as a stream of objects. Meaning that [`stream.read(n)`][stream-read] returns a single value instead of a Buffer of size n. Default = `false` * `read` {Function} Implementation for the [`stream._read()`][stream-_read] method. In classes that extend the Readable class, make sure to call the Readable constructor so that the buffering settings can be properly initialized. #### readable.\\_read(size) * `size` {Number} Number of bytes to read asynchronously Note: **Implement this method, but do NOT call it directly.** This method is prefixed with an underscore because it is internal to the class that defines it and should only be called by the internal Readable class methods. All Readable stream implementations must provide a \\_read method to fetch data from the underlying resource. When `_read()` is called, if data is available from the resource, the `_read()` implementation should start pushing that data into the read queue by calling [`this.push(dataChunk)`][stream-push]. `_read()` should continue reading from the resource and pushing data until push returns `false`, at which point it should stop reading from the resource. Only when `_read()` is called again after it has stopped should it start reading more data from the resource and pushing that data onto the queue. Note: once the `_read()` method is called, it will not be called again until the [`stream.push()`][stream-push] method is called. The `size` argument is advisory. Implementations where a \"read\" is a single call that returns data can use this to know how much data to fetch. Implementations where that is not relevant, such as TCP or TLS, may ignore this argument, and simply provide data whenever it becomes available. There is no need, for example to \"wait\" until `size` bytes are available before calling [`stream.push(chunk)`][stream-push]. #### readable.push(chunk[, encoding]) * `chunk` {Buffer|Null|String} Chunk of data to push into the read queue * `encoding` {String} Encoding of String chunks. Must be a valid Buffer encoding, such as `'utf8'` or `'ascii'` * return {Boolean} Whether or not more pushes should be performed Note: **This method should be called by Readable implementors, NOT by consumers of Readable streams.** If a value other than null is passed, The `push()` method adds a chunk of data into the queue for subsequent stream processors to consume. If `null` is passed, it signals the end of the stream (EOF), after which no more data can be written. The data added with `push()` can be pulled out by calling the [`stream.read()`][stream-read] method when the [`'readable'`][] event fires. This API is designed to be as flexible as possible. For example, you may be wrapping a lower-level source which has some sort of pause/resume mechanism, and a data callback. In those cases, you could wrap the low-level source object by doing something like this: ```js // source is an object with readStop() and readStart() methods, // and an `ondata` member that gets called when it has data, and // an `onend` member that gets called when the data is over. util.inherits(SourceWrapper, Readable); function SourceWrapper(options) { Readable.call(this, options); this._source = getLowlevelSourceObject(); // Every time there's data, we push it into the internal buffer. this._source.ondata = (chunk) => { // if push() returns false, then we need to stop reading from source if (!this.push(chunk)) this._source.readStop(); }; // When the source ends, we push the EOF-signaling `null` chunk this._source.onend = () => { this.push(null); }; } // _read will be called when the stream wants to pull more data in // the advisory size argument is ignored in this case. SourceWrapper.prototype._read = function(size) { this._source.readStart(); }; ``` #### Example: A Counting Stream This is a basic example of a Readable stream. It emits the numerals from 1 to 1,000,000 in ascending order, and then ends. ```js const Readable = require('stream').Readable; const util = require('util'); util.inherits(Counter, Readable); function Counter(opt) { Readable.call(this, opt); this._max = 1000000; this._index = 1; } Counter.prototype._read = function() { var i = this._index++; if (i > this._max) this.push(null); else { var str = '' + i; var buf = new Buffer(str, 'ascii'); this.push(buf); } }; ``` #### Example: SimpleProtocol v1 (Sub-optimal) This is similar to the `parseHeader` function described [here](#stream_readable_unshift_chunk), but implemented as a custom stream. Also, note that this implementation does not convert the incoming data to a string. However, this would be better implemented as a [Transform][] stream. See [SimpleProtocol v2][] for a better implementation. ```js // A parser for a simple data protocol. // The \"header\" is a JSON object, followed by 2 \\n characters, and // then a message body. // // NOTE: This can be done more simply as a Transform stream! // Using Readable directly for this is sub-optimal. See the // alternative example below under the Transform section. const Readable = require('stream').Readable; const util = require('util'); util.inherits(SimpleProtocol, Readable); function SimpleProtocol(source, options) { if (!(this instanceof SimpleProtocol)) return new SimpleProtocol(source, options); Readable.call(this, options); this._inBody = false; this._sawFirstCr = false; // source is a readable stream, such as a socket or file this._source = source; var self = this; source.on('end', () => { self.push(null); }); // give it a kick whenever the source is readable // read(0) will not consume any bytes source.on('readable', () => { self.read(0); }); this._rawHeader = []; this.header = null; } SimpleProtocol.prototype._read = function(n) { if (!this._inBody) { var chunk = this._source.read(); // if the source doesn't have data, we don't have data yet. if (chunk === null) return this.push(''); // check if the chunk has a \\n\\n var split = -1; for (var i = 0; i { // we add an 'end' method, but never consume the data socket.on('end', () => { // It will never get here. socket.end('I got your message (but didnt read it)\\n'); }); }).listen(1337); ``` In versions of Node.js prior to v0.10, the incoming message data would be simply discarded. However, in Node.js v0.10 and beyond, the socket will remain paused forever. The workaround in this situation is to call the [`stream.resume()`][stream-resume] method to start the flow of data: ```js // Workaround net.createServer((socket) => { socket.on('end', () => { socket.end('I got your message (but didnt read it)\\n'); }); // start the flow of data, discarding it. socket.resume(); }).listen(1337); ``` In addition to new Readable streams switching into flowing mode, pre-v0.10 style streams can be wrapped in a Readable class using the [`stream.wrap()`][] method. ### Object Mode Normally, Streams operate on Strings and Buffers exclusively. Streams that are in **object mode** can emit generic JavaScript values other than Buffers and Strings. A Readable stream in object mode will always return a single item from a call to [`stream.read(size)`][stream-read], regardless of what the size argument is. A Writable stream in object mode will always ignore the `encoding` argument to [`stream.write(data, encoding)`][stream-write]. The special value `null` still retains its special value for object mode streams. That is, for object mode readable streams, `null` as a return value from [`stream.read()`][stream-read] indicates that there is no more data, and [`stream.push(null)`][stream-push] will signal the end of stream data (`EOF`). No streams in Node.js core are object mode streams. This pattern is only used by userland streaming libraries. You should set `objectMode` in your stream child class constructor on the options object. Setting `objectMode` mid-stream is not safe. For Duplex streams `objectMode` can be set exclusively for readable or writable side with `readableObjectMode` and `writableObjectMode` respectively. These options can be used to implement parsers and serializers with Transform streams. ```js const util = require('util'); const StringDecoder = require('string_decoder').StringDecoder; const Transform = require('stream').Transform; util.inherits(JSONParseStream, Transform); // Gets \\n-delimited JSON string data, and emits the parsed objects function JSONParseStream() { if (!(this instanceof JSONParseStream)) return new JSONParseStream(); Transform.call(this, { readableObjectMode : true }); this._buffer = ''; this._decoder = new StringDecoder('utf8'); } JSONParseStream.prototype._transform = function(chunk, encoding, cb) { this._buffer += this._decoder.write(chunk); // split on newlines var lines = this._buffer.split(/\\r?\\n/); // keep the last partial line buffered this._buffer = lines.pop(); for (var l = 0; l < lines.length; l++) { var line = lines[l]; try { var obj = JSON.parse(line); } catch (er) { this.emit('error', er); return; } // push the parsed object out to the readable consumer this.push(obj); } cb(); }; JSONParseStream.prototype._flush = function(cb) { // Just handle any leftover var rem = this._buffer.trim(); if (rem) { try { var obj = JSON.parse(rem); } catch (er) { this.emit('error', er); return; } // push the parsed object out to the readable consumer this.push(obj); } cb(); }; ``` ### `stream.read(0)` There are some cases where you want to trigger a refresh of the underlying readable stream mechanisms, without actually consuming any data. In that case, you can call `stream.read(0)`, which will always return null. If the internal read buffer is below the `highWaterMark`, and the stream is not currently reading, then calling `stream.read(0)` will trigger a low-level [`stream._read()`][stream-_read] call. There is almost never a need to do this. However, you will see some cases in Node.js's internals where this is done, particularly in the Readable stream class internals. ### `stream.push('')` Pushing a zero-byte string or Buffer (when not in [Object mode][]) has an interesting side effect. Because it *is* a call to [`stream.push()`][stream-push], it will end the `reading` process. However, it does *not* add any data to the readable buffer, so there's nothing for a user to consume. Very rarely, there are cases where you have no data to provide now, but the consumer of your stream (or, perhaps, another bit of your own code) will know when to check again, by calling [`stream.read(0)`][stream-read]. In those cases, you *may* call `stream.push('')`. So far, the only use case for this functionality is in the [`tls.CryptoStream`][] class, which is deprecated in Node.js/io.js v1.0. If you find that you have to use `stream.push('')`, please consider another approach, because it almost certainly indicates that something is horribly wrong. [`'data'`]: #stream_event_data [`'drain'`]: #stream_event_drain [`'end'`]: #stream_event_end [`'finish'`]: #stream_event_finish [`'readable'`]: #stream_event_readable [`buf.toString(encoding)`]: https://nodejs.org/docs/v5.8.0/api/buffer.html#buffer_buf_tostring_encoding_start_end [`EventEmitter`]: https://nodejs.org/docs/v5.8.0/api/events.html#events_class_eventemitter [`process.stderr`]: https://nodejs.org/docs/v5.8.0/api/process.html#process_process_stderr [`process.stdin`]: https://nodejs.org/docs/v5.8.0/api/process.html#process_process_stdin [`process.stdout`]: https://nodejs.org/docs/v5.8.0/api/process.html#process_process_stdout [`stream.cork()`]: #stream_writable_cork [`stream.pipe()`]: #stream_readable_pipe_destination_options [`stream.uncork()`]: #stream_writable_uncork [`stream.unpipe()`]: #stream_readable_unpipe_destination [`stream.wrap()`]: #stream_readable_wrap_stream [`tls.CryptoStream`]: https://nodejs.org/docs/v5.8.0/api/tls.html#tls_class_cryptostream [`util.inherits()`]: https://nodejs.org/docs/v5.8.0/api/util.html#util_util_inherits_constructor_superconstructor [API for Stream Consumers]: #stream_api_for_stream_consumers [API for Stream Implementors]: #stream_api_for_stream_implementors [child process stdin]: https://nodejs.org/docs/v5.8.0/api/child_process.html#child_process_child_stdin [child process stdout and stderr]: https://nodejs.org/docs/v5.8.0/api/child_process.html#child_process_child_stdout [Compatibility]: #stream_compatibility_with_older_node_js_versions [crypto]: crypto.html [Duplex]: #stream_class_stream_duplex [fs read streams]: https://nodejs.org/docs/v5.8.0/api/fs.html#fs_class_fs_readstream [fs write streams]: https://nodejs.org/docs/v5.8.0/api/fs.html#fs_class_fs_writestream [HTTP requests, on the client]: https://nodejs.org/docs/v5.8.0/api/http.html#http_class_http_clientrequest [HTTP responses, on the server]: https://nodejs.org/docs/v5.8.0/api/http.html#http_class_http_serverresponse [http-incoming-message]: https://nodejs.org/docs/v5.8.0/api/http.html#http_class_http_incomingmessage [Object mode]: #stream_object_mode [Readable]: #stream_class_stream_readable [SimpleProtocol v2]: #stream_example_simpleprotocol_parser_v2 [stream-_flush]: #stream_transform_flush_callback [stream-_read]: #stream_readable_read_size_1 [stream-_transform]: #stream_transform_transform_chunk_encoding_callback [stream-_write]: #stream_writable_write_chunk_encoding_callback_1 [stream-_writev]: #stream_writable_writev_chunks_callback [stream-end]: #stream_writable_end_chunk_encoding_callback [stream-pause]: #stream_readable_pause [stream-push]: #stream_readable_push_chunk_encoding [stream-read]: #stream_readable_read_size [stream-resume]: #stream_readable_resume [stream-write]: #stream_writable_write_chunk_encoding_callback [TCP sockets]: https://nodejs.org/docs/v5.8.0/api/net.html#net_class_net_socket [Transform]: #stream_class_stream_transform [Writable]: #stream_class_stream_writable [zlib]: zlib.html"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md","tags":[],"body":"# streams WG Meeting 2015-01-30 ## Links * **Google Hangouts Video**: http://www.youtube.com/watch?v=I9nDOSGfwZg * **GitHub Issue**: https://github.com/iojs/readable-stream/issues/106 * **Original Minutes Google Doc**: https://docs.google.com/document/d/17aTgLnjMXIrfjgNaTUnHQO7m3xgzHR2VXBTmi03Qii4/ ## Agenda Extracted from https://github.com/iojs/readable-stream/labels/wg-agenda prior to meeting. * adopt a charter [#105](https://github.com/iojs/readable-stream/issues/105) * release and versioning strategy [#101](https://github.com/iojs/readable-stream/issues/101) * simpler stream creation [#102](https://github.com/iojs/readable-stream/issues/102) * proposal: deprecate implicit flowing of streams [#99](https://github.com/iojs/readable-stream/issues/99) ## Minutes ### adopt a charter * group: +1's all around ### What versioning scheme should be adopted? * group: +1’s 3.0.0 * domenic+group: pulling in patches from other sources where appropriate * mikeal: version independently, suggesting versions for io.js * mikeal+domenic: work with TC to notify in advance of changes simpler stream creation ### streamline creation of streams * sam: streamline creation of streams * domenic: nice simple solution posted but, we lose the opportunity to change the model may not be backwards incompatible (double check keys) **action item:** domenic will check ### remove implicit flowing of streams on(‘data’) * add isFlowing / isPaused * mikeal: worrying that we’re documenting polyfill methods – confuses users * domenic: more reflective API is probably good, with warning labels for users * new section for mad scientists (reflective stream access) * calvin: name the “third state” * mikeal: maybe borrow the name from whatwg? * domenic: we’re missing the “third state” * consensus: kind of difficult to name the third state * mikeal: figure out differences in states / compat * mathias: always flow on data – eliminates third state * explore what it breaks **action items:** * ask isaac for ability to list packages by what public io.js APIs they use (esp. Stream) * ask rod/build for infrastructure * **chris**: explore the “flow on data” approach * add isPaused/isFlowing * add new docs section * move isPaused to that section"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/node_modules/readable-stream/node_modules/core-util-is/README.md","tags":[],"body":"# core-util-is The `util.is*` functions introduced in Node v0.12."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/node_modules/readable-stream/node_modules/inherits/README.md","tags":[],"body":"Browser-friendly inheritance fully compatible with standard node.js [inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor). This package exports standard `inherits` from node.js `util` module in node environment, but also provides alternative browser-friendly implementation through [browser field](https://gist.github.com/shtylman/4339901). Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of `util`. It also has a shim for old browsers with no `Object.create` support. While keeping you sure you are using standard `inherits` implementation in node.js environment, it allows bundlers such as [browserify](https://github.com/substack/node-browserify) to not include full `util` package to your client code if all you need is just `inherits` function. It worth, because browser shim for `util` package is large and `inherits` is often the single function you need from it. It's recommended to use this package instead of `require('util').inherits` for any code that has chances to be used not only in node.js but in browser too. ## usage ```js var inherits = require('inherits'); // then use exactly as the standard one ``` ## note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js `inherits`. If you are using version ~1.0 and planning to switch to ~2.0, be careful: * new version uses `super_` instead of `super` for referencing superclass * new version overwrites current prototype while old one preserves any existing fields on it"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/node_modules/readable-stream/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. [![build status](https://secure.travis-ci.org/juliangruber/isarray.svg)](http://travis-ci.org/juliangruber/isarray) [![downloads](https://img.shields.io/npm/dm/isarray.svg)](https://www.npmjs.org/package/isarray) [![browser support](https://ci.testling.com/juliangruber/isarray.png) ](https://ci.testling.com/juliangruber/isarray) ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/node_modules/readable-stream/node_modules/process-nextick-args/license.md","tags":[],"body":"# Copyright (c) 2015 Calvin Metcalf Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. **THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/node_modules/readable-stream/node_modules/process-nextick-args/readme.md","tags":[],"body":"process-nextick-args ===== [![Build Status](https://travis-ci.org/calvinmetcalf/process-nextick-args.svg?branch=master)](https://travis-ci.org/calvinmetcalf/process-nextick-args) ```bash npm install --save process-nextick-args ``` Always be able to pass arguments to process.nextTick, no matter the platform ```js var nextTick = require('process-nextick-args'); nextTick(function (a, b, c) { console.log(a, b, c); }, 'step', 3, 'profit'); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/node_modules/readable-stream/node_modules/string_decoder/README.md","tags":[],"body":"**string_decoder.js** (`require('string_decoder')`) from Node.js core Copyright Joyent, Inc. and other Node contributors. See LICENCE file for details. Version numbers match the versions found in Node core, e.g. 0.10.24 matches Node 0.10.24, likewise 0.11.10 matches Node 0.11.10. **Prefer the stable version over the unstable.** The *build/* directory contains a build script that will scrape the source from the [joyent/node](https://github.com/joyent/node) repo given a specific Node version."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/node_modules/readable-stream/node_modules/util-deprecate/History.md","tags":[],"body":"1.0.2 / 2015-10-07 ================== * use try/catch when checking `localStorage` (#3, @kumavis) 1.0.1 / 2014-11-25 ================== * browser: use `console.warn()` for deprecation calls * browser: more jsdocs 1.0.0 / 2014-04-30 ================== * initial commit"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/node_modules/readable-stream/node_modules/util-deprecate/README.md","tags":[],"body":"util-deprecate ============== ### The Node.js `util.deprecate()` function with browser support In Node.js, this module simply re-exports the `util.deprecate()` function. In the web browser (i.e. via browserify), a browser-specific implementation of the `util.deprecate()` function is used. ## API A `deprecate()` function is the only thing exposed by this module. ``` javascript // setup: exports.foo = deprecate(foo, 'foo() is deprecated, use bar() instead'); // users see: foo(); // foo() is deprecated, use bar() instead foo(); foo(); ``` ## License (The MIT License) Copyright (c) 2014 Nathan Rajlich Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/through2/node_modules/xtend/README.md","tags":[],"body":"# xtend [![browser support][3]][4] [![locked](http://badges.github.io/stability-badges/dist/locked.svg)](http://github.com/badges/stability-badges) Extend like a boss xtend is a basic utility library which allows you to extend an object by appending all of the properties from each object in a list. When there are identical properties, the right-most property takes precedence. ## Examples ```js var extend = require(\"xtend\") // extend returns a new object. Does not mutate arguments var combination = extend({ a: \"a\", b: 'c' }, { b: \"b\" }) // { a: \"a\", b: \"b\" } ``` ## Stability status: Locked ## MIT Licenced [3]: http://ci.testling.com/Raynos/xtend.png [4]: http://ci.testling.com/Raynos/xtend"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/vinyl/README.md","tags":[],"body":"# vinyl [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status](https://david-dm.org/wearefractal/vinyl.png?theme=shields.io)](https://david-dm.org/wearefractal/vinyl) ## Information PackagevinylDescriptionA virtual file formatNode Version>= 0.9 ## What is this? Read this for more info about how this plays into the grand scheme of things [https://medium.com/@eschoff/3828e8126466](https://medium.com/@eschoff/3828e8126466) ## File ```javascript var File = require('vinyl'); var coffeeFile = new File({ cwd: \"/\", base: \"/test/\", path: \"/test/file.coffee\", contents: new Buffer(\"test = 123\") }); ``` ### isVinyl When checking if an object is a vinyl file, you should not use instanceof. Use the isVinyl function instead. ```js var File = require('vinyl'); var dummy = new File({stuff}); var notAFile = {}; File.isVinyl(dummy); // true File.isVinyl(notAFile); // false ``` ### constructor(options) #### options.cwd Type: `String`Default: `process.cwd()` #### options.base Used for relative pathing. Typically where a glob starts. Type: `String`Default: `options.cwd` #### options.path Full path to the file. Type: `String`Default: `undefined` #### options.history Path history. Has no effect if `options.path` is passed. Type: `Array`Default: `options.path ? [options.path] : []` #### options.stat The result of an fs.stat call. See [fs.Stats](http://nodejs.org/api/fs.html#fs_class_fs_stats) for more information. Type: `fs.Stats`Default: `null` #### options.contents File contents. Type: `Buffer, Stream, or null`Default: `null` ### isBuffer() Returns true if file.contents is a Buffer. ### isStream() Returns true if file.contents is a Stream. ### isNull() Returns true if file.contents is null. ### clone([opt]) Returns a new File object with all attributes cloned.By default custom attributes are deep-cloned. If opt or opt.deep is false, custom attributes will not be deep-cloned. If opt.contents is false, it will copy file.contents Buffer's reference. ### pipe(stream[, opt]) If file.contents is a Buffer, it will write it to the stream. If file.contents is a Stream, it will pipe it to the stream. If file.contents is null, it will do nothing. If opt.end is false, the destination stream will not be ended (same as node core). Returns the stream. ### inspect() Returns a pretty String interpretation of the File. Useful for console.log. ### contents The [Stream](https://nodejs.org/api/stream.html#stream_stream) or [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer) of the file as it was passed in via options, or as the result of modification. For example: ```js if (file.isBuffer()) { console.log(file.contents.toString()); // logs out the string of contents } ``` ### path Absolute pathname string or `undefined`. Setting to a different value pushes the old value to `history`. ### history Array of `path` values the file object has had, from `history[0]` (original) through `history[history.length - 1]` (current). `history` and its elements should normally be treated as read-only and only altered indirectly by setting `path`. ### relative Returns path.relative for the file base and file path. Example: ```javascript var file = new File({ cwd: \"/\", base: \"/test/\", path: \"/test/file.coffee\" }); console.log(file.relative); // file.coffee ``` ### dirname Gets and sets path.dirname for the file path. Example: ```javascript var file = new File({ cwd: \"/\", base: \"/test/\", path: \"/test/file.coffee\" }); console.log(file.dirname); // /test file.dirname = '/specs'; console.log(file.dirname); // /specs console.log(file.path); // /specs/file.coffee ` ``` ### basename Gets and sets path.basename for the file path. Example: ```javascript var file = new File({ cwd: \"/\", base: \"/test/\", path: \"/test/file.coffee\" }); console.log(file.basename); // file.coffee file.basename = 'file.js'; console.log(file.basename); // file.js console.log(file.path); // /test/file.js ` ``` ### extname Gets and sets path.extname for the file path. Example: ```javascript var file = new File({ cwd: \"/\", base: \"/test/\", path: \"/test/file.coffee\" }); console.log(file.extname); // .coffee file.extname = '.js'; console.log(file.extname); // .js console.log(file.path); // /test/file.js ` ``` [npm-url]: https://npmjs.org/package/vinyl [npm-image]: https://badge.fury.io/js/vinyl.png [travis-url]: https://travis-ci.org/wearefractal/vinyl [travis-image]: https://travis-ci.org/wearefractal/vinyl.png?branch=master [coveralls-url]: https://coveralls.io/r/wearefractal/vinyl [coveralls-image]: https://coveralls.io/repos/wearefractal/vinyl/badge.png [depstat-url]: https://david-dm.org/wearefractal/vinyl [depstat-image]: https://david-dm.org/wearefractal/vinyl.png"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/vinyl/node_modules/clone-stats/LICENSE.md","tags":[],"body":"## The MIT License (MIT) ## Copyright (c) 2014 Hugh Kennedy Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/vinyl/node_modules/clone-stats/README.md","tags":[],"body":"# clone-stats [![Flattr this!](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=hughskennedy&url=http://github.com/hughsk/clone-stats&title=clone-stats&description=hughsk/clone-stats%20on%20GitHub&language=en_GB&tags=flattr,github,javascript&category=software)[![experimental](http://hughsk.github.io/stability-badges/dist/experimental.svg)](http://github.com/hughsk/stability-badges) # Safely clone node's [`fs.Stats`](http://nodejs.org/api/fs.html#fs_class_fs_stats) instances without losing their class methods, i.e. `stat.isDirectory()` and co. ## Usage ## [![clone-stats](https://nodei.co/npm/clone-stats.png?mini=true)](https://nodei.co/npm/clone-stats) ### `copy = require('clone-stats')(stat)` ### Returns a clone of the original `fs.Stats` instance (`stat`). ## License ## MIT. See [LICENSE.md](http://github.com/hughsk/clone-stats/blob/master/LICENSE.md) for details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/vinyl/node_modules/clone/README.md","tags":[],"body":"# clone [![build status](https://secure.travis-ci.org/pvorb/node-clone.png)](http://travis-ci.org/pvorb/node-clone) [![info badge](https://nodei.co/npm/clone.png?downloads=true&downloadRank=true&stars=true)](http://npm-stat.com/charts.html?package=clone) offers foolproof _deep cloning_ of objects, arrays, numbers, strings etc. in JavaScript. ## Installation npm install clone (It also works with browserify, ender or standalone.) ## Example ~~~ javascript var clone = require('clone'); var a, b; a = { foo: { bar: 'baz' } }; // initial value of a b = clone(a); // clone a -> b a.foo.bar = 'foo'; // change a console.log(a); // show a console.log(b); // show b ~~~ This will print: ~~~ javascript { foo: { bar: 'foo' } } { foo: { bar: 'baz' } } ~~~ **clone** masters cloning simple objects (even with custom prototype), arrays, Date objects, and RegExp objects. Everything is cloned recursively, so that you can clone dates in arrays in objects, for example. ## API `clone(val, circular, depth)` * `val` -- the value that you want to clone, any type allowed * `circular` -- boolean Call `clone` with `circular` set to `false` if you are certain that `obj` contains no circular references. This will give better performance if needed. There is no error if `undefined` or `null` is passed as `obj`. * `depth` -- depth to which the object is to be cloned (optional, defaults to infinity) `clone.clonePrototype(obj)` * `obj` -- the object that you want to clone Does a prototype clone as [described by Oran Looney](http://oranlooney.com/functional-javascript/). ## Circular References ~~~ javascript var a, b; a = { hello: 'world' }; a.myself = a; b = clone(a); console.log(b); ~~~ This will print: ~~~ javascript { hello: \"world\", myself: [Circular] } ~~~ So, `b.myself` points to `b`, not `a`. Neat! ## Test npm test ## Caveat Some special objects like a socket or `process.stdout`/`stderr` are known to not be cloneable. If you find other objects that cannot be cloned, please [open an issue](https://github.com/pvorb/node-clone/issues/new). ## Bugs and Issues If you encounter any bugs or issues, feel free to [open an issue at github](https://github.com/pvorb/node-clone/issues) or send me an email to . I also always like to hear from you, if you’re using my code. ## License Copyright © 2011-2015 [Paul Vorbach](http://paul.vorba.ch/) and [contributors](https://github.com/pvorb/node-clone/graphs/contributors). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/vinyl/node_modules/clone/test-apart-ctx.html","tags":[],"body":"Clone Test-Suite (Browser)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/gulp-util/node_modules/vinyl/node_modules/clone/test.html","tags":[],"body":"Clone Test-Suite (Browser) Clone Test-Suite (Browser) Tests started: ; Tests finished: ."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/interpret/README.md","tags":[],"body":"# interpret > A dictionary of file extensions and associated module loaders. [![NPM](https://nodei.co/npm/interpret.png)](https://nodei.co/npm/interpret/) ## What is it This is used by [Liftoff](http://github.com/tkellen/node-liftoff) to automatically require dependencies for configuration files, and by [rechoir](http://github.com/tkellen/node-rechoir) for registering module loaders. ## API ### extensions Map file types to modules which provide a [require.extensions] loader. ```js { '.babel.js': [ { module: 'babel-register', register: function (module) { module({ // register on .js extension due to https://github.com/joyent/node/blob/v0.12.0/lib/module.js#L353 // which only captures the final extension (.babel.js -> .js) extensions: '.js' }); } }, { module: 'babel-core/register', register: function (module) { module({ extensions: '.js' }); } }, { module: 'babel/register', register: function (module) { module({ extensions: '.js' }); } } ], '.buble.js': [ { module: 'buble/register', register: function (module) { module({ extensions: '.js' }); } } ], '.cirru': 'cirru-script/lib/register', '.cjsx': 'node-cjsx/register', '.co': 'coco', '.coffee': ['coffee-script/register', 'coffee-script'], '.coffee.md': ['coffee-script/register', 'coffee-script'], '.csv': 'require-csv', '.eg': 'earlgrey/register', '.iced': ['iced-coffee-script/register', 'iced-coffee-script'], '.iced.md': 'iced-coffee-script/register', '.ini': 'require-ini', '.js': null, '.json': null, '.json5': 'json5/lib/require', '.jsx': [ { module: 'babel-register', register: function (module) { module({ extensions: '.jsx' }); } }, { module: 'babel-core/register', register: function (module) { module({ extensions: '.jsx' }); } }, { module: 'babel/register', register: function (module) { module({ extensions: '.jsx' }); }, }, { module: 'node-jsx', register: function (module) { module.install({ extension: '.jsx', harmony: true }); } } ], '.litcoffee': ['coffee-script/register', 'coffee-script'], '.liticed': 'iced-coffee-script/register', '.ls': ['livescript', 'LiveScript'], '.node': null, '.toml': { module: 'toml-require', register: function (module) { module.install(); } }, '.ts': ['ts-node/register', 'typescript-node/register', 'typescript-register', 'typescript-require'], '.tsx': ['ts-node/register', 'typescript-node/register'], '.wisp': 'wisp/engine/node', '.xml': 'require-xml', '.yaml': 'require-yaml', '.yml': 'require-yaml' }; ``` ### jsVariants Same as above, but only include the extensions which are javascript variants. ## How to use it Consumers should use the exported `extensions` or `jsVariants` object to determine which module should be loaded for a given extension. If a matching extension is found, consumers should do the following: 1. If the value is null, do nothing. 2. If the value is a string, try to require it. 3. If the value is an object, try to require the `module` property. If successful, the `register` property (a function) should be called with the module passed as the first argument. 4. If the value is an array, iterate over it, attempting step #2 or #3 until one of the attempts does not throw. [require.extensions]: http://nodejs.org/api/globals.html#globals_require_extensions"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/README.md","tags":[],"body":"# liftoff [![Build Status](https://secure.travis-ci.org/js-cli/js-liftoff.svg)](http://travis-ci.org/js-cli/js-liftoff) [![Build status](https://ci.appveyor.com/api/projects/status/5a6w8xuq8ed1ilc4/branch/master?svg=true)](https://ci.appveyor.com/project/js-cli/js-liftoff/branch/master) > Launch your command line tool with ease. [![NPM](https://nodei.co/npm/liftoff.png)](https://nodei.co/npm/liftoff/) ## What is it? [See this blog post](http://weblog.bocoup.com/building-command-line-tools-in-node-with-liftoff/), [check out this proof of concept](https://github.com/js-cli/js-hacker), or read on. Say you're writing a CLI tool. Let's call it [hacker](https://github.com/js-cli/js-hacker). You want to configure it using a `Hackerfile`. This is node, so you install `hacker` locally for each project you use it in. But, in order to get the `hacker` command in your PATH, you also install it globally. Now, when you run `hacker`, you want to configure what it does using the `Hackerfile` in your current directory, and you want it to execute using the local installation of your tool. Also, it'd be nice if the `hacker` command was smart enough to traverse up your folders until it finds a `Hackerfile`—for those times when you're not in the root directory of your project. Heck, you might even want to launch `hacker` from a folder outside of your project by manually specifying a working directory. Liftoff manages this for you. So, everything is working great. Now you can find your local `hacker` and `Hackerfile` with ease. Unfortunately, it turns out you've authored your `Hackerfile` in coffee-script, or some other JS variant. In order to support *that*, you have to load the compiler for it, and then register the extension for it with node. Good news, Liftoff can do that, and a whole lot more, too. ## API ### constructor(opts) Create an instance of Liftoff to invoke your application. An example utilizing all options: ```js const Hacker = new Liftoff({ name: 'hacker', processTitle: 'hacker', moduleName: 'hacker', configName: 'hackerfile', extensions: { '.js': null, '.json': null, '.coffee': 'coffee-script/register' }, v8flags: ['--harmony'] // or v8flags: require('v8flags') }); ``` #### opts.name Sugar for setting `processTitle`, `moduleName`, `configName` automatically. Type: `String` Default: `null` These are equivalent: ```js const Hacker = Liftoff({ processTitle: 'hacker', moduleName: 'hacker', configName: 'hackerfile' }); ``` ```js const Hacker = Liftoff({name:'hacker'}); ``` #### opts.moduleName Sets which module your application expects to find locally when being run. Type: `String` Default: `null` #### opts.configName Sets the name of the configuration file Liftoff will attempt to find. Case-insensitive. Type: `String` Default: `null` #### opts.extensions Set extensions to include when searching for a configuration file. If an external module is needed to load a given extension (e.g. `.coffee`), the module name should be specified as the value for the key. Type: `Object` Default: `{\".js\":null,\".json\":null}` **Examples:** In this example Liftoff will look for `myappfile{.js,.json,.coffee}`. If a config with the extension `.coffee` is found, Liftoff will try to require `coffee-script/require` from the current working directory. ```js const MyApp = new Liftoff({ name: 'myapp', extensions: { '.js': null, '.json': null, '.coffee': 'coffee-script/register' } }); ``` In this example, Liftoff will look for `.myapp{rc}`. ```js const MyApp = new Liftoff({ name: 'myapp', configName: '.myapp', extensions: { 'rc': null } }); ``` In this example, Liftoff will automatically attempt to load the correct module for any javascript variant supported by [node-interpret](https://github.com/tkellen/node-interpret) (as long as it does not require a register method). ```js const MyApp = new Liftoff({ name: 'myapp', extensions: require('interpret').jsVariants }); ``` #### opts.v8flags Any flag specified here will be applied to node, not your program. Useful for supporting invocations like `myapp --harmony command`, where `--harmony` should be passed to node, not your program. This functionality is implemented using [flagged-respawn](http://github.com/tkellen/node-flagged-respawn). To support all v8flags, see [node-v8flags](https://github.com/tkellen/node-v8flags). Type: `Array|Function` Default: `null` If this method is a function, it should take a node-style callback that yields an array of flags. #### opts.processTitle Sets what the [process title](http://nodejs.org/api/process.html#process_process_title) will be. Type: `String` Default: `null` #### opts.completions(type) A method to handle bash/zsh/whatever completions. Type: `Function` Default: `null` ## launch(opts, callback(env)) Launches your application with provided options, builds an environment, and invokes your callback, passing the calculated environment as the first argument. ##### Example Configuration w/ Options Parsing: ```js const Liftoff = require('liftoff'); const MyApp = new Liftoff({name:'myapp'}); const argv = require('minimist')(process.argv.slice(2)); const invoke = function (env) { console.log('my environment is:', env); console.log('my cli options are:', argv); console.log('my liftoff config is:', this); }; MyApp.launch({ cwd: argv.cwd, configPath: argv.myappfile, require: argv.require, completion: argv.completion }, invoke); ``` #### opts.cwd Change the current working directory for this launch. Relative paths are calculated against `process.cwd()`. Type: `String` Default: `process.cwd()` **Example Configuration:** ```js const argv = require('minimist')(process.argv.slice(2)); MyApp.launch({ cwd: argv.cwd }, invoke); ``` **Matching CLI Invocation:** ``` myapp --cwd ../ ``` #### opts.configPath Don't search for a config, use the one provided. **Note:** Liftoff will assume the current working directory is the directory containing the config file unless an alternate location is explicitly specified using `cwd`. Type: `String` Default: `null` **Example Configuration:** ```js var argv = require('minimist')(process.argv.slice(2)); MyApp.launch({ configPath: argv.myappfile }, invoke); ``` **Matching CLI Invocation:** ``` myapp --myappfile /var/www/project/Myappfile.js ``` **Examples using `cwd` and `configPath` together:** These are functionally identical: ``` myapp --myappfile /var/www/project/Myappfile.js myapp --cwd /var/www/project ``` These can run myapp from a shared directory as though it were located in another project: ``` myapp --myappfile /Users/name/Myappfile.js --cwd /var/www/project1 myapp --myappfile /Users/name/Myappfile.js --cwd /var/www/project2 ``` #### opts.require A string or array of modules to attempt requiring from the local working directory before invoking the launch callback. Type: `String|Array` Default: `null` **Example Configuration:** ```js var argv = require('minimist')(process.argv.slice(2)); MyApp.launch({ require: argv.require }, invoke); ``` **Matching CLI Invocation:** ```js myapp --require coffee-script/register ``` #### callback(env) A function to start your application. When invoked, `this` will be your instance of Liftoff. The `env` param will contain the following keys: - `cwd`: the current working directory - `require`: an array of modules that liftoff tried to pre-load - `configNameSearch`: the config files searched for - `configPath`: the full path to your configuration file (if found) - `configBase`: the base directory of your configuration file (if found) - `modulePath`: the full path to the local module your project relies on (if found) - `modulePackage`: the contents of the local module's package.json (if found) ### events #### require(name, module) Emitted when a module is pre-loaded. ```js var Hacker = new Liftoff({name:'hacker'}); Hacker.on('require', function (name, module) { console.log('Requiring external module: '+name+'...'); // automatically register coffee-script extensions if (name === 'coffee-script') { module.register(); } }); ``` #### requireFail(name, err) Emitted when a requested module cannot be preloaded. ```js var Hacker = new Liftoff({name:'hacker'}); Hacker.on('requireFail', function (name, err) { console.log('Unable to load:', name, err); }); ``` #### respawn(flags, child) Emitted when Liftoff re-spawns your process (when a [`nodeFlag`](#optsnodeflags) is detected). ```js var Hacker = new Liftoff({ name: 'hacker', nodeFlags: ['--harmony'] }); Hacker.on('respawn', function (flags, child) { console.log('Detected node flags:', flags); console.log('Respawned to PID:', child.pid); }); ``` Event will be triggered for this command: `hacker --harmony commmand` ## Examples Check out how [gulp](https://github.com/gulpjs/gulp/blob/master/bin/gulp.js) uses Liftoff. For a bare-bones example, try [the hacker project](https://github.com/js-cli/js-hacker/blob/master/bin/hacker.js). To try the example, do the following: 1. Install the sample project `hacker` with `npm install -g hacker`. 2. Make a `Hackerfile.js` with some arbitrary javascript it. 3. Install hacker next to it with `npm install hacker`. 3. Run `hacker` while in the same parent folder."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/UPGRADING.md","tags":[],"body":"# 1.0.0 -> 2.0.0 The option `nodeFlags` was renamed to `v8flags` for accuracy. It can now be a callback taking method that yields an array of flags, **or** an array literal. # 0.11 -> 0.12 For the environment passed into the `launch` callback, `configNameRegex` has been renamed to `configNameSearch`. It now returns an array of valid config names instead of a regular expression. # 0.10 -> 0.11 The method signature for `launch` was changed in this version of Liftoff. You must now provide your own options parser and pass your desired params directly into `launch` as the first argument. The second argument is now the invocation callback that starts your application. To replicate the default functionality of 0.10, use the following: ```js const Liftoff = require('liftoff'); const MyApp = new Liftoff({name:'myapp'}); const argv = require('minimist')(process.argv.slice(2)); const invoke = function (env) { console.log('my environment is:', env); console.log('my cli options are:', argv); console.log('my liftoff config is:', this); }; MyApp.launch({ cwd: argv.cwd, configPath: argv.myappfile, require: argv.require, completion: argv.completion }, invoke); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/extend/CHANGELOG.md","tags":[],"body":"3.0.0 / 2015-07-01 ================== * [Possible breaking change] Use global \"strict\" directive (#32) * [Tests] `int` is an ES3 reserved word * [Tests] Test up to `io.js` `v2.3` * [Tests] Add `npm run eslint` * [Dev Deps] Update `covert`, `jscs` 2.0.1 / 2015-04-25 ================== * Use an inline `isArray` check, for ES3 browsers. (#27) * Some old browsers fail when an identifier is `toString` * Test latest `node` and `io.js` versions on `travis-ci`; speed up builds * Add license info to package.json (#25) * Update `tape`, `jscs` * Adding a CHANGELOG 2.0.0 / 2014-10-01 ================== * Increase code coverage to 100%; run code coverage as part of tests * Add `npm run lint`; Run linter as part of tests * Remove nodeType and setInterval checks in isPlainObject * Updating `tape`, `jscs`, `covert` * General style and README cleanup 1.3.0 / 2014-06-20 ================== * Add component.json for browser support (#18) * Use SVG for badges in README (#16) * Updating `tape`, `covert` * Updating travis-ci to work with multiple node versions * Fix `deep === false` bug (returning target as {}) (#14) * Fixing constructor checks in isPlainObject * Adding additional test coverage * Adding `npm run coverage` * Add LICENSE (#13) * Adding a warning about `false`, per #11 * General style and whitespace cleanup 1.2.1 / 2013-09-14 ================== * Fixing hasOwnProperty bugs that would only have shown up in specific browsers. Fixes #8 * Updating `tape` 1.2.0 / 2013-09-02 ================== * Updating the README: add badges * Adding a missing variable reference. * Using `tape` instead of `buster` for tests; add more tests (#7) * Adding node 0.10 to Travis CI (#6) * Enabling \"npm test\" and cleaning up package.json (#5) * Add Travis CI. 1.1.3 / 2012-12-06 ================== * Added unit tests. * Ensure extend function is named. (Looks nicer in a stack trace.) * README cleanup. 1.1.1 / 2012-11-07 ================== * README cleanup. * Added installation instructions. * Added a missing semicolon 1.0.0 / 2012-04-08 ================== * Initial commit"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/extend/README.md","tags":[],"body":"[![Build Status][travis-svg]][travis-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] # extend() for Node.js [![Version Badge][npm-version-png]][npm-url] `node-extend` is a port of the classic extend() method from jQuery. It behaves as you expect. It is simple, tried and true. ## Installation This package is available on [npm][npm-url] as: `extend` ``` sh npm install extend ``` ## Usage **Syntax:** extend **(** [`deep`], `target`, `object1`, [`objectN`] **)** *Extend one object with one or more others, returning the modified object.* Keep in mind that the target object will be modified, and will be returned from extend(). If a boolean true is specified as the first argument, extend performs a deep copy, recursively copying any objects it finds. Otherwise, the copy will share structure with the original object(s). Undefined properties are not copied. However, properties inherited from the object's prototype will be copied over. Warning: passing `false` as the first argument is not supported. ### Arguments * `deep` *Boolean* (optional) If set, the merge becomes recursive (i.e. deep copy). * `target` *Object* The object to extend. * `object1` *Object* The object that will be merged into the first. * `objectN` *Object* (Optional) More objects to merge into the first. ## License `node-extend` is licensed under the [MIT License][mit-license-url]. ## Acknowledgements All credit to the jQuery authors for perfecting this amazing utility. Ported to Node.js by [Stefan Thomas][github-justmoon] with contributions by [Jonathan Buchanan][github-insin] and [Jordan Harband][github-ljharb]. [travis-svg]: https://travis-ci.org/justmoon/node-extend.svg [travis-url]: https://travis-ci.org/justmoon/node-extend [npm-url]: https://npmjs.org/package/extend [mit-license-url]: http://opensource.org/licenses/MIT [github-justmoon]: https://github.com/justmoon [github-insin]: https://github.com/insin [github-ljharb]: https://github.com/ljharb [npm-version-png]: http://vb.teelaun.ch/justmoon/node-extend.svg [deps-svg]: https://david-dm.org/justmoon/node-extend.svg [deps-url]: https://david-dm.org/justmoon/node-extend [dev-deps-svg]: https://david-dm.org/justmoon/node-extend/dev-status.svg [dev-deps-url]: https://david-dm.org/justmoon/node-extend#info=devDependencies"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/README.md","tags":[],"body":"# findup-sync [![Build Status](https://secure.travis-ci.org/cowboy/node-findup-sync.png?branch=master)](http://travis-ci.org/cowboy/node-findup-sync) Find the first file matching a given pattern in the current directory or the nearest ancestor directory. ## Getting Started Install the module with: `npm install findup-sync` ```js var findup = require('findup-sync'); // Start looking in the CWD. var filepath1 = findup('{a,b}*.txt'); // Start looking somewhere else, and ignore case (probably a good idea). var filepath2 = findup('{a,b}*.txt', {cwd: '/some/path', nocase: true}); ``` ## Usage ```js findup(patternOrPatterns [, minimatchOptions]) ``` ### patternOrPatterns Type: `String` or `Array` Default: none One or more wildcard glob patterns. Or just filenames. ### minimatchOptions Type: `Object` Default: `{}` Options to be passed to [minimatch](https://github.com/isaacs/minimatch). Note that if you want to start in a different directory than the current working directory, specify a `cwd` property here. ## Contributing In lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/). ## Release History 2015-09-14 0 v0.3.0 - updated glob to ~5.0. 2014-12-17 - v0.2.1 - updated to glob ~4.3. 2014-12-16 - v0.2.0 - Removed lodash, updated to glob 4.x. 2014-03-14 - v0.1.3 - Updated dependencies. 2013-03-08 - v0.1.2 - Updated dependencies. Fixed a Node 0.9.x bug. Updated unit tests to work cross-platform. 2012-11-15 - v0.1.1 - Now works without an options object. 2012-11-01 - v0.1.0 - Initial release."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/node_modules/glob/README.md","tags":[],"body":"[![Build Status](https://travis-ci.org/isaacs/node-glob.svg?branch=master)](https://travis-ci.org/isaacs/node-glob/) [![Dependency Status](https://david-dm.org/isaacs/node-glob.svg)](https://david-dm.org/isaacs/node-glob) [![devDependency Status](https://david-dm.org/isaacs/node-glob/dev-status.svg)](https://david-dm.org/isaacs/node-glob#info=devDependencies) [![optionalDependency Status](https://david-dm.org/isaacs/node-glob/optional-status.svg)](https://david-dm.org/isaacs/node-glob#info=optionalDependencies) # Glob Match files using the patterns the shell uses, like stars and stuff. This is a glob implementation in JavaScript. It uses the `minimatch` library to do its matching. ![](oh-my-glob.gif) ## Usage ```javascript var glob = require(\"glob\") // options is optional glob(\"**/*.js\", options, function (er, files) { // files is an array of filenames. // If the `nonull` option is set, and nothing // was found, then files is [\"**/*.js\"] // er is an error object or null. }) ``` ## Glob Primer \"Globs\" are the patterns you type when you do stuff like `ls *.js` on the command line, or put `build/*` in a `.gitignore` file. Before parsing the path part patterns, braced sections are expanded into a set. Braced sections start with `{` and end with `}`, with any number of comma-delimited sections within. Braced sections may contain slash characters, so `a{/b/c,bcd}` would expand into `a/b/c` and `abcd`. The following characters have special magic meaning when used in a path portion: * `*` Matches 0 or more characters in a single path portion * `?` Matches 1 character * `[...]` Matches a range of characters, similar to a RegExp range. If the first character of the range is `!` or `^` then it matches any character not in the range. * `!(pattern|pattern|pattern)` Matches anything that does not match any of the patterns provided. * `?(pattern|pattern|pattern)` Matches zero or one occurrence of the patterns provided. * `+(pattern|pattern|pattern)` Matches one or more occurrences of the patterns provided. * `*(a|b|c)` Matches zero or more occurrences of the patterns provided * `@(pattern|pat*|pat?erN)` Matches exactly one of the patterns provided * `**` If a \"globstar\" is alone in a path portion, then it matches zero or more directories and subdirectories searching for matches. It does not crawl symlinked directories. ### Dots If a file or directory path portion has a `.` as the first character, then it will not match any glob pattern unless that pattern's corresponding path part also has a `.` as its first character. For example, the pattern `a/.*/c` would match the file at `a/.b/c`. However the pattern `a/*/c` would not, because `*` does not start with a dot character. You can make glob treat dots as normal characters by setting `dot:true` in the options. ### Basename Matching If you set `matchBase:true` in the options, and the pattern has no slashes in it, then it will seek for any file anywhere in the tree with a matching basename. For example, `*.js` would match `test/simple/basic.js`. ### Negation The intent for negation would be for a pattern starting with `!` to match everything that *doesn't* match the supplied pattern. However, the implementation is weird, and for the time being, this should be avoided. The behavior is deprecated in version 5, and will be removed entirely in version 6. ### Empty Sets If no matching files are found, then an empty array is returned. This differs from the shell, where the pattern itself is returned. For example: $ echo a*s*d*f a*s*d*f To get the bash-style behavior, set the `nonull:true` in the options. ### See Also: * `man sh` * `man bash` (Search for \"Pattern Matching\") * `man 3 fnmatch` * `man 5 gitignore` * [minimatch documentation](https://github.com/isaacs/minimatch) ## glob.hasMagic(pattern, [options]) Returns `true` if there are any special characters in the pattern, and `false` otherwise. Note that the options affect the results. If `noext:true` is set in the options object, then `+(a|b)` will not be considered a magic pattern. If the pattern has a brace expansion, like `a/{b/c,x/y}` then that is considered magical, unless `nobrace:true` is set in the options. ## glob(pattern, [options], cb) * `pattern` {String} Pattern to be matched * `options` {Object} * `cb` {Function} * `err` {Error | null} * `matches` {Array} filenames found matching the pattern Perform an asynchronous glob search. ## glob.sync(pattern, [options]) * `pattern` {String} Pattern to be matched * `options` {Object} * return: {Array} filenames found matching the pattern Perform a synchronous glob search. ## Class: glob.Glob Create a Glob object by instantiating the `glob.Glob` class. ```javascript var Glob = require(\"glob\").Glob var mg = new Glob(pattern, options, cb) ``` It's an EventEmitter, and starts walking the filesystem to find matches immediately. ### new glob.Glob(pattern, [options], [cb]) * `pattern` {String} pattern to search for * `options` {Object} * `cb` {Function} Called when an error occurs, or matches are found * `err` {Error | null} * `matches` {Array} filenames found matching the pattern Note that if the `sync` flag is set in the options, then matches will be immediately available on the `g.found` member. ### Properties * `minimatch` The minimatch object that the glob uses. * `options` The options object passed in. * `aborted` Boolean which is set to true when calling `abort()`. There is no way at this time to continue a glob search after aborting, but you can re-use the statCache to avoid having to duplicate syscalls. * `cache` Convenience object. Each field has the following possible values: * `false` - Path does not exist * `true` - Path exists * `'DIR'` - Path exists, and is not a directory * `'FILE'` - Path exists, and is a directory * `[file, entries, ...]` - Path exists, is a directory, and the array value is the results of `fs.readdir` * `statCache` Cache of `fs.stat` results, to prevent statting the same path multiple times. * `symlinks` A record of which paths are symbolic links, which is relevant in resolving `**` patterns. * `realpathCache` An optional object which is passed to `fs.realpath` to minimize unnecessary syscalls. It is stored on the instantiated Glob object, and may be re-used. ### Events * `end` When the matching is finished, this is emitted with all the matches found. If the `nonull` option is set, and no match was found, then the `matches` list contains the original pattern. The matches are sorted, unless the `nosort` flag is set. * `match` Every time a match is found, this is emitted with the matched. * `error` Emitted when an unexpected error is encountered, or whenever any fs error occurs if `options.strict` is set. * `abort` When `abort()` is called, this event is raised. ### Methods * `pause` Temporarily stop the search * `resume` Resume the search * `abort` Stop the search forever ### Options All the options that can be passed to Minimatch can also be passed to Glob to change pattern matching behavior. Also, some have been added, or have glob-specific ramifications. All options are false by default, unless otherwise noted. All options are added to the Glob object, as well. If you are running many `glob` operations, you can pass a Glob object as the `options` argument to a subsequent operation to shortcut some `stat` and `readdir` calls. At the very least, you may pass in shared `symlinks`, `statCache`, `realpathCache`, and `cache` options, so that parallel glob operations will be sped up by sharing information about the filesystem. * `cwd` The current working directory in which to search. Defaults to `process.cwd()`. * `root` The place where patterns starting with `/` will be mounted onto. Defaults to `path.resolve(options.cwd, \"/\")` (`/` on Unix systems, and `C:\\` or some such on Windows.) * `dot` Include `.dot` files in normal matches and `globstar` matches. Note that an explicit dot in a portion of the pattern will always match dot files. * `nomount` By default, a pattern starting with a forward-slash will be \"mounted\" onto the root setting, so that a valid filesystem path is returned. Set this flag to disable that behavior. * `mark` Add a `/` character to directory matches. Note that this requires additional stat calls. * `nosort` Don't sort the results. * `stat` Set to true to stat *all* results. This reduces performance somewhat, and is completely unnecessary, unless `readdir` is presumed to be an untrustworthy indicator of file existence. * `silent` When an unusual error is encountered when attempting to read a directory, a warning will be printed to stderr. Set the `silent` option to true to suppress these warnings. * `strict` When an unusual error is encountered when attempting to read a directory, the process will just continue on in search of other matches. Set the `strict` option to raise an error in these cases. * `cache` See `cache` property above. Pass in a previously generated cache object to save some fs calls. * `statCache` A cache of results of filesystem information, to prevent unnecessary stat calls. While it should not normally be necessary to set this, you may pass the statCache from one glob() call to the options object of another, if you know that the filesystem will not change between calls. (See \"Race Conditions\" below.) * `symlinks` A cache of known symbolic links. You may pass in a previously generated `symlinks` object to save `lstat` calls when resolving `**` matches. * `sync` DEPRECATED: use `glob.sync(pattern, opts)` instead. * `nounique` In some cases, brace-expanded patterns can result in the same file showing up multiple times in the result set. By default, this implementation prevents duplicates in the result set. Set this flag to disable that behavior. * `nonull` Set to never return an empty set, instead returning a set containing the pattern itself. This is the default in glob(3). * `debug` Set to enable debug logging in minimatch and glob. * `nobrace` Do not expand `{a,b}` and `{1..3}` brace sets. * `noglobstar` Do not match `**` against multiple filenames. (Ie, treat it as a normal `*` instead.) * `noext` Do not match `+(a|b)` \"extglob\" patterns. * `nocase` Perform a case-insensitive match. Note: on case-insensitive filesystems, non-magic patterns will match by default, since `stat` and `readdir` will not raise errors. * `matchBase` Perform a basename-only match if the pattern does not contain any slash characters. That is, `*.js` would be treated as equivalent to `**/*.js`, matching all js files in all directories. * `nodir` Do not match directories, only files. (Note: to match *only* directories, simply put a `/` at the end of the pattern.) * `ignore` Add a pattern or an array of patterns to exclude matches. * `follow` Follow symlinked directories when expanding `**` patterns. Note that this can result in a lot of duplicate references in the presence of cyclic links. * `realpath` Set to true to call `fs.realpath` on all of the results. In the case of a symlink that cannot be resolved, the full absolute path to the matched entry is returned (though it will usually be a broken symlink) * `nonegate` Suppress deprecated `negate` behavior. (See below.) Default=true * `nocomment` Suppress deprecated `comment` behavior. (See below.) Default=true ## Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between node-glob and other implementations, and are intentional. The double-star character `**` is supported by default, unless the `noglobstar` flag is set. This is supported in the manner of bsdglob and bash 4.3, where `**` only has special significance if it is the only thing in a path part. That is, `a/**/b` will match `a/x/y/b`, but `a/**b` will not. Note that symlinked directories are not crawled as part of a `**`, though their contents may match against subsequent portions of the pattern. This prevents infinite loops and duplicates and the like. If an escaped pattern has no matches, and the `nonull` flag is set, then glob returns the pattern as-provided, rather than interpreting the character escapes. For example, `glob.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than `\"*a?\"`. This is akin to setting the `nullglob` option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like `+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded **first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are checked for validity. Since those two are valid, matching proceeds. ### Comments and Negation **Note**: In version 5 of this module, negation and comments are **disabled** by default. You can explicitly set `nonegate:false` or `nocomment:false` to re-enable them. They are going away entirely in version 6. The intent for negation would be for a pattern starting with `!` to match everything that *doesn't* match the supplied pattern. However, the implementation is weird. It is better to use the `ignore` option to set a pattern or set of patterns to exclude from matches. If you want the \"everything except *x*\" type of behavior, you can use `**` as the main pattern, and set an `ignore` for the things to exclude. The comments feature is added in minimatch, primarily to more easily support use cases like ignore files, where a `#` at the start of a line makes the pattern \"empty\". However, in the context of a straightforward filesystem globber, \"comments\" don't make much sense. ## Windows **Please only use forward-slashes in glob expressions.** Though windows uses either `/` or `\\` as its path separator, only `/` characters are used by this glob implementation. You must use forward-slashes **only** in glob expressions. Back-slashes will always be interpreted as escape characters, not path separators. Results from absolute patterns such as `/foo/*` are mounted onto the root setting using `path.join`. On windows, this will by default result in `/foo/*` matching `C:\\foo\\bar.txt`. ## Race Conditions Glob searching, by its very nature, is susceptible to race conditions, since it relies on directory walking and such. As a result, it is possible that a file that exists when glob looks for it may have been deleted or modified by the time it returns the result. As part of its internal implementation, this program caches all stat and readdir calls that it makes, in order to cut down on system overhead. However, this also makes it even more susceptible to races, especially if the cache or statCache objects are reused between glob calls. Users are thus advised not to use a glob result as a guarantee of filesystem state in the face of rapid changes. For the vast majority of operations, this is never a problem. ## Contributing Any change to behavior (including bugfixes) must come with a test. Patches that fail tests or reduce performance will be rejected. ``` # to run tests npm test # to re-generate test fixtures npm run test-regen # to benchmark against bash/zsh npm run bench # to profile javascript npm run prof ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/node_modules/glob/node_modules/inflight/README.md","tags":[],"body":"# inflight Add callbacks to requests in flight to avoid async duplication ## USAGE ```javascript var inflight = require('inflight') // some request that does some stuff function req(key, callback) { // key is any random string. like a url or filename or whatever. // // will return either a falsey value, indicating that the // request for this key is already in flight, or a new callback // which when called will call all callbacks passed to inflightk // with the same key callback = inflight(key, callback) // If we got a falsey value back, then there's already a req going if (!callback) return // this is where you'd fetch the url or whatever // callback is also once()-ified, so it can safely be assigned // to multiple events etc. First call wins. setTimeout(function() { callback(null, key) }, 100) } // only assigns a single setTimeout // when it dings, all cbs get called req('foo', cb1) req('foo', cb2) req('foo', cb3) req('foo', cb4) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/node_modules/glob/node_modules/inflight/node_modules/wrappy/README.md","tags":[],"body":"# wrappy Callback wrapping utility ## USAGE ```javascript var wrappy = require(\"wrappy\") // var wrapper = wrappy(wrapperFunction) // make sure a cb is called only once // See also: http://npm.im/once for this specific use case var once = wrappy(function (cb) { var called = false return function () { if (called) return called = true return cb.apply(this, arguments) } }) function printBoo () { console.log('boo') } // has some rando property printBoo.iAmBooPrinter = true var onlyPrintOnce = once(printBoo) onlyPrintOnce() // prints 'boo' onlyPrintOnce() // does nothing // random property is retained! assert.equal(onlyPrintOnce.iAmBooPrinter, true) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/node_modules/glob/node_modules/inherits/README.md","tags":[],"body":"Browser-friendly inheritance fully compatible with standard node.js [inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor). This package exports standard `inherits` from node.js `util` module in node environment, but also provides alternative browser-friendly implementation through [browser field](https://gist.github.com/shtylman/4339901). Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of `util`. It also has a shim for old browsers with no `Object.create` support. While keeping you sure you are using standard `inherits` implementation in node.js environment, it allows bundlers such as [browserify](https://github.com/substack/node-browserify) to not include full `util` package to your client code if all you need is just `inherits` function. It worth, because browser shim for `util` package is large and `inherits` is often the single function you need from it. It's recommended to use this package instead of `require('util').inherits` for any code that has chances to be used not only in node.js but in browser too. ## usage ```js var inherits = require('inherits'); // then use exactly as the standard one ``` ## note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js `inherits`. If you are using version ~1.0 and planning to switch to ~2.0, be careful: * new version uses `super_` instead of `super` for referencing superclass * new version overwrites current prototype while old one preserves any existing fields on it"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/node_modules/glob/node_modules/minimatch/README.md","tags":[],"body":"# minimatch A minimal matching utility. [![Build Status](https://secure.travis-ci.org/isaacs/minimatch.svg)](http://travis-ci.org/isaacs/minimatch) This is the matching library used internally by npm. It works by converting glob expressions into JavaScript `RegExp` objects. ## Usage ```javascript var minimatch = require(\"minimatch\") minimatch(\"bar.foo\", \"*.foo\") // true! minimatch(\"bar.foo\", \"*.bar\") // false! minimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy! ``` ## Features Supports these glob features: * Brace Expansion * Extended glob matching * \"Globstar\" `**` matching See: * `man sh` * `man bash` * `man 3 fnmatch` * `man 5 gitignore` ## Minimatch Class Create a minimatch object by instantiating the `minimatch.Minimatch` class. ```javascript var Minimatch = require(\"minimatch\").Minimatch var mm = new Minimatch(pattern, options) ``` ### Properties * `pattern` The original pattern the minimatch object represents. * `options` The options supplied to the constructor. * `set` A 2-dimensional array of regexp or string expressions. Each row in the array corresponds to a brace-expanded pattern. Each item in the row corresponds to a single path-part. For example, the pattern `{a,b/c}/d` would expand to a set of patterns like: [ [ a, d ] , [ b, c, d ] ] If a portion of the pattern doesn't have any \"magic\" in it (that is, it's something like `\"foo\"` rather than `fo*o?`), then it will be left as a string rather than converted to a regular expression. * `regexp` Created by the `makeRe` method. A single regular expression expressing the entire pattern. This is useful in cases where you wish to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled. * `negate` True if the pattern is negated. * `comment` True if the pattern is a comment. * `empty` True if the pattern is `\"\"`. ### Methods * `makeRe` Generate the `regexp` member if necessary, and return it. Will return `false` if the pattern is invalid. * `match(fname)` Return true if the filename matches the pattern, or false otherwise. * `matchOne(fileArray, patternArray, partial)` Take a `/`-split filename, and match it against a single row in the `regExpSet`. This method is mainly for internal use, but is exposed so that it can be used by a glob-walker that needs to avoid excessive filesystem calls. All other methods are internal, and will be called as necessary. ### minimatch(path, pattern, options) Main export. Tests a path against the pattern using the options. ```javascript var isJS = minimatch(file, \"*.js\", { matchBase: true }) ``` ### minimatch.filter(pattern, options) Returns a function that tests its supplied argument, suitable for use with `Array.filter`. Example: ```javascript var javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true})) ``` ### minimatch.match(list, pattern, options) Match against the list of files, in the style of fnmatch or glob. If nothing is matched, and options.nonull is set, then return a list containing the pattern itself. ```javascript var javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true})) ``` ### minimatch.makeRe(pattern, options) Make a regular expression object from the pattern. ## Options All options are `false` by default. ### debug Dump a ton of stuff to stderr. ### nobrace Do not expand `{a,b}` and `{1..3}` brace sets. ### noglobstar Disable `**` matching against multiple folder names. ### dot Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot. Note that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot` is set. ### noext Disable \"extglob\" style patterns like `+(a|b)`. ### nocase Perform a case-insensitive match. ### nonull When a match is not found by `minimatch.match`, return a list containing the pattern itself if this option is set. When not set, an empty list is returned if there are no matches. ### matchBase If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, `a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`. ### nocomment Suppress the behavior of treating `#` at the start of a pattern as a comment. ### nonegate Suppress the behavior of treating a leading `!` character as negation. ### flipNegate Returns from negate expressions the same as if they were not negated. (Ie, true on a hit, false on a miss.) ## Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between minimatch and other implementations, and are intentional. If the pattern starts with a `!` character, then it is negated. Set the `nonegate` flag to suppress this behavior, and treat leading `!` characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like `!(a|B)`. Multiple `!` characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with `#`, then it is treated as a comment, and will not match anything. Use `\\#` to match a literal `#` at the start of a line, or set the `nocomment` flag to suppress this behavior. The double-star character `**` is supported by default, unless the `noglobstar` flag is set. This is supported in the manner of bsdglob and bash 4.1, where `**` only has special significance if it is the only thing in a path part. That is, `a/**/b` will match `a/x/y/b`, but `a/**b` will not. If an escaped pattern has no matches, and the `nonull` flag is set, then minimatch.match returns the pattern as-provided, rather than interpreting the character escapes. For example, `minimatch.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than `\"*a?\"`. This is akin to setting the `nullglob` option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like `+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded **first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are checked for validity. Since those two are valid, matching proceeds."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/README.md","tags":[],"body":"# brace-expansion [Brace expansion](https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html), as known from sh/bash, in JavaScript. [![build status](https://secure.travis-ci.org/juliangruber/brace-expansion.svg)](http://travis-ci.org/juliangruber/brace-expansion) [![downloads](https://img.shields.io/npm/dm/brace-expansion.svg)](https://www.npmjs.org/package/brace-expansion) [![testling badge](https://ci.testling.com/juliangruber/brace-expansion.png)](https://ci.testling.com/juliangruber/brace-expansion) ## Example ```js var expand = require('brace-expansion'); expand('file-{a,b,c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('-v{,,}') // => ['-v', '-v', '-v'] expand('file{0..2}.jpg') // => ['file0.jpg', 'file1.jpg', 'file2.jpg'] expand('file-{a..c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('file{2..0}.jpg') // => ['file2.jpg', 'file1.jpg', 'file0.jpg'] expand('file{0..4..2}.jpg') // => ['file0.jpg', 'file2.jpg', 'file4.jpg'] expand('file-{a..e..2}.jpg') // => ['file-a.jpg', 'file-c.jpg', 'file-e.jpg'] expand('file{00..10..5}.jpg') // => ['file00.jpg', 'file05.jpg', 'file10.jpg'] expand('{{A..C},{a..c}}') // => ['A', 'B', 'C', 'a', 'b', 'c'] expand('ppp{,config,oe{,conf}}') // => ['ppp', 'pppconfig', 'pppoe', 'pppoeconf'] ``` ## API ```js var expand = require('brace-expansion'); ``` ### var expanded = expand(str) Return an array of all possible and valid expansions of `str`. If none are found, `[str]` is returned. Valid expansions are: ```js /^(.*,)+(.+)?$/ // {a,b,...} ``` A comma seperated list of options, like `{a,b}` or `{a,{b,c}}` or `{,a,}`. ```js /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} ``` A numeric sequence from `x` to `y` inclusive, with optional increment. If `x` or `y` start with a leading `0`, all the numbers will be padded to have equal length. Negative numbers and backwards iteration work too. ```js /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} ``` An alphabetic sequence from `x` to `y` inclusive, with optional increment. `x` and `y` must be exactly one character, and if given, `incr` must be a number. For compatibility reasons, the string `${` is not eligible for brace expansion. ## Installation With [npm](https://npmjs.org) do: ```bash npm install brace-expansion ``` ## Contributors - [Julian Gruber](https://github.com/juliangruber) - [Isaac Z. Schlueter](https://github.com/isaacs) ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/LICENSE.md","tags":[],"body":"(MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/README.md","tags":[],"body":"# balanced-match Match balanced string pairs, like `{` and `}` or `` and ``. Supports regular expressions as well! [![build status](https://secure.travis-ci.org/juliangruber/balanced-match.svg)](http://travis-ci.org/juliangruber/balanced-match) [![downloads](https://img.shields.io/npm/dm/balanced-match.svg)](https://www.npmjs.org/package/balanced-match) [![testling badge](https://ci.testling.com/juliangruber/balanced-match.png)](https://ci.testling.com/juliangruber/balanced-match) ## Example Get the first matching pair of braces: ```js var balanced = require('balanced-match'); console.log(balanced('{', '}', 'pre{in{nested}}post')); console.log(balanced('{', '}', 'pre{first}between{second}post')); console.log(balanced(/\\s+\\{\\s+/, /\\s+\\}\\s+/, 'pre { in{nest} } post')); ``` The matches are: ```bash $ node example.js { start: 3, end: 14, pre: 'pre', body: 'in{nested}', post: 'post' } { start: 3, end: 9, pre: 'pre', body: 'first', post: 'between{second}post' } { start: 3, end: 17, pre: 'pre', body: 'in{nest}', post: 'post' } ``` ## API ### var m = balanced(a, b, str) For the first non-nested matching pair of `a` and `b` in `str`, return an object with those keys: * **start** the index of the first match of `a` * **end** the index of the matching `b` * **pre** the preamble, `a` and `b` not included * **body** the match, `a` and `b` not included * **post** the postscript, `a` and `b` not included If there's no match, `undefined` will be returned. If the `str` contains more `a` than `b` / there are unmatched pairs, the first match that was closed will be used. For example, `{{a}` will match `['{', 'a', '']`. ### var r = balanced.range(a, b, str) For the first non-nested matching pair of `a` and `b` in `str`, return an array with indexes: `[ , ]`. If there's no match, `undefined` will be returned. If the `str` contains more `a` than `b` / there are unmatched pairs, the first match that was closed will be used. For example, `{{a}` will match `[ 1, 3 ]`. ## Installation With [npm](https://npmjs.org) do: ```bash npm install balanced-match ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/README.markdown","tags":[],"body":"concat-map ========== Concatenative mapdashery. [![browser support](http://ci.testling.com/substack/node-concat-map.png)](http://ci.testling.com/substack/node-concat-map) [![build status](https://secure.travis-ci.org/substack/node-concat-map.png)](http://travis-ci.org/substack/node-concat-map) example ======= ``` js var concatMap = require('concat-map'); var xs = [ 1, 2, 3, 4, 5, 6 ]; var ys = concatMap(xs, function (x) { return x % 2 ? [ x - 0.1, x, x + 0.1 ] : []; }); console.dir(ys); ``` *** ``` [ 0.9, 1, 1.1, 2.9, 3, 3.1, 4.9, 5, 5.1 ] ``` methods ======= ``` js var concatMap = require('concat-map') ``` concatMap(xs, fn) ----------------- Return an array of concatenated elements by calling `fn(x, i)` for each element `x` and each index `i` in the array `xs`. When `fn(x, i)` returns an array, its result will be concatenated with the result array. If `fn(x, i)` returns anything else, that value will be pushed onto the end of the result array. install ======= With [npm](http://npmjs.org) do: ``` npm install concat-map ``` license ======= MIT notes ===== This module was written while sitting high above the ground in a tree."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/node_modules/glob/node_modules/once/README.md","tags":[],"body":"# once Only call a function once. ## usage ```javascript var once = require('once') function load (file, cb) { cb = once(cb) loader.load('file') loader.once('load', cb) loader.once('error', cb) } ``` Or add to the Function.prototype in a responsible way: ```javascript // only has to be done once require('once').proto() function load (file, cb) { cb = cb.once() loader.load('file') loader.once('load', cb) loader.once('error', cb) } ``` Ironically, the prototype feature makes this module twice as complicated as necessary. To check whether you function has been called, use `fn.called`. Once the function is called for the first time the return value of the original function is saved in `fn.value` and subsequent calls will continue to return this value. ```javascript var once = require('once') function load (cb) { cb = once(cb) var stream = createStream() stream.once('data', cb) stream.once('end', function () { if (!cb.called) cb(new Error('not found')) }) } ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/node_modules/glob/node_modules/once/node_modules/wrappy/README.md","tags":[],"body":"# wrappy Callback wrapping utility ## USAGE ```javascript var wrappy = require(\"wrappy\") // var wrapper = wrappy(wrapperFunction) // make sure a cb is called only once // See also: http://npm.im/once for this specific use case var once = wrappy(function (cb) { var called = false return function () { if (called) return called = true return cb.apply(this, arguments) } }) function printBoo () { console.log('boo') } // has some rando property printBoo.iAmBooPrinter = true var onlyPrintOnce = once(printBoo) onlyPrintOnce() // prints 'boo' onlyPrintOnce() // does nothing // random property is retained! assert.equal(onlyPrintOnce.iAmBooPrinter, true) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/findup-sync/node_modules/glob/node_modules/path-is-absolute/readme.md","tags":[],"body":"# path-is-absolute [![Build Status](https://travis-ci.org/sindresorhus/path-is-absolute.svg?branch=master)](https://travis-ci.org/sindresorhus/path-is-absolute) > Node.js 0.12 [`path.isAbsolute()`](http://nodejs.org/api/path.html#path_path_isabsolute_path) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save path-is-absolute ``` ## Usage ```js var pathIsAbsolute = require('path-is-absolute'); // Linux pathIsAbsolute('/home/foo'); //=> true // Windows pathIsAbsolute('C:/Users/'); //=> true // Any OS pathIsAbsolute.posix('/home/foo'); //=> true ``` ## API See the [`path.isAbsolute()` docs](http://nodejs.org/api/path.html#path_path_isabsolute_path). ### pathIsAbsolute(path) ### pathIsAbsolute.posix(path) The Posix specific version. ### pathIsAbsolute.win32(path) The Windows specific version. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/flagged-respawn/README.md","tags":[],"body":"# flagged-respawn [![Build Status](https://secure.travis-ci.org/js-cli/js-flagged-respawn.svg)](http://travis-ci.org/js-cli/js-flagged-respawn) > A tool for respawning node binaries when special flags are present. [![NPM](https://nodei.co/npm/flagged-respawn.png)](https://nodei.co/npm/flagged-respawn/) ## What is it? Say you wrote a command line tool that runs arbitrary javascript (e.g. task runner, test framework, etc). For the sake of discussion, let's pretend it's a testing harness you've named `testify`. Everything is going splendidly until one day you decide to test some code that relies on a feature behind a v8 flag in node (`--harmony`, for example). Without much thought, you run `testify --harmony spec tests.js`. It doesn't work. After digging around for a bit, you realize this produces a [`process.argv`](http://nodejs.org/docs/latest/api/process.html#process_process_argv) of: `['node', '/usr/local/bin/test', '--harmony', 'spec', 'tests.js']` Crap. The `--harmony` flag is in the wrong place! It should be applied to the **node** command, not our binary. What we actually wanted was this: `['node', '--harmony', '/usr/local/bin/test', 'spec', 'tests.js']` Flagged-respawn fixes this problem and handles all the edge cases respawning creates, such as: - Providing a method to determine if a respawn is needed. - Piping stderr/stdout from the child into the parent. - Making the parent process exit with the same code as the child. - If the child is killed, making the parent exit with the same signal. To see it in action, clone this repository and run `npm install` / `npm run respawn` / `npm run nospawn`. ## Sample Usage ```js #!/usr/bin/env node const flaggedRespawn = require('flagged-respawn'); // get a list of all possible v8 flags for the running version of node const v8flags = require('v8flags').fetch(); flaggedRespawn(v8flags, process.argv, function (ready, child) { if (ready) { console.log('Running!'); // your cli code here } else { console.log('Special flags found, respawning.'); } if (process.pid !== child.pid) { console.log('Respawned to PID:', child.pid); } }); ``` ## Release History * 2016-03-22 - v0.3.2 - fix issue with v8 flags values being dropped * 2014-09-12 - v0.3.1 - use `{ stdio: 'inherit' }` for spawn to maintain colors * 2014-09-11 - v0.3.0 - for real this time * 2014-09-11 - v0.2.0 - cleanup * 2014-09-04 - v0.1.1 - initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/rechoir/README.md","tags":[],"body":"# rechoir [![Build Status](https://secure.travis-ci.org/tkellen/js-rechoir.png)](http://travis-ci.org/tkellen/js-rechoir) > Require any supported file as a node module. [![NPM](https://nodei.co/npm/rechoir.png)](https://nodei.co/npm/rechoir/) ## What is it? This module, in conjunction with [interpret]-like objects can register any file type the npm ecosystem has a module loader for. This library is a dependency of [Liftoff]. ## API ### prepare(config, filepath, requireFrom) Look for a module loader associated with the provided file and attempt require it. If necessary, run any setup required to inject it into [require.extensions](http://nodejs.org/api/globals.html#globals_require_extensions). `config` An [interpret]-like configuration object. `filepath` A file whose type you'd like to register a module loader for. `requireFrom` An optional path to start searching for the module required to load the requested file. Defaults to the directory of `filepath`. If calling this method is successful (aka: it doesn't throw), you can now require files of the type you requested natively. An error with a `failures` property will be thrown if the module loader(s) configured for a given extension cannot be registered. If a loader is already registered, this will simply return `true`. **Note:** While rechoir will automatically load and register transpilers like `coffee-script`, you must provide a local installation. The transpilers are **not** bundled with this module. #### Usage ```js const config = require('interpret').extensions; const rechoir = require('rechoir'); rechoir.prepare(config, './test/fixtures/test.coffee'); rechoir.prepare(config, './test/fixtures/test.csv'); rechoir.prepare(config, './test/fixtures/test.toml'); console.log(require('./test/fixtures/test.coffee')); console.log(require('./test/fixtures/test.csv')); console.log(require('./test/fixtures/test.toml')); ``` [interpret]: http://github.com/tkellen/js-interpret [Liftoff]: http://github.com/tkellen/js-liftoff"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/liftoff/node_modules/resolve/readme.markdown","tags":[],"body":"# resolve implements the [node `require.resolve()` algorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...) such that you can `require.resolve()` on behalf of a file asynchronously and synchronously [![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve) # example asynchronously resolve: ``` js var resolve = require('resolve'); resolve('tap', { basedir: __dirname }, function (err, res) { if (err) console.error(err) else console.log(res) }); ``` ``` $ node example/async.js /home/substack/projects/node-resolve/node_modules/tap/lib/main.js ``` synchronously resolve: ``` js var resolve = require('resolve'); var res = resolve.sync('tap', { basedir: __dirname }); console.log(res); ``` ``` $ node example/sync.js /home/substack/projects/node-resolve/node_modules/tap/lib/main.js ``` # methods ``` js var resolve = require('resolve') ``` ## resolve(id, opts={}, cb) Asynchronously resolve the module path string `id` into `cb(err, res [, pkg])`, where `pkg` (if defined) is the data from `package.json`. options are: * opts.basedir - directory to begin resolving from * opts.package - `package.json` data applicable to the module being loaded * opts.extensions - array of file extensions to search in order * opts.readFile - how to read files asynchronously * opts.isFile - function to asynchronously test whether a file exists * opts.packageFilter - transform the parsed package.json contents before looking at the \"main\" field * opts.pathFilter(pkg, path, relativePath) - transform a path within a package * pkg - package data * path - the path being resolved * relativePath - the path relative from the package.json location * returns - a relative path that will be joined from the package.json location * opts.paths - require.paths array to use if nothing is found on the normal node_modules recursive walk (probably don't use this) * opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: `\"node_modules\"` default `opts` values: ``` javascript { paths: [], basedir: __dirname, extensions: [ '.js' ], readFile: fs.readFile, isFile: function (file, cb) { fs.stat(file, function (err, stat) { if (err && err.code === 'ENOENT') cb(null, false) else if (err) cb(err) else cb(null, stat.isFile()) }); }, moduleDirectory: 'node_modules' } ``` ## resolve.sync(id, opts) Synchronously resolve the module path string `id`, returning the result and throwing an error when `id` can't be resolved. options are: * opts.basedir - directory to begin resolving from * opts.extensions - array of file extensions to search in order * opts.readFile - how to read files synchronously * opts.isFile - function to synchronously test whether a file exists * `opts.packageFilter(pkg, pkgfile)` - transform the parsed package.json * contents before looking at the \"main\" field * opts.paths - require.paths array to use if nothing is found on the normal node_modules recursive walk (probably don't use this) * opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: `\"node_modules\"` default `opts` values: ``` javascript { paths: [], basedir: __dirname, extensions: [ '.js' ], readFileSync: fs.readFileSync, isFile: function (file) { try { return fs.statSync(file).isFile() } catch (e) { return false } }, moduleDirectory: 'node_modules' } ```` ## resolve.isCore(pkg) Return whether a package is in core. # install With [npm](https://npmjs.org) do: ``` npm install resolve ``` # license MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/minimist/readme.markdown","tags":[],"body":"# minimist parse argument options This module is the guts of optimist's argument parser without all the fanciful decoration. [![browser support](https://ci.testling.com/substack/minimist.png)](http://ci.testling.com/substack/minimist) [![build status](https://secure.travis-ci.org/substack/minimist.png)](http://travis-ci.org/substack/minimist) # example ``` js var argv = require('minimist')(process.argv.slice(2)); console.dir(argv); ``` ``` $ node example/parse.js -a beep -b boop { _: [], a: 'beep', b: 'boop' } ``` ``` $ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz { _: [ 'foo', 'bar', 'baz' ], x: 3, y: 4, n: 5, a: true, b: true, c: true, beep: 'boop' } ``` # methods ``` js var parseArgs = require('minimist') ``` ## var argv = parseArgs(args, opts={}) Return an argument object `argv` populated with the array arguments from `args`. `argv._` contains all the arguments that didn't have an option associated with them. Numeric-looking arguments will be returned as numbers unless `opts.string` or `opts.boolean` is set for that argument name. Any arguments after `'--'` will not be parsed and will end up in `argv._`. options can be: * `opts.string` - a string or array of strings argument names to always treat as strings * `opts.boolean` - a boolean, string or array of strings to always treat as booleans. if `true` will treat all double hyphenated arguments without equal signs as boolean (e.g. affects `--foo`, not `-f` or `--foo=bar`) * `opts.alias` - an object mapping string names to strings or arrays of string argument names to use as aliases * `opts.default` - an object mapping string argument names to default values * `opts.stopEarly` - when true, populate `argv._` with everything after the first non-option * `opts['--']` - when true, populate `argv._` with everything before the `--` and `argv['--']` with everything after the `--`. Here's an example: * `opts.unknown` - a function which is invoked with a command line parameter not defined in the `opts` configuration object. If the function returns `false`, the unknown option is not added to `argv`. ``` > require('./')('one two three -- four five --six'.split(' '), { '--': true }) { _: [ 'one', 'two', 'three' ], '--': [ 'four', 'five', '--six' ] } ``` Note that with `opts['--']` set, parsing for arguments still stops after the `--`. # install With [npm](https://npmjs.org) do: ``` npm install minimist ``` # license MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/orchestrator/README.md","tags":[],"body":"[![Build Status](https://secure.travis-ci.org/orchestrator/orchestrator.svg?branch=master)](https://travis-ci.org/orchestrator/orchestrator) [![Dependency Status](https://david-dm.org/orchestrator/orchestrator.svg)](https://david-dm.org/orchestrator/orchestrator) Orchestrator ============ A module for sequencing and executing tasks and dependencies in maximum concurrency Usage ----- ### 1. Get a reference: ```javascript var Orchestrator = require('orchestrator'); var orchestrator = new Orchestrator(); ``` ### 2. Load it up with stuff to do: ```javascript orchestrator.add('thing1', function(){ // do stuff }); orchestrator.add('thing2', function(){ // do stuff }); ``` ### 3. Run the tasks: ```javascript orchestrator.start('thing1', 'thing2', function (err) { // all done }); ``` API --- ### orchestrator.add(name[, deps][, function]); Define a task ```javascript orchestrator.add('thing1', function(){ // do stuff }); ``` #### name Type: `String` The name of the task. #### deps Type: `Array` An array of task names to be executed and completed before your task will run. ```javascript orchestrator.add('mytask', ['array', 'of', 'task', 'names'], function() { // Do stuff }); ``` **Note:** Are your tasks running before the dependencies are complete? Make sure your dependency tasks are correctly using the async run hints: take in a callback or return a promise or event stream. #### fn Type: `function` The function that performs the task's operations. For asynchronous tasks, you need to provide a hint when the task is complete: - Take in a callback - Return a stream or a promise #### examples: **Accept a callback:** ```javascript orchestrator.add('thing2', function(callback){ // do stuff callback(err); }); ``` **Return a promise:** ```javascript var Q = require('q'); orchestrator.add('thing3', function(){ var deferred = Q.defer(); // do async stuff setTimeout(function () { deferred.resolve(); }, 1); return deferred.promise; }); ``` **Return a stream:** (task is marked complete when stream ends) ```javascript var map = require('map-stream'); orchestrator.add('thing4', function(){ var stream = map(function (args, cb) { cb(null, args); }); // do stream stuff return stream; }); ``` **Note:** By default, tasks run with maximum concurrency -- e.g. it launches all the tasks at once and waits for nothing. If you want to create a series where tasks run in a particular order, you need to do two things: - give it a hint to tell it when the task is done, - and give it a hint that a task depends on completion of another. For these examples, let's presume you have two tasks, \"one\" and \"two\" that you specifically want to run in this order: 1. In task \"one\" you add a hint to tell it when the task is done. Either take in a callback and call it when you're done or return a promise or stream that the engine should wait to resolve or end respectively. 2. In task \"two\" you add a hint telling the engine that it depends on completion of the first task. So this example would look like this: ```javascript var Orchestrator = require('orchestrator'); var orchestrator = new Orchestrator(); // takes in a callback so the engine knows when it'll be done orchestrator.add('one', function (cb) { // do stuff -- async or otherwise cb(err); // if err is not null or undefined, the orchestration will stop, and note that it failed }); // identifies a dependent task must be complete before this one begins orchestrator.add('two', ['one'], function () { // task 'one' is done now }); orchestrator.start('one', 'two'); ``` ### orchestrator.hasTask(name); Have you defined a task with this name? #### name Type: `String` The task name to query ### orchestrator.start(tasks...[, cb]); Start running the tasks #### tasks Type: `String` or `Array` of `String`s Tasks to be executed. You may pass any number of tasks as individual arguments. #### cb Type: `function`: `function (err) {` Callback to call after run completed. Passes single argument: `err`: did the orchestration succeed? **Note:** Tasks run concurrently and therefore may not complete in order. **Note:** Orchestrator uses `sequencify` to resolve dependencies before running, and therefore may not start in order. Listen to orchestration events to watch task running. ```javascript orchestrator.start('thing1', 'thing2', 'thing3', 'thing4', function (err) { // all done }); ``` ```javascript orchestrator.start(['thing1','thing2'], ['thing3','thing4']); ``` **FRAGILE:** Orchestrator catches exceptions on sync runs to pass to your callback but doesn't hook to process.uncaughtException so it can't pass those exceptions to your callback **FRAGILE:** Orchestrator will ensure each task and each dependency is run once during an orchestration run even if you specify it to run more than once. (e.g. `orchestrator.start('thing1', 'thing1')` will only run 'thing1' once.) If you need it to run a task multiple times, wait for the orchestration to end (start's callback) then call start again. (e.g. `orchestrator.start('thing1', function () {orchestrator.start('thing1');})`.) Alternatively create a second orchestrator instance. ### orchestrator.stop() Stop an orchestration run currently in process **Note:** It will call the `start()` callback with an `err` noting the orchestration was aborted ### orchestrator.on(event, cb); Listen to orchestrator internals #### event Type: `String` Event name to listen to: - start: from start() method, shows you the task sequence - stop: from stop() method, the queue finished successfully - err: from stop() method, the queue was aborted due to a task error - task_start: from _runTask() method, task was started - task_stop: from _runTask() method, task completed successfully - task_err: from _runTask() method, task errored - task_not_found: from start() method, you're trying to start a task that doesn't exist - task_recursion: from start() method, there are recursive dependencies in your task list #### cb Type: `function`: `function (e) {` Passes single argument: `e`: event details ```javascript orchestrator.on('task_start', function (e) { // e.message is the log message // e.task is the task name if the message applies to a task else `undefined` // e.err is the error if event is 'err' else `undefined` }); // for task_end and task_err: orchestrator.on('task_stop', function (e) { // e is the same object from task_start // e.message is updated to show how the task ended // e.duration is the task run duration (in seconds) }); ``` **Note:** fires either *stop or *err but not both. ### orchestrator.onAll(cb); Listen to all orchestrator events from one callback #### cb Type: `function`: `function (e) {` Passes single argument: `e`: event details ```javascript orchestrator.onAll(function (e) { // e is the original event args // e.src is event name }); ``` LICENSE ------- (MIT License) Copyright (c) 2013 [Richardson & Sons, LLC](http://richardsonandsons.com/) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/orchestrator/node_modules/end-of-stream/README.md","tags":[],"body":"# end-of-stream A node module that calls a callback when a readable/writable/duplex stream has completed or failed. npm install end-of-stream ## Usage Simply pass a stream and a callback to the `eos`. Both legacy streams and streams2 are supported. ``` js var eos = require('end-of-stream'); eos(readableStream, function(err) { if (err) return console.log('stream had an error or closed early'); console.log('stream has ended'); }); eos(writableStream, function(err) { if (err) return console.log('stream had an error or closed early'); console.log('stream has finished'); }); eos(duplexStream, function(err) { if (err) return console.log('stream had an error or closed early'); console.log('stream has ended and finished'); }); eos(duplexStream, {readable:false}, function(err) { if (err) return console.log('stream had an error or closed early'); console.log('stream has ended but might still be writable'); }); eos(duplexStream, {writable:false}, function(err) { if (err) return console.log('stream had an error or closed early'); console.log('stream has ended but might still be readable'); }); eos(readableStream, {error:false}, function(err) { // do not treat emit('error', err) as a end-of-stream }); ``` ## License MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/orchestrator/node_modules/end-of-stream/node_modules/once/README.md","tags":[],"body":"# once Only call a function once. ## usage ```javascript var once = require('once') function load (file, cb) { cb = once(cb) loader.load('file') loader.once('load', cb) loader.once('error', cb) } ``` Or add to the Function.prototype in a responsible way: ```javascript // only has to be done once require('once').proto() function load (file, cb) { cb = cb.once() loader.load('file') loader.once('load', cb) loader.once('error', cb) } ``` Ironically, the prototype feature makes this module twice as complicated as necessary. To check whether you function has been called, use `fn.called`. Once the function is called for the first time the return value of the original function is saved in `fn.value` and subsequent calls will continue to return this value. ```javascript var once = require('once') function load (cb) { cb = once(cb) var stream = createStream() stream.once('data', cb) stream.once('end', function () { if (!cb.called) cb(new Error('not found')) }) } ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/orchestrator/node_modules/end-of-stream/node_modules/once/node_modules/wrappy/README.md","tags":[],"body":"# wrappy Callback wrapping utility ## USAGE ```javascript var wrappy = require(\"wrappy\") // var wrapper = wrappy(wrapperFunction) // make sure a cb is called only once // See also: http://npm.im/once for this specific use case var once = wrappy(function (cb) { var called = false return function () { if (called) return called = true return cb.apply(this, arguments) } }) function printBoo () { console.log('boo') } // has some rando property printBoo.iAmBooPrinter = true var onlyPrintOnce = once(printBoo) onlyPrintOnce() // prints 'boo' onlyPrintOnce() // does nothing // random property is retained! assert.equal(onlyPrintOnce.iAmBooPrinter, true) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/orchestrator/node_modules/sequencify/README.md","tags":[],"body":"![status](https://secure.travis-ci.org/robrich/sequencify.png?branch=master) Sequencify ========== A module for sequencing tasks and dependencies Usage ----- ```javascript var sequencify = require('sequencify'); var items = { a: { name: 'a', dep: [] // other properties as needed }, b: { name: 'b', dep: ['a'] }, c: { name: 'c', dep: ['a'] }, d: { name: 'd', dep: ['c'] }, }; var names = ['d', 'b', 'c', 'a']; // The names of the items you want arranged, need not be all var results = []; sequencify(items, names, results); console.log(results); // ['a','b','c','d']; ``` LICENSE ------- (MIT License) Copyright (c) 2013 [Richardson & Sons, LLC](http://richardsonandsons.com/) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/orchestrator/node_modules/stream-consume/README.md","tags":[],"body":"# stream-consume A node module ensures a Readable stream continues flowing if it's not piped to another destination. npm install stream-consume ## Usage Simply pass a stream to `stream-consume`. Both legacy streams and streams2 are supported. ``` js var consume = require('stream-consume'); consume(readableStream); ``` ## Details Only Readable streams are processed (as determined by presence of `readable` property and a `resume` property that is a function). If called with anything else, it's a NOP. For a streams2 stream (as determined by presence of a `_readableState` property), nothing is done if the stream has already been piped to at least one other destination. `resume()` is used to cause the stream to continue flowing. ## License The MIT License (MIT) Copyright (c) 2014 Aron Nopanen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/pretty-hrtime/README.md","tags":[],"body":"[![Build Status](https://secure.travis-ci.org/robrich/pretty-hrtime.png?branch=master)](https://travis-ci.org/robrich/pretty-hrtime) [![Dependency Status](https://david-dm.org/robrich/pretty-hrtime.png)](https://david-dm.org/robrich/pretty-hrtime) pretty-hrtime ============ [process.hrtime()](http://nodejs.org/api/process.html#process_process_hrtime) to words Usage ----- ```javascript var prettyHrtime = require('pretty-hrtime'); var start = process.hrtime(); // do stuff var end = process.hrtime(start); var words = prettyHrtime(end); console.log(words); // '1.2 ms' words = prettyHrtime(end, {verbose:true}); console.log(words); // '1 millisecond 209 microseconds' words = prettyHrtime(end, {precise:true}); console.log(words); // '1.20958 ms' ``` Note: process.hrtime() has been available since 0.7.6. See [http://nodejs.org/changelog.html](http://nodejs.org/changelog.html) and [https://github.com/joyent/node/commit/f06abd](https://github.com/joyent/node/commit/f06abd). LICENSE ------- (MIT License) Copyright (c) 2013 [Richardson & Sons, LLC](http://richardsonandsons.com/) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/semver/README.md","tags":[],"body":"semver(1) -- The semantic versioner for npm =========================================== ## Usage $ npm install semver semver.valid('1.2.3') // '1.2.3' semver.valid('a.b.c') // null semver.clean(' =v1.2.3 ') // '1.2.3' semver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true semver.gt('1.2.3', '9.8.7') // false semver.lt('1.2.3', '9.8.7') // true As a command-line utility: $ semver -h Usage: semver [ [...]] [-r | -i | --preid | -l | -rv] Test if version(s) satisfy the supplied range(s), and sort them. Multiple versions or ranges may be supplied, unless increment option is specified. In that case, only a single version may be used, and it is incremented by the specified level Program exits successfully if any valid version satisfies all supplied ranges, and prints all satisfying versions. If no versions are valid, or ranges are not satisfied, then exits failure. Versions are printed in ascending order, so supplying multiple versions to the utility will just sort them. ## Versions A \"version\" is described by the `v2.0.0` specification found at . A leading `\"=\"` or `\"v\"` character is stripped off and ignored. ## Ranges A `version range` is a set of `comparators` which specify versions that satisfy the range. A `comparator` is composed of an `operator` and a `version`. The set of primitive `operators` is: * `` Greater than * `>=` Greater than or equal to * `=` Equal. If no operator is specified, then equality is assumed, so this operator is optional, but MAY be included. For example, the comparator `>=1.2.7` would match the versions `1.2.7`, `1.2.8`, `2.5.3`, and `1.3.9`, but not the versions `1.2.6` or `1.1.0`. Comparators can be joined by whitespace to form a `comparator set`, which is satisfied by the **intersection** of all of the comparators it includes. A range is composed of one or more comparator sets, joined by `||`. A version matches a range if and only if every comparator in at least one of the `||`-separated comparator sets is satisfied by the version. For example, the range `>=1.2.7 =1.2.9 1.2.3-alpha.3` would be allowed to match the version `1.2.3-alpha.7`, but it would *not* be satisfied by `3.4.5-alpha.9`, even though `3.4.5-alpha.9` is technically \"greater than\" `1.2.3-alpha.3` according to the SemVer sort rules. The version range only accepts prerelease tags on the `1.2.3` version. The version `3.4.5` *would* satisfy the range, because it does not have a prerelease flag, and `3.4.5` is greater than `1.2.3-alpha.7`. The purpose for this behavior is twofold. First, prerelease versions frequently are updated very quickly, and contain many breaking changes that are (by the author's design) not yet fit for public consumption. Therefore, by default, they are excluded from range matching semantics. Second, a user who has opted into using a prerelease version has clearly indicated the intent to use *that specific* set of alpha/beta/rc versions. By including a prerelease tag in the range, the user is indicating that they are aware of the risk. However, it is still not appropriate to assume that they have opted into taking a similar risk on the *next* set of prerelease versions. #### Prerelease Identifiers The method `.inc` takes an additional `identifier` string argument that will append the value of the string as a prerelease identifier: ```javascript > semver.inc('1.2.3', 'pre', 'beta') '1.2.4-beta.0' ``` command-line example: ```shell $ semver 1.2.3 -i prerelease --preid beta 1.2.4-beta.0 ``` Which then can be used to increment further: ```shell $ semver 1.2.4-beta.0 -i prerelease 1.2.4-beta.1 ``` ### Advanced Range Syntax Advanced range syntax desugars to primitive comparators in deterministic ways. Advanced ranges may be combined in the same way as primitive comparators using white space or `||`. #### Hyphen Ranges `X.Y.Z - A.B.C` Specifies an inclusive set. * `1.2.3 - 2.3.4` := `>=1.2.3 =1.2.0 =1.2.3 =1.2.3 =0.0.0` (Any version satisfies) * `1.x` := `>=1.0.0 =1.2.0 =0.0.0` * `1` := `1.x.x` := `>=1.0.0 =1.2.0 =1.2.3 =1.2.3 =1.2.0 =1.2.0 =1.0.0 =1.0.0 =0.2.3 =0.2.3 =0.2.0 =0.2.0 =0.0.0 =0.0.0 =1.2.3-beta.2 =0.1.0`, and *no* updates for versions `0.0.X`. Many authors treat a `0.x` version as if the `x` were the major \"breaking-change\" indicator. Caret ranges are ideal when an author may make breaking changes between `0.2.4` and `0.3.0` releases, which is a common practice. However, it presumes that there will *not* be breaking changes between `0.2.4` and `0.2.5`. It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices. * `^1.2.3` := `>=1.2.3 =0.2.3 =0.0.3 =1.2.3-beta.2 =0.0.3-beta =1.2.0 =0.0.0 =0.0.0 =1.0.0 =0.0.0 v2` * `gte(v1, v2)`: `v1 >= v2` * `lt(v1, v2)`: `v1 '` or `'2.0.0` would have a hole from `1.2.9` until `2.0.0`, so the version `1.2.10` would not be greater than the range (because `2.0.1` satisfies, which is higher), nor less than the range (since `1.2.8` satisfies, which is lower), and it also does not satisfy the range. If you want to know if a version satisfies or does not satisfy a range, use the `satisfies(version, range)` function."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/tildify/node_modules/os-homedir/readme.md","tags":[],"body":"# os-homedir [![Build Status](https://travis-ci.org/sindresorhus/os-homedir.svg?branch=master)](https://travis-ci.org/sindresorhus/os-homedir) > io.js 2.3.0 [`os.homedir()`](https://iojs.org/api/os.html#os_os_homedir) ponyfill > Ponyfill: A polyfill that doesn't overwrite the native method ## Install ``` $ npm install --save os-homedir ``` ## Usage ```js var osHomedir = require('os-homedir'); console.log(osHomedir()); //=> /Users/sindresorhus ``` ## Related - [user-home](https://github.com/sindresorhus/user-home) - Same as this module but caches the result - [home-or-tmp](https://github.com/sindresorhus/home-or-tmp) - Get the user home directory with fallback to the system temp directory ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/tildify/readme.md","tags":[],"body":"# tildify [![Build Status](https://travis-ci.org/sindresorhus/tildify.svg?branch=master)](https://travis-ci.org/sindresorhus/tildify) > Convert an absolute path to a tilde path: `/Users/sindresorhus/dev` → `~/dev` ## Install ``` $ npm install --save tildify ``` ## Usage ```js const tildify = require('tildify'); tildify('/Users/sindresorhus/dev'); //=> '~/dev' ``` ## Related See [untildify](https://github.com/sindresorhus/untildify) for the inverse. ## License MIT © [Sindre Sorhus](https://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/v8flags/README.md","tags":[],"body":"# v8flags [![Build Status](https://secure.travis-ci.org/js-cli/js-v8flags.png)](http://travis-ci.org/js-cli/js-v8flags) [![Build status](https://ci.appveyor.com/api/projects/status/9psgmwayx9kpol1a?svg=true)](https://ci.appveyor.com/project/js-cli/js-v8flags) > Get available v8 flags. [![NPM](https://nodei.co/npm/v8flags.png)](https://nodei.co/npm/v8flags/) ## Example ```js const v8flags = require('v8flags'); v8flags(function (err, results) { console.log(results); // [ '--use_strict', // '--es5_readonly', // '--es52_globals', // '--harmony_typeof', // '--harmony_scoping', // '--harmony_modules', // '--harmony_proxies', // '--harmony_collections', // '--harmony', // ... }); ``` ## Release History * 2015-12-07 - v2.0.11 - cache to temp directory if home is present but unwritable * 2015-07-28 - v2.0.10 - don't throw for electron runtime, just call back with empty array * 2015-06-25 - v2.0.9 - call back with flags even if cache file can't be written * 2015-06-15 - v2.0.7 - revert to 2.0.5 behavior. * 2015-06-15 - v2.0.6 - store cache file in ~/.cache or ~/AppData/Local depending on platform * 2015-04-18 - v2.0.5 - attempt to require config file, if this throws for any reason, fopen w+ and re-create * 2015-04-16 - v2.0.4 - when concurrent processes are run and no config exists, don't append to the cached config. * 2015-03-31 - v2.0.3 - prefer to store config files in user home over tmp * 2015-01-18 - v2.0.2 - keep his dark tentacles contained * 2015-01-15 - v2.0.1 - store temp file in `os.tmpdir()`, drop support for node 0.8 * 2015-01-15 - v2.0.0 - make the stupid thing async * 2014-12-22 - v1.0.8 - exclude `--help` flag * 2014-12-20 - v1.0.7 - pre-cache flags for every version of node from 0.8 to 0.11 * 2014-12-09 - v1.0.6 - revert to 1.0.0 behavior * 2014-11-26 - v1.0.5 - get node executable from `process.execPath` * 2014-11-18 - v1.0.4 - wrap node executable path in quotes * 2014-11-17 - v1.0.3 - get node executable during npm install via `process.env.NODE` * 2014-11-17 - v1.0.2 - get node executable from `process.env._` * 2014-09-03 - v1.0.0 - first major version release * 2014-09-02 - v0.3.0 - keep -- in flag names * 2014-09-02 - v0.2.0 - cache flags * 2014-05-09 - v0.1.0 - initial release"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/v8flags/node_modules/user-home/readme.md","tags":[],"body":"# user-home [![Build Status](https://travis-ci.org/sindresorhus/user-home.svg?branch=master)](https://travis-ci.org/sindresorhus/user-home) > Get the path to the user home directory ## Install ```sh $ npm install --save user-home ``` ## Usage ```js var userHome = require('user-home'); console.log(userHome); //=> /Users/sindresorhus ``` Returns `null` in the unlikely scenario that the home directory can't be found. ## CLI ```sh $ npm install --global user-home ``` ```sh $ user-home --help Example $ user-home /Users/sindresorhus ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/README.md","tags":[],"body":"# vinyl-fs [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status](https://david-dm.org/wearefractal/vinyl.png?theme=shields.io)](https://david-dm.org/wearefractal/vinyl-fs) ## Information Packagevinyl-fs Description Vinyl adapter for the file system Node Version >= 0.10 ## Usage ```javascript var map = require('map-stream'); var fs = require('vinyl-fs'); var log = function(file, cb) { console.log(file.path); cb(null, file); }; fs.src(['./js/**/*.js', '!./js/vendor/*.js']) .pipe(map(log)) .pipe(fs.dest('./output')); ``` ## API ### src(globs[, opt]) - Takes a glob string or an array of glob strings as the first argument. - Possible options for the second argument: - cwd - Specify the working directory the folder is relative to. Default is `process.cwd()` - base - Specify the folder relative to the cwd. Default is where the glob begins. This is used to determine the file names when saving in `.dest()` - buffer - `true` or `false` if you want to buffer the file. - Default value is `true` - `false` will make file.contents a paused Stream - read - `true` or `false` if you want the file to be read or not. Useful for stuff like `rm`ing files. - Default value is `true` - `false` will disable writing the file to disk via `.dest()` - Any glob-related options are documented in [glob-stream] and [node-glob] - Returns a Readable/Writable stream. - On write the stream will simply pass items through. - This stream emits matching [vinyl] File objects ### watch(globs[, opt, cb]) This is just [glob-watcher] - Takes a glob string or an array of glob strings as the first argument. - Possible options for the second argument: - Any options are passed to [gaze] - Returns an EventEmitter - 'changed' event is emitted on each file change - Optionally calls the callback on each change event ### dest(folder[, opt]) - Takes a folder path as the first argument. - First argument can also be a function that takes in a file and returns a folder path. - Possible options for the second argument: - cwd - Specify the working directory the folder is relative to. Default is `process.cwd()` - mode - Specify the mode the files should be created with. Default is the mode of the input file (file.stat.mode) - Returns a Readable/Writable stream. - On write the stream will save the [vinyl] File to disk at the folder/cwd specified. - After writing the file to disk, it will be emitted from the stream so you can keep piping these around - The file will be modified after being written to this stream - `cwd`, `base`, and `path` will be overwritten to match the folder - `stat.mode` will be overwritten if you used a mode parameter - `contents` will have it's position reset to the beginning if it is a stream [glob-stream]: https://github.com/wearefractal/glob-stream [node-glob]: https://github.com/isaacs/node-glob [gaze]: https://github.com/shama/gaze [glob-watcher]: https://github.com/wearefractal/glob-watcher [vinyl]: https://github.com/wearefractal/vinyl [npm-url]: https://npmjs.org/package/vinyl-fs [npm-image]: https://badge.fury.io/js/vinyl-fs.png [travis-url]: https://travis-ci.org/wearefractal/vinyl-fs [travis-image]: https://travis-ci.org/wearefractal/vinyl-fs.png?branch=master [coveralls-url]: https://coveralls.io/r/wearefractal/vinyl-fs [coveralls-image]: https://coveralls.io/repos/wearefractal/vinyl-fs/badge.png [depstat-url]: https://david-dm.org/wearefractal/vinyl-fs [depstat-image]: https://david-dm.org/wearefractal/vinyl-fs.png"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/defaults/README.md","tags":[],"body":"# defaults A simple one level options merge utility ## install `npm install defaults` ## use ```javascript var defaults = require('defaults'); var handle = function(options, fn) { options = defaults(options, { timeout: 100 }); setTimeout(function() { fn(options); }, options.timeout); } handle({ timeout: 1000 }, function() { // we're here 1000 ms later }); handle({ timeout: 10000 }, function() { // we're here 10s later }); ``` ## summary this module exports a function that takes 2 arguments: `options` and `defaults`. When called, it overrides all of `undefined` properties in `options` with the clones of properties defined in `defaults` Sidecases: if called with a falsy `options` value, options will be initialized to a new object before being merged onto. ## license [MIT](LICENSE)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/defaults/node_modules/clone/README.md","tags":[],"body":"# clone [![build status](https://secure.travis-ci.org/pvorb/node-clone.png)](http://travis-ci.org/pvorb/node-clone) [![info badge](https://nodei.co/npm/clone.png?downloads=true&downloadRank=true&stars=true)](http://npm-stat.com/charts.html?package=clone) offers foolproof _deep cloning_ of objects, arrays, numbers, strings etc. in JavaScript. ## Installation npm install clone (It also works with browserify, ender or standalone.) ## Example ~~~ javascript var clone = require('clone'); var a, b; a = { foo: { bar: 'baz' } }; // initial value of a b = clone(a); // clone a -> b a.foo.bar = 'foo'; // change a console.log(a); // show a console.log(b); // show b ~~~ This will print: ~~~ javascript { foo: { bar: 'foo' } } { foo: { bar: 'baz' } } ~~~ **clone** masters cloning simple objects (even with custom prototype), arrays, Date objects, and RegExp objects. Everything is cloned recursively, so that you can clone dates in arrays in objects, for example. ## API `clone(val, circular, depth)` * `val` -- the value that you want to clone, any type allowed * `circular` -- boolean Call `clone` with `circular` set to `false` if you are certain that `obj` contains no circular references. This will give better performance if needed. There is no error if `undefined` or `null` is passed as `obj`. * `depth` -- depth to which the object is to be cloned (optional, defaults to infinity) `clone.clonePrototype(obj)` * `obj` -- the object that you want to clone Does a prototype clone as [described by Oran Looney](http://oranlooney.com/functional-javascript/). ## Circular References ~~~ javascript var a, b; a = { hello: 'world' }; a.myself = a; b = clone(a); console.log(b); ~~~ This will print: ~~~ javascript { hello: \"world\", myself: [Circular] } ~~~ So, `b.myself` points to `b`, not `a`. Neat! ## Test npm test ## Caveat Some special objects like a socket or `process.stdout`/`stderr` are known to not be cloneable. If you find other objects that cannot be cloned, please [open an issue](https://github.com/pvorb/node-clone/issues/new). ## Bugs and Issues If you encounter any bugs or issues, feel free to [open an issue at github](https://github.com/pvorb/node-clone/issues) or send me an email to . I also always like to hear from you, if you’re using my code. ## License Copyright © 2011-2015 [Paul Vorbach](http://paul.vorba.ch/) and [contributors](https://github.com/pvorb/node-clone/graphs/contributors). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/defaults/node_modules/clone/test-apart-ctx.html","tags":[],"body":"Clone Test-Suite (Browser)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/defaults/node_modules/clone/test.html","tags":[],"body":"Clone Test-Suite (Browser) Clone Test-Suite (Browser) Tests started: ; Tests finished: ."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/README.md","tags":[],"body":"# glob-stream [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status][david-image]][david-url] ## Information Packageglob-stream Description File system globs as a stream Node Version >= 0.9 This is a simple wrapper around node-glob to make it streamy. ## Usage ```javascript var gs = require('glob-stream'); var stream = gs.create(\"./files/**/*.coffee\", {options}); stream.on('data', function(file){ // file has path, base, and cwd attrs }); ``` You can pass any combination of globs. One caveat is that you can not only pass a glob negation, you must give it at least one positive glob so it knows where to start. All given must match for the file to be returned. ### Options - cwd - Default is `process.cwd()` - base - Default is everything before a glob starts (see [glob2base](https://github.com/wearefractal/glob2base)) - cwdbase - Default is `false` - When true it is the same as saying opt.base = opt.cwd This argument is passed directly to [node-glob](https://github.com/isaacs/node-glob) so check there for more options #### Glob ```javascript var stream = gs.create([\"./**/*.js\", \"!./node_modules/**/*.*\"]); ``` [npm-url]: https://npmjs.org/package/glob-stream [npm-image]: https://badge.fury.io/js/glob-stream.png [travis-url]: https://travis-ci.org/wearefractal/glob-stream [travis-image]: https://travis-ci.org/wearefractal/glob-stream.png?branch=master [coveralls-url]: https://coveralls.io/r/wearefractal/glob-stream [coveralls-image]: https://coveralls.io/repos/wearefractal/glob-stream/badge.png [depstat-url]: https://david-dm.org/wearefractal/glob-stream [depstat-image]: https://david-dm.org/wearefractal/glob-stream.png [david-url]: https://david-dm.org/wearefractal/glob-stream [david-image]: https://david-dm.org/wearefractal/glob-stream.png?theme=shields.io"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/glob/README.md","tags":[],"body":"[![Build Status](https://travis-ci.org/isaacs/node-glob.svg?branch=master)](https://travis-ci.org/isaacs/node-glob/) [![Dependency Status](https://david-dm.org/isaacs/node-glob.svg)](https://david-dm.org/isaacs/node-glob) [![devDependency Status](https://david-dm.org/isaacs/node-glob/dev-status.svg)](https://david-dm.org/isaacs/node-glob#info=devDependencies) [![optionalDependency Status](https://david-dm.org/isaacs/node-glob/optional-status.svg)](https://david-dm.org/isaacs/node-glob#info=optionalDependencies) # Glob Match files using the patterns the shell uses, like stars and stuff. This is a glob implementation in JavaScript. It uses the `minimatch` library to do its matching. ![](oh-my-glob.gif) ## Usage ```javascript var glob = require(\"glob\") // options is optional glob(\"**/*.js\", options, function (er, files) { // files is an array of filenames. // If the `nonull` option is set, and nothing // was found, then files is [\"**/*.js\"] // er is an error object or null. }) ``` ## Glob Primer \"Globs\" are the patterns you type when you do stuff like `ls *.js` on the command line, or put `build/*` in a `.gitignore` file. Before parsing the path part patterns, braced sections are expanded into a set. Braced sections start with `{` and end with `}`, with any number of comma-delimited sections within. Braced sections may contain slash characters, so `a{/b/c,bcd}` would expand into `a/b/c` and `abcd`. The following characters have special magic meaning when used in a path portion: * `*` Matches 0 or more characters in a single path portion * `?` Matches 1 character * `[...]` Matches a range of characters, similar to a RegExp range. If the first character of the range is `!` or `^` then it matches any character not in the range. * `!(pattern|pattern|pattern)` Matches anything that does not match any of the patterns provided. * `?(pattern|pattern|pattern)` Matches zero or one occurrence of the patterns provided. * `+(pattern|pattern|pattern)` Matches one or more occurrences of the patterns provided. * `*(a|b|c)` Matches zero or more occurrences of the patterns provided * `@(pattern|pat*|pat?erN)` Matches exactly one of the patterns provided * `**` If a \"globstar\" is alone in a path portion, then it matches zero or more directories and subdirectories searching for matches. It does not crawl symlinked directories. ### Dots If a file or directory path portion has a `.` as the first character, then it will not match any glob pattern unless that pattern's corresponding path part also has a `.` as its first character. For example, the pattern `a/.*/c` would match the file at `a/.b/c`. However the pattern `a/*/c` would not, because `*` does not start with a dot character. You can make glob treat dots as normal characters by setting `dot:true` in the options. ### Basename Matching If you set `matchBase:true` in the options, and the pattern has no slashes in it, then it will seek for any file anywhere in the tree with a matching basename. For example, `*.js` would match `test/simple/basic.js`. ### Negation The intent for negation would be for a pattern starting with `!` to match everything that *doesn't* match the supplied pattern. However, the implementation is weird, and for the time being, this should be avoided. The behavior will change or be deprecated in version 5. ### Empty Sets If no matching files are found, then an empty array is returned. This differs from the shell, where the pattern itself is returned. For example: $ echo a*s*d*f a*s*d*f To get the bash-style behavior, set the `nonull:true` in the options. ### See Also: * `man sh` * `man bash` (Search for \"Pattern Matching\") * `man 3 fnmatch` * `man 5 gitignore` * [minimatch documentation](https://github.com/isaacs/minimatch) ## glob.hasMagic(pattern, [options]) Returns `true` if there are any special characters in the pattern, and `false` otherwise. Note that the options affect the results. If `noext:true` is set in the options object, then `+(a|b)` will not be considered a magic pattern. If the pattern has a brace expansion, like `a/{b/c,x/y}` then that is considered magical, unless `nobrace:true` is set in the options. ## glob(pattern, [options], cb) * `pattern` {String} Pattern to be matched * `options` {Object} * `cb` {Function} * `err` {Error | null} * `matches` {Array} filenames found matching the pattern Perform an asynchronous glob search. ## glob.sync(pattern, [options]) * `pattern` {String} Pattern to be matched * `options` {Object} * return: {Array} filenames found matching the pattern Perform a synchronous glob search. ## Class: glob.Glob Create a Glob object by instantiating the `glob.Glob` class. ```javascript var Glob = require(\"glob\").Glob var mg = new Glob(pattern, options, cb) ``` It's an EventEmitter, and starts walking the filesystem to find matches immediately. ### new glob.Glob(pattern, [options], [cb]) * `pattern` {String} pattern to search for * `options` {Object} * `cb` {Function} Called when an error occurs, or matches are found * `err` {Error | null} * `matches` {Array} filenames found matching the pattern Note that if the `sync` flag is set in the options, then matches will be immediately available on the `g.found` member. ### Properties * `minimatch` The minimatch object that the glob uses. * `options` The options object passed in. * `aborted` Boolean which is set to true when calling `abort()`. There is no way at this time to continue a glob search after aborting, but you can re-use the statCache to avoid having to duplicate syscalls. * `statCache` Collection of all the stat results the glob search performed. * `cache` Convenience object. Each field has the following possible values: * `false` - Path does not exist * `true` - Path exists * `'DIR'` - Path exists, and is not a directory * `'FILE'` - Path exists, and is a directory * `[file, entries, ...]` - Path exists, is a directory, and the array value is the results of `fs.readdir` * `statCache` Cache of `fs.stat` results, to prevent statting the same path multiple times. * `symlinks` A record of which paths are symbolic links, which is relevant in resolving `**` patterns. * `realpathCache` An optional object which is passed to `fs.realpath` to minimize unnecessary syscalls. It is stored on the instantiated Glob object, and may be re-used. ### Events * `end` When the matching is finished, this is emitted with all the matches found. If the `nonull` option is set, and no match was found, then the `matches` list contains the original pattern. The matches are sorted, unless the `nosort` flag is set. * `match` Every time a match is found, this is emitted with the matched. * `error` Emitted when an unexpected error is encountered, or whenever any fs error occurs if `options.strict` is set. * `abort` When `abort()` is called, this event is raised. ### Methods * `pause` Temporarily stop the search * `resume` Resume the search * `abort` Stop the search forever ### Options All the options that can be passed to Minimatch can also be passed to Glob to change pattern matching behavior. Also, some have been added, or have glob-specific ramifications. All options are false by default, unless otherwise noted. All options are added to the Glob object, as well. If you are running many `glob` operations, you can pass a Glob object as the `options` argument to a subsequent operation to shortcut some `stat` and `readdir` calls. At the very least, you may pass in shared `symlinks`, `statCache`, `realpathCache`, and `cache` options, so that parallel glob operations will be sped up by sharing information about the filesystem. * `cwd` The current working directory in which to search. Defaults to `process.cwd()`. * `root` The place where patterns starting with `/` will be mounted onto. Defaults to `path.resolve(options.cwd, \"/\")` (`/` on Unix systems, and `C:\\` or some such on Windows.) * `dot` Include `.dot` files in normal matches and `globstar` matches. Note that an explicit dot in a portion of the pattern will always match dot files. * `nomount` By default, a pattern starting with a forward-slash will be \"mounted\" onto the root setting, so that a valid filesystem path is returned. Set this flag to disable that behavior. * `mark` Add a `/` character to directory matches. Note that this requires additional stat calls. * `nosort` Don't sort the results. * `stat` Set to true to stat *all* results. This reduces performance somewhat, and is completely unnecessary, unless `readdir` is presumed to be an untrustworthy indicator of file existence. * `silent` When an unusual error is encountered when attempting to read a directory, a warning will be printed to stderr. Set the `silent` option to true to suppress these warnings. * `strict` When an unusual error is encountered when attempting to read a directory, the process will just continue on in search of other matches. Set the `strict` option to raise an error in these cases. * `cache` See `cache` property above. Pass in a previously generated cache object to save some fs calls. * `statCache` A cache of results of filesystem information, to prevent unnecessary stat calls. While it should not normally be necessary to set this, you may pass the statCache from one glob() call to the options object of another, if you know that the filesystem will not change between calls. (See \"Race Conditions\" below.) * `symlinks` A cache of known symbolic links. You may pass in a previously generated `symlinks` object to save `lstat` calls when resolving `**` matches. * `sync` DEPRECATED: use `glob.sync(pattern, opts)` instead. * `nounique` In some cases, brace-expanded patterns can result in the same file showing up multiple times in the result set. By default, this implementation prevents duplicates in the result set. Set this flag to disable that behavior. * `nonull` Set to never return an empty set, instead returning a set containing the pattern itself. This is the default in glob(3). * `debug` Set to enable debug logging in minimatch and glob. * `nobrace` Do not expand `{a,b}` and `{1..3}` brace sets. * `noglobstar` Do not match `**` against multiple filenames. (Ie, treat it as a normal `*` instead.) * `noext` Do not match `+(a|b)` \"extglob\" patterns. * `nocase` Perform a case-insensitive match. Note: on case-insensitive filesystems, non-magic patterns will match by default, since `stat` and `readdir` will not raise errors. * `matchBase` Perform a basename-only match if the pattern does not contain any slash characters. That is, `*.js` would be treated as equivalent to `**/*.js`, matching all js files in all directories. * `nonegate` Suppress `negate` behavior. (See below.) * `nocomment` Suppress `comment` behavior. (See below.) * `nonull` Return the pattern when no matches are found. * `nodir` Do not match directories, only files. (Note: to match *only* directories, simply put a `/` at the end of the pattern.) * `ignore` Add a pattern or an array of patterns to exclude matches. * `follow` Follow symlinked directories when expanding `**` patterns. Note that this can result in a lot of duplicate references in the presence of cyclic links. * `realpath` Set to true to call `fs.realpath` on all of the results. In the case of a symlink that cannot be resolved, the full absolute path to the matched entry is returned (though it will usually be a broken symlink) ## Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between node-glob and other implementations, and are intentional. If the pattern starts with a `!` character, then it is negated. Set the `nonegate` flag to suppress this behavior, and treat leading `!` characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like `!(a|B)`. Multiple `!` characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with `#`, then it is treated as a comment, and will not match anything. Use `\\#` to match a literal `#` at the start of a line, or set the `nocomment` flag to suppress this behavior. The double-star character `**` is supported by default, unless the `noglobstar` flag is set. This is supported in the manner of bsdglob and bash 4.3, where `**` only has special significance if it is the only thing in a path part. That is, `a/**/b` will match `a/x/y/b`, but `a/**b` will not. Note that symlinked directories are not crawled as part of a `**`, though their contents may match against subsequent portions of the pattern. This prevents infinite loops and duplicates and the like. If an escaped pattern has no matches, and the `nonull` flag is set, then glob returns the pattern as-provided, rather than interpreting the character escapes. For example, `glob.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than `\"*a?\"`. This is akin to setting the `nullglob` option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like `+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded **first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are checked for validity. Since those two are valid, matching proceeds. ## Windows **Please only use forward-slashes in glob expressions.** Though windows uses either `/` or `\\` as its path separator, only `/` characters are used by this glob implementation. You must use forward-slashes **only** in glob expressions. Back-slashes will always be interpreted as escape characters, not path separators. Results from absolute patterns such as `/foo/*` are mounted onto the root setting using `path.join`. On windows, this will by default result in `/foo/*` matching `C:\\foo\\bar.txt`. ## Race Conditions Glob searching, by its very nature, is susceptible to race conditions, since it relies on directory walking and such. As a result, it is possible that a file that exists when glob looks for it may have been deleted or modified by the time it returns the result. As part of its internal implementation, this program caches all stat and readdir calls that it makes, in order to cut down on system overhead. However, this also makes it even more susceptible to races, especially if the cache or statCache objects are reused between glob calls. Users are thus advised not to use a glob result as a guarantee of filesystem state in the face of rapid changes. For the vast majority of operations, this is never a problem. ## Contributing Any change to behavior (including bugfixes) must come with a test. Patches that fail tests or reduce performance will be rejected. ``` # to run tests npm test # to re-generate test fixtures npm run test-regen # to benchmark against bash/zsh npm run bench # to profile javascript npm run prof ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/glob/node_modules/inflight/README.md","tags":[],"body":"# inflight Add callbacks to requests in flight to avoid async duplication ## USAGE ```javascript var inflight = require('inflight') // some request that does some stuff function req(key, callback) { // key is any random string. like a url or filename or whatever. // // will return either a falsey value, indicating that the // request for this key is already in flight, or a new callback // which when called will call all callbacks passed to inflightk // with the same key callback = inflight(key, callback) // If we got a falsey value back, then there's already a req going if (!callback) return // this is where you'd fetch the url or whatever // callback is also once()-ified, so it can safely be assigned // to multiple events etc. First call wins. setTimeout(function() { callback(null, key) }, 100) } // only assigns a single setTimeout // when it dings, all cbs get called req('foo', cb1) req('foo', cb2) req('foo', cb3) req('foo', cb4) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/glob/node_modules/inflight/node_modules/wrappy/README.md","tags":[],"body":"# wrappy Callback wrapping utility ## USAGE ```javascript var wrappy = require(\"wrappy\") // var wrapper = wrappy(wrapperFunction) // make sure a cb is called only once // See also: http://npm.im/once for this specific use case var once = wrappy(function (cb) { var called = false return function () { if (called) return called = true return cb.apply(this, arguments) } }) function printBoo () { console.log('boo') } // has some rando property printBoo.iAmBooPrinter = true var onlyPrintOnce = once(printBoo) onlyPrintOnce() // prints 'boo' onlyPrintOnce() // does nothing // random property is retained! assert.equal(onlyPrintOnce.iAmBooPrinter, true) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/glob/node_modules/inherits/README.md","tags":[],"body":"Browser-friendly inheritance fully compatible with standard node.js [inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor). This package exports standard `inherits` from node.js `util` module in node environment, but also provides alternative browser-friendly implementation through [browser field](https://gist.github.com/shtylman/4339901). Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of `util`. It also has a shim for old browsers with no `Object.create` support. While keeping you sure you are using standard `inherits` implementation in node.js environment, it allows bundlers such as [browserify](https://github.com/substack/node-browserify) to not include full `util` package to your client code if all you need is just `inherits` function. It worth, because browser shim for `util` package is large and `inherits` is often the single function you need from it. It's recommended to use this package instead of `require('util').inherits` for any code that has chances to be used not only in node.js but in browser too. ## usage ```js var inherits = require('inherits'); // then use exactly as the standard one ``` ## note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js `inherits`. If you are using version ~1.0 and planning to switch to ~2.0, be careful: * new version uses `super_` instead of `super` for referencing superclass * new version overwrites current prototype while old one preserves any existing fields on it"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/glob/node_modules/once/README.md","tags":[],"body":"# once Only call a function once. ## usage ```javascript var once = require('once') function load (file, cb) { cb = once(cb) loader.load('file') loader.once('load', cb) loader.once('error', cb) } ``` Or add to the Function.prototype in a responsible way: ```javascript // only has to be done once require('once').proto() function load (file, cb) { cb = cb.once() loader.load('file') loader.once('load', cb) loader.once('error', cb) } ``` Ironically, the prototype feature makes this module twice as complicated as necessary. To check whether you function has been called, use `fn.called`. Once the function is called for the first time the return value of the original function is saved in `fn.value` and subsequent calls will continue to return this value. ```javascript var once = require('once') function load (cb) { cb = once(cb) var stream = createStream() stream.once('data', cb) stream.once('end', function () { if (!cb.called) cb(new Error('not found')) }) } ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/glob/node_modules/once/node_modules/wrappy/README.md","tags":[],"body":"# wrappy Callback wrapping utility ## USAGE ```javascript var wrappy = require(\"wrappy\") // var wrapper = wrappy(wrapperFunction) // make sure a cb is called only once // See also: http://npm.im/once for this specific use case var once = wrappy(function (cb) { var called = false return function () { if (called) return called = true return cb.apply(this, arguments) } }) function printBoo () { console.log('boo') } // has some rando property printBoo.iAmBooPrinter = true var onlyPrintOnce = once(printBoo) onlyPrintOnce() // prints 'boo' onlyPrintOnce() // does nothing // random property is retained! assert.equal(onlyPrintOnce.iAmBooPrinter, true) ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/glob2base/README.md","tags":[],"body":"# glob2base [![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Support us][gittip-image]][gittip-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] ## Information Packageglob2base Description Extracts a base path from a node-glob instance Node Version >= 0.10 ## Usage The module is a function that takes in a node-glob instance and returns a string. Basically it just gives you everything before any globbing/matching happens. ```javascript var glob2base = require('glob2base'); var glob = require('glob'); // js/ glob2base(new glob.Glob('js/**/*.js')); // css/test/ glob2base(new glob.Glob('css/test/{a,b}/*.css')); // pages/whatever/ glob2base(new glob.Glob('pages/whatever/index.html')); ``` ## Like what we do? [gittip-url]: https://www.gittip.com/WeAreFractal/ [gittip-image]: http://img.shields.io/gittip/WeAreFractal.svg [downloads-image]: http://img.shields.io/npm/dm/glob2base.svg [npm-url]: https://npmjs.org/package/glob2base [npm-image]: http://img.shields.io/npm/v/glob2base.svg [travis-url]: https://travis-ci.org/wearefractal/glob2base [travis-image]: http://img.shields.io/travis/wearefractal/glob2base.svg [coveralls-url]: https://coveralls.io/r/wearefractal/glob2base [coveralls-image]: http://img.shields.io/coveralls/wearefractal/glob2base/master.svg"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/glob2base/node_modules/find-index/README.md","tags":[],"body":"# find-index finds an item in an array matching a predicate function, and returns its index fast both when `thisArg` is used and also when it isn't: [jsPerf](http://jsperf.com/array-prototype-findindex-shims) ### usage ```bash npm install find-index ``` ```js findIndex = require('find-index') findLastIndex = require('find-index/last') ``` findIndex(array, callback[, thisArg]) findLastIndex(array, callback[, thisArg]) Parameters: array The array to operate on. callback Function to execute on each value in the array, taking three arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array findIndex was called upon. thisArg Object to use as this when executing callback. based on [array-findindex](https://www.npmjs.org/package/array-findindex)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/minimatch/README.md","tags":[],"body":"# minimatch A minimal matching utility. [![Build Status](https://secure.travis-ci.org/isaacs/minimatch.png)](http://travis-ci.org/isaacs/minimatch) This is the matching library used internally by npm. It works by converting glob expressions into JavaScript `RegExp` objects. ## Usage ```javascript var minimatch = require(\"minimatch\") minimatch(\"bar.foo\", \"*.foo\") // true! minimatch(\"bar.foo\", \"*.bar\") // false! minimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy! ``` ## Features Supports these glob features: * Brace Expansion * Extended glob matching * \"Globstar\" `**` matching See: * `man sh` * `man bash` * `man 3 fnmatch` * `man 5 gitignore` ## Minimatch Class Create a minimatch object by instanting the `minimatch.Minimatch` class. ```javascript var Minimatch = require(\"minimatch\").Minimatch var mm = new Minimatch(pattern, options) ``` ### Properties * `pattern` The original pattern the minimatch object represents. * `options` The options supplied to the constructor. * `set` A 2-dimensional array of regexp or string expressions. Each row in the array corresponds to a brace-expanded pattern. Each item in the row corresponds to a single path-part. For example, the pattern `{a,b/c}/d` would expand to a set of patterns like: [ [ a, d ] , [ b, c, d ] ] If a portion of the pattern doesn't have any \"magic\" in it (that is, it's something like `\"foo\"` rather than `fo*o?`), then it will be left as a string rather than converted to a regular expression. * `regexp` Created by the `makeRe` method. A single regular expression expressing the entire pattern. This is useful in cases where you wish to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled. * `negate` True if the pattern is negated. * `comment` True if the pattern is a comment. * `empty` True if the pattern is `\"\"`. ### Methods * `makeRe` Generate the `regexp` member if necessary, and return it. Will return `false` if the pattern is invalid. * `match(fname)` Return true if the filename matches the pattern, or false otherwise. * `matchOne(fileArray, patternArray, partial)` Take a `/`-split filename, and match it against a single row in the `regExpSet`. This method is mainly for internal use, but is exposed so that it can be used by a glob-walker that needs to avoid excessive filesystem calls. All other methods are internal, and will be called as necessary. ## Functions The top-level exported function has a `cache` property, which is an LRU cache set to store 100 items. So, calling these methods repeatedly with the same pattern and options will use the same Minimatch object, saving the cost of parsing it multiple times. ### minimatch(path, pattern, options) Main export. Tests a path against the pattern using the options. ```javascript var isJS = minimatch(file, \"*.js\", { matchBase: true }) ``` ### minimatch.filter(pattern, options) Returns a function that tests its supplied argument, suitable for use with `Array.filter`. Example: ```javascript var javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true})) ``` ### minimatch.match(list, pattern, options) Match against the list of files, in the style of fnmatch or glob. If nothing is matched, and options.nonull is set, then return a list containing the pattern itself. ```javascript var javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true})) ``` ### minimatch.makeRe(pattern, options) Make a regular expression object from the pattern. ## Options All options are `false` by default. ### debug Dump a ton of stuff to stderr. ### nobrace Do not expand `{a,b}` and `{1..3}` brace sets. ### noglobstar Disable `**` matching against multiple folder names. ### dot Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot. Note that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot` is set. ### noext Disable \"extglob\" style patterns like `+(a|b)`. ### nocase Perform a case-insensitive match. ### nonull When a match is not found by `minimatch.match`, return a list containing the pattern itself if this option is set. When not set, an empty list is returned if there are no matches. ### matchBase If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, `a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`. ### nocomment Suppress the behavior of treating `#` at the start of a pattern as a comment. ### nonegate Suppress the behavior of treating a leading `!` character as negation. ### flipNegate Returns from negate expressions the same as if they were not negated. (Ie, true on a hit, false on a miss.) ## Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between minimatch and other implementations, and are intentional. If the pattern starts with a `!` character, then it is negated. Set the `nonegate` flag to suppress this behavior, and treat leading `!` characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like `!(a|B)`. Multiple `!` characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with `#`, then it is treated as a comment, and will not match anything. Use `\\#` to match a literal `#` at the start of a line, or set the `nocomment` flag to suppress this behavior. The double-star character `**` is supported by default, unless the `noglobstar` flag is set. This is supported in the manner of bsdglob and bash 4.1, where `**` only has special significance if it is the only thing in a path part. That is, `a/**/b` will match `a/x/y/b`, but `a/**b` will not. If an escaped pattern has no matches, and the `nonull` flag is set, then minimatch.match returns the pattern as-provided, rather than interpreting the character escapes. For example, `minimatch.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than `\"*a?\"`. This is akin to setting the `nullglob` option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like `+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded **first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are checked for validity. Since those two are valid, matching proceeds."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/minimatch/node_modules/brace-expansion/README.md","tags":[],"body":"# brace-expansion [Brace expansion](https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html), as known from sh/bash, in JavaScript. [![build status](https://secure.travis-ci.org/juliangruber/brace-expansion.svg)](http://travis-ci.org/juliangruber/brace-expansion) [![downloads](https://img.shields.io/npm/dm/brace-expansion.svg)](https://www.npmjs.org/package/brace-expansion) [![testling badge](https://ci.testling.com/juliangruber/brace-expansion.png)](https://ci.testling.com/juliangruber/brace-expansion) ## Example ```js var expand = require('brace-expansion'); expand('file-{a,b,c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('-v{,,}') // => ['-v', '-v', '-v'] expand('file{0..2}.jpg') // => ['file0.jpg', 'file1.jpg', 'file2.jpg'] expand('file-{a..c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('file{2..0}.jpg') // => ['file2.jpg', 'file1.jpg', 'file0.jpg'] expand('file{0..4..2}.jpg') // => ['file0.jpg', 'file2.jpg', 'file4.jpg'] expand('file-{a..e..2}.jpg') // => ['file-a.jpg', 'file-c.jpg', 'file-e.jpg'] expand('file{00..10..5}.jpg') // => ['file00.jpg', 'file05.jpg', 'file10.jpg'] expand('{{A..C},{a..c}}') // => ['A', 'B', 'C', 'a', 'b', 'c'] expand('ppp{,config,oe{,conf}}') // => ['ppp', 'pppconfig', 'pppoe', 'pppoeconf'] ``` ## API ```js var expand = require('brace-expansion'); ``` ### var expanded = expand(str) Return an array of all possible and valid expansions of `str`. If none are found, `[str]` is returned. Valid expansions are: ```js /^(.*,)+(.+)?$/ // {a,b,...} ``` A comma seperated list of options, like `{a,b}` or `{a,{b,c}}` or `{,a,}`. ```js /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} ``` A numeric sequence from `x` to `y` inclusive, with optional increment. If `x` or `y` start with a leading `0`, all the numbers will be padded to have equal length. Negative numbers and backwards iteration work too. ```js /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} ``` An alphabetic sequence from `x` to `y` inclusive, with optional increment. `x` and `y` must be exactly one character, and if given, `incr` must be a number. For compatibility reasons, the string `${` is not eligible for brace expansion. ## Installation With [npm](https://npmjs.org) do: ```bash npm install brace-expansion ``` ## Contributors - [Julian Gruber](https://github.com/juliangruber) - [Isaac Z. Schlueter](https://github.com/isaacs) ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/LICENSE.md","tags":[],"body":"(MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/README.md","tags":[],"body":"# balanced-match Match balanced string pairs, like `{` and `}` or `` and ``. Supports regular expressions as well! [![build status](https://secure.travis-ci.org/juliangruber/balanced-match.svg)](http://travis-ci.org/juliangruber/balanced-match) [![downloads](https://img.shields.io/npm/dm/balanced-match.svg)](https://www.npmjs.org/package/balanced-match) [![testling badge](https://ci.testling.com/juliangruber/balanced-match.png)](https://ci.testling.com/juliangruber/balanced-match) ## Example Get the first matching pair of braces: ```js var balanced = require('balanced-match'); console.log(balanced('{', '}', 'pre{in{nested}}post')); console.log(balanced('{', '}', 'pre{first}between{second}post')); console.log(balanced(/\\s+\\{\\s+/, /\\s+\\}\\s+/, 'pre { in{nest} } post')); ``` The matches are: ```bash $ node example.js { start: 3, end: 14, pre: 'pre', body: 'in{nested}', post: 'post' } { start: 3, end: 9, pre: 'pre', body: 'first', post: 'between{second}post' } { start: 3, end: 17, pre: 'pre', body: 'in{nest}', post: 'post' } ``` ## API ### var m = balanced(a, b, str) For the first non-nested matching pair of `a` and `b` in `str`, return an object with those keys: * **start** the index of the first match of `a` * **end** the index of the matching `b` * **pre** the preamble, `a` and `b` not included * **body** the match, `a` and `b` not included * **post** the postscript, `a` and `b` not included If there's no match, `undefined` will be returned. If the `str` contains more `a` than `b` / there are unmatched pairs, the first match that was closed will be used. For example, `{{a}` will match `['{', 'a', '']`. ### var r = balanced.range(a, b, str) For the first non-nested matching pair of `a` and `b` in `str`, return an array with indexes: `[ , ]`. If there's no match, `undefined` will be returned. If the `str` contains more `a` than `b` / there are unmatched pairs, the first match that was closed will be used. For example, `{{a}` will match `[ 1, 3 ]`. ## Installation With [npm](https://npmjs.org) do: ```bash npm install balanced-match ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/README.markdown","tags":[],"body":"concat-map ========== Concatenative mapdashery. [![browser support](http://ci.testling.com/substack/node-concat-map.png)](http://ci.testling.com/substack/node-concat-map) [![build status](https://secure.travis-ci.org/substack/node-concat-map.png)](http://travis-ci.org/substack/node-concat-map) example ======= ``` js var concatMap = require('concat-map'); var xs = [ 1, 2, 3, 4, 5, 6 ]; var ys = concatMap(xs, function (x) { return x % 2 ? [ x - 0.1, x, x + 0.1 ] : []; }); console.dir(ys); ``` *** ``` [ 0.9, 1, 1.1, 2.9, 3, 3.1, 4.9, 5, 5.1 ] ``` methods ======= ``` js var concatMap = require('concat-map') ``` concatMap(xs, fn) ----------------- Return an array of concatenated elements by calling `fn(x, i)` for each element `x` and each index `i` in the array `xs`. When `fn(x, i)` returns an array, its result will be concatenated with the result array. If `fn(x, i)` returns anything else, that value will be pushed onto the end of the result array. install ======= With [npm](http://npmjs.org) do: ``` npm install concat-map ``` license ======= MIT notes ===== This module was written while sitting high above the ground in a tree."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/ordered-read-streams/README.md","tags":[],"body":"# ordered-read-streams [![NPM version](https://badge.fury.io/js/ordered-read-streams.png)](http://badge.fury.io/js/ordered-read-streams) [![Build Status](https://travis-ci.org/armed/ordered-read-streams.png?branch=master)](https://travis-ci.org/armed/ordered-read-streams) Combines array of streams into one read stream in strict order. ## Installation `npm install ordered-read-streams` ## Overview `ordered-read-streams` handles all data/errors from input streams in parallel, but emits data/errors in strict order in which streams are passed to constructor. This is `objectMode = true` stream. ## Example ```js var through = require('through2'); var Ordered = require('ordered-read-streams'); var s1 = through.obj(function (data, enc, next) { var self = this; setTimeout(function () { self.push(data); next(); }, 200) }); var s2 = through.obj(function (data, enc, next) { var self = this; setTimeout(function () { self.push(data); next(); }, 30) }); var s3 = through.obj(function (data, enc, next) { var self = this; setTimeout(function () { self.push(data); next(); }, 100) }); var streams = new Ordered([s1, s2, s3]); streams.on('data', function (data) { console.log(data); }) s1.write('stream 1'); s1.end(); s2.write('stream 2'); s2.end(); s3.write('stream 3'); s3.end(); ``` Ouput will be: ``` stream 1 stream 2 stream 3 ``` ## Licence MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/unique-stream/README.md","tags":[],"body":"# unique-stream node.js through stream that emits a unique stream of objects based on criteria [![build status](https://secure.travis-ci.org/eugeneware/unique-stream.png)](http://travis-ci.org/eugeneware/unique-stream) ## Installation Install via npm: ``` $ npm install unique-stream ``` ## Examples ### Dedupe a ReadStream based on JSON.stringify: ``` js var unique = require('unique-stream') , Stream = require('stream'); // return a stream of 3 identical objects function makeStreamOfObjects() { var s = new Stream; s.readable = true; var count = 3; for (var i = 0; i < 3; i++) { setImmediate(function () { s.emit('data', { name: 'Bob', number: 123 }); --count && end(); }); } function end() { s.emit('end'); } return s; } // Will only print out one object as the rest are dupes. (Uses JSON.stringify) makeStreamOfObjects() .pipe(unique()) .on('data', console.log); ``` ### Dedupe a ReadStream based on an object property: ``` js // Use name as the key field to dedupe on. Will only print one object makeStreamOfObjects() .pipe(unique('name')) .on('data', console.log); ``` ### Dedupe a ReadStream based on a custom function: ``` js // Use a custom function to dedupe on. Use the 'number' field. Will only print one object. makeStreamOfObjects() .pipe(function (data) { return data.number; }) .on('data', console.log); ``` ## Dedupe multiple streams The reason I wrote this was to dedupe multiple object streams: ``` js var aggregator = unique(); // Stream 1 makeStreamOfObjects() .pipe(aggregator); // Stream 2 makeStreamOfObjects() .pipe(aggregator); // Stream 3 makeStreamOfObjects() .pipe(aggregator); aggregator.on('data', console.log); ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-watcher/README.md","tags":[],"body":"# glob-watcher [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status][david-image]][david-url] ## Information Packageglob-watcher Description Watch globs Node Version >= 0.9 ## Usage ```javascript var watch = require('glob-watcher'); // callback interface watch([\"./*.js\", \"!./something.js\"], function(evt){ // evt has what file changed and all that jazz }); // EE interface var watcher = watch([\"./*.js\", \"!./something.js\"]); watcher.on('change', function(evt) { // evt has what file changed and all that jazz }); // add files after it has been created watcher.add(\"./somefolder/somefile.js\"); ``` [npm-url]: https://npmjs.org/package/glob-watcher [npm-image]: https://badge.fury.io/js/glob-watcher.png [travis-url]: https://travis-ci.org/wearefractal/glob-watcher [travis-image]: https://travis-ci.org/wearefractal/glob-watcher.png?branch=master [coveralls-url]: https://coveralls.io/r/wearefractal/glob-watcher [coveralls-image]: https://coveralls.io/repos/wearefractal/glob-watcher/badge.png [depstat-url]: https://david-dm.org/wearefractal/glob-watcher [depstat-image]: https://david-dm.org/wearefractal/glob-watcher.png [david-url]: https://david-dm.org/wearefractal/glob-watcher [david-image]: https://david-dm.org/wearefractal/glob-watcher.png?theme=shields.io"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-watcher/node_modules/gaze/README.md","tags":[],"body":"# gaze [![Build Status](https://travis-ci.org/shama/gaze.png?branch=master)](https://travis-ci.org/shama/gaze) A globbing fs.watch wrapper built from the best parts of other fine watch libs. Compatible with Node.js 0.10/0.8, Windows, OSX and Linux. ![gaze](http://dontkry.com/images/repos/gaze.png) ## Usage Install the module with: `npm install gaze` or place into your `package.json` and run `npm install`. ```javascript var gaze = require('gaze'); // Watch all .js files/dirs in process.cwd() gaze('**/*.js', function(err, watcher) { // Files have all started watching // watcher === this // Get all watched files console.log(this.watched()); // On file changed this.on('changed', function(filepath) { console.log(filepath + ' was changed'); }); // On file added this.on('added', function(filepath) { console.log(filepath + ' was added'); }); // On file deleted this.on('deleted', function(filepath) { console.log(filepath + ' was deleted'); }); // On changed/added/deleted this.on('all', function(event, filepath) { console.log(filepath + ' was ' + event); }); // Get watched files with relative paths console.log(this.relative()); }); // Also accepts an array of patterns gaze(['stylesheets/*.css', 'images/**/*.png'], function() { // Add more patterns later to be watched this.add(['js/*.js']); }); ``` ### Alternate Interface ```javascript var Gaze = require('gaze').Gaze; var gaze = new Gaze('**/*'); // Files have all started watching gaze.on('ready', function(watcher) { }); // A file has been added/changed/deleted has occurred gaze.on('all', function(event, filepath) { }); ``` ### Errors ```javascript gaze('**/*', function() { this.on('error', function(err) { // Handle error here }); }); ``` ### Minimatch / Glob See [isaacs's minimatch](https://github.com/isaacs/minimatch) for more information on glob patterns. ## Documentation ### gaze(patterns, [options], callback) * `patterns` {String|Array} File patterns to be matched * `options` {Object} * `callback` {Function} * `err` {Error | null} * `watcher` {Object} Instance of the Gaze watcher ### Class: gaze.Gaze Create a Gaze object by instanting the `gaze.Gaze` class. ```javascript var Gaze = require('gaze').Gaze; var gaze = new Gaze(pattern, options, callback); ``` #### Properties * `options` The options object passed in. * `interval` {integer} Interval to pass to fs.watchFile * `debounceDelay` {integer} Delay for events called in succession for the same file/event #### Events * `ready(watcher)` When files have been globbed and watching has begun. * `all(event, filepath)` When an `added`, `changed` or `deleted` event occurs. * `added(filepath)` When a file has been added to a watch directory. * `changed(filepath)` When a file has been changed. * `deleted(filepath)` When a file has been deleted. * `renamed(newPath, oldPath)` When a file has been renamed. * `end()` When the watcher is closed and watches have been removed. * `error(err)` When an error occurs. * `nomatch` When no files have been matched. #### Methods * `emit(event, [...])` Wrapper for the EventEmitter.emit. `added`|`changed`|`deleted` events will also trigger the `all` event. * `close()` Unwatch all files and reset the watch instance. * `add(patterns, callback)` Adds file(s) patterns to be watched. * `remove(filepath)` removes a file or directory from being watched. Does not recurse directories. * `watched()` Returns the currently watched files. * `relative([dir, unixify])` Returns the currently watched files with relative paths. * `dir` {string} Only return relative files for this directory. * `unixify` {boolean} Return paths with `/` instead of `\\\\` if on Windows. ## FAQs ### Why Another `fs.watch` Wrapper? I liked parts of other `fs.watch` wrappers but none had all the features I needed. This lib combines the features I needed from other fine watch libs: Speedy data behavior from [paulmillr's chokidar](https://github.com/paulmillr/chokidar), API interface from [mikeal's watch](https://github.com/mikeal/watch) and file globbing using [isaacs's glob](https://github.com/isaacs/node-glob) which is also used by [cowboy's Grunt](https://github.com/gruntjs/grunt). ### How do I fix the error `EMFILE: Too many opened files.`? This is because of your system's max opened file limit. For OSX the default is very low (256). Increase your limit temporarily with `ulimit -n 10480`, the number being the new max limit. ## Contributing In lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt](http://gruntjs.com/). ## Release History * 0.5.2 - Fix for ENOENT error with non-existent symlinks. * 0.5.1 - Use setImmediate (process.nextTick for node v0.8) to defer ready/nomatch events (@amasad). * 0.5.0 - Process is now kept alive while watching files. Emits a nomatch event when no files are matching. * 0.4.3 - Track file additions in newly created folders (@brett-shwom). * 0.4.2 - Fix .remove() method to remove a single file in a directory (@kaelzhang). Fixing Cannot call method 'call' of undefined (@krasimir). Track new file additions within folders (@brett-shwom). * 0.4.1 - Fix watchDir not respecting close in race condition (@chrisirhc). * 0.4.0 - Drop support for node v0.6. Use globule for file matching. Avoid node v0.10 path.resolve/join errors. Register new files when added to non-existent folder. Multiple instances can now poll the same files (@jpommerening). * 0.3.4 - Code clean up. Fix path must be strings errors (@groner). Fix incorrect added events (@groner). * 0.3.3 - Fix for multiple patterns with negate. * 0.3.2 - Emit `end` before removeAllListeners. * 0.3.1 - Fix added events within subfolder patterns. * 0.3.0 - Handle safewrite events, `forceWatchMethod` option removed, bug fixes and watch optimizations (@rgaskill). * 0.2.2 - Fix issue where subsequent add calls dont get watched (@samcday). removeAllListeners on close. * 0.2.1 - Fix issue with invalid `added` events in current working dir. * 0.2.0 - Support and mark folders with `path.sep`. Add `forceWatchMethod` option. Support `renamed` events. * 0.1.6 - Recognize the `cwd` option properly * 0.1.5 - Catch too many open file errors * 0.1.4 - Really fix the race condition with 2 watches * 0.1.3 - Fix race condition with 2 watches * 0.1.2 - Read triggering changed event fix * 0.1.1 - Minor fixes * 0.1.0 - Initial release ## License Copyright (c) 2013 Kyle Robinson Young Licensed under the MIT license."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-watcher/node_modules/gaze/node_modules/globule/README.md","tags":[],"body":"# globule [![Build Status](https://secure.travis-ci.org/cowboy/node-globule.png?branch=master)](http://travis-ci.org/cowboy/node-globule) An easy-to-use wildcard globbing library. ## Getting Started Install the module with: `npm install globule` ```javascript var globule = require('globule'); var filepaths = globule.find('**/*.js'); ``` ## Documentation ### globule.find Returns a unique array of all file or directory paths that match the given globbing pattern(s). This method accepts either comma separated globbing patterns or an array of globbing patterns. Paths matching patterns that begin with `!` will be excluded from the returned array. Patterns are processed in order, so inclusion and exclusion order is significant. ```js globule.find(patterns [, options]) ``` The `options` object supports all [glob][] library options, along with a few extras. These are the most commonly used: * `filter` Either a valid [fs.Stats method name](http://nodejs.org/docs/latest/api/fs.html#fs_class_fs_stats) or a function that will be passed the matched `src` filepath and `options` object as arguments. This function should return a `Boolean` value. * `nonull` Retain globbing patterns in result set even if they fail to match files. * `matchBase` Patterns without slashes will match just the basename part. Eg. this makes `*.js` work like `**/*.js`. * `srcBase` Patterns will be matched relative to the specified path instead of the current working directory. This is a synonym for `cwd`. * `prefixBase` Any specified `srcBase` will be prefixed to all returned filepaths. [glob]: https://github.com/isaacs/node-glob ### globule.match Match one or more globbing patterns against one or more file paths. Returns a uniqued array of all file paths that match any of the specified globbing patterns. Both the `patterns` and `filepaths` arguments can be a single string or array of strings. Paths matching patterns that begin with `!` will be excluded from the returned array. Patterns are processed in order, so inclusion and exclusion order is significant. ```js grunt.file.match(patterns, filepaths [, options]) ``` ### globule.isMatch This method contains the same signature and logic as the `globule.match` method, but returns `true` if any files were matched, otherwise `false`. ```js grunt.file.isMatch(patterns, filepaths [, options]) ``` ### globule.mapping Given a set of source file paths, returns an array of src-dest file mapping objects. Both src and dest paths may be renamed, depending on the options specified. ```js globule.mapping(filepaths [, options]) ``` In addition to the options the `globule.find` method supports, the options object also supports these properties: * `srcBase` The directory from which patterns are matched. Any string specified as `srcBase` is effectively stripped from the beginning of all matched paths. * `destBase` The specified path is prefixed to all `dest` filepaths. * `ext` Remove anything after (and including) the first `.` in the destination path, then append this value. * `extDot` Change the behavior of `ext`, `\"first\"` and `\"last\"` will remove anything after the first or last `.` in the destination filename, respectively. Defaults to `\"first\"`. * `flatten` Remove the path component from all matched src files. The src file path is still joined to the specified destBase. * `rename` If specified, this function will be responsible for returning the final `dest` filepath. By default, it flattens paths (if specified), changes extensions (if specified) and joins the matched path to the `destBase`. ### globule.findMapping This method is a convenience wrapper around the `globule.find` and `globule.mapping` methods. ```js globule.findMapping(patterns [, options]) ``` ## Examples Given the files `foo/a.js` and `foo/b.js`: ### srcBase and destBase ```js globule.find(\"foo/*.js\") // [\"foo/a.js\", \"foo/b.js\"] globule.find(\"*.js\", {srcBase: \"foo\"}) // [\"a.js\", \"b.js\"] globule.find(\"*.js\", {srcBase: \"foo\", prefixBase: true}) // [\"foo/a.js\", \"foo/b.js\"] ``` ```js globule.findMapping(\"foo/*.js\") // [{src: \"foo/a.js\", dest: \"foo/a.js\"}, {src: \"foo/b.js\", dest: \"foo/b.js\"}] globule.findMapping(\"foo/*.js\", {destBase: \"bar\"}) // [{src: \"foo/a.js\", dest: \"bar/foo/a.js\"}, {src: \"foo/b.js\", dest: \"bar/foo/b.js\"}] globule.findMapping(\"*.js\", {srcBase: \"foo\", destBase: \"bar\"}) // [{src: \"foo/a.js\", dest: \"bar/a.js\"}, {src: \"foo/b.js\", dest: \"bar/b.js\"}] ``` ```js globule.mapping([\"foo/a.js\", \"foo/b.js\"]) // [{src: \"foo/a.js\", dest: \"foo/a.js\"}, {src: \"foo/b.js\", dest: \"foo/b.js\"}] globule.mapping([\"foo/a.js\", \"foo/b.js\"], {destBase: \"bar\"}) // [{src: \"foo/a.js\", dest: \"bar/foo/a.js\"}, {src: \"foo/b.js\", dest: \"bar/foo/b.js\"}] globule.mapping([\"a.js\", \"b.js\"], {srcBase: \"foo\", destBase: \"bar\"}) // [{src: \"foo/a.js\", dest: \"bar/a.js\"}, {src: \"foo/b.js\", dest: \"bar/b.js\"}] ``` ## Contributing In lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/). ## Release History _(Nothing yet)_ ## License Copyright (c) 2013 \"Cowboy\" Ben Alman Licensed under the MIT license."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-watcher/node_modules/gaze/node_modules/globule/node_modules/glob/README.md","tags":[],"body":"# Glob This is a glob implementation in JavaScript. It uses the `minimatch` library to do its matching. ## Attention: node-glob users! The API has changed dramatically between 2.x and 3.x. This library is now 100% JavaScript, and the integer flags have been replaced with an options object. Also, there's an event emitter class, proper tests, and all the other things you've come to expect from node modules. And best of all, no compilation! ## Usage ```javascript var glob = require(\"glob\") // options is optional glob(\"**/*.js\", options, function (er, files) { // files is an array of filenames. // If the `nonull` option is set, and nothing // was found, then files is [\"**/*.js\"] // er is an error object or null. }) ``` ## Features Please see the [minimatch documentation](https://github.com/isaacs/minimatch) for more details. Supports these glob features: * Brace Expansion * Extended glob matching * \"Globstar\" `**` matching See: * `man sh` * `man bash` * `man 3 fnmatch` * `man 5 gitignore` * [minimatch documentation](https://github.com/isaacs/minimatch) ## glob(pattern, [options], cb) * `pattern` {String} Pattern to be matched * `options` {Object} * `cb` {Function} * `err` {Error | null} * `matches` {Array} filenames found matching the pattern Perform an asynchronous glob search. ## glob.sync(pattern, [options] * `pattern` {String} Pattern to be matched * `options` {Object} * return: {Array} filenames found matching the pattern Perform a synchronous glob search. ## Class: glob.Glob Create a Glob object by instanting the `glob.Glob` class. ```javascript var Glob = require(\"glob\").Glob var mg = new Glob(pattern, options, cb) ``` It's an EventEmitter, and starts walking the filesystem to find matches immediately. ### new glob.Glob(pattern, [options], [cb]) * `pattern` {String} pattern to search for * `options` {Object} * `cb` {Function} Called when an error occurs, or matches are found * `err` {Error | null} * `matches` {Array} filenames found matching the pattern Note that if the `sync` flag is set in the options, then matches will be immediately available on the `g.found` member. ### Properties * `minimatch` The minimatch object that the glob uses. * `options` The options object passed in. * `error` The error encountered. When an error is encountered, the glob object is in an undefined state, and should be discarded. * `aborted` Boolean which is set to true when calling `abort()`. There is no way at this time to continue a glob search after aborting, but you can re-use the statCache to avoid having to duplicate syscalls. ### Events * `end` When the matching is finished, this is emitted with all the matches found. If the `nonull` option is set, and no match was found, then the `matches` list contains the original pattern. The matches are sorted, unless the `nosort` flag is set. * `match` Every time a match is found, this is emitted with the matched. * `error` Emitted when an unexpected error is encountered, or whenever any fs error occurs if `options.strict` is set. * `abort` When `abort()` is called, this event is raised. ### Methods * `abort` Stop the search. ### Options All the options that can be passed to Minimatch can also be passed to Glob to change pattern matching behavior. Also, some have been added, or have glob-specific ramifications. All options are false by default, unless otherwise noted. All options are added to the glob object, as well. * `cwd` The current working directory in which to search. Defaults to `process.cwd()`. * `root` The place where patterns starting with `/` will be mounted onto. Defaults to `path.resolve(options.cwd, \"/\")` (`/` on Unix systems, and `C:\\` or some such on Windows.) * `nomount` By default, a pattern starting with a forward-slash will be \"mounted\" onto the root setting, so that a valid filesystem path is returned. Set this flag to disable that behavior. * `mark` Add a `/` character to directory matches. Note that this requires additional stat calls. * `nosort` Don't sort the results. * `stat` Set to true to stat *all* results. This reduces performance somewhat, and is completely unnecessary, unless `readdir` is presumed to be an untrustworthy indicator of file existence. It will cause ELOOP to be triggered one level sooner in the case of cyclical symbolic links. * `silent` When an unusual error is encountered when attempting to read a directory, a warning will be printed to stderr. Set the `silent` option to true to suppress these warnings. * `strict` When an unusual error is encountered when attempting to read a directory, the process will just continue on in search of other matches. Set the `strict` option to raise an error in these cases. * `statCache` A cache of results of filesystem information, to prevent unnecessary stat calls. While it should not normally be necessary to set this, you may pass the statCache from one glob() call to the options object of another, if you know that the filesystem will not change between calls. (See \"Race Conditions\" below.) * `sync` Perform a synchronous glob search. * `nounique` In some cases, brace-expanded patterns can result in the same file showing up multiple times in the result set. By default, this implementation prevents duplicates in the result set. Set this flag to disable that behavior. * `nonull` Set to never return an empty set, instead returning a set containing the pattern itself. This is the default in glob(3). * `nocase` Perform a case-insensitive match. Note that case-insensitive filesystems will sometimes result in glob returning results that are case-insensitively matched anyway, since readdir and stat will not raise an error. * `debug` Set to enable debug logging in minimatch and glob. * `globDebug` Set to enable debug logging in glob, but not minimatch. ## Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between node-glob and other implementations, and are intentional. If the pattern starts with a `!` character, then it is negated. Set the `nonegate` flag to suppress this behavior, and treat leading `!` characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like `!(a|B)`. Multiple `!` characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with `#`, then it is treated as a comment, and will not match anything. Use `\\#` to match a literal `#` at the start of a line, or set the `nocomment` flag to suppress this behavior. The double-star character `**` is supported by default, unless the `noglobstar` flag is set. This is supported in the manner of bsdglob and bash 4.1, where `**` only has special significance if it is the only thing in a path part. That is, `a/**/b` will match `a/x/y/b`, but `a/**b` will not. **Note that this is different from the way that `**` is handled by ruby's `Dir` class.** If an escaped pattern has no matches, and the `nonull` flag is set, then glob returns the pattern as-provided, rather than interpreting the character escapes. For example, `glob.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than `\"*a?\"`. This is akin to setting the `nullglob` option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like `+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded **first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are checked for validity. Since those two are valid, matching proceeds. ## Windows **Please only use forward-slashes in glob expressions.** Though windows uses either `/` or `\\` as its path separator, only `/` characters are used by this glob implementation. You must use forward-slashes **only** in glob expressions. Back-slashes will always be interpreted as escape characters, not path separators. Results from absolute patterns such as `/foo/*` are mounted onto the root setting using `path.join`. On windows, this will by default result in `/foo/*` matching `C:\\foo\\bar.txt`. ## Race Conditions Glob searching, by its very nature, is susceptible to race conditions, since it relies on directory walking and such. As a result, it is possible that a file that exists when glob looks for it may have been deleted or modified by the time it returns the result. As part of its internal implementation, this program caches all stat and readdir calls that it makes, in order to cut down on system overhead. However, this also makes it even more susceptible to races, especially if the statCache object is reused between glob calls. Users are thus advised not to use a glob result as a guarantee of filesystem state in the face of rapid changes. For the vast majority of operations, this is never a problem."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-watcher/node_modules/gaze/node_modules/globule/node_modules/glob/node_modules/graceful-fs/README.md","tags":[],"body":"# graceful-fs graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors. ## Improvements over fs module graceful-fs: * keeps track of how many file descriptors are open, and by default limits this to 1024. Any further requests to open a file are put in a queue until new slots become available. If 1024 turns out to be too much, it decreases the limit further. * fixes `lchmod` for Node versions prior to 0.6.2. * implements `fs.lutimes` if possible. Otherwise it becomes a noop. * ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or `lchown` if the user isn't root. * makes `lchmod` and `lchown` become noops, if not available. * retries reading a file if `read` results in EAGAIN error. On Windows, it retries renaming a file for up to one second if `EACCESS` or `EPERM` error occurs, likely because antivirus software has locked the directory. ## Configuration The maximum number of open file descriptors that graceful-fs manages may be adjusted by setting `fs.MAX_OPEN` to a different number. The default is 1024."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-watcher/node_modules/gaze/node_modules/globule/node_modules/glob/node_modules/inherits/README.md","tags":[],"body":"A dead simple way to do inheritance in JS. var inherits = require(\"inherits\") function Animal () { this.alive = true } Animal.prototype.say = function (what) { console.log(what) } inherits(Dog, Animal) function Dog () { Dog.super.apply(this) } Dog.prototype.sniff = function () { this.say(\"sniff sniff\") } Dog.prototype.bark = function () { this.say(\"woof woof\") } inherits(Chihuahua, Dog) function Chihuahua () { Chihuahua.super.apply(this) } Chihuahua.prototype.bark = function () { this.say(\"yip yip\") } // also works function Cat () { Cat.super.apply(this) } Cat.prototype.hiss = function () { this.say(\"CHSKKSS!!\") } inherits(Cat, Animal, { meow: function () { this.say(\"miao miao\") } }) Cat.prototype.purr = function () { this.say(\"purr purr\") } var c = new Chihuahua assert(c instanceof Chihuahua) assert(c instanceof Dog) assert(c instanceof Animal) The actual function is laughably small. 10-lines small."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-watcher/node_modules/gaze/node_modules/globule/node_modules/lodash/README.md","tags":[],"body":"# Lo-Dash v1.0.2 A utility library delivering consistency, [customization](http://lodash.com/custom-builds), [performance](http://lodash.com/benchmarks), & [extras](http://lodash.com/#features). ## Download * Lo-Dash builds (for modern environments): [Development](https://raw.github.com/lodash/lodash/v1.0.2/dist/lodash.js) and [Production](https://raw.github.com/lodash/lodash/v1.0.2/dist/lodash.min.js) * Lo-Dash compatibility builds (for legacy and modern environments): [Development](https://raw.github.com/lodash/lodash/v1.0.2/dist/lodash.compat.js) and [Production](https://raw.github.com/lodash/lodash/v1.0.2/dist/lodash.compat.min.js) * Underscore compatibility builds: [Development](https://raw.github.com/lodash/lodash/v1.0.2/dist/lodash.underscore.js) and [Production](https://raw.github.com/lodash/lodash/v1.0.2/dist/lodash.underscore.min.js) * For optimal file size, [create a custom build](http://lodash.com/custom-builds) with only the features you need ## Dive in We’ve got [API docs](http://lodash.com/docs), [benchmarks](http://lodash.com/benchmarks), and [unit tests](http://lodash.com/tests). For a list of upcoming features, check out our [roadmap](https://github.com/lodash/lodash/wiki/Roadmap). The full changelog is available [here](https://github.com/lodash/lodash/wiki/Changelog). ## Installation and usage In browsers: ```html ``` Using [`npm`](http://npmjs.org/): ```bash npm install lodash npm install -g lodash npm link lodash ``` To avoid potential issues, update `npm` before installing Lo-Dash: ```bash npm install npm -g ``` In [Node.js](http://nodejs.org/) and [RingoJS v0.8.0+](http://ringojs.org/): ```js var _ = require('lodash'); // or as a drop-in replacement for Underscore var _ = require('lodash/lodash.underscore'); ``` **Note:** If Lo-Dash is installed globally, run [`npm link lodash`](http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/) in your project’s root directory before requiring it. In [RingoJS v0.7.0-](http://ringojs.org/): ```js var _ = require('lodash')._; ``` In [Rhino](http://www.mozilla.org/rhino/): ```js load('lodash.js'); ``` In an AMD loader like [RequireJS](http://requirejs.org/): ```js require({ 'paths': { 'underscore': 'path/to/lodash' } }, ['underscore'], function(_) { console.log(_.VERSION); }); ``` ## Resources For more information check out these articles, screencasts, and other videos over Lo-Dash: * Posts - [Say “Hello” to Lo-Dash](http://kitcambridge.be/blog/say-hello-to-lo-dash/) * Videos - [Introducing Lo-Dash](https://vimeo.com/44154599) - [Lo-Dash optimizations and custom builds](https://vimeo.com/44154601) - [Lo-Dash’s origin and why it’s a better utility belt](https://vimeo.com/44154600) - [Unit testing in Lo-Dash](https://vimeo.com/45865290) - [Lo-Dash’s approach to native method use](https://vimeo.com/48576012) - [CascadiaJS: Lo-Dash for a better utility belt](http://www.youtube.com/watch?v=dpPy4f_SeEk) ## Features * AMD loader support ([RequireJS](http://requirejs.org/), [curl.js](https://github.com/cujojs/curl), etc.) * [_(…)](http://lodash.com/docs#_) supports intuitive chaining * [_.at](http://lodash.com/docs#at) for cherry-picking collection values * [_.bindKey](http://lodash.com/docs#bindKey) for binding [*“lazy”* defined](http://michaux.ca/articles/lazy-function-definition-pattern) methods * [_.cloneDeep](http://lodash.com/docs#cloneDeep) for deep cloning arrays and objects * [_.contains](http://lodash.com/docs#contains) accepts a `fromIndex` argument * [_.forEach](http://lodash.com/docs#forEach) is chainable and supports exiting iteration early * [_.forIn](http://lodash.com/docs#forIn) for iterating over an object’s own and inherited properties * [_.forOwn](http://lodash.com/docs#forOwn) for iterating over an object’s own properties * [_.isPlainObject](http://lodash.com/docs#isPlainObject) checks if values are created by the `Object` constructor * [_.merge](http://lodash.com/docs#merge) for a deep [_.extend](http://lodash.com/docs#extend) * [_.partial](http://lodash.com/docs#partial) and [_.partialRight](http://lodash.com/docs#partialRight) for partial application without `this` binding * [_.template](http://lodash.com/docs#template) supports [*“imports”* options](http://lodash.com/docs#templateSettings_imports), [ES6 template delimiters](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6), and [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl) * [_.where](http://lodash.com/docs#where) supports deep object comparisons * [_.clone](http://lodash.com/docs#clone), [_.omit](http://lodash.com/docs#omit), [_.pick](http://lodash.com/docs#pick), [and more…](http://lodash.com/docs \"_.assign, _.cloneDeep, _.first, _.initial, _.isEqual, _.last, _.merge, _.rest\") accept `callback` and `thisArg` arguments * [_.contains](http://lodash.com/docs#contains), [_.size](http://lodash.com/docs#size), [_.toArray](http://lodash.com/docs#toArray), [and more…](http://lodash.com/docs \"_.at, _.countBy, _.every, _.filter, _.find, _.forEach, _.groupBy, _.invoke, _.map, _.max, _.min, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.some, _.sortBy, _.where\") accept strings * [_.filter](http://lodash.com/docs#filter), [_.find](http://lodash.com/docs#find), [_.map](http://lodash.com/docs#map), [and more…](http://lodash.com/docs \"_.countBy, _.every, _.first, _.groupBy, _.initial, _.last, _.max, _.min, _.reject, _.rest, _.some, _.sortBy, _.sortedIndex, _.uniq\") support *“_.pluck”* and *“_.where”* `callback` shorthands ## Support Lo-Dash has been tested in at least Chrome 5~24, Firefox 1~18, IE 6-10, Opera 9.25-12, Safari 3-6, Node.js 0.4.8-0.8.20, Narwhal 0.3.2, PhantomJS 1.8.1, RingoJS 0.9, and Rhino 1.7RC5."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-watcher/node_modules/gaze/node_modules/globule/node_modules/minimatch/README.md","tags":[],"body":"# minimatch A minimal matching utility. [![Build Status](https://secure.travis-ci.org/isaacs/minimatch.png)](http://travis-ci.org/isaacs/minimatch) This is the matching library used internally by npm. Eventually, it will replace the C binding in node-glob. It works by converting glob expressions into JavaScript `RegExp` objects. ## Usage ```javascript var minimatch = require(\"minimatch\") minimatch(\"bar.foo\", \"*.foo\") // true! minimatch(\"bar.foo\", \"*.bar\") // false! minimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy! ``` ## Features Supports these glob features: * Brace Expansion * Extended glob matching * \"Globstar\" `**` matching See: * `man sh` * `man bash` * `man 3 fnmatch` * `man 5 gitignore` ## Minimatch Class Create a minimatch object by instanting the `minimatch.Minimatch` class. ```javascript var Minimatch = require(\"minimatch\").Minimatch var mm = new Minimatch(pattern, options) ``` ### Properties * `pattern` The original pattern the minimatch object represents. * `options` The options supplied to the constructor. * `set` A 2-dimensional array of regexp or string expressions. Each row in the array corresponds to a brace-expanded pattern. Each item in the row corresponds to a single path-part. For example, the pattern `{a,b/c}/d` would expand to a set of patterns like: [ [ a, d ] , [ b, c, d ] ] If a portion of the pattern doesn't have any \"magic\" in it (that is, it's something like `\"foo\"` rather than `fo*o?`), then it will be left as a string rather than converted to a regular expression. * `regexp` Created by the `makeRe` method. A single regular expression expressing the entire pattern. This is useful in cases where you wish to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled. * `negate` True if the pattern is negated. * `comment` True if the pattern is a comment. * `empty` True if the pattern is `\"\"`. ### Methods * `makeRe` Generate the `regexp` member if necessary, and return it. Will return `false` if the pattern is invalid. * `match(fname)` Return true if the filename matches the pattern, or false otherwise. * `matchOne(fileArray, patternArray, partial)` Take a `/`-split filename, and match it against a single row in the `regExpSet`. This method is mainly for internal use, but is exposed so that it can be used by a glob-walker that needs to avoid excessive filesystem calls. All other methods are internal, and will be called as necessary. ## Functions The top-level exported function has a `cache` property, which is an LRU cache set to store 100 items. So, calling these methods repeatedly with the same pattern and options will use the same Minimatch object, saving the cost of parsing it multiple times. ### minimatch(path, pattern, options) Main export. Tests a path against the pattern using the options. ```javascript var isJS = minimatch(file, \"*.js\", { matchBase: true }) ``` ### minimatch.filter(pattern, options) Returns a function that tests its supplied argument, suitable for use with `Array.filter`. Example: ```javascript var javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true})) ``` ### minimatch.match(list, pattern, options) Match against the list of files, in the style of fnmatch or glob. If nothing is matched, and options.nonull is set, then return a list containing the pattern itself. ```javascript var javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true})) ``` ### minimatch.makeRe(pattern, options) Make a regular expression object from the pattern. ## Options All options are `false` by default. ### debug Dump a ton of stuff to stderr. ### nobrace Do not expand `{a,b}` and `{1..3}` brace sets. ### noglobstar Disable `**` matching against multiple folder names. ### dot Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot. Note that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot` is set. ### noext Disable \"extglob\" style patterns like `+(a|b)`. ### nocase Perform a case-insensitive match. ### nonull When a match is not found by `minimatch.match`, return a list containing the pattern itself. When set, an empty list is returned if there are no matches. ### matchBase If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, `a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`. ### nocomment Suppress the behavior of treating `#` at the start of a pattern as a comment. ### nonegate Suppress the behavior of treating a leading `!` character as negation. ### flipNegate Returns from negate expressions the same as if they were not negated. (Ie, true on a hit, false on a miss.) ## Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between minimatch and other implementations, and are intentional. If the pattern starts with a `!` character, then it is negated. Set the `nonegate` flag to suppress this behavior, and treat leading `!` characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like `!(a|B)`. Multiple `!` characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with `#`, then it is treated as a comment, and will not match anything. Use `\\#` to match a literal `#` at the start of a line, or set the `nocomment` flag to suppress this behavior. The double-star character `**` is supported by default, unless the `noglobstar` flag is set. This is supported in the manner of bsdglob and bash 4.1, where `**` only has special significance if it is the only thing in a path part. That is, `a/**/b` will match `a/x/y/b`, but `a/**b` will not. If an escaped pattern has no matches, and the `nonull` flag is set, then minimatch.match returns the pattern as-provided, rather than interpreting the character escapes. For example, `minimatch.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than `\"*a?\"`. This is akin to setting the `nullglob` option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like `+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded **first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are checked for validity. Since those two are valid, matching proceeds."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-watcher/node_modules/gaze/node_modules/globule/node_modules/minimatch/node_modules/lru-cache/README.md","tags":[],"body":"# lru cache A cache object that deletes the least-recently-used items. ## Usage: ```javascript var LRU = require(\"lru-cache\") , options = { max: 500 , length: function (n) { return n * 2 } , dispose: function (key, n) { n.close() } , maxAge: 1000 * 60 * 60 } , cache = LRU(options) , otherCache = LRU(50) // sets just the max size cache.set(\"key\", \"value\") cache.get(\"key\") // \"value\" cache.reset() // empty the cache ``` If you put more stuff in it, then items will fall out. If you try to put an oversized thing in it, then it'll fall out right away. ## Keys should always be Strings or Numbers Note: this module will print warnings to `console.error` if you use a key that is not a String or Number. Because items are stored in an object, which coerces keys to a string, it won't go well for you if you try to use a key that is not a unique string, it'll cause surprise collisions. For example: ```JavaScript // Bad Example! Dont' do this! var cache = LRU() var a = {} var b = {} cache.set(a, 'this is a') cache.set(b, 'this is b') console.log(cache.get(a)) // prints: 'this is b' ``` ## Options * `max` The maximum size of the cache, checked by applying the length function to all values in the cache. Not setting this is kind of silly, since that's the whole purpose of this lib, but it defaults to `Infinity`. * `maxAge` Maximum age in ms. Items are not pro-actively pruned out as they age, but if you try to get an item that is too old, it'll drop it and return undefined instead of giving it to you. * `length` Function that is used to calculate the length of stored items. If you're storing strings or buffers, then you probably want to do something like `function(n){return n.length}`. The default is `function(n){return 1}`, which is fine if you want to store `max` like-sized things. * `dispose` Function that is called on items when they are dropped from the cache. This can be handy if you want to close file descriptors or do other cleanup tasks when items are no longer accessible. Called with `key, value`. It's called *before* actually removing the item from the internal cache, so if you want to immediately put it back in, you'll have to do that in a `nextTick` or `setTimeout` callback or it won't do anything. * `stale` By default, if you set a `maxAge`, it'll only actually pull stale items out of the cache when you `get(key)`. (That is, it's not pre-emptively doing a `setTimeout` or anything.) If you set `stale:true`, it'll return the stale value before deleting it. If you don't set this, then it'll return `undefined` when you try to get a stale entry, as if it had already been deleted. ## API * `set(key, value, maxAge)` * `get(key) => value` Both of these will update the \"recently used\"-ness of the key. They do what you think. `max` is optional and overrides the cache `max` option if provided. * `peek(key)` Returns the key value (or `undefined` if not found) without updating the \"recently used\"-ness of the key. (If you find yourself using this a lot, you *might* be using the wrong sort of data structure, but there are some use cases where it's handy.) * `del(key)` Deletes a key out of the cache. * `reset()` Clear the cache entirely, throwing away all values. * `has(key)` Check if a key is in the cache, without updating the recent-ness or deleting it for being stale. * `forEach(function(value,key,cache), [thisp])` Just like `Array.prototype.forEach`. Iterates over all the keys in the cache, in order of recent-ness. (Ie, more recently used items are iterated over first.) * `keys()` Return an array of the keys in the cache. * `values()` Return an array of the values in the cache. * `length()` Return total length of objects in cache taking into account `length` options function. * `itemCount` Return total quantity of objects currently in cache. Note, that `stale` (see options) items are returned as part of this item count. * `dump()` Return an array of the cache entries ready for serialization and usage with 'destinationCache.load(arr)`. * `load(cacheEntriesArray)` Loads another cache entries array, obtained with `sourceCache.dump()`, into the cache. The destination cache is reset before loading new entries"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-watcher/node_modules/gaze/node_modules/globule/node_modules/minimatch/node_modules/sigmund/README.md","tags":[],"body":"# sigmund Quick and dirty signatures for Objects. This is like a much faster `deepEquals` comparison, which returns a string key suitable for caches and the like. ## Usage ```javascript function doSomething (someObj) { var key = sigmund(someObj, maxDepth) // max depth defaults to 10 var cached = cache.get(key) if (cached) return cached var result = expensiveCalculation(someObj) cache.set(key, result) return result } ``` The resulting key will be as unique and reproducible as calling `JSON.stringify` or `util.inspect` on the object, but is much faster. In order to achieve this speed, some differences are glossed over. For example, the object `{0:'foo'}` will be treated identically to the array `['foo']`. Also, just as there is no way to summon the soul from the scribblings of a cocaine-addled psychoanalyst, there is no way to revive the object from the signature string that sigmund gives you. In fact, it's barely even readable. As with `util.inspect` and `JSON.stringify`, larger objects will produce larger signature strings. Because sigmund is a bit less strict than the more thorough alternatives, the strings will be shorter, and also there is a slightly higher chance for collisions. For example, these objects have the same signature: var obj1 = {a:'b',c:/def/,g:['h','i',{j:'',k:'l'}]} var obj2 = {a:'b',c:'/def/',g:['h','i','{jkl']} Like a good Freudian, sigmund is most effective when you already have some understanding of what you're looking for. It can help you help yourself, but you must be willing to do some work as well. Cycles are handled, and cyclical objects are silently omitted (though the key is included in the signature output.) The second argument is the maximum depth, which defaults to 10, because that is the maximum object traversal depth covered by most insurance carriers."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-watcher/node_modules/gaze/node_modules/globule/test/fixtures/expand/README.md","tags":[],"body":""},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/graceful-fs/README.md","tags":[],"body":"# graceful-fs graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors. ## Improvements over [fs module](http://api.nodejs.org/fs.html) graceful-fs: * Queues up `open` and `readdir` calls, and retries them once something closes if there is an EMFILE error from too many file descriptors. * fixes `lchmod` for Node versions prior to 0.6.2. * implements `fs.lutimes` if possible. Otherwise it becomes a noop. * ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or `lchown` if the user isn't root. * makes `lchmod` and `lchown` become noops, if not available. * retries reading a file if `read` results in EAGAIN error. On Windows, it retries renaming a file for up to one second if `EACCESS` or `EPERM` error occurs, likely because antivirus software has locked the directory. ## USAGE ```javascript // use just like fs var fs = require('graceful-fs') // now go and do stuff with it... fs.readFileSync('some-file-or-whatever') ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/mkdirp/node_modules/minimist/readme.markdown","tags":[],"body":"# minimist parse argument options This module is the guts of optimist's argument parser without all the fanciful decoration. [![browser support](https://ci.testling.com/substack/minimist.png)](http://ci.testling.com/substack/minimist) [![build status](https://secure.travis-ci.org/substack/minimist.png)](http://travis-ci.org/substack/minimist) # example ``` js var argv = require('minimist')(process.argv.slice(2)); console.dir(argv); ``` ``` $ node example/parse.js -a beep -b boop { _: [], a: 'beep', b: 'boop' } ``` ``` $ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz { _: [ 'foo', 'bar', 'baz' ], x: 3, y: 4, n: 5, a: true, b: true, c: true, beep: 'boop' } ``` # methods ``` js var parseArgs = require('minimist') ``` ## var argv = parseArgs(args, opts={}) Return an argument object `argv` populated with the array arguments from `args`. `argv._` contains all the arguments that didn't have an option associated with them. Numeric-looking arguments will be returned as numbers unless `opts.string` or `opts.boolean` is set for that argument name. Any arguments after `'--'` will not be parsed and will end up in `argv._`. options can be: * `opts.string` - a string or array of strings argument names to always treat as strings * `opts.boolean` - a string or array of strings to always treat as booleans * `opts.alias` - an object mapping string names to strings or arrays of string argument names to use as aliases * `opts.default` - an object mapping string argument names to default values # install With [npm](https://npmjs.org) do: ``` npm install minimist ``` # license MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/mkdirp/readme.markdown","tags":[],"body":"# mkdirp Like `mkdir -p`, but in node.js! [![build status](https://secure.travis-ci.org/substack/node-mkdirp.png)](http://travis-ci.org/substack/node-mkdirp) # example ## pow.js ```js var mkdirp = require('mkdirp'); mkdirp('/tmp/foo/bar/baz', function (err) { if (err) console.error(err) else console.log('pow!') }); ``` Output ``` pow! ``` And now /tmp/foo/bar/baz exists, huzzah! # methods ```js var mkdirp = require('mkdirp'); ``` ## mkdirp(dir, opts, cb) Create a new directory and any necessary subdirectories at `dir` with octal permission string `opts.mode`. If `opts` is a non-object, it will be treated as the `opts.mode`. If `opts.mode` isn't specified, it defaults to `0777 & (~process.umask())`. `cb(err, made)` fires with the error or the first directory `made` that had to be created, if any. You can optionally pass in an alternate `fs` implementation by passing in `opts.fs`. Your implementation should have `opts.fs.mkdir(path, mode, cb)` and `opts.fs.stat(path, cb)`. ## mkdirp.sync(dir, opts) Synchronously create a new directory and any necessary subdirectories at `dir` with octal permission string `opts.mode`. If `opts` is a non-object, it will be treated as the `opts.mode`. If `opts.mode` isn't specified, it defaults to `0777 & (~process.umask())`. Returns the first directory that had to be created, if any. You can optionally pass in an alternate `fs` implementation by passing in `opts.fs`. Your implementation should have `opts.fs.mkdirSync(path, mode)` and `opts.fs.statSync(path)`. # usage This package also ships with a `mkdirp` command. ``` usage: mkdirp [DIR1,DIR2..] {OPTIONS} Create each supplied directory including any necessary parent directories that don't yet exist. If the directory already exists, do nothing. OPTIONS are: -m, --mode If a directory needs to be created, set the mode as an octal permission string. ``` # install With [npm](http://npmjs.org) do: ``` npm install mkdirp ``` to get the library, or ``` npm install -g mkdirp ``` to get the command. # license MIT"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/strip-bom/node_modules/first-chunk-stream/readme.md","tags":[],"body":"# first-chunk-stream [![Build Status](https://travis-ci.org/sindresorhus/first-chunk-stream.svg?branch=master)](https://travis-ci.org/sindresorhus/first-chunk-stream) > Transform the first chunk in a stream Useful if you want to do something to the first chunk. You can also set the minimum size of that chunk. ## Install ```sh $ npm install --save first-chunk-stream ``` ## Usage ```js var fs = require('fs'); var concat = require('concat-stream'); var firstChunk = require('first-chunk-stream'); // unicorn.txt => unicorn rainbow // `highWaterMark: 1` means it will only read 1 byte at the time fs.createReadStream('unicorn.txt', {highWaterMark: 1}) .pipe(firstChunk({minSize: 7}, function (chunk, enc, cb) { this.push(chunk.toUpperCase()); cb(); })) .pipe(concat(function (data) { console.log(data); //=> UNICORN rainbow })); ``` ## API ### firstChunk([options], transform) #### options.minSize Type: `number` The minimum size of the first chunk. #### transform(chunk, encoding, callback) *Required* Type: `function` The [function](http://nodejs.org/docs/latest/api/stream.html#stream_transform_transform_chunk_encoding_callback) that gets the first chunk. ### firstChunk.ctor() Instead of returning a [stream.Transform](http://nodejs.org/docs/latest/api/stream.html#stream_class_stream_transform_1) instance, `firstChunk.ctor()` returns a constructor for a custom Transform. This is useful when you want to use the same transform logic in multiple instances. ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/strip-bom/node_modules/is-utf8/README.md","tags":[],"body":"#utf8 detector Detect if a Buffer is utf8 encoded. It need The minimum amount of bytes is 4. ```javascript var fs = require('fs'); var isUtf8 = require('is-utf8'); var ansi = fs.readFileSync('ansi.txt'); var utf8 = fs.readFileSync('utf8.txt'); console.log('ansi.txt is utf8: '+isUtf8(ansi)); //false console.log('utf8.txt is utf8: '+isUtf8(utf8)); //true ```"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/strip-bom/readme.md","tags":[],"body":"# strip-bom [![Build Status](https://travis-ci.org/sindresorhus/strip-bom.svg?branch=master)](https://travis-ci.org/sindresorhus/strip-bom) > Strip UTF-8 [byte order mark](http://en.wikipedia.org/wiki/Byte_order_mark#UTF-8) (BOM) from a string/buffer/stream From Wikipedia: > The Unicode Standard permits the BOM in UTF-8, but does not require nor recommend its use. Byte order has no meaning in UTF-8. ## Usage ```sh $ npm install --save strip-bom ``` ```js var fs = require('fs'); var stripBom = require('strip-bom'); stripBom('\\ufeffUnicorn'); //=> Unicorn stripBom(fs.readFileSync('unicorn.txt')); //=> Unicorn ``` Or as a [Transform stream](http://nodejs.org/api/stream.html#stream_class_stream_transform): ```js var fs = require('fs'); var stripBom = require('strip-bom'); fs.createReadStream('unicorn.txt') .pipe(stripBom.stream()) .pipe(fs.createWriteStream('unicorn.txt')); ``` ## CLI ```sh $ npm install --global strip-bom ``` ``` $ strip-bom --help Usage strip-bom > cat | strip-bom > Example strip-bom unicorn.txt > unicorn-without-bom.txt ``` ## License MIT © [Sindre Sorhus](http://sindresorhus.com)"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/through2/README.md","tags":[],"body":"# through2 [![NPM](https://nodei.co/npm/through2.png?downloads&downloadRank)](https://nodei.co/npm/through2/) **A tiny wrapper around Node streams.Transform (Streams2) to avoid explicit subclassing noise** Inspired by [Dominic Tarr](https://github.com/dominictarr)'s [through](https://github.com/dominictarr/through) in that it's so much easier to make a stream out of a function than it is to set up the prototype chain properly: `through(function (chunk) { ... })`. Note: A **Streams3** version of through2 is available in npm with the tag `\"1.0\"` rather than `\"latest\"` so an `npm install through2` will get you the current Streams2 version (version number is 0.x.x). To use a Streams3 version use `npm install through2@1` to fetch the latest version 1.x.x. More information about Streams2 vs Streams3 and recommendations see the article **[Why I don't use Node's core 'stream' module](http://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html)**. ```js fs.createReadStream('ex.txt') .pipe(through2(function (chunk, enc, callback) { for (var i = 0; i through2([ options, ] [ transformFunction ] [, flushFunction ]) Consult the **[stream.Transform](http://nodejs.org/docs/latest/api/stream.html#stream_class_stream_transform)** documentation for the exact rules of the `transformFunction` (i.e. `this._transform`) and the optional `flushFunction` (i.e. `this._flush`). ### options The options argument is optional and is passed straight through to `stream.Transform`. So you can use `objectMode:true` if you are processing non-binary streams (or just use `through2.obj()`). The `options` argument is first, unlike standard convention, because if I'm passing in an anonymous function then I'd prefer for the options argument to not get lost at the end of the call: ```js fs.createReadStream('/tmp/important.dat') .pipe(through2({ objectMode: true, allowHalfOpen: false }, function (chunk, enc, cb) { cb(null, 'wut?') // note we can use the second argument on the callback // to provide data as an alternative to this.push('wut?') } ) .pipe(fs.createWriteStream('/tmp/wut.txt')) ``` ### transformFunction The `transformFunction` must have the following signature: `function (chunk, encoding, callback) {}`. A minimal implementation should call the `callback` function to indicate that the transformation is done, even if that transformation means discarding the chunk. To queue a new chunk, call `this.push(chunk)`—this can be called as many times as required before the `callback()` if you have multiple pieces to send on. Alternatively, you may use `callback(err, chunk)` as shorthand for emitting a single chunk or an error. If you **do not provide a `transformFunction`** then you will get a simple pass-through stream. ### flushFunction The optional `flushFunction` is provided as the last argument (2nd or 3rd, depending on whether you've supplied options) is called just prior to the stream ending. Can be used to finish up any processing that may be in progress. ```js fs.createReadStream('/tmp/important.dat') .pipe(through2( function (chunk, enc, cb) { cb(null, chunk) }, // transform is a noop function (cb) { // flush function this.push('tacking on an extra buffer to the end'); cb(); } )) .pipe(fs.createWriteStream('/tmp/wut.txt')); ``` through2.ctor([ options, ] transformFunction[, flushFunction ]) Instead of returning a `stream.Transform` instance, `through2.ctor()` returns a **constructor** for a custom Transform. This is useful when you want to use the same transform logic in multiple instances. ```js var FToC = through2.ctor({objectMode: true}, function (record, encoding, callback) { if (record.temp != null && record.unit = \"F\") { record.temp = ( ( record.temp - 32 ) * 5 ) / 9 record.unit = \"C\" } this.push(record) callback() }) // Create instances of FToC like so: var converter = new FToC() // Or: var converter = FToC() // Or specify/override options when you instantiate, if you prefer: var converter = FToC({objectMode: true}) ``` ## See Also - [through2-map](https://github.com/brycebaril/through2-map) - Array.prototype.map analog for streams. - [through2-filter](https://github.com/brycebaril/through2-filter) - Array.prototype.filter analog for streams. - [through2-reduce](https://github.com/brycebaril/through2-reduce) - Array.prototype.reduce analog for streams. - [through2-spy](https://github.com/brycebaril/through2-spy) - Wrapper for simple stream.PassThrough spies. ## License **through2** is Copyright (c) 2013 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licenced under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/through2/node_modules/readable-stream/README.md","tags":[],"body":"# readable-stream ***Node-core streams for userland*** [![NPM](https://nodei.co/npm/readable-stream.png?downloads=true&downloadRank=true)](https://nodei.co/npm/readable-stream/) [![NPM](https://nodei.co/npm-dl/readable-stream.png?&months=6&height=3)](https://nodei.co/npm/readable-stream/) This package is a mirror of the Streams2 and Streams3 implementations in Node-core. If you want to guarantee a stable streams base, regardless of what version of Node you, or the users of your libraries are using, use **readable-stream** *only* and avoid the *\"stream\"* module in Node-core. **readable-stream** comes in two major versions, v1.0.x and v1.1.x. The former tracks the Streams2 implementation in Node 0.10, including bug-fixes and minor improvements as they are added. The latter tracks Streams3 as it develops in Node 0.11; we will likely see a v1.2.x branch for Node 0.12. **readable-stream** uses proper patch-level versioning so if you pin to `\"~1.0.0\"` you’ll get the latest Node 0.10 Streams2 implementation, including any fixes and minor non-breaking improvements. The patch-level versions of 1.0.x and 1.1.x should mirror the patch-level versions of Node-core releases. You should prefer the **1.0.x** releases for now and when you’re ready to start using Streams3, pin to `\"~1.1.0\"`"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/through2/node_modules/readable-stream/node_modules/core-util-is/README.md","tags":[],"body":"# core-util-is The `util.is*` functions introduced in Node v0.12."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/through2/node_modules/readable-stream/node_modules/inherits/README.md","tags":[],"body":"Browser-friendly inheritance fully compatible with standard node.js [inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor). This package exports standard `inherits` from node.js `util` module in node environment, but also provides alternative browser-friendly implementation through [browser field](https://gist.github.com/shtylman/4339901). Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of `util`. It also has a shim for old browsers with no `Object.create` support. While keeping you sure you are using standard `inherits` implementation in node.js environment, it allows bundlers such as [browserify](https://github.com/substack/node-browserify) to not include full `util` package to your client code if all you need is just `inherits` function. It worth, because browser shim for `util` package is large and `inherits` is often the single function you need from it. It's recommended to use this package instead of `require('util').inherits` for any code that has chances to be used not only in node.js but in browser too. ## usage ```js var inherits = require('inherits'); // then use exactly as the standard one ``` ## note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js `inherits`. If you are using version ~1.0 and planning to switch to ~2.0, be careful: * new version uses `super_` instead of `super` for referencing superclass * new version overwrites current prototype while old one preserves any existing fields on it"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/through2/node_modules/readable-stream/node_modules/isarray/README.md","tags":[],"body":"# isarray `Array#isArray` for older browsers. ## Usage ```js var isArray = require('isarray'); console.log(isArray([])); // => true console.log(isArray({})); // => false ``` ## Installation With [npm](http://npmjs.org) do ```bash $ npm install isarray ``` Then bundle for the browser with [browserify](https://github.com/substack/browserify). With [component](http://component.io) do ```bash $ component install juliangruber/isarray ``` ## License (MIT) Copyright (c) 2013 Julian Gruber Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/through2/node_modules/readable-stream/node_modules/string_decoder/README.md","tags":[],"body":"**string_decoder.js** (`require('string_decoder')`) from Node.js core Copyright Joyent, Inc. and other Node contributors. See LICENCE file for details. Version numbers match the versions found in Node core, e.g. 0.10.24 matches Node 0.10.24, likewise 0.11.10 matches Node 0.11.10. **Prefer the stable version over the unstable.** The *build/* directory contains a build script that will scrape the source from the [joyent/node](https://github.com/joyent/node) repo given a specific Node version."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/through2/node_modules/xtend/README.md","tags":[],"body":"# xtend [![browser support][3]][4] [![locked](http://badges.github.io/stability-badges/dist/locked.svg)](http://github.com/badges/stability-badges) Extend like a boss xtend is a basic utility library which allows you to extend an object by appending all of the properties from each object in a list. When there are identical properties, the right-most property takes precedence. ## Examples ```js var extend = require(\"xtend\") // extend returns a new object. Does not mutate arguments var combination = extend({ a: \"a\", b: 'c' }, { b: \"b\" }) // { a: \"a\", b: \"b\" } ``` ## Stability status: Locked ## MIT Licenced [3]: http://ci.testling.com/Raynos/xtend.png [4]: http://ci.testling.com/Raynos/xtend"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/vinyl/README.md","tags":[],"body":"# vinyl [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status](https://david-dm.org/wearefractal/vinyl.png?theme=shields.io)](https://david-dm.org/wearefractal/vinyl) ## Information Packagevinyl Description A virtual file format Node Version >= 0.9 ## What is this? Read this for more info about how this plays into the grand scheme of things https://medium.com/@eschoff/3828e8126466 ## File ```javascript var File = require('vinyl'); var coffeeFile = new File({ cwd: \"/\", base: \"/test/\", path: \"/test/file.coffee\", contents: new Buffer(\"test = 123\") }); ``` ### constructor(options) #### options.cwd Type: `String` Default: `process.cwd()` #### options.base Used for relative pathing. Typically where a glob starts. Type: `String` Default: `options.cwd` #### options.path Full path to the file. Type: `String` Default: `null` #### options.stat The result of an fs.stat call. See [fs.Stats](http://nodejs.org/api/fs.html#fs_class_fs_stats) for more information. Type: `fs.Stats` Default: `null` #### options.contents File contents. Type: `Buffer, Stream, or null` Default: `null` ### isBuffer() Returns true if file.contents is a Buffer. ### isStream() Returns true if file.contents is a Stream. ### isNull() Returns true if file.contents is null. ### clone() Returns a new File object with all attributes cloned. Custom attributes are deep-cloned. ### pipe(stream[, opt]) If file.contents is a Buffer, it will write it to the stream. If file.contents is a Stream, it will pipe it to the stream. If file.contents is null, it will do nothing. If opt.end is false, the destination stream will not be ended (same as node core). Returns the stream. ### inspect() Returns a pretty String interpretation of the File. Useful for console.log. ### relative Returns path.relative for the file base and file path. Example: ```javascript var file = new File({ cwd: \"/\", base: \"/test/\", path: \"/test/file.coffee\" }); console.log(file.relative); // file.coffee ``` [npm-url]: https://npmjs.org/package/vinyl [npm-image]: https://badge.fury.io/js/vinyl.png [travis-url]: https://travis-ci.org/wearefractal/vinyl [travis-image]: https://travis-ci.org/wearefractal/vinyl.png?branch=master [coveralls-url]: https://coveralls.io/r/wearefractal/vinyl [coveralls-image]: https://coveralls.io/repos/wearefractal/vinyl/badge.png [depstat-url]: https://david-dm.org/wearefractal/vinyl [depstat-image]: https://david-dm.org/wearefractal/vinyl.png"},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/vinyl/node_modules/clone-stats/LICENSE.md","tags":[],"body":"## The MIT License (MIT) ## Copyright (c) 2014 Hugh Kennedy Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/vinyl/node_modules/clone-stats/README.md","tags":[],"body":"# clone-stats [![Flattr this!](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=hughskennedy&url=http://github.com/hughsk/clone-stats&title=clone-stats&description=hughsk/clone-stats%20on%20GitHub&language=en_GB&tags=flattr,github,javascript&category=software)[![experimental](http://hughsk.github.io/stability-badges/dist/experimental.svg)](http://github.com/hughsk/stability-badges) # Safely clone node's [`fs.Stats`](http://nodejs.org/api/fs.html#fs_class_fs_stats) instances without losing their class methods, i.e. `stat.isDirectory()` and co. ## Usage ## [![clone-stats](https://nodei.co/npm/clone-stats.png?mini=true)](https://nodei.co/npm/clone-stats) ### `copy = require('clone-stats')(stat)` ### Returns a clone of the original `fs.Stats` instance (`stat`). ## License ## MIT. See [LICENSE.md](http://github.com/hughsk/clone-stats/blob/master/LICENSE.md) for details."},{"title":"","url":"/open-gsa-redesign/node_modules/gulp/node_modules/vinyl-fs/node_modules/vinyl/node_modules/clone/README.md","tags":[],"body":"# clone [![build status](https://secure.travis-ci.org/pvorb/node-clone.png)](http://travis-ci.org/pvorb/node-clone) offers foolproof _deep cloning_ of variables in JavaScript. ## Installation npm install clone or ender build clone ## Example ~~~ javascript var clone = require('clone'); var a, b; a = { foo: { bar: 'baz' } }; // initial value of a b = clone(a); // clone a -> b a.foo.bar = 'foo'; // change a console.log(a); // show a console.log(b); // show b ~~~ This will print: ~~~ javascript { foo: { bar: 'foo' } } { foo: { bar: 'baz' } } ~~~ **clone** masters cloning simple objects (even with custom prototype), arrays, Date objects, and RegExp objects. Everything is cloned recursively, so that you can clone dates in arrays in objects, for example. ## API `clone(val, circular, depth)` * `val` -- the value that you want to clone, any type allowed * `circular` -- boolean Call `clone` with `circular` set to `false` if you are certain that `obj` contains no circular references. This will give better performance if needed. There is no error if `undefined` or `null` is passed as `obj`. * `depth` -- depth to which the object is to be cloned (optional, defaults to infinity) `clone.clonePrototype(obj)` * `obj` -- the object that you want to clone Does a prototype clone as [described by Oran Looney](http://oranlooney.com/functional-javascript/). ## Circular References ~~~ javascript var a, b; a = { hello: 'world' }; a.myself = a; b = clone(a); console.log(b); ~~~ This will print: ~~~ javascript { hello: \"world\", myself: [Circular] } ~~~ So, `b.myself` points to `b`, not `a`. Neat! ## Test npm test ## Caveat Some special objects like a socket or `process.stdout`/`stderr` are known to not be cloneable. If you find other objects that cannot be cloned, please [open an issue](https://github.com/pvorb/node-clone/issues/new). ## Bugs and Issues If you encounter any bugs or issues, feel free to [open an issue at github](https://github.com/pvorb/node-clone/issues) or send me an email to . I also always like to hear from you, if you’re using my code. ## License Copyright © 2011-2014 [Paul Vorbach](http://paul.vorba.ch/) and [contributors](https://github.com/pvorb/node-clone/graphs/contributors). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."}]}